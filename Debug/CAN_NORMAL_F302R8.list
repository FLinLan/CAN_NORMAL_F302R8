
CAN_NORMAL_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08008978  08008978  00009978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ddc  08008ddc  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ddc  08008ddc  00009ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de4  08008de4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de4  08008de4  00009de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008de8  08008de8  00009de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008dec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d4  08008fc0  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08008fc0  0000a418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeb3  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001928  00000000  00000000  000150b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  000169e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064b  00000000  00000000  00017228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001beed  00000000  00000000  00017873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c41  00000000  00000000  00033760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0cc5  00000000  00000000  0003d3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000366c  00000000  00000000  000de0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e1718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800895c 	.word	0x0800895c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800895c 	.word	0x0800895c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cfc:	1d39      	adds	r1, r7, #4
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d02:	2201      	movs	r2, #1
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <__io_putchar+0x20>)
 8000d06:	f002 fd6f 	bl	80037e8 <HAL_UART_Transmit>
  return ch;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000218 	.word	0x20000218

08000d18 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <__io_getchar+0x38>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2208      	movs	r2, #8
 8000d28:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d2a:	1df9      	adds	r1, r7, #7
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d30:	2201      	movs	r2, #1
 8000d32:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <__io_getchar+0x38>)
 8000d34:	f002 fde1 	bl	80038fa <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d38:	1df9      	adds	r1, r7, #7
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <__io_getchar+0x38>)
 8000d42:	f002 fd51 	bl	80037e8 <HAL_UART_Transmit>
  return ch;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000218 	.word	0x20000218

08000d54 <floatToUpperBytes>:
uint8_t TxData[8] = {0x00, 0x00, 0x00, 0x00, // IEEE 754 float: vel : 2 rev/s: UPPER BYTES
					 0x00, 0x00, 0x00, 0x00}; // IEEE 754 float: torque : 0: LOWER BYTES
uint8_t RxData[8];
uint32_t TxMailbox;

void floatToUpperBytes(float val, uint8_t* byteArr) {
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d5e:	6038      	str	r0, [r7, #0]
  union {
    float var;
    uint8_t buf[sizeof(float)];
  } u;
  u.var = val;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	60fb      	str	r3, [r7, #12]
  memcpy(byteArr, u.buf, sizeof(float)); // Write to bytes 0–3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f000 fb58 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f838 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 f8e2 	bl	8000f4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d88:	f000 f8b0 	bl	8000eec <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000d8c:	f000 f878 	bl	8000e80 <MX_CAN_Init>
  setvbuf(stdin, NULL, _IONBF, 0); // for scanf and printf
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <main+0x68>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6858      	ldr	r0, [r3, #4]
 8000d96:	2300      	movs	r3, #0
 8000d98:	2202      	movs	r2, #2
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f004 f8ec 	bl	8004f78 <setvbuf>

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000da0:	4810      	ldr	r0, [pc, #64]	@ (8000de4 <main+0x6c>)
 8000da2:	f000 fcca 	bl	800173a <HAL_CAN_Start>
  // I have to keep on pressing the user input button to setup the interrupt for my commands below
  // Although it "works", but it is fall from ideal for sure
  //

  // sending over the CANPacket
  TxHeader.StdId = (NODE_ID << 5) | SET_INPUT_VEL; // 0x00D = setInputVelocity, node_id = 0
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <main+0x70>)
 8000da8:	220d      	movs	r2, #13
 8000daa:	601a      	str	r2, [r3, #0]
  TxHeader.IDE = CAN_ID_STD;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <main+0x70>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <main+0x70>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <main+0x70>)
 8000dba:	2208      	movs	r2, #8
 8000dbc:	611a      	str	r2, [r3, #16]

  floatToUpperBytes(2.0f, TxData); // velocity bytes for now due to SET_INPUT_VEL mode
 8000dbe:	480b      	ldr	r0, [pc, #44]	@ (8000dec <main+0x74>)
 8000dc0:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000dc4:	f7ff ffc6 	bl	8000d54 <floatToUpperBytes>
  /* USER CODE END 2 */
  	// only once
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <main+0x78>)
 8000dca:	4a08      	ldr	r2, [pc, #32]	@ (8000dec <main+0x74>)
 8000dcc:	4906      	ldr	r1, [pc, #24]	@ (8000de8 <main+0x70>)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <main+0x6c>)
 8000dd0:	f000 fcf7 	bl	80017c2 <HAL_CAN_AddTxMessage>
	  // handle error…
	}
	HAL_Delay(100);
 8000dd4:	2064      	movs	r0, #100	@ 0x64
 8000dd6:	f000 fb91 	bl	80014fc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dda:	bf00      	nop
 8000ddc:	e7fd      	b.n	8000dda <main+0x62>
 8000dde:	bf00      	nop
 8000de0:	20000018 	.word	0x20000018
 8000de4:	200001f0 	.word	0x200001f0
 8000de8:	200002a0 	.word	0x200002a0
 8000dec:	200002b8 	.word	0x200002b8
 8000df0:	200002c0 	.word	0x200002c0

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	@ 0x40
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2228      	movs	r2, #40	@ 0x28
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 f9d1 	bl	80051aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e32:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 fa65 	bl	800230c <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e48:	f000 f8fe 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2302      	movs	r3, #2
 8000e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2102      	movs	r1, #2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 fa5e 	bl	8003328 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e72:	f000 f8e9 	bl	8001048 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3740      	adds	r7, #64	@ 0x40
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <MX_CAN_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000e9e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ea2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000ea6:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000eaa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_CAN_Init+0x64>)
 8000ed2:	f000 fb37 	bl	8001544 <HAL_CAN_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000edc:	f000 f8b4 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200001f0 	.word	0x200001f0
 8000ee8:	40006400 	.word	0x40006400

08000eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000ef2:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <MX_USART2_UART_Init+0x5c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000ef8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f30:	f002 fc0c 	bl	800374c <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f3a:	f000 f885 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000218 	.word	0x20000218
 8000f48:	40004400 	.word	0x40004400

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b36      	ldr	r3, [pc, #216]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a35      	ldr	r2, [pc, #212]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000f68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b33      	ldr	r3, [pc, #204]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7a:	4b30      	ldr	r3, [pc, #192]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000f80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b2a      	ldr	r3, [pc, #168]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a29      	ldr	r2, [pc, #164]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b27      	ldr	r3, [pc, #156]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a23      	ldr	r2, [pc, #140]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <MX_GPIO_Init+0xf0>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f001 f987 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd4:	481a      	ldr	r0, [pc, #104]	@ (8001040 <MX_GPIO_Init+0xf4>)
 8000fd6:	f001 f981 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4814      	ldr	r0, [pc, #80]	@ (8001044 <MX_GPIO_Init+0xf8>)
 8000ff2:	f001 f801 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001010:	f000 fff2 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MX_GPIO_Init+0xf4>)
 800102e:	f000 ffe3 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	@ 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400
 8001044:	48000800 	.word	0x48000800

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <Error_Handler+0x8>

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_MspInit+0x44>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <HAL_MspInit+0x44>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_MspInit+0x44>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_MspInit+0x44>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800108a:	2007      	movs	r0, #7
 800108c:	f000 ff72 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <HAL_CAN_MspInit+0x90>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d131      	bne.n	8001122 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <HAL_CAN_MspInit+0x94>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <HAL_CAN_MspInit+0x94>)
 80010c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <HAL_CAN_MspInit+0x94>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <HAL_CAN_MspInit+0x94>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a15      	ldr	r2, [pc, #84]	@ (8001130 <HAL_CAN_MspInit+0x94>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	6153      	str	r3, [r2, #20]
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <HAL_CAN_MspInit+0x94>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001100:	2309      	movs	r3, #9
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110e:	f000 ff73 	bl	8001ff8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2014      	movs	r0, #20
 8001118:	f000 ff37 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800111c:	2014      	movs	r0, #20
 800111e:	f000 ff50 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40006400 	.word	0x40006400
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <HAL_UART_MspInit+0x7c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d128      	bne.n	80011a8 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_UART_MspInit+0x80>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a16      	ldr	r2, [pc, #88]	@ (80011b4 <HAL_UART_MspInit+0x80>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_UART_MspInit+0x80>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_UART_MspInit+0x80>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <HAL_UART_MspInit+0x80>)
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	6153      	str	r3, [r2, #20]
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_UART_MspInit+0x80>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001186:	230c      	movs	r3, #12
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001196:	2307      	movs	r3, #7
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a4:	f000 ff28 	bl	8001ff8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40004400 	.word	0x40004400
 80011b4:	40021000 	.word	0x40021000

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <NMI_Handler+0x4>

080011c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <MemManage_Handler+0x4>

080011d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <UsageFault_Handler+0x4>

080011e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120e:	f000 f955 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800121e:	f000 fba0 	bl	8001962 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001f0 	.word	0x200001f0

0800122c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_kill>:

int _kill(int pid, int sig)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001246:	f004 f803 	bl	8005250 <__errno>
 800124a:	4603      	mov	r3, r0
 800124c:	2216      	movs	r2, #22
 800124e:	601a      	str	r2, [r3, #0]
  return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_exit>:

void _exit (int status)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001264:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffe7 	bl	800123c <_kill>
  while (1) {}    /* Make sure we hang here */
 800126e:	bf00      	nop
 8001270:	e7fd      	b.n	800126e <_exit+0x12>

08001272 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e00a      	b.n	800129a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001284:	f7ff fd48 	bl	8000d18 <__io_getchar>
 8001288:	4601      	mov	r1, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	60ba      	str	r2, [r7, #8]
 8001290:	b2ca      	uxtb	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	dbf0      	blt.n	8001284 <_read+0x12>
  }

  return len;
 80012a2:	687b      	ldr	r3, [r7, #4]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e009      	b.n	80012d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	60ba      	str	r2, [r7, #8]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd14 	bl	8000cf4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbf1      	blt.n	80012be <_write+0x12>
  }
  return len;
 80012da:	687b      	ldr	r3, [r7, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_close>:

int _close(int file)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800130c:	605a      	str	r2, [r3, #4]
  return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_isatty>:

int _isatty(int file)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f003 ff68 	bl	8005250 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20004000 	.word	0x20004000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	200002c4 	.word	0x200002c4
 80013b4:	20000418 	.word	0x20000418

080013b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001414 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e0:	f7ff ffea 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	@ (800141c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <LoopForever+0xe>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001428 <LoopForever+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140a:	f003 ff27 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140e:	f7ff fcb3 	bl	8000d78 <main>

08001412 <LoopForever>:

LoopForever:
    b LoopForever
 8001412:	e7fe      	b.n	8001412 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001414:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001420:	08008dec 	.word	0x08008dec
  ldr r2, =_sbss
 8001424:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001428:	20000418 	.word	0x20000418

0800142c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_IRQHandler>
	...

08001430 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 fd97 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fe02 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fdaf 	bl	8001fde <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001498:	f000 fd77 	bl	8001f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	200002c8 	.word	0x200002c8

080014e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200002c8 	.word	0x200002c8

080014fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0ed      	b.n	8001732 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fd9a 	bl	800109c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001578:	f7ff ffb4 	bl	80014e4 <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800157e:	e012      	b.n	80015a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001580:	f7ff ffb0 	bl	80014e4 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b0a      	cmp	r3, #10
 800158c:	d90b      	bls.n	80015a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2205      	movs	r2, #5
 800159e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0c5      	b.n	8001732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0e5      	beq.n	8001580 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0202 	bic.w	r2, r2, #2
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff ff8e 	bl	80014e4 <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ca:	e012      	b.n	80015f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015cc:	f7ff ff8a 	bl	80014e4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d90b      	bls.n	80015f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2205      	movs	r2, #5
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e09f      	b.n	8001732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e5      	bne.n	80015cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e1b      	ldrb	r3, [r3, #24]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e007      	b.n	800162a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7e5b      	ldrb	r3, [r3, #25]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e007      	b.n	8001654 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001652:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e9b      	ldrb	r3, [r3, #26]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d108      	bne.n	800166e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e007      	b.n	800167e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0220 	bic.w	r2, r2, #32
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7edb      	ldrb	r3, [r3, #27]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d108      	bne.n	8001698 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0210 	bic.w	r2, r2, #16
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e007      	b.n	80016a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0210 	orr.w	r2, r2, #16
 80016a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7f1b      	ldrb	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0208 	orr.w	r2, r2, #8
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e007      	b.n	80016d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0208 	bic.w	r2, r2, #8
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7f5b      	ldrb	r3, [r3, #29]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0204 	orr.w	r2, r2, #4
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e007      	b.n	80016fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0204 	bic.w	r2, r2, #4
 80016fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	ea42 0103 	orr.w	r1, r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d12e      	bne.n	80017ac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2202      	movs	r2, #2
 8001752:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001766:	f7ff febd 	bl	80014e4 <HAL_GetTick>
 800176a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800176c:	e012      	b.n	8001794 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800176e:	f7ff feb9 	bl	80014e4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b0a      	cmp	r3, #10
 800177a:	d90b      	bls.n	8001794 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2205      	movs	r2, #5
 800178c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e012      	b.n	80017ba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1e5      	bne.n	800176e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e006      	b.n	80017ba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
  }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b089      	sub	sp, #36	@ 0x24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e0:	7ffb      	ldrb	r3, [r7, #31]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d003      	beq.n	80017ee <HAL_CAN_AddTxMessage+0x2c>
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f040 80ad 	bne.w	8001948 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10a      	bne.n	800180e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8095 	beq.w	8001938 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	0e1b      	lsrs	r3, r3, #24
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001818:	2201      	movs	r2, #1
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	409a      	lsls	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	6809      	ldr	r1, [r1, #0]
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3318      	adds	r3, #24
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	440b      	add	r3, r1
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e00f      	b.n	8001866 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001850:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001856:	68f9      	ldr	r1, [r7, #12]
 8001858:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800185a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3318      	adds	r3, #24
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	440b      	add	r3, r1
 8001864:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3318      	adds	r3, #24
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	440b      	add	r3, r1
 8001876:	3304      	adds	r3, #4
 8001878:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	7d1b      	ldrb	r3, [r3, #20]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d111      	bne.n	80018a6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3318      	adds	r3, #24
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	3304      	adds	r3, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	6811      	ldr	r1, [r2, #0]
 8001896:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3318      	adds	r3, #24
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	440b      	add	r3, r1
 80018a2:	3304      	adds	r3, #4
 80018a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3307      	adds	r3, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	061a      	lsls	r2, r3, #24
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3306      	adds	r3, #6
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3305      	adds	r3, #5
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	4313      	orrs	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	3204      	adds	r2, #4
 80018c6:	7812      	ldrb	r2, [r2, #0]
 80018c8:	4610      	mov	r0, r2
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	6811      	ldr	r1, [r2, #0]
 80018ce:	ea43 0200 	orr.w	r2, r3, r0
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	440b      	add	r3, r1
 80018d8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80018dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3303      	adds	r3, #3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3302      	adds	r3, #2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3301      	adds	r3, #1
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	4313      	orrs	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	4610      	mov	r0, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	6811      	ldr	r1, [r2, #0]
 8001904:	ea43 0200 	orr.w	r2, r3, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	440b      	add	r3, r1
 800190e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001912:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3318      	adds	r3, #24
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	6811      	ldr	r1, [r2, #0]
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3318      	adds	r3, #24
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	440b      	add	r3, r1
 8001932:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e00e      	b.n	8001956 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e006      	b.n	8001956 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
  }
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	@ 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b08a      	sub	sp, #40	@ 0x28
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d07c      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d023      	beq.n	80019fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f983 	bl	8001cd0 <HAL_CAN_TxMailbox0CompleteCallback>
 80019ca:	e016      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019de:	e00c      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f2:	e002      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f989 	bl	8001d0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d024      	beq.n	8001a4e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f963 	bl	8001ce4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a1e:	e016      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a32:	e00c      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a46:	e002      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f969 	bl	8001d20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d024      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f943 	bl	8001cf8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a72:	e016      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a86:	e00c      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9a:	e002      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f949 	bl	8001d34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f93a 	bl	8001d5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f921 	bl	8001d48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2210      	movs	r2, #16
 8001b28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00b      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2208      	movs	r2, #8
 8001b44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f91c 	bl	8001d84 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f903 	bl	8001d70 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2210      	movs	r2, #16
 8001b84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f906 	bl	8001d98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8ff 	bl	8001dac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d07b      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d072      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d043      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03e      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c30:	2b60      	cmp	r3, #96	@ 0x60
 8001c32:	d02b      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x32a>
 8001c34:	2b60      	cmp	r3, #96	@ 0x60
 8001c36:	d82e      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c38:	2b50      	cmp	r3, #80	@ 0x50
 8001c3a:	d022      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x320>
 8001c3c:	2b50      	cmp	r3, #80	@ 0x50
 8001c3e:	d82a      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c40:	2b40      	cmp	r3, #64	@ 0x40
 8001c42:	d019      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x316>
 8001c44:	2b40      	cmp	r3, #64	@ 0x40
 8001c46:	d826      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c48:	2b30      	cmp	r3, #48	@ 0x30
 8001c4a:	d010      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x30c>
 8001c4c:	2b30      	cmp	r3, #48	@ 0x30
 8001c4e:	d822      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x2f8>
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d005      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c58:	e01d      	b.n	8001c96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c62:	e019      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c6c:	e014      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f043 0320 	orr.w	r3, r3, #32
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c76:	e00f      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c80:	e00a      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c8a:	e005      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c94:	e000      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ca6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2204      	movs	r2, #4
 8001cae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f87c 	bl	8001dc0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	@ 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff29 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff3e 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff31 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa2 	bl	8001f30 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e14e      	b.n	80022a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8140 	beq.w	80022a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206e:	2201      	movs	r2, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d017      	beq.n	80020d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d123      	bne.n	800212a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 809a 	beq.w	80022a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	4b55      	ldr	r3, [pc, #340]	@ (80022c4 <HAL_GPIO_Init+0x2cc>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a54      	ldr	r2, [pc, #336]	@ (80022c4 <HAL_GPIO_Init+0x2cc>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <HAL_GPIO_Init+0x2cc>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002184:	4a50      	ldr	r2, [pc, #320]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021ae:	d013      	beq.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a46      	ldr	r2, [pc, #280]	@ (80022cc <HAL_GPIO_Init+0x2d4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00d      	beq.n	80021d4 <HAL_GPIO_Init+0x1dc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a45      	ldr	r2, [pc, #276]	@ (80022d0 <HAL_GPIO_Init+0x2d8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <HAL_GPIO_Init+0x1d8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a44      	ldr	r2, [pc, #272]	@ (80022d4 <HAL_GPIO_Init+0x2dc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_GPIO_Init+0x1d4>
 80021c8:	2303      	movs	r3, #3
 80021ca:	e006      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021cc:	2305      	movs	r3, #5
 80021ce:	e004      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d8:	2300      	movs	r3, #0
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	f002 0203 	and.w	r2, r2, #3
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4093      	lsls	r3, r2
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ea:	4937      	ldr	r1, [pc, #220]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f8:	4b37      	ldr	r3, [pc, #220]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800221c:	4a2e      	ldr	r2, [pc, #184]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002222:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002246:	4a24      	ldr	r2, [pc, #144]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224c:	4b22      	ldr	r3, [pc, #136]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002270:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002276:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800229a:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f47f aea9 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010000 	.word	0x40010000
 80022cc:	48000400 	.word	0x48000400
 80022d0:	48000800 	.word	0x48000800
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002312:	af00      	add	r7, sp, #0
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	f000 bff4 	b.w	800331a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 816d 	beq.w	8002622 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002348:	4bb4      	ldr	r3, [pc, #720]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00c      	beq.n	800236e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002354:	4bb1      	ldr	r3, [pc, #708]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d157      	bne.n	8002410 <HAL_RCC_OscConfig+0x104>
 8002360:	4bae      	ldr	r3, [pc, #696]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d150      	bne.n	8002410 <HAL_RCC_OscConfig+0x104>
 800236e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002372:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002382:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b3f      	cmp	r3, #63	@ 0x3f
 800238e:	d802      	bhi.n	8002396 <HAL_RCC_OscConfig+0x8a>
 8002390:	4ba2      	ldr	r3, [pc, #648]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0xb6>
 8002396:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800239a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80023aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ae:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80023b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80023be:	4b97      	ldr	r3, [pc, #604]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023c6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80023ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80023d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8114 	beq.w	8002620 <HAL_RCC_OscConfig+0x314>
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 810b 	bne.w	8002620 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f000 bf85 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x124>
 8002422:	4b7e      	ldr	r3, [pc, #504]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7d      	ldr	r2, [pc, #500]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e036      	b.n	800249e <HAL_RCC_OscConfig+0x192>
 8002430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002434:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0x14e>
 8002440:	4b76      	ldr	r3, [pc, #472]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a75      	ldr	r2, [pc, #468]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a72      	ldr	r2, [pc, #456]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e021      	b.n	800249e <HAL_RCC_OscConfig+0x192>
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x17a>
 800246c:	4b6b      	ldr	r3, [pc, #428]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6a      	ldr	r2, [pc, #424]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002472:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b68      	ldr	r3, [pc, #416]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a67      	ldr	r2, [pc, #412]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e00b      	b.n	800249e <HAL_RCC_OscConfig+0x192>
 8002486:	4b65      	ldr	r3, [pc, #404]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a64      	ldr	r2, [pc, #400]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800248c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b62      	ldr	r3, [pc, #392]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a61      	ldr	r2, [pc, #388]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249e:	4b5f      	ldr	r3, [pc, #380]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f023 020f 	bic.w	r2, r3, #15
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	495a      	ldr	r1, [pc, #360]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d054      	beq.n	8002572 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff f80c 	bl	80014e4 <HAL_GetTick>
 80024cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d2:	f7ff f807 	bl	80014e4 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d902      	bls.n	80024e8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	f000 bf19 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 80024e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80024fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b3f      	cmp	r3, #63	@ 0x3f
 8002508:	d802      	bhi.n	8002510 <HAL_RCC_OscConfig+0x204>
 800250a:	4b44      	ldr	r3, [pc, #272]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e015      	b.n	800253c <HAL_RCC_OscConfig+0x230>
 8002510:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002514:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002524:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002528:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800252c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002538:	4b38      	ldr	r3, [pc, #224]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002540:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002544:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002548:	fa92 f2a2 	rbit	r2, r2
 800254c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002550:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002554:	fab2 f282 	clz	r2, r2
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f042 0220 	orr.w	r2, r2, #32
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f002 021f 	and.w	r2, r2, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0b0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1c6>
 8002570:	e057      	b.n	8002622 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe ffb7 	bl	80014e4 <HAL_GetTick>
 8002576:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe ffb2 	bl	80014e4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	@ 0x64
 800258a:	d902      	bls.n	8002592 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	f000 bec4 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 8002592:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002596:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80025a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80025b2:	d802      	bhi.n	80025ba <HAL_RCC_OscConfig+0x2ae>
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x2da>
 80025ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025be:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80025ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025d2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80025d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025ea:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80025ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80025f2:	fa92 f2a2 	rbit	r2, r2
 80025f6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80025fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80025fe:	fab2 f282 	clz	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f002 021f 	and.w	r2, r2, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1b0      	bne.n	800257c <HAL_RCC_OscConfig+0x270>
 800261a:	e002      	b.n	8002622 <HAL_RCC_OscConfig+0x316>
 800261c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 816c 	beq.w	8002910 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002638:	4bcc      	ldr	r3, [pc, #816]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002644:	4bc9      	ldr	r3, [pc, #804]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d16d      	bne.n	800272c <HAL_RCC_OscConfig+0x420>
 8002650:	4bc6      	ldr	r3, [pc, #792]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d167      	bne.n	800272c <HAL_RCC_OscConfig+0x420>
 800265c:	2302      	movs	r3, #2
 800265e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800266e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b3f      	cmp	r3, #63	@ 0x3f
 800267a:	d802      	bhi.n	8002682 <HAL_RCC_OscConfig+0x376>
 800267c:	4bbb      	ldr	r3, [pc, #748]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e013      	b.n	80026aa <HAL_RCC_OscConfig+0x39e>
 8002682:	2302      	movs	r3, #2
 8002684:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002694:	2302      	movs	r3, #2
 8002696:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800269a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80026a6:	4bb1      	ldr	r3, [pc, #708]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2202      	movs	r2, #2
 80026ac:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80026b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80026b4:	fa92 f2a2 	rbit	r2, r2
 80026b8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80026bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80026c0:	fab2 f282 	clz	r2, r2
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f042 0220 	orr.w	r2, r2, #32
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f002 021f 	and.w	r2, r2, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f202 	lsl.w	r2, r1, r2
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3e6>
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d002      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f000 be14 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b9e      	ldr	r3, [pc, #632]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	21f8      	movs	r1, #248	@ 0xf8
 8002708:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002710:	fa91 f1a1 	rbit	r1, r1
 8002714:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002718:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800271c:	fab1 f181 	clz	r1, r1
 8002720:	b2c9      	uxtb	r1, r1
 8002722:	408b      	lsls	r3, r1
 8002724:	4991      	ldr	r1, [pc, #580]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e0f1      	b.n	8002910 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8083 	beq.w	8002844 <HAL_RCC_OscConfig+0x538>
 800273e:	2301      	movs	r3, #1
 8002740:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002750:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800275e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	461a      	mov	r2, r3
 8002766:	2301      	movs	r3, #1
 8002768:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe febb 	bl	80014e4 <HAL_GetTick>
 800276e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe feb6 	bl	80014e4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d902      	bls.n	800278a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	f000 bdc8 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800279c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80027a8:	d802      	bhi.n	80027b0 <HAL_RCC_OscConfig+0x4a4>
 80027aa:	4b70      	ldr	r3, [pc, #448]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e013      	b.n	80027d8 <HAL_RCC_OscConfig+0x4cc>
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80027c2:	2302      	movs	r3, #2
 80027c4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80027c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80027d4:	4b65      	ldr	r3, [pc, #404]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	2202      	movs	r2, #2
 80027da:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80027de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80027e2:	fa92 f2a2 	rbit	r2, r2
 80027e6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80027ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0b4      	beq.n	8002774 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b58      	ldr	r3, [pc, #352]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	21f8      	movs	r1, #248	@ 0xf8
 8002820:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002828:	fa91 f1a1 	rbit	r1, r1
 800282c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002830:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002834:	fab1 f181 	clz	r1, r1
 8002838:	b2c9      	uxtb	r1, r1
 800283a:	408b      	lsls	r3, r1
 800283c:	494b      	ldr	r1, [pc, #300]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
 8002842:	e065      	b.n	8002910 <HAL_RCC_OscConfig+0x604>
 8002844:	2301      	movs	r3, #1
 8002846:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002856:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002864:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fe38 	bl	80014e4 <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287a:	f7fe fe33 	bl	80014e4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	f000 bd45 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80028a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ae:	d802      	bhi.n	80028b6 <HAL_RCC_OscConfig+0x5aa>
 80028b0:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	e013      	b.n	80028de <HAL_RCC_OscConfig+0x5d2>
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80028ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80028da:	4b24      	ldr	r3, [pc, #144]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	2202      	movs	r2, #2
 80028e0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80028e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80028e8:	fa92 f2a2 	rbit	r2, r2
 80028ec:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80028f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f042 0220 	orr.w	r2, r2, #32
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f002 021f 	and.w	r2, r2, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1b4      	bne.n	800287a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8115 	beq.w	8002b50 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d07e      	beq.n	8002a34 <HAL_RCC_OscConfig+0x728>
 8002936:	2301      	movs	r3, #1
 8002938:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_OscConfig+0x664>)
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	461a      	mov	r2, r3
 800295c:	2301      	movs	r3, #1
 800295e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fdc0 	bl	80014e4 <HAL_GetTick>
 8002964:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002968:	e00f      	b.n	800298a <HAL_RCC_OscConfig+0x67e>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fdb6 	bl	80014e4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d902      	bls.n	800298a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	f000 bcc8 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029a4:	2202      	movs	r2, #2
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029c8:	2202      	movs	r2, #2
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e4:	4bb0      	ldr	r3, [pc, #704]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 80029e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029f0:	2102      	movs	r1, #2
 80029f2:	6019      	str	r1, [r3, #0]
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f1a3 	rbit	r1, r3
 8002a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a0a:	6019      	str	r1, [r3, #0]
  return result;
 8002a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0a0      	beq.n	8002974 <HAL_RCC_OscConfig+0x668>
 8002a32:	e08d      	b.n	8002b50 <HAL_RCC_OscConfig+0x844>
 8002a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a56:	601a      	str	r2, [r3, #0]
  return result;
 8002a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b90      	ldr	r3, [pc, #576]	@ (8002cac <HAL_RCC_OscConfig+0x9a0>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	461a      	mov	r2, r3
 8002a72:	2300      	movs	r3, #0
 8002a74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fd35 	bl	80014e4 <HAL_GetTick>
 8002a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fd30 	bl	80014e4 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d902      	bls.n	8002a96 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	f000 bc42 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	fa93 f2a3 	rbit	r2, r3
 8002ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fa93 f2a3 	rbit	r2, r3
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b02:	4b69      	ldr	r3, [pc, #420]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b0e:	2102      	movs	r1, #2
 8002b10:	6019      	str	r1, [r3, #0]
 8002b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	fa93 f1a3 	rbit	r1, r3
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b28:	6019      	str	r1, [r3, #0]
  return result;
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d197      	bne.n	8002a80 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 819e 	beq.w	8002ea2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d116      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	61d3      	str	r3, [r2, #28]
 8002b84:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	4b42      	ldr	r3, [pc, #264]	@ (8002cb0 <HAL_RCC_OscConfig+0x9a4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11a      	bne.n	8002be8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <HAL_RCC_OscConfig+0x9a4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8002cb0 <HAL_RCC_OscConfig+0x9a4>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fc91 	bl	80014e4 <HAL_GetTick>
 8002bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc6:	e009      	b.n	8002bdc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc8:	f7fe fc8c 	bl	80014e4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b64      	cmp	r3, #100	@ 0x64
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e39e      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_OscConfig+0x9a4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ef      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d106      	bne.n	8002c06 <HAL_RCC_OscConfig+0x8fa>
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	e035      	b.n	8002c72 <HAL_RCC_OscConfig+0x966>
 8002c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x924>
 8002c16:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6213      	str	r3, [r2, #32]
 8002c22:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a20      	ldr	r2, [pc, #128]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6213      	str	r3, [r2, #32]
 8002c2e:	e020      	b.n	8002c72 <HAL_RCC_OscConfig+0x966>
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x94e>
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6213      	str	r3, [r2, #32]
 8002c4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a15      	ldr	r2, [pc, #84]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0x966>
 8002c5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6213      	str	r3, [r2, #32]
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8087 	beq.w	8002d92 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe fc2e 	bl	80014e4 <HAL_GetTick>
 8002c88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	e012      	b.n	8002cb4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fc29 	bl	80014e4 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d908      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e339      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	10908120 	.word	0x10908120
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cdc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cfa:	601a      	str	r2, [r3, #0]
  return result;
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_RCC_OscConfig+0xa10>
 8002d16:	4b98      	ldr	r3, [pc, #608]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	e013      	b.n	8002d44 <HAL_RCC_OscConfig+0xa38>
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d24:	2202      	movs	r2, #2
 8002d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f2a3 	rbit	r2, r3
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	4b8d      	ldr	r3, [pc, #564]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d48:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	6011      	str	r1, [r2, #0]
 8002d50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d54:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	fa92 f1a2 	rbit	r1, r2
 8002d5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d62:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d66:	6011      	str	r1, [r2, #0]
  return result;
 8002d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d6c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f43f af7f 	beq.w	8002c8e <HAL_RCC_OscConfig+0x982>
 8002d90:	e07d      	b.n	8002e8e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fba7 	bl	80014e4 <HAL_GetTick>
 8002d96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fba2 	bl	80014e4 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e2b2      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002de0:	2202      	movs	r2, #2
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dfa:	601a      	str	r2, [r3, #0]
  return result;
 8002dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e00:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_OscConfig+0xb10>
 8002e16:	4b58      	ldr	r3, [pc, #352]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	e013      	b.n	8002e44 <HAL_RCC_OscConfig+0xb38>
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4b4d      	ldr	r3, [pc, #308]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e48:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	6011      	str	r1, [r2, #0]
 8002e50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e54:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	fa92 f1a2 	rbit	r1, r2
 8002e5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e62:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e66:	6011      	str	r1, [r2, #0]
  return result;
 8002e68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e6c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d186      	bne.n	8002d9c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e8e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b38      	ldr	r3, [pc, #224]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a37      	ldr	r2, [pc, #220]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8232 	beq.w	8003318 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb4:	4b30      	ldr	r3, [pc, #192]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	f000 8201 	beq.w	80032c4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	f040 8157 	bne.w	8003182 <HAL_RCC_OscConfig+0xe76>
 8002ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002edc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ef8:	601a      	str	r2, [r3, #0]
  return result;
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f02:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fae3 	bl	80014e4 <HAL_GetTick>
 8002f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	e009      	b.n	8002f38 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fade 	bl	80014e4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e1f0      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 8002f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f5c:	601a      	str	r2, [r3, #0]
  return result;
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f70:	d804      	bhi.n	8002f7c <HAL_RCC_OscConfig+0xc70>
 8002f72:	4b01      	ldr	r3, [pc, #4]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e029      	b.n	8002fcc <HAL_RCC_OscConfig+0xcc0>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002faa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	4bc3      	ldr	r3, [pc, #780]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fd0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002fd4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fd8:	6011      	str	r1, [r2, #0]
 8002fda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fde:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fa92 f1a2 	rbit	r1, r2
 8002fe8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ff0:	6011      	str	r1, [r2, #0]
  return result;
 8002ff2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ff6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d185      	bne.n	8002f24 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003018:	4baf      	ldr	r3, [pc, #700]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003024:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800302c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003030:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	430b      	orrs	r3, r1
 800303a:	49a7      	ldr	r1, [pc, #668]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003048:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800304c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003060:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003064:	601a      	str	r2, [r3, #0]
  return result;
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800306e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800307a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	2301      	movs	r3, #1
 8003084:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe fa2d 	bl	80014e4 <HAL_GetTick>
 800308a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800308e:	e009      	b.n	80030a4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fa28 	bl	80014e4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e13a      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fa93 f2a3 	rbit	r2, r3
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030c8:	601a      	str	r2, [r3, #0]
  return result;
 80030ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b3f      	cmp	r3, #63	@ 0x3f
 80030dc:	d802      	bhi.n	80030e4 <HAL_RCC_OscConfig+0xdd8>
 80030de:	4b7e      	ldr	r3, [pc, #504]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e027      	b.n	8003134 <HAL_RCC_OscConfig+0xe28>
 80030e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003112:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	4b69      	ldr	r3, [pc, #420]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003138:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800313c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003140:	6011      	str	r1, [r2, #0]
 8003142:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003146:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	fa92 f1a2 	rbit	r1, r2
 8003150:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003154:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003158:	6011      	str	r1, [r2, #0]
  return result;
 800315a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800315e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f002 021f 	and.w	r2, r2, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d087      	beq.n	8003090 <HAL_RCC_OscConfig+0xd84>
 8003180:	e0ca      	b.n	8003318 <HAL_RCC_OscConfig+0x100c>
 8003182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003186:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800318a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800318e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031a6:	601a      	str	r2, [r3, #0]
  return result;
 80031a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	461a      	mov	r2, r3
 80031c4:	2300      	movs	r3, #0
 80031c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe f98c 	bl	80014e4 <HAL_GetTick>
 80031cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d0:	e009      	b.n	80031e6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe f987 	bl	80014e4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e099      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 80031e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	fa93 f2a3 	rbit	r2, r3
 8003202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003206:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800320a:	601a      	str	r2, [r3, #0]
  return result;
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003214:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b3f      	cmp	r3, #63	@ 0x3f
 800321e:	d802      	bhi.n	8003226 <HAL_RCC_OscConfig+0xf1a>
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	e027      	b.n	8003276 <HAL_RCC_OscConfig+0xf6a>
 8003226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800322e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fa93 f2a3 	rbit	r2, r3
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003254:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800327a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800327e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003282:	6011      	str	r1, [r2, #0]
 8003284:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003288:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	fa92 f1a2 	rbit	r1, r2
 8003292:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003296:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800329a:	6011      	str	r1, [r2, #0]
  return result;
 800329c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032a0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	fab2 f282 	clz	r2, r2
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f042 0220 	orr.w	r2, r2, #32
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f002 021f 	and.w	r2, r2, #31
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d187      	bne.n	80031d2 <HAL_RCC_OscConfig+0xec6>
 80032c2:	e029      	b.n	8003318 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d103      	bne.n	80032dc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e020      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 80032d8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_RCC_OscConfig+0x1018>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d10b      	bne.n	8003314 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003300:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b09e      	sub	sp, #120	@ 0x78
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e154      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b89      	ldr	r3, [pc, #548]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d910      	bls.n	8003370 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b86      	ldr	r3, [pc, #536]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0207 	bic.w	r2, r3, #7
 8003356:	4984      	ldr	r1, [pc, #528]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b82      	ldr	r3, [pc, #520]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e13c      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	4b7b      	ldr	r3, [pc, #492]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4978      	ldr	r1, [pc, #480]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80cd 	beq.w	8003536 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d137      	bne.n	8003414 <HAL_RCC_ClockConfig+0xec>
 80033a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80033bc:	d802      	bhi.n	80033c4 <HAL_RCC_ClockConfig+0x9c>
 80033be:	4b6b      	ldr	r3, [pc, #428]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e00f      	b.n	80033e4 <HAL_RCC_ClockConfig+0xbc>
 80033c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80033d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80033d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033e0:	4b62      	ldr	r3, [pc, #392]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ec:	fa92 f2a2 	rbit	r2, r2
 80033f0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80033f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f002 021f 	and.w	r2, r2, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d171      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0ea      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d137      	bne.n	800348c <HAL_RCC_ClockConfig+0x164>
 800341c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003420:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800342a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b3f      	cmp	r3, #63	@ 0x3f
 8003434:	d802      	bhi.n	800343c <HAL_RCC_ClockConfig+0x114>
 8003436:	4b4d      	ldr	r3, [pc, #308]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e00f      	b.n	800345c <HAL_RCC_ClockConfig+0x134>
 800343c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003440:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
 800344a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800344e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003458:	4b44      	ldr	r3, [pc, #272]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003460:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003464:	fa92 f2a2 	rbit	r2, r2
 8003468:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800346a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800346c:	fab2 f282 	clz	r2, r2
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f042 0220 	orr.w	r2, r2, #32
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	f002 021f 	and.w	r2, r2, #31
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d135      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0ae      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
 800348c:	2302      	movs	r3, #2
 800348e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034a2:	d802      	bhi.n	80034aa <HAL_RCC_ClockConfig+0x182>
 80034a4:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	e00d      	b.n	80034c6 <HAL_RCC_ClockConfig+0x19e>
 80034aa:	2302      	movs	r3, #2
 80034ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b6:	2302      	movs	r3, #2
 80034b8:	623b      	str	r3, [r7, #32]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	2202      	movs	r2, #2
 80034c8:	61ba      	str	r2, [r7, #24]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	617a      	str	r2, [r7, #20]
  return result;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f002 021f 	and.w	r2, r2, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e07a      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f4:	4b1d      	ldr	r3, [pc, #116]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f023 0203 	bic.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	491a      	ldr	r1, [pc, #104]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003506:	f7fd ffed 	bl	80014e4 <HAL_GetTick>
 800350a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350c:	e00a      	b.n	8003524 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350e:	f7fd ffe9 	bl	80014e4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e062      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	4b11      	ldr	r3, [pc, #68]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 020c 	and.w	r2, r3, #12
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	429a      	cmp	r2, r3
 8003534:	d1eb      	bne.n	800350e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003536:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d215      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003544:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 0207 	bic.w	r2, r3, #7
 800354c:	4906      	ldr	r1, [pc, #24]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d006      	beq.n	8003570 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e041      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
 8003566:	bf00      	nop
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	491a      	ldr	r1, [pc, #104]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359a:	4b16      	ldr	r3, [pc, #88]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4912      	ldr	r1, [pc, #72]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035ae:	f000 f829 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035b2:	4601      	mov	r1, r0
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035bc:	22f0      	movs	r2, #240	@ 0xf0
 80035be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	fa92 f2a2 	rbit	r2, r2
 80035c6:	60fa      	str	r2, [r7, #12]
  return result;
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	40d3      	lsrs	r3, r2
 80035d2:	4a09      	ldr	r2, [pc, #36]	@ (80035f8 <HAL_RCC_ClockConfig+0x2d0>)
 80035d4:	5cd3      	ldrb	r3, [r2, r3]
 80035d6:	fa21 f303 	lsr.w	r3, r1, r3
 80035da:	4a08      	ldr	r2, [pc, #32]	@ (80035fc <HAL_RCC_ClockConfig+0x2d4>)
 80035dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035de:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <HAL_RCC_ClockConfig+0x2d8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd ff3a 	bl	800145c <HAL_InitTick>
  
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3778      	adds	r7, #120	@ 0x78
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	08008978 	.word	0x08008978
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800361e:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x94>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b04      	cmp	r3, #4
 800362c:	d002      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x30>
 800362e:	2b08      	cmp	r3, #8
 8003630:	d003      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x36>
 8003632:	e026      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003634:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_RCC_GetSysClockFreq+0x98>)
 8003636:	613b      	str	r3, [r7, #16]
      break;
 8003638:	e026      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	0c9b      	lsrs	r3, r3, #18
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	4a17      	ldr	r2, [pc, #92]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003644:	5cd3      	ldrb	r3, [r2, r3]
 8003646:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003648:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x94>)
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003660:	4a0e      	ldr	r2, [pc, #56]	@ (800369c <HAL_RCC_GetSysClockFreq+0x98>)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	fbb2 f2f3 	udiv	r2, r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e004      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a0c      	ldr	r2, [pc, #48]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	613b      	str	r3, [r7, #16]
      break;
 8003680:	e002      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_GetSysClockFreq+0x98>)
 8003684:	613b      	str	r3, [r7, #16]
      break;
 8003686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003688:	693b      	ldr	r3, [r7, #16]
}
 800368a:	4618      	mov	r0, r3
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	007a1200 	.word	0x007a1200
 80036a0:	08008990 	.word	0x08008990
 80036a4:	080089a0 	.word	0x080089a0
 80036a8:	003d0900 	.word	0x003d0900

080036ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b0:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000

080036c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036ca:	f7ff ffef 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036ce:	4601      	mov	r1, r0
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80036dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	603a      	str	r2, [r7, #0]
  return result;
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	40d3      	lsrs	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	08008988 	.word	0x08008988

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800370e:	f7ff ffcd 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 8003712:	4601      	mov	r1, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800371c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003720:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	fa92 f2a2 	rbit	r2, r2
 8003728:	603a      	str	r2, [r7, #0]
  return result;
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	40d3      	lsrs	r3, r2
 8003734:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	08008988 	.word	0x08008988

0800374c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e040      	b.n	80037e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fce0 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	@ 0x24
 8003778:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fab0 	bl	8003cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f977 	bl	8003a8c <UART_SetConfig>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e01b      	b.n	80037e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fb2f 	bl	8003e3c <UART_CheckIdleState>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	@ 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d177      	bne.n	80038f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_UART_Transmit+0x24>
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e070      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2221      	movs	r2, #33	@ 0x21
 800381c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800381e:	f7fd fe61 	bl	80014e4 <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383c:	d108      	bne.n	8003850 <HAL_UART_Transmit+0x68>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e003      	b.n	8003858 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003858:	e02f      	b.n	80038ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	@ 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fb91 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e03b      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800388c:	b292      	uxth	r2, r2
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	3302      	adds	r3, #2
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e007      	b.n	80038a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1c9      	bne.n	800385a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2140      	movs	r1, #64	@ 0x40
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fb5b 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e005      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b08a      	sub	sp, #40	@ 0x28
 80038fe:	af02      	add	r7, sp, #8
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003910:	2b20      	cmp	r3, #32
 8003912:	f040 80b6 	bne.w	8003a82 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Receive+0x28>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0ae      	b.n	8003a84 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2222      	movs	r2, #34	@ 0x22
 8003932:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393c:	f7fd fdd2 	bl	80014e4 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800395a:	d10e      	bne.n	800397a <HAL_UART_Receive+0x80>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_UART_Receive+0x76>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800396a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800396e:	e02d      	b.n	80039cc <HAL_UART_Receive+0xd2>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	22ff      	movs	r2, #255	@ 0xff
 8003974:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003978:	e028      	b.n	80039cc <HAL_UART_Receive+0xd2>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_UART_Receive+0xa4>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_Receive+0x9a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	@ 0xff
 800398e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003992:	e01b      	b.n	80039cc <HAL_UART_Receive+0xd2>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	227f      	movs	r2, #127	@ 0x7f
 8003998:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800399c:	e016      	b.n	80039cc <HAL_UART_Receive+0xd2>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039a6:	d10d      	bne.n	80039c4 <HAL_UART_Receive+0xca>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_UART_Receive+0xc0>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	227f      	movs	r2, #127	@ 0x7f
 80039b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039b8:	e008      	b.n	80039cc <HAL_UART_Receive+0xd2>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	223f      	movs	r2, #63	@ 0x3f
 80039be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039c2:	e003      	b.n	80039cc <HAL_UART_Receive+0xd2>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039dc:	d108      	bne.n	80039f0 <HAL_UART_Receive+0xf6>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	e003      	b.n	80039f8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80039f8:	e037      	b.n	8003a6a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2120      	movs	r1, #32
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fac1 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e033      	b.n	8003a84 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	8a7b      	ldrh	r3, [r7, #18]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	3302      	adds	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e00d      	b.n	8003a58 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	8a7b      	ldrh	r3, [r7, #18]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1c1      	bne.n	80039fa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8003ce0 <UART_SetConfig+0x254>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a78      	ldr	r2, [pc, #480]	@ (8003ce4 <UART_SetConfig+0x258>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d120      	bne.n	8003b4a <UART_SetConfig+0xbe>
 8003b08:	4b77      	ldr	r3, [pc, #476]	@ (8003ce8 <UART_SetConfig+0x25c>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d817      	bhi.n	8003b44 <UART_SetConfig+0xb8>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <UART_SetConfig+0x90>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b3f 	.word	0x08003b3f
 8003b28:	08003b33 	.word	0x08003b33
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e01d      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b32:	2302      	movs	r3, #2
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e01a      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e017      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e014      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b44:	2310      	movs	r3, #16
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e011      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a67      	ldr	r2, [pc, #412]	@ (8003cec <UART_SetConfig+0x260>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d102      	bne.n	8003b5a <UART_SetConfig+0xce>
 8003b54:	2300      	movs	r3, #0
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a64      	ldr	r2, [pc, #400]	@ (8003cf0 <UART_SetConfig+0x264>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d102      	bne.n	8003b6a <UART_SetConfig+0xde>
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e001      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b76:	d15a      	bne.n	8003c2e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003b78:	7ffb      	ldrb	r3, [r7, #31]
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d827      	bhi.n	8003bce <UART_SetConfig+0x142>
 8003b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <UART_SetConfig+0xf8>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bcf 	.word	0x08003bcf
 8003b94:	08003bbf 	.word	0x08003bbf
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bcf 	.word	0x08003bcf
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7ff fd8c 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8003bac:	61b8      	str	r0, [r7, #24]
        break;
 8003bae:	e013      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7ff fdaa 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8003bb4:	61b8      	str	r0, [r7, #24]
        break;
 8003bb6:	e00f      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf4 <UART_SetConfig+0x268>)
 8003bba:	61bb      	str	r3, [r7, #24]
        break;
 8003bbc:	e00c      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7ff fd21 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8003bc2:	61b8      	str	r0, [r7, #24]
        break;
 8003bc4:	e008      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bca:	61bb      	str	r3, [r7, #24]
        break;
 8003bcc:	e004      	b.n	8003bd8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d074      	beq.n	8003cc8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	d916      	bls.n	8003c28 <UART_SetConfig+0x19c>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c00:	d212      	bcs.n	8003c28 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f023 030f 	bic.w	r3, r3, #15
 8003c0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	89fa      	ldrh	r2, [r7, #14]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	e04f      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77bb      	strb	r3, [r7, #30]
 8003c2c:	e04c      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d828      	bhi.n	8003c86 <UART_SetConfig+0x1fa>
 8003c34:	a201      	add	r2, pc, #4	@ (adr r2, 8003c3c <UART_SetConfig+0x1b0>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c87 	.word	0x08003c87
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003c87 	.word	0x08003c87
 8003c54:	08003c87 	.word	0x08003c87
 8003c58:	08003c87 	.word	0x08003c87
 8003c5c:	08003c7f 	.word	0x08003c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7ff fd30 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8003c64:	61b8      	str	r0, [r7, #24]
        break;
 8003c66:	e013      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7ff fd4e 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8003c6c:	61b8      	str	r0, [r7, #24]
        break;
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c70:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <UART_SetConfig+0x268>)
 8003c72:	61bb      	str	r3, [r7, #24]
        break;
 8003c74:	e00c      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c76:	f7ff fcc5 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8003c7a:	61b8      	str	r0, [r7, #24]
        break;
 8003c7c:	e008      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c82:	61bb      	str	r3, [r7, #24]
        break;
 8003c84:	e004      	b.n	8003c90 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d018      	beq.n	8003cc8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085a      	lsrs	r2, r3, #1
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b0f      	cmp	r3, #15
 8003cae:	d909      	bls.n	8003cc4 <UART_SetConfig+0x238>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb6:	d205      	bcs.n	8003cc4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	efff69f3 	.word	0xefff69f3
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40004400 	.word	0x40004400
 8003cf0:	40004800 	.word	0x40004800
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df6:	d10a      	bne.n	8003e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b098      	sub	sp, #96	@ 0x60
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e4c:	f7fd fb4a 	bl	80014e4 <HAL_GetTick>
 8003e50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d12e      	bne.n	8003ebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f88c 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d021      	beq.n	8003ebe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e6      	bne.n	8003e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e062      	b.n	8003f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d149      	bne.n	8003f60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f856 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03c      	beq.n	8003f60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e6      	bne.n	8003ee6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f38:	61fa      	str	r2, [r7, #28]
 8003f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	617b      	str	r3, [r7, #20]
   return(result);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e011      	b.n	8003f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3758      	adds	r7, #88	@ 0x58
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9c:	e04f      	b.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa4:	d04b      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7fd fa9d 	bl	80014e4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e04e      	b.n	800405e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d037      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b80      	cmp	r3, #128	@ 0x80
 8003fd2:	d034      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b40      	cmp	r3, #64	@ 0x40
 8003fd8:	d031      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d110      	bne.n	800400a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2208      	movs	r2, #8
 8003fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f838 	bl	8004066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e029      	b.n	800405e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004018:	d111      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f81e 	bl	8004066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e00f      	b.n	800405e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	429a      	cmp	r2, r3
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	429a      	cmp	r2, r3
 800405a:	d0a0      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004066:	b480      	push	{r7}
 8004068:	b095      	sub	sp, #84	@ 0x54
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800408c:	643b      	str	r3, [r7, #64]	@ 0x40
 800408e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d118      	bne.n	800410e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 0310 	bic.w	r3, r3, #16
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004122:	bf00      	nop
 8004124:	3754      	adds	r7, #84	@ 0x54
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <__cvt>:
 800412e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004132:	ec57 6b10 	vmov	r6, r7, d0
 8004136:	2f00      	cmp	r7, #0
 8004138:	460c      	mov	r4, r1
 800413a:	4619      	mov	r1, r3
 800413c:	463b      	mov	r3, r7
 800413e:	bfbb      	ittet	lt
 8004140:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004144:	461f      	movlt	r7, r3
 8004146:	2300      	movge	r3, #0
 8004148:	232d      	movlt	r3, #45	@ 0x2d
 800414a:	700b      	strb	r3, [r1, #0]
 800414c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800414e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004152:	4691      	mov	r9, r2
 8004154:	f023 0820 	bic.w	r8, r3, #32
 8004158:	bfbc      	itt	lt
 800415a:	4632      	movlt	r2, r6
 800415c:	4616      	movlt	r6, r2
 800415e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004162:	d005      	beq.n	8004170 <__cvt+0x42>
 8004164:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004168:	d100      	bne.n	800416c <__cvt+0x3e>
 800416a:	3401      	adds	r4, #1
 800416c:	2102      	movs	r1, #2
 800416e:	e000      	b.n	8004172 <__cvt+0x44>
 8004170:	2103      	movs	r1, #3
 8004172:	ab03      	add	r3, sp, #12
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	ab02      	add	r3, sp, #8
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	ec47 6b10 	vmov	d0, r6, r7
 800417e:	4653      	mov	r3, sl
 8004180:	4622      	mov	r2, r4
 8004182:	f001 f921 	bl	80053c8 <_dtoa_r>
 8004186:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800418a:	4605      	mov	r5, r0
 800418c:	d119      	bne.n	80041c2 <__cvt+0x94>
 800418e:	f019 0f01 	tst.w	r9, #1
 8004192:	d00e      	beq.n	80041b2 <__cvt+0x84>
 8004194:	eb00 0904 	add.w	r9, r0, r4
 8004198:	2200      	movs	r2, #0
 800419a:	2300      	movs	r3, #0
 800419c:	4630      	mov	r0, r6
 800419e:	4639      	mov	r1, r7
 80041a0:	f7fc fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80041a4:	b108      	cbz	r0, 80041aa <__cvt+0x7c>
 80041a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80041aa:	2230      	movs	r2, #48	@ 0x30
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	454b      	cmp	r3, r9
 80041b0:	d31e      	bcc.n	80041f0 <__cvt+0xc2>
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80041b6:	1b5b      	subs	r3, r3, r5
 80041b8:	4628      	mov	r0, r5
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	b004      	add	sp, #16
 80041be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80041c6:	eb00 0904 	add.w	r9, r0, r4
 80041ca:	d1e5      	bne.n	8004198 <__cvt+0x6a>
 80041cc:	7803      	ldrb	r3, [r0, #0]
 80041ce:	2b30      	cmp	r3, #48	@ 0x30
 80041d0:	d10a      	bne.n	80041e8 <__cvt+0xba>
 80041d2:	2200      	movs	r2, #0
 80041d4:	2300      	movs	r3, #0
 80041d6:	4630      	mov	r0, r6
 80041d8:	4639      	mov	r1, r7
 80041da:	f7fc fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80041de:	b918      	cbnz	r0, 80041e8 <__cvt+0xba>
 80041e0:	f1c4 0401 	rsb	r4, r4, #1
 80041e4:	f8ca 4000 	str.w	r4, [sl]
 80041e8:	f8da 3000 	ldr.w	r3, [sl]
 80041ec:	4499      	add	r9, r3
 80041ee:	e7d3      	b.n	8004198 <__cvt+0x6a>
 80041f0:	1c59      	adds	r1, r3, #1
 80041f2:	9103      	str	r1, [sp, #12]
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e7d9      	b.n	80041ac <__cvt+0x7e>

080041f8 <__exponent>:
 80041f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041fa:	2900      	cmp	r1, #0
 80041fc:	bfba      	itte	lt
 80041fe:	4249      	neglt	r1, r1
 8004200:	232d      	movlt	r3, #45	@ 0x2d
 8004202:	232b      	movge	r3, #43	@ 0x2b
 8004204:	2909      	cmp	r1, #9
 8004206:	7002      	strb	r2, [r0, #0]
 8004208:	7043      	strb	r3, [r0, #1]
 800420a:	dd29      	ble.n	8004260 <__exponent+0x68>
 800420c:	f10d 0307 	add.w	r3, sp, #7
 8004210:	461d      	mov	r5, r3
 8004212:	270a      	movs	r7, #10
 8004214:	461a      	mov	r2, r3
 8004216:	fbb1 f6f7 	udiv	r6, r1, r7
 800421a:	fb07 1416 	mls	r4, r7, r6, r1
 800421e:	3430      	adds	r4, #48	@ 0x30
 8004220:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004224:	460c      	mov	r4, r1
 8004226:	2c63      	cmp	r4, #99	@ 0x63
 8004228:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800422c:	4631      	mov	r1, r6
 800422e:	dcf1      	bgt.n	8004214 <__exponent+0x1c>
 8004230:	3130      	adds	r1, #48	@ 0x30
 8004232:	1e94      	subs	r4, r2, #2
 8004234:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004238:	1c41      	adds	r1, r0, #1
 800423a:	4623      	mov	r3, r4
 800423c:	42ab      	cmp	r3, r5
 800423e:	d30a      	bcc.n	8004256 <__exponent+0x5e>
 8004240:	f10d 0309 	add.w	r3, sp, #9
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	42ac      	cmp	r4, r5
 8004248:	bf88      	it	hi
 800424a:	2300      	movhi	r3, #0
 800424c:	3302      	adds	r3, #2
 800424e:	4403      	add	r3, r0
 8004250:	1a18      	subs	r0, r3, r0
 8004252:	b003      	add	sp, #12
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004256:	f813 6b01 	ldrb.w	r6, [r3], #1
 800425a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800425e:	e7ed      	b.n	800423c <__exponent+0x44>
 8004260:	2330      	movs	r3, #48	@ 0x30
 8004262:	3130      	adds	r1, #48	@ 0x30
 8004264:	7083      	strb	r3, [r0, #2]
 8004266:	70c1      	strb	r1, [r0, #3]
 8004268:	1d03      	adds	r3, r0, #4
 800426a:	e7f1      	b.n	8004250 <__exponent+0x58>

0800426c <_printf_float>:
 800426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004270:	b08d      	sub	sp, #52	@ 0x34
 8004272:	460c      	mov	r4, r1
 8004274:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004278:	4616      	mov	r6, r2
 800427a:	461f      	mov	r7, r3
 800427c:	4605      	mov	r5, r0
 800427e:	f000 ff9d 	bl	80051bc <_localeconv_r>
 8004282:	6803      	ldr	r3, [r0, #0]
 8004284:	9304      	str	r3, [sp, #16]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fb fff2 	bl	8000270 <strlen>
 800428c:	2300      	movs	r3, #0
 800428e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004290:	f8d8 3000 	ldr.w	r3, [r8]
 8004294:	9005      	str	r0, [sp, #20]
 8004296:	3307      	adds	r3, #7
 8004298:	f023 0307 	bic.w	r3, r3, #7
 800429c:	f103 0208 	add.w	r2, r3, #8
 80042a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80042a4:	f8d4 b000 	ldr.w	fp, [r4]
 80042a8:	f8c8 2000 	str.w	r2, [r8]
 80042ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80042b4:	9307      	str	r3, [sp, #28]
 80042b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80042ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80042be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004534 <_printf_float+0x2c8>)
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042c8:	f7fc fc30 	bl	8000b2c <__aeabi_dcmpun>
 80042cc:	bb70      	cbnz	r0, 800432c <_printf_float+0xc0>
 80042ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042d2:	4b98      	ldr	r3, [pc, #608]	@ (8004534 <_printf_float+0x2c8>)
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042d8:	f7fc fc0a 	bl	8000af0 <__aeabi_dcmple>
 80042dc:	bb30      	cbnz	r0, 800432c <_printf_float+0xc0>
 80042de:	2200      	movs	r2, #0
 80042e0:	2300      	movs	r3, #0
 80042e2:	4640      	mov	r0, r8
 80042e4:	4649      	mov	r1, r9
 80042e6:	f7fc fbf9 	bl	8000adc <__aeabi_dcmplt>
 80042ea:	b110      	cbz	r0, 80042f2 <_printf_float+0x86>
 80042ec:	232d      	movs	r3, #45	@ 0x2d
 80042ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042f2:	4a91      	ldr	r2, [pc, #580]	@ (8004538 <_printf_float+0x2cc>)
 80042f4:	4b91      	ldr	r3, [pc, #580]	@ (800453c <_printf_float+0x2d0>)
 80042f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80042fa:	bf8c      	ite	hi
 80042fc:	4690      	movhi	r8, r2
 80042fe:	4698      	movls	r8, r3
 8004300:	2303      	movs	r3, #3
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	f02b 0304 	bic.w	r3, fp, #4
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	f04f 0900 	mov.w	r9, #0
 800430e:	9700      	str	r7, [sp, #0]
 8004310:	4633      	mov	r3, r6
 8004312:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f9d2 	bl	80046c0 <_printf_common>
 800431c:	3001      	adds	r0, #1
 800431e:	f040 808d 	bne.w	800443c <_printf_float+0x1d0>
 8004322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004326:	b00d      	add	sp, #52	@ 0x34
 8004328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	4640      	mov	r0, r8
 8004332:	4649      	mov	r1, r9
 8004334:	f7fc fbfa 	bl	8000b2c <__aeabi_dcmpun>
 8004338:	b140      	cbz	r0, 800434c <_printf_float+0xe0>
 800433a:	464b      	mov	r3, r9
 800433c:	2b00      	cmp	r3, #0
 800433e:	bfbc      	itt	lt
 8004340:	232d      	movlt	r3, #45	@ 0x2d
 8004342:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004346:	4a7e      	ldr	r2, [pc, #504]	@ (8004540 <_printf_float+0x2d4>)
 8004348:	4b7e      	ldr	r3, [pc, #504]	@ (8004544 <_printf_float+0x2d8>)
 800434a:	e7d4      	b.n	80042f6 <_printf_float+0x8a>
 800434c:	6863      	ldr	r3, [r4, #4]
 800434e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004352:	9206      	str	r2, [sp, #24]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	d13b      	bne.n	80043d0 <_printf_float+0x164>
 8004358:	2306      	movs	r3, #6
 800435a:	6063      	str	r3, [r4, #4]
 800435c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004360:	2300      	movs	r3, #0
 8004362:	6022      	str	r2, [r4, #0]
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	ab0a      	add	r3, sp, #40	@ 0x28
 8004368:	e9cd a301 	strd	sl, r3, [sp, #4]
 800436c:	ab09      	add	r3, sp, #36	@ 0x24
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	6861      	ldr	r1, [r4, #4]
 8004372:	ec49 8b10 	vmov	d0, r8, r9
 8004376:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800437a:	4628      	mov	r0, r5
 800437c:	f7ff fed7 	bl	800412e <__cvt>
 8004380:	9b06      	ldr	r3, [sp, #24]
 8004382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004384:	2b47      	cmp	r3, #71	@ 0x47
 8004386:	4680      	mov	r8, r0
 8004388:	d129      	bne.n	80043de <_printf_float+0x172>
 800438a:	1cc8      	adds	r0, r1, #3
 800438c:	db02      	blt.n	8004394 <_printf_float+0x128>
 800438e:	6863      	ldr	r3, [r4, #4]
 8004390:	4299      	cmp	r1, r3
 8004392:	dd41      	ble.n	8004418 <_printf_float+0x1ac>
 8004394:	f1aa 0a02 	sub.w	sl, sl, #2
 8004398:	fa5f fa8a 	uxtb.w	sl, sl
 800439c:	3901      	subs	r1, #1
 800439e:	4652      	mov	r2, sl
 80043a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80043a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80043a6:	f7ff ff27 	bl	80041f8 <__exponent>
 80043aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80043ac:	1813      	adds	r3, r2, r0
 80043ae:	2a01      	cmp	r2, #1
 80043b0:	4681      	mov	r9, r0
 80043b2:	6123      	str	r3, [r4, #16]
 80043b4:	dc02      	bgt.n	80043bc <_printf_float+0x150>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	07d2      	lsls	r2, r2, #31
 80043ba:	d501      	bpl.n	80043c0 <_printf_float+0x154>
 80043bc:	3301      	adds	r3, #1
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0a2      	beq.n	800430e <_printf_float+0xa2>
 80043c8:	232d      	movs	r3, #45	@ 0x2d
 80043ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ce:	e79e      	b.n	800430e <_printf_float+0xa2>
 80043d0:	9a06      	ldr	r2, [sp, #24]
 80043d2:	2a47      	cmp	r2, #71	@ 0x47
 80043d4:	d1c2      	bne.n	800435c <_printf_float+0xf0>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1c0      	bne.n	800435c <_printf_float+0xf0>
 80043da:	2301      	movs	r3, #1
 80043dc:	e7bd      	b.n	800435a <_printf_float+0xee>
 80043de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043e2:	d9db      	bls.n	800439c <_printf_float+0x130>
 80043e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80043e8:	d118      	bne.n	800441c <_printf_float+0x1b0>
 80043ea:	2900      	cmp	r1, #0
 80043ec:	6863      	ldr	r3, [r4, #4]
 80043ee:	dd0b      	ble.n	8004408 <_printf_float+0x19c>
 80043f0:	6121      	str	r1, [r4, #16]
 80043f2:	b913      	cbnz	r3, 80043fa <_printf_float+0x18e>
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	07d0      	lsls	r0, r2, #31
 80043f8:	d502      	bpl.n	8004400 <_printf_float+0x194>
 80043fa:	3301      	adds	r3, #1
 80043fc:	440b      	add	r3, r1
 80043fe:	6123      	str	r3, [r4, #16]
 8004400:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004402:	f04f 0900 	mov.w	r9, #0
 8004406:	e7db      	b.n	80043c0 <_printf_float+0x154>
 8004408:	b913      	cbnz	r3, 8004410 <_printf_float+0x1a4>
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	07d2      	lsls	r2, r2, #31
 800440e:	d501      	bpl.n	8004414 <_printf_float+0x1a8>
 8004410:	3302      	adds	r3, #2
 8004412:	e7f4      	b.n	80043fe <_printf_float+0x192>
 8004414:	2301      	movs	r3, #1
 8004416:	e7f2      	b.n	80043fe <_printf_float+0x192>
 8004418:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800441c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800441e:	4299      	cmp	r1, r3
 8004420:	db05      	blt.n	800442e <_printf_float+0x1c2>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	6121      	str	r1, [r4, #16]
 8004426:	07d8      	lsls	r0, r3, #31
 8004428:	d5ea      	bpl.n	8004400 <_printf_float+0x194>
 800442a:	1c4b      	adds	r3, r1, #1
 800442c:	e7e7      	b.n	80043fe <_printf_float+0x192>
 800442e:	2900      	cmp	r1, #0
 8004430:	bfd4      	ite	le
 8004432:	f1c1 0202 	rsble	r2, r1, #2
 8004436:	2201      	movgt	r2, #1
 8004438:	4413      	add	r3, r2
 800443a:	e7e0      	b.n	80043fe <_printf_float+0x192>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	055a      	lsls	r2, r3, #21
 8004440:	d407      	bmi.n	8004452 <_printf_float+0x1e6>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	4642      	mov	r2, r8
 8004446:	4631      	mov	r1, r6
 8004448:	4628      	mov	r0, r5
 800444a:	47b8      	blx	r7
 800444c:	3001      	adds	r0, #1
 800444e:	d12b      	bne.n	80044a8 <_printf_float+0x23c>
 8004450:	e767      	b.n	8004322 <_printf_float+0xb6>
 8004452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004456:	f240 80dd 	bls.w	8004614 <_printf_float+0x3a8>
 800445a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800445e:	2200      	movs	r2, #0
 8004460:	2300      	movs	r3, #0
 8004462:	f7fc fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8004466:	2800      	cmp	r0, #0
 8004468:	d033      	beq.n	80044d2 <_printf_float+0x266>
 800446a:	4a37      	ldr	r2, [pc, #220]	@ (8004548 <_printf_float+0x2dc>)
 800446c:	2301      	movs	r3, #1
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	47b8      	blx	r7
 8004474:	3001      	adds	r0, #1
 8004476:	f43f af54 	beq.w	8004322 <_printf_float+0xb6>
 800447a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800447e:	4543      	cmp	r3, r8
 8004480:	db02      	blt.n	8004488 <_printf_float+0x21c>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	07d8      	lsls	r0, r3, #31
 8004486:	d50f      	bpl.n	80044a8 <_printf_float+0x23c>
 8004488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	f43f af45 	beq.w	8004322 <_printf_float+0xb6>
 8004498:	f04f 0900 	mov.w	r9, #0
 800449c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80044a0:	f104 0a1a 	add.w	sl, r4, #26
 80044a4:	45c8      	cmp	r8, r9
 80044a6:	dc09      	bgt.n	80044bc <_printf_float+0x250>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	079b      	lsls	r3, r3, #30
 80044ac:	f100 8103 	bmi.w	80046b6 <_printf_float+0x44a>
 80044b0:	68e0      	ldr	r0, [r4, #12]
 80044b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044b4:	4298      	cmp	r0, r3
 80044b6:	bfb8      	it	lt
 80044b8:	4618      	movlt	r0, r3
 80044ba:	e734      	b.n	8004326 <_printf_float+0xba>
 80044bc:	2301      	movs	r3, #1
 80044be:	4652      	mov	r2, sl
 80044c0:	4631      	mov	r1, r6
 80044c2:	4628      	mov	r0, r5
 80044c4:	47b8      	blx	r7
 80044c6:	3001      	adds	r0, #1
 80044c8:	f43f af2b 	beq.w	8004322 <_printf_float+0xb6>
 80044cc:	f109 0901 	add.w	r9, r9, #1
 80044d0:	e7e8      	b.n	80044a4 <_printf_float+0x238>
 80044d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	dc39      	bgt.n	800454c <_printf_float+0x2e0>
 80044d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <_printf_float+0x2dc>)
 80044da:	2301      	movs	r3, #1
 80044dc:	4631      	mov	r1, r6
 80044de:	4628      	mov	r0, r5
 80044e0:	47b8      	blx	r7
 80044e2:	3001      	adds	r0, #1
 80044e4:	f43f af1d 	beq.w	8004322 <_printf_float+0xb6>
 80044e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80044ec:	ea59 0303 	orrs.w	r3, r9, r3
 80044f0:	d102      	bne.n	80044f8 <_printf_float+0x28c>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	07d9      	lsls	r1, r3, #31
 80044f6:	d5d7      	bpl.n	80044a8 <_printf_float+0x23c>
 80044f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044fc:	4631      	mov	r1, r6
 80044fe:	4628      	mov	r0, r5
 8004500:	47b8      	blx	r7
 8004502:	3001      	adds	r0, #1
 8004504:	f43f af0d 	beq.w	8004322 <_printf_float+0xb6>
 8004508:	f04f 0a00 	mov.w	sl, #0
 800450c:	f104 0b1a 	add.w	fp, r4, #26
 8004510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004512:	425b      	negs	r3, r3
 8004514:	4553      	cmp	r3, sl
 8004516:	dc01      	bgt.n	800451c <_printf_float+0x2b0>
 8004518:	464b      	mov	r3, r9
 800451a:	e793      	b.n	8004444 <_printf_float+0x1d8>
 800451c:	2301      	movs	r3, #1
 800451e:	465a      	mov	r2, fp
 8004520:	4631      	mov	r1, r6
 8004522:	4628      	mov	r0, r5
 8004524:	47b8      	blx	r7
 8004526:	3001      	adds	r0, #1
 8004528:	f43f aefb 	beq.w	8004322 <_printf_float+0xb6>
 800452c:	f10a 0a01 	add.w	sl, sl, #1
 8004530:	e7ee      	b.n	8004510 <_printf_float+0x2a4>
 8004532:	bf00      	nop
 8004534:	7fefffff 	.word	0x7fefffff
 8004538:	080089b4 	.word	0x080089b4
 800453c:	080089b0 	.word	0x080089b0
 8004540:	080089bc 	.word	0x080089bc
 8004544:	080089b8 	.word	0x080089b8
 8004548:	080089c0 	.word	0x080089c0
 800454c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800454e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004552:	4553      	cmp	r3, sl
 8004554:	bfa8      	it	ge
 8004556:	4653      	movge	r3, sl
 8004558:	2b00      	cmp	r3, #0
 800455a:	4699      	mov	r9, r3
 800455c:	dc36      	bgt.n	80045cc <_printf_float+0x360>
 800455e:	f04f 0b00 	mov.w	fp, #0
 8004562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004566:	f104 021a 	add.w	r2, r4, #26
 800456a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800456c:	9306      	str	r3, [sp, #24]
 800456e:	eba3 0309 	sub.w	r3, r3, r9
 8004572:	455b      	cmp	r3, fp
 8004574:	dc31      	bgt.n	80045da <_printf_float+0x36e>
 8004576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004578:	459a      	cmp	sl, r3
 800457a:	dc3a      	bgt.n	80045f2 <_printf_float+0x386>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	07da      	lsls	r2, r3, #31
 8004580:	d437      	bmi.n	80045f2 <_printf_float+0x386>
 8004582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004584:	ebaa 0903 	sub.w	r9, sl, r3
 8004588:	9b06      	ldr	r3, [sp, #24]
 800458a:	ebaa 0303 	sub.w	r3, sl, r3
 800458e:	4599      	cmp	r9, r3
 8004590:	bfa8      	it	ge
 8004592:	4699      	movge	r9, r3
 8004594:	f1b9 0f00 	cmp.w	r9, #0
 8004598:	dc33      	bgt.n	8004602 <_printf_float+0x396>
 800459a:	f04f 0800 	mov.w	r8, #0
 800459e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045a2:	f104 0b1a 	add.w	fp, r4, #26
 80045a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045a8:	ebaa 0303 	sub.w	r3, sl, r3
 80045ac:	eba3 0309 	sub.w	r3, r3, r9
 80045b0:	4543      	cmp	r3, r8
 80045b2:	f77f af79 	ble.w	80044a8 <_printf_float+0x23c>
 80045b6:	2301      	movs	r3, #1
 80045b8:	465a      	mov	r2, fp
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	f43f aeae 	beq.w	8004322 <_printf_float+0xb6>
 80045c6:	f108 0801 	add.w	r8, r8, #1
 80045ca:	e7ec      	b.n	80045a6 <_printf_float+0x33a>
 80045cc:	4642      	mov	r2, r8
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	d1c2      	bne.n	800455e <_printf_float+0x2f2>
 80045d8:	e6a3      	b.n	8004322 <_printf_float+0xb6>
 80045da:	2301      	movs	r3, #1
 80045dc:	4631      	mov	r1, r6
 80045de:	4628      	mov	r0, r5
 80045e0:	9206      	str	r2, [sp, #24]
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f ae9c 	beq.w	8004322 <_printf_float+0xb6>
 80045ea:	9a06      	ldr	r2, [sp, #24]
 80045ec:	f10b 0b01 	add.w	fp, fp, #1
 80045f0:	e7bb      	b.n	800456a <_printf_float+0x2fe>
 80045f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	d1c0      	bne.n	8004582 <_printf_float+0x316>
 8004600:	e68f      	b.n	8004322 <_printf_float+0xb6>
 8004602:	9a06      	ldr	r2, [sp, #24]
 8004604:	464b      	mov	r3, r9
 8004606:	4442      	add	r2, r8
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	d1c3      	bne.n	800459a <_printf_float+0x32e>
 8004612:	e686      	b.n	8004322 <_printf_float+0xb6>
 8004614:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004618:	f1ba 0f01 	cmp.w	sl, #1
 800461c:	dc01      	bgt.n	8004622 <_printf_float+0x3b6>
 800461e:	07db      	lsls	r3, r3, #31
 8004620:	d536      	bpl.n	8004690 <_printf_float+0x424>
 8004622:	2301      	movs	r3, #1
 8004624:	4642      	mov	r2, r8
 8004626:	4631      	mov	r1, r6
 8004628:	4628      	mov	r0, r5
 800462a:	47b8      	blx	r7
 800462c:	3001      	adds	r0, #1
 800462e:	f43f ae78 	beq.w	8004322 <_printf_float+0xb6>
 8004632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004636:	4631      	mov	r1, r6
 8004638:	4628      	mov	r0, r5
 800463a:	47b8      	blx	r7
 800463c:	3001      	adds	r0, #1
 800463e:	f43f ae70 	beq.w	8004322 <_printf_float+0xb6>
 8004642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004646:	2200      	movs	r2, #0
 8004648:	2300      	movs	r3, #0
 800464a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800464e:	f7fc fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004652:	b9c0      	cbnz	r0, 8004686 <_printf_float+0x41a>
 8004654:	4653      	mov	r3, sl
 8004656:	f108 0201 	add.w	r2, r8, #1
 800465a:	4631      	mov	r1, r6
 800465c:	4628      	mov	r0, r5
 800465e:	47b8      	blx	r7
 8004660:	3001      	adds	r0, #1
 8004662:	d10c      	bne.n	800467e <_printf_float+0x412>
 8004664:	e65d      	b.n	8004322 <_printf_float+0xb6>
 8004666:	2301      	movs	r3, #1
 8004668:	465a      	mov	r2, fp
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	f43f ae56 	beq.w	8004322 <_printf_float+0xb6>
 8004676:	f108 0801 	add.w	r8, r8, #1
 800467a:	45d0      	cmp	r8, sl
 800467c:	dbf3      	blt.n	8004666 <_printf_float+0x3fa>
 800467e:	464b      	mov	r3, r9
 8004680:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004684:	e6df      	b.n	8004446 <_printf_float+0x1da>
 8004686:	f04f 0800 	mov.w	r8, #0
 800468a:	f104 0b1a 	add.w	fp, r4, #26
 800468e:	e7f4      	b.n	800467a <_printf_float+0x40e>
 8004690:	2301      	movs	r3, #1
 8004692:	4642      	mov	r2, r8
 8004694:	e7e1      	b.n	800465a <_printf_float+0x3ee>
 8004696:	2301      	movs	r3, #1
 8004698:	464a      	mov	r2, r9
 800469a:	4631      	mov	r1, r6
 800469c:	4628      	mov	r0, r5
 800469e:	47b8      	blx	r7
 80046a0:	3001      	adds	r0, #1
 80046a2:	f43f ae3e 	beq.w	8004322 <_printf_float+0xb6>
 80046a6:	f108 0801 	add.w	r8, r8, #1
 80046aa:	68e3      	ldr	r3, [r4, #12]
 80046ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80046ae:	1a5b      	subs	r3, r3, r1
 80046b0:	4543      	cmp	r3, r8
 80046b2:	dcf0      	bgt.n	8004696 <_printf_float+0x42a>
 80046b4:	e6fc      	b.n	80044b0 <_printf_float+0x244>
 80046b6:	f04f 0800 	mov.w	r8, #0
 80046ba:	f104 0919 	add.w	r9, r4, #25
 80046be:	e7f4      	b.n	80046aa <_printf_float+0x43e>

080046c0 <_printf_common>:
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	4698      	mov	r8, r3
 80046c8:	688a      	ldr	r2, [r1, #8]
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bfb8      	it	lt
 80046d4:	4613      	movlt	r3, r2
 80046d6:	6033      	str	r3, [r6, #0]
 80046d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046dc:	4607      	mov	r7, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	b10a      	cbz	r2, 80046e6 <_printf_common+0x26>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	0699      	lsls	r1, r3, #26
 80046ea:	bf42      	ittt	mi
 80046ec:	6833      	ldrmi	r3, [r6, #0]
 80046ee:	3302      	addmi	r3, #2
 80046f0:	6033      	strmi	r3, [r6, #0]
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	f015 0506 	ands.w	r5, r5, #6
 80046f8:	d106      	bne.n	8004708 <_printf_common+0x48>
 80046fa:	f104 0a19 	add.w	sl, r4, #25
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	6832      	ldr	r2, [r6, #0]
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	42ab      	cmp	r3, r5
 8004706:	dc26      	bgt.n	8004756 <_printf_common+0x96>
 8004708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	3b00      	subs	r3, #0
 8004710:	bf18      	it	ne
 8004712:	2301      	movne	r3, #1
 8004714:	0692      	lsls	r2, r2, #26
 8004716:	d42b      	bmi.n	8004770 <_printf_common+0xb0>
 8004718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800471c:	4641      	mov	r1, r8
 800471e:	4638      	mov	r0, r7
 8004720:	47c8      	blx	r9
 8004722:	3001      	adds	r0, #1
 8004724:	d01e      	beq.n	8004764 <_printf_common+0xa4>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	6922      	ldr	r2, [r4, #16]
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf02      	ittt	eq
 8004732:	68e5      	ldreq	r5, [r4, #12]
 8004734:	6833      	ldreq	r3, [r6, #0]
 8004736:	1aed      	subeq	r5, r5, r3
 8004738:	68a3      	ldr	r3, [r4, #8]
 800473a:	bf0c      	ite	eq
 800473c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004740:	2500      	movne	r5, #0
 8004742:	4293      	cmp	r3, r2
 8004744:	bfc4      	itt	gt
 8004746:	1a9b      	subgt	r3, r3, r2
 8004748:	18ed      	addgt	r5, r5, r3
 800474a:	2600      	movs	r6, #0
 800474c:	341a      	adds	r4, #26
 800474e:	42b5      	cmp	r5, r6
 8004750:	d11a      	bne.n	8004788 <_printf_common+0xc8>
 8004752:	2000      	movs	r0, #0
 8004754:	e008      	b.n	8004768 <_printf_common+0xa8>
 8004756:	2301      	movs	r3, #1
 8004758:	4652      	mov	r2, sl
 800475a:	4641      	mov	r1, r8
 800475c:	4638      	mov	r0, r7
 800475e:	47c8      	blx	r9
 8004760:	3001      	adds	r0, #1
 8004762:	d103      	bne.n	800476c <_printf_common+0xac>
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	3501      	adds	r5, #1
 800476e:	e7c6      	b.n	80046fe <_printf_common+0x3e>
 8004770:	18e1      	adds	r1, r4, r3
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	2030      	movs	r0, #48	@ 0x30
 8004776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800477a:	4422      	add	r2, r4
 800477c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004784:	3302      	adds	r3, #2
 8004786:	e7c7      	b.n	8004718 <_printf_common+0x58>
 8004788:	2301      	movs	r3, #1
 800478a:	4622      	mov	r2, r4
 800478c:	4641      	mov	r1, r8
 800478e:	4638      	mov	r0, r7
 8004790:	47c8      	blx	r9
 8004792:	3001      	adds	r0, #1
 8004794:	d0e6      	beq.n	8004764 <_printf_common+0xa4>
 8004796:	3601      	adds	r6, #1
 8004798:	e7d9      	b.n	800474e <_printf_common+0x8e>
	...

0800479c <_printf_i>:
 800479c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	7e0f      	ldrb	r7, [r1, #24]
 80047a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a4:	2f78      	cmp	r7, #120	@ 0x78
 80047a6:	4691      	mov	r9, r2
 80047a8:	4680      	mov	r8, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	469a      	mov	sl, r3
 80047ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047b2:	d807      	bhi.n	80047c4 <_printf_i+0x28>
 80047b4:	2f62      	cmp	r7, #98	@ 0x62
 80047b6:	d80a      	bhi.n	80047ce <_printf_i+0x32>
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	f000 80d1 	beq.w	8004960 <_printf_i+0x1c4>
 80047be:	2f58      	cmp	r7, #88	@ 0x58
 80047c0:	f000 80b8 	beq.w	8004934 <_printf_i+0x198>
 80047c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047cc:	e03a      	b.n	8004844 <_printf_i+0xa8>
 80047ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047d2:	2b15      	cmp	r3, #21
 80047d4:	d8f6      	bhi.n	80047c4 <_printf_i+0x28>
 80047d6:	a101      	add	r1, pc, #4	@ (adr r1, 80047dc <_printf_i+0x40>)
 80047d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047dc:	08004835 	.word	0x08004835
 80047e0:	08004849 	.word	0x08004849
 80047e4:	080047c5 	.word	0x080047c5
 80047e8:	080047c5 	.word	0x080047c5
 80047ec:	080047c5 	.word	0x080047c5
 80047f0:	080047c5 	.word	0x080047c5
 80047f4:	08004849 	.word	0x08004849
 80047f8:	080047c5 	.word	0x080047c5
 80047fc:	080047c5 	.word	0x080047c5
 8004800:	080047c5 	.word	0x080047c5
 8004804:	080047c5 	.word	0x080047c5
 8004808:	08004947 	.word	0x08004947
 800480c:	08004873 	.word	0x08004873
 8004810:	08004901 	.word	0x08004901
 8004814:	080047c5 	.word	0x080047c5
 8004818:	080047c5 	.word	0x080047c5
 800481c:	08004969 	.word	0x08004969
 8004820:	080047c5 	.word	0x080047c5
 8004824:	08004873 	.word	0x08004873
 8004828:	080047c5 	.word	0x080047c5
 800482c:	080047c5 	.word	0x080047c5
 8004830:	08004909 	.word	0x08004909
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6032      	str	r2, [r6, #0]
 800483c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004844:	2301      	movs	r3, #1
 8004846:	e09c      	b.n	8004982 <_printf_i+0x1e6>
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	1d19      	adds	r1, r3, #4
 800484e:	6031      	str	r1, [r6, #0]
 8004850:	0606      	lsls	r6, r0, #24
 8004852:	d501      	bpl.n	8004858 <_printf_i+0xbc>
 8004854:	681d      	ldr	r5, [r3, #0]
 8004856:	e003      	b.n	8004860 <_printf_i+0xc4>
 8004858:	0645      	lsls	r5, r0, #25
 800485a:	d5fb      	bpl.n	8004854 <_printf_i+0xb8>
 800485c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004860:	2d00      	cmp	r5, #0
 8004862:	da03      	bge.n	800486c <_printf_i+0xd0>
 8004864:	232d      	movs	r3, #45	@ 0x2d
 8004866:	426d      	negs	r5, r5
 8004868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800486c:	4858      	ldr	r0, [pc, #352]	@ (80049d0 <_printf_i+0x234>)
 800486e:	230a      	movs	r3, #10
 8004870:	e011      	b.n	8004896 <_printf_i+0xfa>
 8004872:	6821      	ldr	r1, [r4, #0]
 8004874:	6833      	ldr	r3, [r6, #0]
 8004876:	0608      	lsls	r0, r1, #24
 8004878:	f853 5b04 	ldr.w	r5, [r3], #4
 800487c:	d402      	bmi.n	8004884 <_printf_i+0xe8>
 800487e:	0649      	lsls	r1, r1, #25
 8004880:	bf48      	it	mi
 8004882:	b2ad      	uxthmi	r5, r5
 8004884:	2f6f      	cmp	r7, #111	@ 0x6f
 8004886:	4852      	ldr	r0, [pc, #328]	@ (80049d0 <_printf_i+0x234>)
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	bf14      	ite	ne
 800488c:	230a      	movne	r3, #10
 800488e:	2308      	moveq	r3, #8
 8004890:	2100      	movs	r1, #0
 8004892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004896:	6866      	ldr	r6, [r4, #4]
 8004898:	60a6      	str	r6, [r4, #8]
 800489a:	2e00      	cmp	r6, #0
 800489c:	db05      	blt.n	80048aa <_printf_i+0x10e>
 800489e:	6821      	ldr	r1, [r4, #0]
 80048a0:	432e      	orrs	r6, r5
 80048a2:	f021 0104 	bic.w	r1, r1, #4
 80048a6:	6021      	str	r1, [r4, #0]
 80048a8:	d04b      	beq.n	8004942 <_printf_i+0x1a6>
 80048aa:	4616      	mov	r6, r2
 80048ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80048b0:	fb03 5711 	mls	r7, r3, r1, r5
 80048b4:	5dc7      	ldrb	r7, [r0, r7]
 80048b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048ba:	462f      	mov	r7, r5
 80048bc:	42bb      	cmp	r3, r7
 80048be:	460d      	mov	r5, r1
 80048c0:	d9f4      	bls.n	80048ac <_printf_i+0x110>
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d10b      	bne.n	80048de <_printf_i+0x142>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	07df      	lsls	r7, r3, #31
 80048ca:	d508      	bpl.n	80048de <_printf_i+0x142>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	6861      	ldr	r1, [r4, #4]
 80048d0:	4299      	cmp	r1, r3
 80048d2:	bfde      	ittt	le
 80048d4:	2330      	movle	r3, #48	@ 0x30
 80048d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80048de:	1b92      	subs	r2, r2, r6
 80048e0:	6122      	str	r2, [r4, #16]
 80048e2:	f8cd a000 	str.w	sl, [sp]
 80048e6:	464b      	mov	r3, r9
 80048e8:	aa03      	add	r2, sp, #12
 80048ea:	4621      	mov	r1, r4
 80048ec:	4640      	mov	r0, r8
 80048ee:	f7ff fee7 	bl	80046c0 <_printf_common>
 80048f2:	3001      	adds	r0, #1
 80048f4:	d14a      	bne.n	800498c <_printf_i+0x1f0>
 80048f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048fa:	b004      	add	sp, #16
 80048fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	f043 0320 	orr.w	r3, r3, #32
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	4832      	ldr	r0, [pc, #200]	@ (80049d4 <_printf_i+0x238>)
 800490a:	2778      	movs	r7, #120	@ 0x78
 800490c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	6831      	ldr	r1, [r6, #0]
 8004914:	061f      	lsls	r7, r3, #24
 8004916:	f851 5b04 	ldr.w	r5, [r1], #4
 800491a:	d402      	bmi.n	8004922 <_printf_i+0x186>
 800491c:	065f      	lsls	r7, r3, #25
 800491e:	bf48      	it	mi
 8004920:	b2ad      	uxthmi	r5, r5
 8004922:	6031      	str	r1, [r6, #0]
 8004924:	07d9      	lsls	r1, r3, #31
 8004926:	bf44      	itt	mi
 8004928:	f043 0320 	orrmi.w	r3, r3, #32
 800492c:	6023      	strmi	r3, [r4, #0]
 800492e:	b11d      	cbz	r5, 8004938 <_printf_i+0x19c>
 8004930:	2310      	movs	r3, #16
 8004932:	e7ad      	b.n	8004890 <_printf_i+0xf4>
 8004934:	4826      	ldr	r0, [pc, #152]	@ (80049d0 <_printf_i+0x234>)
 8004936:	e7e9      	b.n	800490c <_printf_i+0x170>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f023 0320 	bic.w	r3, r3, #32
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	e7f6      	b.n	8004930 <_printf_i+0x194>
 8004942:	4616      	mov	r6, r2
 8004944:	e7bd      	b.n	80048c2 <_printf_i+0x126>
 8004946:	6833      	ldr	r3, [r6, #0]
 8004948:	6825      	ldr	r5, [r4, #0]
 800494a:	6961      	ldr	r1, [r4, #20]
 800494c:	1d18      	adds	r0, r3, #4
 800494e:	6030      	str	r0, [r6, #0]
 8004950:	062e      	lsls	r6, r5, #24
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	d501      	bpl.n	800495a <_printf_i+0x1be>
 8004956:	6019      	str	r1, [r3, #0]
 8004958:	e002      	b.n	8004960 <_printf_i+0x1c4>
 800495a:	0668      	lsls	r0, r5, #25
 800495c:	d5fb      	bpl.n	8004956 <_printf_i+0x1ba>
 800495e:	8019      	strh	r1, [r3, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	6123      	str	r3, [r4, #16]
 8004964:	4616      	mov	r6, r2
 8004966:	e7bc      	b.n	80048e2 <_printf_i+0x146>
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	6032      	str	r2, [r6, #0]
 800496e:	681e      	ldr	r6, [r3, #0]
 8004970:	6862      	ldr	r2, [r4, #4]
 8004972:	2100      	movs	r1, #0
 8004974:	4630      	mov	r0, r6
 8004976:	f7fb fc2b 	bl	80001d0 <memchr>
 800497a:	b108      	cbz	r0, 8004980 <_printf_i+0x1e4>
 800497c:	1b80      	subs	r0, r0, r6
 800497e:	6060      	str	r0, [r4, #4]
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	2300      	movs	r3, #0
 8004986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800498a:	e7aa      	b.n	80048e2 <_printf_i+0x146>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	4632      	mov	r2, r6
 8004990:	4649      	mov	r1, r9
 8004992:	4640      	mov	r0, r8
 8004994:	47d0      	blx	sl
 8004996:	3001      	adds	r0, #1
 8004998:	d0ad      	beq.n	80048f6 <_printf_i+0x15a>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	079b      	lsls	r3, r3, #30
 800499e:	d413      	bmi.n	80049c8 <_printf_i+0x22c>
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	4298      	cmp	r0, r3
 80049a6:	bfb8      	it	lt
 80049a8:	4618      	movlt	r0, r3
 80049aa:	e7a6      	b.n	80048fa <_printf_i+0x15e>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4632      	mov	r2, r6
 80049b0:	4649      	mov	r1, r9
 80049b2:	4640      	mov	r0, r8
 80049b4:	47d0      	blx	sl
 80049b6:	3001      	adds	r0, #1
 80049b8:	d09d      	beq.n	80048f6 <_printf_i+0x15a>
 80049ba:	3501      	adds	r5, #1
 80049bc:	68e3      	ldr	r3, [r4, #12]
 80049be:	9903      	ldr	r1, [sp, #12]
 80049c0:	1a5b      	subs	r3, r3, r1
 80049c2:	42ab      	cmp	r3, r5
 80049c4:	dcf2      	bgt.n	80049ac <_printf_i+0x210>
 80049c6:	e7eb      	b.n	80049a0 <_printf_i+0x204>
 80049c8:	2500      	movs	r5, #0
 80049ca:	f104 0619 	add.w	r6, r4, #25
 80049ce:	e7f5      	b.n	80049bc <_printf_i+0x220>
 80049d0:	080089c2 	.word	0x080089c2
 80049d4:	080089d3 	.word	0x080089d3

080049d8 <_scanf_float>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	b087      	sub	sp, #28
 80049de:	4691      	mov	r9, r2
 80049e0:	9303      	str	r3, [sp, #12]
 80049e2:	688b      	ldr	r3, [r1, #8]
 80049e4:	1e5a      	subs	r2, r3, #1
 80049e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80049ea:	bf81      	itttt	hi
 80049ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80049f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80049f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80049f8:	608b      	strhi	r3, [r1, #8]
 80049fa:	680b      	ldr	r3, [r1, #0]
 80049fc:	460a      	mov	r2, r1
 80049fe:	f04f 0500 	mov.w	r5, #0
 8004a02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004a06:	f842 3b1c 	str.w	r3, [r2], #28
 8004a0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004a0e:	4680      	mov	r8, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	bf98      	it	ls
 8004a14:	f04f 0b00 	movls.w	fp, #0
 8004a18:	9201      	str	r2, [sp, #4]
 8004a1a:	4616      	mov	r6, r2
 8004a1c:	46aa      	mov	sl, r5
 8004a1e:	462f      	mov	r7, r5
 8004a20:	9502      	str	r5, [sp, #8]
 8004a22:	68a2      	ldr	r2, [r4, #8]
 8004a24:	b15a      	cbz	r2, 8004a3e <_scanf_float+0x66>
 8004a26:	f8d9 3000 	ldr.w	r3, [r9]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004a2e:	d863      	bhi.n	8004af8 <_scanf_float+0x120>
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d83b      	bhi.n	8004aac <_scanf_float+0xd4>
 8004a34:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004a38:	b2c8      	uxtb	r0, r1
 8004a3a:	280e      	cmp	r0, #14
 8004a3c:	d939      	bls.n	8004ab2 <_scanf_float+0xda>
 8004a3e:	b11f      	cbz	r7, 8004a48 <_scanf_float+0x70>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004a4c:	f1ba 0f01 	cmp.w	sl, #1
 8004a50:	f200 8114 	bhi.w	8004c7c <_scanf_float+0x2a4>
 8004a54:	9b01      	ldr	r3, [sp, #4]
 8004a56:	429e      	cmp	r6, r3
 8004a58:	f200 8105 	bhi.w	8004c66 <_scanf_float+0x28e>
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	b007      	add	sp, #28
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a64:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004a68:	2a0d      	cmp	r2, #13
 8004a6a:	d8e8      	bhi.n	8004a3e <_scanf_float+0x66>
 8004a6c:	a101      	add	r1, pc, #4	@ (adr r1, 8004a74 <_scanf_float+0x9c>)
 8004a6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004bbd 	.word	0x08004bbd
 8004a78:	08004a3f 	.word	0x08004a3f
 8004a7c:	08004a3f 	.word	0x08004a3f
 8004a80:	08004a3f 	.word	0x08004a3f
 8004a84:	08004c19 	.word	0x08004c19
 8004a88:	08004bf3 	.word	0x08004bf3
 8004a8c:	08004a3f 	.word	0x08004a3f
 8004a90:	08004a3f 	.word	0x08004a3f
 8004a94:	08004bcb 	.word	0x08004bcb
 8004a98:	08004a3f 	.word	0x08004a3f
 8004a9c:	08004a3f 	.word	0x08004a3f
 8004aa0:	08004a3f 	.word	0x08004a3f
 8004aa4:	08004a3f 	.word	0x08004a3f
 8004aa8:	08004b87 	.word	0x08004b87
 8004aac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004ab0:	e7da      	b.n	8004a68 <_scanf_float+0x90>
 8004ab2:	290e      	cmp	r1, #14
 8004ab4:	d8c3      	bhi.n	8004a3e <_scanf_float+0x66>
 8004ab6:	a001      	add	r0, pc, #4	@ (adr r0, 8004abc <_scanf_float+0xe4>)
 8004ab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004abc:	08004b77 	.word	0x08004b77
 8004ac0:	08004a3f 	.word	0x08004a3f
 8004ac4:	08004b77 	.word	0x08004b77
 8004ac8:	08004c07 	.word	0x08004c07
 8004acc:	08004a3f 	.word	0x08004a3f
 8004ad0:	08004b19 	.word	0x08004b19
 8004ad4:	08004b5d 	.word	0x08004b5d
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	08004b5d 	.word	0x08004b5d
 8004ae0:	08004b5d 	.word	0x08004b5d
 8004ae4:	08004b5d 	.word	0x08004b5d
 8004ae8:	08004b5d 	.word	0x08004b5d
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	2b6e      	cmp	r3, #110	@ 0x6e
 8004afa:	d809      	bhi.n	8004b10 <_scanf_float+0x138>
 8004afc:	2b60      	cmp	r3, #96	@ 0x60
 8004afe:	d8b1      	bhi.n	8004a64 <_scanf_float+0x8c>
 8004b00:	2b54      	cmp	r3, #84	@ 0x54
 8004b02:	d07b      	beq.n	8004bfc <_scanf_float+0x224>
 8004b04:	2b59      	cmp	r3, #89	@ 0x59
 8004b06:	d19a      	bne.n	8004a3e <_scanf_float+0x66>
 8004b08:	2d07      	cmp	r5, #7
 8004b0a:	d198      	bne.n	8004a3e <_scanf_float+0x66>
 8004b0c:	2508      	movs	r5, #8
 8004b0e:	e02f      	b.n	8004b70 <_scanf_float+0x198>
 8004b10:	2b74      	cmp	r3, #116	@ 0x74
 8004b12:	d073      	beq.n	8004bfc <_scanf_float+0x224>
 8004b14:	2b79      	cmp	r3, #121	@ 0x79
 8004b16:	e7f6      	b.n	8004b06 <_scanf_float+0x12e>
 8004b18:	6821      	ldr	r1, [r4, #0]
 8004b1a:	05c8      	lsls	r0, r1, #23
 8004b1c:	d51e      	bpl.n	8004b5c <_scanf_float+0x184>
 8004b1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004b22:	6021      	str	r1, [r4, #0]
 8004b24:	3701      	adds	r7, #1
 8004b26:	f1bb 0f00 	cmp.w	fp, #0
 8004b2a:	d003      	beq.n	8004b34 <_scanf_float+0x15c>
 8004b2c:	3201      	adds	r2, #1
 8004b2e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004b32:	60a2      	str	r2, [r4, #8]
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	60a3      	str	r3, [r4, #8]
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f8c9 3004 	str.w	r3, [r9, #4]
 8004b4c:	f340 8082 	ble.w	8004c54 <_scanf_float+0x27c>
 8004b50:	f8d9 3000 	ldr.w	r3, [r9]
 8004b54:	3301      	adds	r3, #1
 8004b56:	f8c9 3000 	str.w	r3, [r9]
 8004b5a:	e762      	b.n	8004a22 <_scanf_float+0x4a>
 8004b5c:	eb1a 0105 	adds.w	r1, sl, r5
 8004b60:	f47f af6d 	bne.w	8004a3e <_scanf_float+0x66>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004b6a:	6022      	str	r2, [r4, #0]
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	468a      	mov	sl, r1
 8004b70:	f806 3b01 	strb.w	r3, [r6], #1
 8004b74:	e7de      	b.n	8004b34 <_scanf_float+0x15c>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	0610      	lsls	r0, r2, #24
 8004b7a:	f57f af60 	bpl.w	8004a3e <_scanf_float+0x66>
 8004b7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	e7f4      	b.n	8004b70 <_scanf_float+0x198>
 8004b86:	f1ba 0f00 	cmp.w	sl, #0
 8004b8a:	d10c      	bne.n	8004ba6 <_scanf_float+0x1ce>
 8004b8c:	b977      	cbnz	r7, 8004bac <_scanf_float+0x1d4>
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004b94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004b98:	d108      	bne.n	8004bac <_scanf_float+0x1d4>
 8004b9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b9e:	6022      	str	r2, [r4, #0]
 8004ba0:	f04f 0a01 	mov.w	sl, #1
 8004ba4:	e7e4      	b.n	8004b70 <_scanf_float+0x198>
 8004ba6:	f1ba 0f02 	cmp.w	sl, #2
 8004baa:	d050      	beq.n	8004c4e <_scanf_float+0x276>
 8004bac:	2d01      	cmp	r5, #1
 8004bae:	d002      	beq.n	8004bb6 <_scanf_float+0x1de>
 8004bb0:	2d04      	cmp	r5, #4
 8004bb2:	f47f af44 	bne.w	8004a3e <_scanf_float+0x66>
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	b2ed      	uxtb	r5, r5
 8004bba:	e7d9      	b.n	8004b70 <_scanf_float+0x198>
 8004bbc:	f1ba 0f01 	cmp.w	sl, #1
 8004bc0:	f47f af3d 	bne.w	8004a3e <_scanf_float+0x66>
 8004bc4:	f04f 0a02 	mov.w	sl, #2
 8004bc8:	e7d2      	b.n	8004b70 <_scanf_float+0x198>
 8004bca:	b975      	cbnz	r5, 8004bea <_scanf_float+0x212>
 8004bcc:	2f00      	cmp	r7, #0
 8004bce:	f47f af37 	bne.w	8004a40 <_scanf_float+0x68>
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004bd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004bdc:	f040 8103 	bne.w	8004de6 <_scanf_float+0x40e>
 8004be0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004be4:	6022      	str	r2, [r4, #0]
 8004be6:	2501      	movs	r5, #1
 8004be8:	e7c2      	b.n	8004b70 <_scanf_float+0x198>
 8004bea:	2d03      	cmp	r5, #3
 8004bec:	d0e3      	beq.n	8004bb6 <_scanf_float+0x1de>
 8004bee:	2d05      	cmp	r5, #5
 8004bf0:	e7df      	b.n	8004bb2 <_scanf_float+0x1da>
 8004bf2:	2d02      	cmp	r5, #2
 8004bf4:	f47f af23 	bne.w	8004a3e <_scanf_float+0x66>
 8004bf8:	2503      	movs	r5, #3
 8004bfa:	e7b9      	b.n	8004b70 <_scanf_float+0x198>
 8004bfc:	2d06      	cmp	r5, #6
 8004bfe:	f47f af1e 	bne.w	8004a3e <_scanf_float+0x66>
 8004c02:	2507      	movs	r5, #7
 8004c04:	e7b4      	b.n	8004b70 <_scanf_float+0x198>
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	0591      	lsls	r1, r2, #22
 8004c0a:	f57f af18 	bpl.w	8004a3e <_scanf_float+0x66>
 8004c0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004c12:	6022      	str	r2, [r4, #0]
 8004c14:	9702      	str	r7, [sp, #8]
 8004c16:	e7ab      	b.n	8004b70 <_scanf_float+0x198>
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004c1e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004c22:	d005      	beq.n	8004c30 <_scanf_float+0x258>
 8004c24:	0550      	lsls	r0, r2, #21
 8004c26:	f57f af0a 	bpl.w	8004a3e <_scanf_float+0x66>
 8004c2a:	2f00      	cmp	r7, #0
 8004c2c:	f000 80db 	beq.w	8004de6 <_scanf_float+0x40e>
 8004c30:	0591      	lsls	r1, r2, #22
 8004c32:	bf58      	it	pl
 8004c34:	9902      	ldrpl	r1, [sp, #8]
 8004c36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004c3a:	bf58      	it	pl
 8004c3c:	1a79      	subpl	r1, r7, r1
 8004c3e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004c42:	bf58      	it	pl
 8004c44:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c48:	6022      	str	r2, [r4, #0]
 8004c4a:	2700      	movs	r7, #0
 8004c4c:	e790      	b.n	8004b70 <_scanf_float+0x198>
 8004c4e:	f04f 0a03 	mov.w	sl, #3
 8004c52:	e78d      	b.n	8004b70 <_scanf_float+0x198>
 8004c54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	4798      	blx	r3
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f43f aedf 	beq.w	8004a22 <_scanf_float+0x4a>
 8004c64:	e6eb      	b.n	8004a3e <_scanf_float+0x66>
 8004c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c6e:	464a      	mov	r2, r9
 8004c70:	4640      	mov	r0, r8
 8004c72:	4798      	blx	r3
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	e6eb      	b.n	8004a54 <_scanf_float+0x7c>
 8004c7c:	1e6b      	subs	r3, r5, #1
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d824      	bhi.n	8004ccc <_scanf_float+0x2f4>
 8004c82:	2d02      	cmp	r5, #2
 8004c84:	d836      	bhi.n	8004cf4 <_scanf_float+0x31c>
 8004c86:	9b01      	ldr	r3, [sp, #4]
 8004c88:	429e      	cmp	r6, r3
 8004c8a:	f67f aee7 	bls.w	8004a5c <_scanf_float+0x84>
 8004c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c96:	464a      	mov	r2, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	4798      	blx	r3
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6123      	str	r3, [r4, #16]
 8004ca2:	e7f0      	b.n	8004c86 <_scanf_float+0x2ae>
 8004ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ca8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004cac:	464a      	mov	r2, r9
 8004cae:	4640      	mov	r0, r8
 8004cb0:	4798      	blx	r3
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	6123      	str	r3, [r4, #16]
 8004cb8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004cbc:	fa5f fa8a 	uxtb.w	sl, sl
 8004cc0:	f1ba 0f02 	cmp.w	sl, #2
 8004cc4:	d1ee      	bne.n	8004ca4 <_scanf_float+0x2cc>
 8004cc6:	3d03      	subs	r5, #3
 8004cc8:	b2ed      	uxtb	r5, r5
 8004cca:	1b76      	subs	r6, r6, r5
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	05da      	lsls	r2, r3, #23
 8004cd0:	d530      	bpl.n	8004d34 <_scanf_float+0x35c>
 8004cd2:	055b      	lsls	r3, r3, #21
 8004cd4:	d511      	bpl.n	8004cfa <_scanf_float+0x322>
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	429e      	cmp	r6, r3
 8004cda:	f67f aebf 	bls.w	8004a5c <_scanf_float+0x84>
 8004cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ce2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ce6:	464a      	mov	r2, r9
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4798      	blx	r3
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	e7f0      	b.n	8004cd6 <_scanf_float+0x2fe>
 8004cf4:	46aa      	mov	sl, r5
 8004cf6:	46b3      	mov	fp, r6
 8004cf8:	e7de      	b.n	8004cb8 <_scanf_float+0x2e0>
 8004cfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	2965      	cmp	r1, #101	@ 0x65
 8004d02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004d06:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	d00c      	beq.n	8004d28 <_scanf_float+0x350>
 8004d0e:	2945      	cmp	r1, #69	@ 0x45
 8004d10:	d00a      	beq.n	8004d28 <_scanf_float+0x350>
 8004d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d16:	464a      	mov	r2, r9
 8004d18:	4640      	mov	r0, r8
 8004d1a:	4798      	blx	r3
 8004d1c:	6923      	ldr	r3, [r4, #16]
 8004d1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	1eb5      	subs	r5, r6, #2
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d2c:	464a      	mov	r2, r9
 8004d2e:	4640      	mov	r0, r8
 8004d30:	4798      	blx	r3
 8004d32:	462e      	mov	r6, r5
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	f012 0210 	ands.w	r2, r2, #16
 8004d3a:	d001      	beq.n	8004d40 <_scanf_float+0x368>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e68e      	b.n	8004a5e <_scanf_float+0x86>
 8004d40:	7032      	strb	r2, [r6, #0]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4c:	d125      	bne.n	8004d9a <_scanf_float+0x3c2>
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	429f      	cmp	r7, r3
 8004d52:	d00a      	beq.n	8004d6a <_scanf_float+0x392>
 8004d54:	1bda      	subs	r2, r3, r7
 8004d56:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004d5a:	429e      	cmp	r6, r3
 8004d5c:	bf28      	it	cs
 8004d5e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004d62:	4922      	ldr	r1, [pc, #136]	@ (8004dec <_scanf_float+0x414>)
 8004d64:	4630      	mov	r0, r6
 8004d66:	f000 f9bb 	bl	80050e0 <siprintf>
 8004d6a:	9901      	ldr	r1, [sp, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4640      	mov	r0, r8
 8004d70:	f002 fca6 	bl	80076c0 <_strtod_r>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f011 0f02 	tst.w	r1, #2
 8004d7e:	ec57 6b10 	vmov	r6, r7, d0
 8004d82:	f103 0204 	add.w	r2, r3, #4
 8004d86:	d015      	beq.n	8004db4 <_scanf_float+0x3dc>
 8004d88:	9903      	ldr	r1, [sp, #12]
 8004d8a:	600a      	str	r2, [r1, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	e9c3 6700 	strd	r6, r7, [r3]
 8004d92:	68e3      	ldr	r3, [r4, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60e3      	str	r3, [r4, #12]
 8004d98:	e7d0      	b.n	8004d3c <_scanf_float+0x364>
 8004d9a:	9b04      	ldr	r3, [sp, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0e4      	beq.n	8004d6a <_scanf_float+0x392>
 8004da0:	9905      	ldr	r1, [sp, #20]
 8004da2:	230a      	movs	r3, #10
 8004da4:	3101      	adds	r1, #1
 8004da6:	4640      	mov	r0, r8
 8004da8:	f002 fd0a 	bl	80077c0 <_strtol_r>
 8004dac:	9b04      	ldr	r3, [sp, #16]
 8004dae:	9e05      	ldr	r6, [sp, #20]
 8004db0:	1ac2      	subs	r2, r0, r3
 8004db2:	e7d0      	b.n	8004d56 <_scanf_float+0x37e>
 8004db4:	f011 0f04 	tst.w	r1, #4
 8004db8:	9903      	ldr	r1, [sp, #12]
 8004dba:	600a      	str	r2, [r1, #0]
 8004dbc:	d1e6      	bne.n	8004d8c <_scanf_float+0x3b4>
 8004dbe:	681d      	ldr	r5, [r3, #0]
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f7fb feb0 	bl	8000b2c <__aeabi_dcmpun>
 8004dcc:	b128      	cbz	r0, 8004dda <_scanf_float+0x402>
 8004dce:	4808      	ldr	r0, [pc, #32]	@ (8004df0 <_scanf_float+0x418>)
 8004dd0:	f000 fa6c 	bl	80052ac <nanf>
 8004dd4:	ed85 0a00 	vstr	s0, [r5]
 8004dd8:	e7db      	b.n	8004d92 <_scanf_float+0x3ba>
 8004dda:	4630      	mov	r0, r6
 8004ddc:	4639      	mov	r1, r7
 8004dde:	f7fb ff03 	bl	8000be8 <__aeabi_d2f>
 8004de2:	6028      	str	r0, [r5, #0]
 8004de4:	e7d5      	b.n	8004d92 <_scanf_float+0x3ba>
 8004de6:	2700      	movs	r7, #0
 8004de8:	e62e      	b.n	8004a48 <_scanf_float+0x70>
 8004dea:	bf00      	nop
 8004dec:	080089e4 	.word	0x080089e4
 8004df0:	08008b25 	.word	0x08008b25

08004df4 <std>:
 8004df4:	2300      	movs	r3, #0
 8004df6:	b510      	push	{r4, lr}
 8004df8:	4604      	mov	r4, r0
 8004dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e02:	6083      	str	r3, [r0, #8]
 8004e04:	8181      	strh	r1, [r0, #12]
 8004e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e08:	81c2      	strh	r2, [r0, #14]
 8004e0a:	6183      	str	r3, [r0, #24]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2208      	movs	r2, #8
 8004e10:	305c      	adds	r0, #92	@ 0x5c
 8004e12:	f000 f9ca 	bl	80051aa <memset>
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <std+0x58>)
 8004e18:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <std+0x5c>)
 8004e1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <std+0x60>)
 8004e20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e22:	4b0d      	ldr	r3, [pc, #52]	@ (8004e58 <std+0x64>)
 8004e24:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e26:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <std+0x68>)
 8004e28:	6224      	str	r4, [r4, #32]
 8004e2a:	429c      	cmp	r4, r3
 8004e2c:	d006      	beq.n	8004e3c <std+0x48>
 8004e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e32:	4294      	cmp	r4, r2
 8004e34:	d002      	beq.n	8004e3c <std+0x48>
 8004e36:	33d0      	adds	r3, #208	@ 0xd0
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	d105      	bne.n	8004e48 <std+0x54>
 8004e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f000 ba2e 	b.w	80052a4 <__retarget_lock_init_recursive>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08005125 	.word	0x08005125
 8004e50:	08005147 	.word	0x08005147
 8004e54:	0800517f 	.word	0x0800517f
 8004e58:	080051a3 	.word	0x080051a3
 8004e5c:	200002cc 	.word	0x200002cc

08004e60 <stdio_exit_handler>:
 8004e60:	4a02      	ldr	r2, [pc, #8]	@ (8004e6c <stdio_exit_handler+0xc>)
 8004e62:	4903      	ldr	r1, [pc, #12]	@ (8004e70 <stdio_exit_handler+0x10>)
 8004e64:	4803      	ldr	r0, [pc, #12]	@ (8004e74 <stdio_exit_handler+0x14>)
 8004e66:	f000 b869 	b.w	8004f3c <_fwalk_sglue>
 8004e6a:	bf00      	nop
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	08007b7d 	.word	0x08007b7d
 8004e74:	2000001c 	.word	0x2000001c

08004e78 <cleanup_stdio>:
 8004e78:	6841      	ldr	r1, [r0, #4]
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <cleanup_stdio+0x34>)
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	d001      	beq.n	8004e88 <cleanup_stdio+0x10>
 8004e84:	f002 fe7a 	bl	8007b7c <_fflush_r>
 8004e88:	68a1      	ldr	r1, [r4, #8]
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <cleanup_stdio+0x38>)
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d002      	beq.n	8004e96 <cleanup_stdio+0x1e>
 8004e90:	4620      	mov	r0, r4
 8004e92:	f002 fe73 	bl	8007b7c <_fflush_r>
 8004e96:	68e1      	ldr	r1, [r4, #12]
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <cleanup_stdio+0x3c>)
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d004      	beq.n	8004ea8 <cleanup_stdio+0x30>
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea4:	f002 be6a 	b.w	8007b7c <_fflush_r>
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	200002cc 	.word	0x200002cc
 8004eb0:	20000334 	.word	0x20000334
 8004eb4:	2000039c 	.word	0x2000039c

08004eb8 <global_stdio_init.part.0>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <global_stdio_init.part.0+0x30>)
 8004ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8004eec <global_stdio_init.part.0+0x34>)
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef0 <global_stdio_init.part.0+0x38>)
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	f7ff ff94 	bl	8004df4 <std>
 8004ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	2109      	movs	r1, #9
 8004ed4:	f7ff ff8e 	bl	8004df4 <std>
 8004ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004edc:	2202      	movs	r2, #2
 8004ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee2:	2112      	movs	r1, #18
 8004ee4:	f7ff bf86 	b.w	8004df4 <std>
 8004ee8:	20000404 	.word	0x20000404
 8004eec:	200002cc 	.word	0x200002cc
 8004ef0:	08004e61 	.word	0x08004e61

08004ef4 <__sfp_lock_acquire>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	@ (8004efc <__sfp_lock_acquire+0x8>)
 8004ef6:	f000 b9d6 	b.w	80052a6 <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	2000040d 	.word	0x2000040d

08004f00 <__sfp_lock_release>:
 8004f00:	4801      	ldr	r0, [pc, #4]	@ (8004f08 <__sfp_lock_release+0x8>)
 8004f02:	f000 b9d1 	b.w	80052a8 <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	2000040d 	.word	0x2000040d

08004f0c <__sinit>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4604      	mov	r4, r0
 8004f10:	f7ff fff0 	bl	8004ef4 <__sfp_lock_acquire>
 8004f14:	6a23      	ldr	r3, [r4, #32]
 8004f16:	b11b      	cbz	r3, 8004f20 <__sinit+0x14>
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	f7ff bff0 	b.w	8004f00 <__sfp_lock_release>
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <__sinit+0x28>)
 8004f22:	6223      	str	r3, [r4, #32]
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <__sinit+0x2c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f5      	bne.n	8004f18 <__sinit+0xc>
 8004f2c:	f7ff ffc4 	bl	8004eb8 <global_stdio_init.part.0>
 8004f30:	e7f2      	b.n	8004f18 <__sinit+0xc>
 8004f32:	bf00      	nop
 8004f34:	08004e79 	.word	0x08004e79
 8004f38:	20000404 	.word	0x20000404

08004f3c <_fwalk_sglue>:
 8004f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f40:	4607      	mov	r7, r0
 8004f42:	4688      	mov	r8, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	2600      	movs	r6, #0
 8004f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f50:	d505      	bpl.n	8004f5e <_fwalk_sglue+0x22>
 8004f52:	6824      	ldr	r4, [r4, #0]
 8004f54:	2c00      	cmp	r4, #0
 8004f56:	d1f7      	bne.n	8004f48 <_fwalk_sglue+0xc>
 8004f58:	4630      	mov	r0, r6
 8004f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d907      	bls.n	8004f74 <_fwalk_sglue+0x38>
 8004f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	d003      	beq.n	8004f74 <_fwalk_sglue+0x38>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	4306      	orrs	r6, r0
 8004f74:	3568      	adds	r5, #104	@ 0x68
 8004f76:	e7e9      	b.n	8004f4c <_fwalk_sglue+0x10>

08004f78 <setvbuf>:
 8004f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	461d      	mov	r5, r3
 8004f7e:	4b57      	ldr	r3, [pc, #348]	@ (80050dc <setvbuf+0x164>)
 8004f80:	681f      	ldr	r7, [r3, #0]
 8004f82:	4604      	mov	r4, r0
 8004f84:	460e      	mov	r6, r1
 8004f86:	4690      	mov	r8, r2
 8004f88:	b127      	cbz	r7, 8004f94 <setvbuf+0x1c>
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	b913      	cbnz	r3, 8004f94 <setvbuf+0x1c>
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f7ff ffbc 	bl	8004f0c <__sinit>
 8004f94:	f1b8 0f02 	cmp.w	r8, #2
 8004f98:	d006      	beq.n	8004fa8 <setvbuf+0x30>
 8004f9a:	f1b8 0f01 	cmp.w	r8, #1
 8004f9e:	f200 809a 	bhi.w	80050d6 <setvbuf+0x15e>
 8004fa2:	2d00      	cmp	r5, #0
 8004fa4:	f2c0 8097 	blt.w	80050d6 <setvbuf+0x15e>
 8004fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004faa:	07d9      	lsls	r1, r3, #31
 8004fac:	d405      	bmi.n	8004fba <setvbuf+0x42>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	059a      	lsls	r2, r3, #22
 8004fb2:	d402      	bmi.n	8004fba <setvbuf+0x42>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fb6:	f000 f976 	bl	80052a6 <__retarget_lock_acquire_recursive>
 8004fba:	4621      	mov	r1, r4
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	f002 fddd 	bl	8007b7c <_fflush_r>
 8004fc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fc4:	b141      	cbz	r1, 8004fd8 <setvbuf+0x60>
 8004fc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	d002      	beq.n	8004fd4 <setvbuf+0x5c>
 8004fce:	4638      	mov	r0, r7
 8004fd0:	f000 ffca 	bl	8005f68 <_free_r>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61a3      	str	r3, [r4, #24]
 8004fdc:	6063      	str	r3, [r4, #4]
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	061b      	lsls	r3, r3, #24
 8004fe2:	d503      	bpl.n	8004fec <setvbuf+0x74>
 8004fe4:	6921      	ldr	r1, [r4, #16]
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f000 ffbe 	bl	8005f68 <_free_r>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	f1b8 0f02 	cmp.w	r8, #2
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	d061      	beq.n	80050c2 <setvbuf+0x14a>
 8004ffe:	ab01      	add	r3, sp, #4
 8005000:	466a      	mov	r2, sp
 8005002:	4621      	mov	r1, r4
 8005004:	4638      	mov	r0, r7
 8005006:	f002 fde1 	bl	8007bcc <__swhatbuf_r>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	4318      	orrs	r0, r3
 800500e:	81a0      	strh	r0, [r4, #12]
 8005010:	bb2d      	cbnz	r5, 800505e <setvbuf+0xe6>
 8005012:	9d00      	ldr	r5, [sp, #0]
 8005014:	4628      	mov	r0, r5
 8005016:	f000 fff1 	bl	8005ffc <malloc>
 800501a:	4606      	mov	r6, r0
 800501c:	2800      	cmp	r0, #0
 800501e:	d152      	bne.n	80050c6 <setvbuf+0x14e>
 8005020:	f8dd 9000 	ldr.w	r9, [sp]
 8005024:	45a9      	cmp	r9, r5
 8005026:	d140      	bne.n	80050aa <setvbuf+0x132>
 8005028:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800502c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005030:	f043 0202 	orr.w	r2, r3, #2
 8005034:	81a2      	strh	r2, [r4, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	60a2      	str	r2, [r4, #8]
 800503a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800503e:	6022      	str	r2, [r4, #0]
 8005040:	6122      	str	r2, [r4, #16]
 8005042:	2201      	movs	r2, #1
 8005044:	6162      	str	r2, [r4, #20]
 8005046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005048:	07d6      	lsls	r6, r2, #31
 800504a:	d404      	bmi.n	8005056 <setvbuf+0xde>
 800504c:	0598      	lsls	r0, r3, #22
 800504e:	d402      	bmi.n	8005056 <setvbuf+0xde>
 8005050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005052:	f000 f929 	bl	80052a8 <__retarget_lock_release_recursive>
 8005056:	4628      	mov	r0, r5
 8005058:	b003      	add	sp, #12
 800505a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800505e:	2e00      	cmp	r6, #0
 8005060:	d0d8      	beq.n	8005014 <setvbuf+0x9c>
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	b913      	cbnz	r3, 800506c <setvbuf+0xf4>
 8005066:	4638      	mov	r0, r7
 8005068:	f7ff ff50 	bl	8004f0c <__sinit>
 800506c:	f1b8 0f01 	cmp.w	r8, #1
 8005070:	bf08      	it	eq
 8005072:	89a3      	ldrheq	r3, [r4, #12]
 8005074:	6026      	str	r6, [r4, #0]
 8005076:	bf04      	itt	eq
 8005078:	f043 0301 	orreq.w	r3, r3, #1
 800507c:	81a3      	strheq	r3, [r4, #12]
 800507e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005082:	f013 0208 	ands.w	r2, r3, #8
 8005086:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800508a:	d01e      	beq.n	80050ca <setvbuf+0x152>
 800508c:	07d9      	lsls	r1, r3, #31
 800508e:	bf41      	itttt	mi
 8005090:	2200      	movmi	r2, #0
 8005092:	426d      	negmi	r5, r5
 8005094:	60a2      	strmi	r2, [r4, #8]
 8005096:	61a5      	strmi	r5, [r4, #24]
 8005098:	bf58      	it	pl
 800509a:	60a5      	strpl	r5, [r4, #8]
 800509c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800509e:	07d2      	lsls	r2, r2, #31
 80050a0:	d401      	bmi.n	80050a6 <setvbuf+0x12e>
 80050a2:	059b      	lsls	r3, r3, #22
 80050a4:	d513      	bpl.n	80050ce <setvbuf+0x156>
 80050a6:	2500      	movs	r5, #0
 80050a8:	e7d5      	b.n	8005056 <setvbuf+0xde>
 80050aa:	4648      	mov	r0, r9
 80050ac:	f000 ffa6 	bl	8005ffc <malloc>
 80050b0:	4606      	mov	r6, r0
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d0b8      	beq.n	8005028 <setvbuf+0xb0>
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050bc:	81a3      	strh	r3, [r4, #12]
 80050be:	464d      	mov	r5, r9
 80050c0:	e7cf      	b.n	8005062 <setvbuf+0xea>
 80050c2:	2500      	movs	r5, #0
 80050c4:	e7b2      	b.n	800502c <setvbuf+0xb4>
 80050c6:	46a9      	mov	r9, r5
 80050c8:	e7f5      	b.n	80050b6 <setvbuf+0x13e>
 80050ca:	60a2      	str	r2, [r4, #8]
 80050cc:	e7e6      	b.n	800509c <setvbuf+0x124>
 80050ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050d0:	f000 f8ea 	bl	80052a8 <__retarget_lock_release_recursive>
 80050d4:	e7e7      	b.n	80050a6 <setvbuf+0x12e>
 80050d6:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80050da:	e7bc      	b.n	8005056 <setvbuf+0xde>
 80050dc:	20000018 	.word	0x20000018

080050e0 <siprintf>:
 80050e0:	b40e      	push	{r1, r2, r3}
 80050e2:	b510      	push	{r4, lr}
 80050e4:	b09d      	sub	sp, #116	@ 0x74
 80050e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050e8:	9002      	str	r0, [sp, #8]
 80050ea:	9006      	str	r0, [sp, #24]
 80050ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050f0:	480a      	ldr	r0, [pc, #40]	@ (800511c <siprintf+0x3c>)
 80050f2:	9107      	str	r1, [sp, #28]
 80050f4:	9104      	str	r1, [sp, #16]
 80050f6:	490a      	ldr	r1, [pc, #40]	@ (8005120 <siprintf+0x40>)
 80050f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fc:	9105      	str	r1, [sp, #20]
 80050fe:	2400      	movs	r4, #0
 8005100:	a902      	add	r1, sp, #8
 8005102:	6800      	ldr	r0, [r0, #0]
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005108:	f002 fbb8 	bl	800787c <_svfiprintf_r>
 800510c:	9b02      	ldr	r3, [sp, #8]
 800510e:	701c      	strb	r4, [r3, #0]
 8005110:	b01d      	add	sp, #116	@ 0x74
 8005112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005116:	b003      	add	sp, #12
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000018 	.word	0x20000018
 8005120:	ffff0208 	.word	0xffff0208

08005124 <__sread>:
 8005124:	b510      	push	{r4, lr}
 8005126:	460c      	mov	r4, r1
 8005128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512c:	f000 f86c 	bl	8005208 <_read_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	bfab      	itete	ge
 8005134:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005136:	89a3      	ldrhlt	r3, [r4, #12]
 8005138:	181b      	addge	r3, r3, r0
 800513a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800513e:	bfac      	ite	ge
 8005140:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005142:	81a3      	strhlt	r3, [r4, #12]
 8005144:	bd10      	pop	{r4, pc}

08005146 <__swrite>:
 8005146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514a:	461f      	mov	r7, r3
 800514c:	898b      	ldrh	r3, [r1, #12]
 800514e:	05db      	lsls	r3, r3, #23
 8005150:	4605      	mov	r5, r0
 8005152:	460c      	mov	r4, r1
 8005154:	4616      	mov	r6, r2
 8005156:	d505      	bpl.n	8005164 <__swrite+0x1e>
 8005158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800515c:	2302      	movs	r3, #2
 800515e:	2200      	movs	r2, #0
 8005160:	f000 f840 	bl	80051e4 <_lseek_r>
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800516a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800516e:	81a3      	strh	r3, [r4, #12]
 8005170:	4632      	mov	r2, r6
 8005172:	463b      	mov	r3, r7
 8005174:	4628      	mov	r0, r5
 8005176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800517a:	f000 b857 	b.w	800522c <_write_r>

0800517e <__sseek>:
 800517e:	b510      	push	{r4, lr}
 8005180:	460c      	mov	r4, r1
 8005182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005186:	f000 f82d 	bl	80051e4 <_lseek_r>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	bf15      	itete	ne
 8005190:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005192:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005196:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800519a:	81a3      	strheq	r3, [r4, #12]
 800519c:	bf18      	it	ne
 800519e:	81a3      	strhne	r3, [r4, #12]
 80051a0:	bd10      	pop	{r4, pc}

080051a2 <__sclose>:
 80051a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a6:	f000 b80d 	b.w	80051c4 <_close_r>

080051aa <memset>:
 80051aa:	4402      	add	r2, r0
 80051ac:	4603      	mov	r3, r0
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d100      	bne.n	80051b4 <memset+0xa>
 80051b2:	4770      	bx	lr
 80051b4:	f803 1b01 	strb.w	r1, [r3], #1
 80051b8:	e7f9      	b.n	80051ae <memset+0x4>
	...

080051bc <_localeconv_r>:
 80051bc:	4800      	ldr	r0, [pc, #0]	@ (80051c0 <_localeconv_r+0x4>)
 80051be:	4770      	bx	lr
 80051c0:	20000158 	.word	0x20000158

080051c4 <_close_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d06      	ldr	r5, [pc, #24]	@ (80051e0 <_close_r+0x1c>)
 80051c8:	2300      	movs	r3, #0
 80051ca:	4604      	mov	r4, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	f7fc f888 	bl	80012e4 <_close>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_close_r+0x1a>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_close_r+0x1a>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	20000408 	.word	0x20000408

080051e4 <_lseek_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d07      	ldr	r5, [pc, #28]	@ (8005204 <_lseek_r+0x20>)
 80051e8:	4604      	mov	r4, r0
 80051ea:	4608      	mov	r0, r1
 80051ec:	4611      	mov	r1, r2
 80051ee:	2200      	movs	r2, #0
 80051f0:	602a      	str	r2, [r5, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f7fc f89d 	bl	8001332 <_lseek>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_lseek_r+0x1e>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_lseek_r+0x1e>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20000408 	.word	0x20000408

08005208 <_read_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	@ (8005228 <_read_r+0x20>)
 800520c:	4604      	mov	r4, r0
 800520e:	4608      	mov	r0, r1
 8005210:	4611      	mov	r1, r2
 8005212:	2200      	movs	r2, #0
 8005214:	602a      	str	r2, [r5, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	f7fc f82b 	bl	8001272 <_read>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_read_r+0x1e>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_read_r+0x1e>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	20000408 	.word	0x20000408

0800522c <_write_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d07      	ldr	r5, [pc, #28]	@ (800524c <_write_r+0x20>)
 8005230:	4604      	mov	r4, r0
 8005232:	4608      	mov	r0, r1
 8005234:	4611      	mov	r1, r2
 8005236:	2200      	movs	r2, #0
 8005238:	602a      	str	r2, [r5, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f7fc f836 	bl	80012ac <_write>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_write_r+0x1e>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_write_r+0x1e>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20000408 	.word	0x20000408

08005250 <__errno>:
 8005250:	4b01      	ldr	r3, [pc, #4]	@ (8005258 <__errno+0x8>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000018 	.word	0x20000018

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4d0d      	ldr	r5, [pc, #52]	@ (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	@ (8005298 <__libc_init_array+0x3c>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2600      	movs	r6, #0
 8005268:	42a6      	cmp	r6, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4d0b      	ldr	r5, [pc, #44]	@ (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	@ (80052a0 <__libc_init_array+0x44>)
 8005270:	f003 fb74 	bl	800895c <_init>
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2600      	movs	r6, #0
 800527a:	42a6      	cmp	r6, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f855 3b04 	ldr.w	r3, [r5], #4
 8005284:	4798      	blx	r3
 8005286:	3601      	adds	r6, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f855 3b04 	ldr.w	r3, [r5], #4
 800528e:	4798      	blx	r3
 8005290:	3601      	adds	r6, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	08008de4 	.word	0x08008de4
 8005298:	08008de4 	.word	0x08008de4
 800529c:	08008de4 	.word	0x08008de4
 80052a0:	08008de8 	.word	0x08008de8

080052a4 <__retarget_lock_init_recursive>:
 80052a4:	4770      	bx	lr

080052a6 <__retarget_lock_acquire_recursive>:
 80052a6:	4770      	bx	lr

080052a8 <__retarget_lock_release_recursive>:
 80052a8:	4770      	bx	lr
	...

080052ac <nanf>:
 80052ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80052b4 <nanf+0x8>
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	7fc00000 	.word	0x7fc00000

080052b8 <quorem>:
 80052b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	6903      	ldr	r3, [r0, #16]
 80052be:	690c      	ldr	r4, [r1, #16]
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	4607      	mov	r7, r0
 80052c4:	db7e      	blt.n	80053c4 <quorem+0x10c>
 80052c6:	3c01      	subs	r4, #1
 80052c8:	f101 0814 	add.w	r8, r1, #20
 80052cc:	00a3      	lsls	r3, r4, #2
 80052ce:	f100 0514 	add.w	r5, r0, #20
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052e2:	3301      	adds	r3, #1
 80052e4:	429a      	cmp	r2, r3
 80052e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80052ee:	d32e      	bcc.n	800534e <quorem+0x96>
 80052f0:	f04f 0a00 	mov.w	sl, #0
 80052f4:	46c4      	mov	ip, r8
 80052f6:	46ae      	mov	lr, r5
 80052f8:	46d3      	mov	fp, sl
 80052fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052fe:	b298      	uxth	r0, r3
 8005300:	fb06 a000 	mla	r0, r6, r0, sl
 8005304:	0c02      	lsrs	r2, r0, #16
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	fb06 2303 	mla	r3, r6, r3, r2
 800530c:	f8de 2000 	ldr.w	r2, [lr]
 8005310:	b280      	uxth	r0, r0
 8005312:	b292      	uxth	r2, r2
 8005314:	1a12      	subs	r2, r2, r0
 8005316:	445a      	add	r2, fp
 8005318:	f8de 0000 	ldr.w	r0, [lr]
 800531c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005320:	b29b      	uxth	r3, r3
 8005322:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005326:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800532a:	b292      	uxth	r2, r2
 800532c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005330:	45e1      	cmp	r9, ip
 8005332:	f84e 2b04 	str.w	r2, [lr], #4
 8005336:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800533a:	d2de      	bcs.n	80052fa <quorem+0x42>
 800533c:	9b00      	ldr	r3, [sp, #0]
 800533e:	58eb      	ldr	r3, [r5, r3]
 8005340:	b92b      	cbnz	r3, 800534e <quorem+0x96>
 8005342:	9b01      	ldr	r3, [sp, #4]
 8005344:	3b04      	subs	r3, #4
 8005346:	429d      	cmp	r5, r3
 8005348:	461a      	mov	r2, r3
 800534a:	d32f      	bcc.n	80053ac <quorem+0xf4>
 800534c:	613c      	str	r4, [r7, #16]
 800534e:	4638      	mov	r0, r7
 8005350:	f001 f9c6 	bl	80066e0 <__mcmp>
 8005354:	2800      	cmp	r0, #0
 8005356:	db25      	blt.n	80053a4 <quorem+0xec>
 8005358:	4629      	mov	r1, r5
 800535a:	2000      	movs	r0, #0
 800535c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005360:	f8d1 c000 	ldr.w	ip, [r1]
 8005364:	fa1f fe82 	uxth.w	lr, r2
 8005368:	fa1f f38c 	uxth.w	r3, ip
 800536c:	eba3 030e 	sub.w	r3, r3, lr
 8005370:	4403      	add	r3, r0
 8005372:	0c12      	lsrs	r2, r2, #16
 8005374:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005378:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800537c:	b29b      	uxth	r3, r3
 800537e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005382:	45c1      	cmp	r9, r8
 8005384:	f841 3b04 	str.w	r3, [r1], #4
 8005388:	ea4f 4022 	mov.w	r0, r2, asr #16
 800538c:	d2e6      	bcs.n	800535c <quorem+0xa4>
 800538e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005396:	b922      	cbnz	r2, 80053a2 <quorem+0xea>
 8005398:	3b04      	subs	r3, #4
 800539a:	429d      	cmp	r5, r3
 800539c:	461a      	mov	r2, r3
 800539e:	d30b      	bcc.n	80053b8 <quorem+0x100>
 80053a0:	613c      	str	r4, [r7, #16]
 80053a2:	3601      	adds	r6, #1
 80053a4:	4630      	mov	r0, r6
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	3b04      	subs	r3, #4
 80053b0:	2a00      	cmp	r2, #0
 80053b2:	d1cb      	bne.n	800534c <quorem+0x94>
 80053b4:	3c01      	subs	r4, #1
 80053b6:	e7c6      	b.n	8005346 <quorem+0x8e>
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	3b04      	subs	r3, #4
 80053bc:	2a00      	cmp	r2, #0
 80053be:	d1ef      	bne.n	80053a0 <quorem+0xe8>
 80053c0:	3c01      	subs	r4, #1
 80053c2:	e7ea      	b.n	800539a <quorem+0xe2>
 80053c4:	2000      	movs	r0, #0
 80053c6:	e7ee      	b.n	80053a6 <quorem+0xee>

080053c8 <_dtoa_r>:
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	69c7      	ldr	r7, [r0, #28]
 80053ce:	b097      	sub	sp, #92	@ 0x5c
 80053d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80053d4:	ec55 4b10 	vmov	r4, r5, d0
 80053d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80053da:	9107      	str	r1, [sp, #28]
 80053dc:	4681      	mov	r9, r0
 80053de:	920c      	str	r2, [sp, #48]	@ 0x30
 80053e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80053e2:	b97f      	cbnz	r7, 8005404 <_dtoa_r+0x3c>
 80053e4:	2010      	movs	r0, #16
 80053e6:	f000 fe09 	bl	8005ffc <malloc>
 80053ea:	4602      	mov	r2, r0
 80053ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80053f0:	b920      	cbnz	r0, 80053fc <_dtoa_r+0x34>
 80053f2:	4ba9      	ldr	r3, [pc, #676]	@ (8005698 <_dtoa_r+0x2d0>)
 80053f4:	21ef      	movs	r1, #239	@ 0xef
 80053f6:	48a9      	ldr	r0, [pc, #676]	@ (800569c <_dtoa_r+0x2d4>)
 80053f8:	f002 fcbe 	bl	8007d78 <__assert_func>
 80053fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005400:	6007      	str	r7, [r0, #0]
 8005402:	60c7      	str	r7, [r0, #12]
 8005404:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	b159      	cbz	r1, 8005424 <_dtoa_r+0x5c>
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	604a      	str	r2, [r1, #4]
 8005410:	2301      	movs	r3, #1
 8005412:	4093      	lsls	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
 8005416:	4648      	mov	r0, r9
 8005418:	f000 fee6 	bl	80061e8 <_Bfree>
 800541c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	1e2b      	subs	r3, r5, #0
 8005426:	bfb9      	ittee	lt
 8005428:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800542c:	9305      	strlt	r3, [sp, #20]
 800542e:	2300      	movge	r3, #0
 8005430:	6033      	strge	r3, [r6, #0]
 8005432:	9f05      	ldr	r7, [sp, #20]
 8005434:	4b9a      	ldr	r3, [pc, #616]	@ (80056a0 <_dtoa_r+0x2d8>)
 8005436:	bfbc      	itt	lt
 8005438:	2201      	movlt	r2, #1
 800543a:	6032      	strlt	r2, [r6, #0]
 800543c:	43bb      	bics	r3, r7
 800543e:	d112      	bne.n	8005466 <_dtoa_r+0x9e>
 8005440:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005442:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800544c:	4323      	orrs	r3, r4
 800544e:	f000 855a 	beq.w	8005f06 <_dtoa_r+0xb3e>
 8005452:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005454:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80056b4 <_dtoa_r+0x2ec>
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 855c 	beq.w	8005f16 <_dtoa_r+0xb4e>
 800545e:	f10a 0303 	add.w	r3, sl, #3
 8005462:	f000 bd56 	b.w	8005f12 <_dtoa_r+0xb4a>
 8005466:	ed9d 7b04 	vldr	d7, [sp, #16]
 800546a:	2200      	movs	r2, #0
 800546c:	ec51 0b17 	vmov	r0, r1, d7
 8005470:	2300      	movs	r3, #0
 8005472:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005476:	f7fb fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800547a:	4680      	mov	r8, r0
 800547c:	b158      	cbz	r0, 8005496 <_dtoa_r+0xce>
 800547e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005480:	2301      	movs	r3, #1
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005486:	b113      	cbz	r3, 800548e <_dtoa_r+0xc6>
 8005488:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800548a:	4b86      	ldr	r3, [pc, #536]	@ (80056a4 <_dtoa_r+0x2dc>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80056b8 <_dtoa_r+0x2f0>
 8005492:	f000 bd40 	b.w	8005f16 <_dtoa_r+0xb4e>
 8005496:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800549a:	aa14      	add	r2, sp, #80	@ 0x50
 800549c:	a915      	add	r1, sp, #84	@ 0x54
 800549e:	4648      	mov	r0, r9
 80054a0:	f001 fa3e 	bl	8006920 <__d2b>
 80054a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054a8:	9002      	str	r0, [sp, #8]
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	d078      	beq.n	80055a0 <_dtoa_r+0x1d8>
 80054ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80054b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054c8:	4619      	mov	r1, r3
 80054ca:	2200      	movs	r2, #0
 80054cc:	4b76      	ldr	r3, [pc, #472]	@ (80056a8 <_dtoa_r+0x2e0>)
 80054ce:	f7fa fedb 	bl	8000288 <__aeabi_dsub>
 80054d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005680 <_dtoa_r+0x2b8>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fb f88e 	bl	80005f8 <__aeabi_dmul>
 80054dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005688 <_dtoa_r+0x2c0>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f7fa fed3 	bl	800028c <__adddf3>
 80054e6:	4604      	mov	r4, r0
 80054e8:	4630      	mov	r0, r6
 80054ea:	460d      	mov	r5, r1
 80054ec:	f7fb f81a 	bl	8000524 <__aeabi_i2d>
 80054f0:	a367      	add	r3, pc, #412	@ (adr r3, 8005690 <_dtoa_r+0x2c8>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fb f87f 	bl	80005f8 <__aeabi_dmul>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	f7fa fec3 	bl	800028c <__adddf3>
 8005506:	4604      	mov	r4, r0
 8005508:	460d      	mov	r5, r1
 800550a:	f7fb fb25 	bl	8000b58 <__aeabi_d2iz>
 800550e:	2200      	movs	r2, #0
 8005510:	4607      	mov	r7, r0
 8005512:	2300      	movs	r3, #0
 8005514:	4620      	mov	r0, r4
 8005516:	4629      	mov	r1, r5
 8005518:	f7fb fae0 	bl	8000adc <__aeabi_dcmplt>
 800551c:	b140      	cbz	r0, 8005530 <_dtoa_r+0x168>
 800551e:	4638      	mov	r0, r7
 8005520:	f7fb f800 	bl	8000524 <__aeabi_i2d>
 8005524:	4622      	mov	r2, r4
 8005526:	462b      	mov	r3, r5
 8005528:	f7fb face 	bl	8000ac8 <__aeabi_dcmpeq>
 800552c:	b900      	cbnz	r0, 8005530 <_dtoa_r+0x168>
 800552e:	3f01      	subs	r7, #1
 8005530:	2f16      	cmp	r7, #22
 8005532:	d852      	bhi.n	80055da <_dtoa_r+0x212>
 8005534:	4b5d      	ldr	r3, [pc, #372]	@ (80056ac <_dtoa_r+0x2e4>)
 8005536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005542:	f7fb facb 	bl	8000adc <__aeabi_dcmplt>
 8005546:	2800      	cmp	r0, #0
 8005548:	d049      	beq.n	80055de <_dtoa_r+0x216>
 800554a:	3f01      	subs	r7, #1
 800554c:	2300      	movs	r3, #0
 800554e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005550:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005552:	1b9b      	subs	r3, r3, r6
 8005554:	1e5a      	subs	r2, r3, #1
 8005556:	bf45      	ittet	mi
 8005558:	f1c3 0301 	rsbmi	r3, r3, #1
 800555c:	9300      	strmi	r3, [sp, #0]
 800555e:	2300      	movpl	r3, #0
 8005560:	2300      	movmi	r3, #0
 8005562:	9206      	str	r2, [sp, #24]
 8005564:	bf54      	ite	pl
 8005566:	9300      	strpl	r3, [sp, #0]
 8005568:	9306      	strmi	r3, [sp, #24]
 800556a:	2f00      	cmp	r7, #0
 800556c:	db39      	blt.n	80055e2 <_dtoa_r+0x21a>
 800556e:	9b06      	ldr	r3, [sp, #24]
 8005570:	970d      	str	r7, [sp, #52]	@ 0x34
 8005572:	443b      	add	r3, r7
 8005574:	9306      	str	r3, [sp, #24]
 8005576:	2300      	movs	r3, #0
 8005578:	9308      	str	r3, [sp, #32]
 800557a:	9b07      	ldr	r3, [sp, #28]
 800557c:	2b09      	cmp	r3, #9
 800557e:	d863      	bhi.n	8005648 <_dtoa_r+0x280>
 8005580:	2b05      	cmp	r3, #5
 8005582:	bfc4      	itt	gt
 8005584:	3b04      	subgt	r3, #4
 8005586:	9307      	strgt	r3, [sp, #28]
 8005588:	9b07      	ldr	r3, [sp, #28]
 800558a:	f1a3 0302 	sub.w	r3, r3, #2
 800558e:	bfcc      	ite	gt
 8005590:	2400      	movgt	r4, #0
 8005592:	2401      	movle	r4, #1
 8005594:	2b03      	cmp	r3, #3
 8005596:	d863      	bhi.n	8005660 <_dtoa_r+0x298>
 8005598:	e8df f003 	tbb	[pc, r3]
 800559c:	2b375452 	.word	0x2b375452
 80055a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80055a4:	441e      	add	r6, r3
 80055a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	bfc1      	itttt	gt
 80055ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055b2:	409f      	lslgt	r7, r3
 80055b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055bc:	bfd6      	itet	le
 80055be:	f1c3 0320 	rsble	r3, r3, #32
 80055c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80055c6:	fa04 f003 	lslle.w	r0, r4, r3
 80055ca:	f7fa ff9b 	bl	8000504 <__aeabi_ui2d>
 80055ce:	2201      	movs	r2, #1
 80055d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055d4:	3e01      	subs	r6, #1
 80055d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80055d8:	e776      	b.n	80054c8 <_dtoa_r+0x100>
 80055da:	2301      	movs	r3, #1
 80055dc:	e7b7      	b.n	800554e <_dtoa_r+0x186>
 80055de:	9010      	str	r0, [sp, #64]	@ 0x40
 80055e0:	e7b6      	b.n	8005550 <_dtoa_r+0x188>
 80055e2:	9b00      	ldr	r3, [sp, #0]
 80055e4:	1bdb      	subs	r3, r3, r7
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	427b      	negs	r3, r7
 80055ea:	9308      	str	r3, [sp, #32]
 80055ec:	2300      	movs	r3, #0
 80055ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80055f0:	e7c3      	b.n	800557a <_dtoa_r+0x1b2>
 80055f2:	2301      	movs	r3, #1
 80055f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055f8:	eb07 0b03 	add.w	fp, r7, r3
 80055fc:	f10b 0301 	add.w	r3, fp, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	9303      	str	r3, [sp, #12]
 8005604:	bfb8      	it	lt
 8005606:	2301      	movlt	r3, #1
 8005608:	e006      	b.n	8005618 <_dtoa_r+0x250>
 800560a:	2301      	movs	r3, #1
 800560c:	9309      	str	r3, [sp, #36]	@ 0x24
 800560e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	dd28      	ble.n	8005666 <_dtoa_r+0x29e>
 8005614:	469b      	mov	fp, r3
 8005616:	9303      	str	r3, [sp, #12]
 8005618:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800561c:	2100      	movs	r1, #0
 800561e:	2204      	movs	r2, #4
 8005620:	f102 0514 	add.w	r5, r2, #20
 8005624:	429d      	cmp	r5, r3
 8005626:	d926      	bls.n	8005676 <_dtoa_r+0x2ae>
 8005628:	6041      	str	r1, [r0, #4]
 800562a:	4648      	mov	r0, r9
 800562c:	f000 fd9c 	bl	8006168 <_Balloc>
 8005630:	4682      	mov	sl, r0
 8005632:	2800      	cmp	r0, #0
 8005634:	d142      	bne.n	80056bc <_dtoa_r+0x2f4>
 8005636:	4b1e      	ldr	r3, [pc, #120]	@ (80056b0 <_dtoa_r+0x2e8>)
 8005638:	4602      	mov	r2, r0
 800563a:	f240 11af 	movw	r1, #431	@ 0x1af
 800563e:	e6da      	b.n	80053f6 <_dtoa_r+0x2e>
 8005640:	2300      	movs	r3, #0
 8005642:	e7e3      	b.n	800560c <_dtoa_r+0x244>
 8005644:	2300      	movs	r3, #0
 8005646:	e7d5      	b.n	80055f4 <_dtoa_r+0x22c>
 8005648:	2401      	movs	r4, #1
 800564a:	2300      	movs	r3, #0
 800564c:	9307      	str	r3, [sp, #28]
 800564e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005650:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005654:	2200      	movs	r2, #0
 8005656:	f8cd b00c 	str.w	fp, [sp, #12]
 800565a:	2312      	movs	r3, #18
 800565c:	920c      	str	r2, [sp, #48]	@ 0x30
 800565e:	e7db      	b.n	8005618 <_dtoa_r+0x250>
 8005660:	2301      	movs	r3, #1
 8005662:	9309      	str	r3, [sp, #36]	@ 0x24
 8005664:	e7f4      	b.n	8005650 <_dtoa_r+0x288>
 8005666:	f04f 0b01 	mov.w	fp, #1
 800566a:	f8cd b00c 	str.w	fp, [sp, #12]
 800566e:	465b      	mov	r3, fp
 8005670:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005674:	e7d0      	b.n	8005618 <_dtoa_r+0x250>
 8005676:	3101      	adds	r1, #1
 8005678:	0052      	lsls	r2, r2, #1
 800567a:	e7d1      	b.n	8005620 <_dtoa_r+0x258>
 800567c:	f3af 8000 	nop.w
 8005680:	636f4361 	.word	0x636f4361
 8005684:	3fd287a7 	.word	0x3fd287a7
 8005688:	8b60c8b3 	.word	0x8b60c8b3
 800568c:	3fc68a28 	.word	0x3fc68a28
 8005690:	509f79fb 	.word	0x509f79fb
 8005694:	3fd34413 	.word	0x3fd34413
 8005698:	080089f6 	.word	0x080089f6
 800569c:	08008a0d 	.word	0x08008a0d
 80056a0:	7ff00000 	.word	0x7ff00000
 80056a4:	080089c1 	.word	0x080089c1
 80056a8:	3ff80000 	.word	0x3ff80000
 80056ac:	08008bc0 	.word	0x08008bc0
 80056b0:	08008a65 	.word	0x08008a65
 80056b4:	080089f2 	.word	0x080089f2
 80056b8:	080089c0 	.word	0x080089c0
 80056bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056c0:	6018      	str	r0, [r3, #0]
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	2b0e      	cmp	r3, #14
 80056c6:	f200 80a1 	bhi.w	800580c <_dtoa_r+0x444>
 80056ca:	2c00      	cmp	r4, #0
 80056cc:	f000 809e 	beq.w	800580c <_dtoa_r+0x444>
 80056d0:	2f00      	cmp	r7, #0
 80056d2:	dd33      	ble.n	800573c <_dtoa_r+0x374>
 80056d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005948 <_dtoa_r+0x580>)
 80056d6:	f007 020f 	and.w	r2, r7, #15
 80056da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056de:	ed93 7b00 	vldr	d7, [r3]
 80056e2:	05f8      	lsls	r0, r7, #23
 80056e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80056e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056ec:	d516      	bpl.n	800571c <_dtoa_r+0x354>
 80056ee:	4b97      	ldr	r3, [pc, #604]	@ (800594c <_dtoa_r+0x584>)
 80056f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056f8:	f7fb f8a8 	bl	800084c <__aeabi_ddiv>
 80056fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005700:	f004 040f 	and.w	r4, r4, #15
 8005704:	2603      	movs	r6, #3
 8005706:	4d91      	ldr	r5, [pc, #580]	@ (800594c <_dtoa_r+0x584>)
 8005708:	b954      	cbnz	r4, 8005720 <_dtoa_r+0x358>
 800570a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800570e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005712:	f7fb f89b 	bl	800084c <__aeabi_ddiv>
 8005716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800571a:	e028      	b.n	800576e <_dtoa_r+0x3a6>
 800571c:	2602      	movs	r6, #2
 800571e:	e7f2      	b.n	8005706 <_dtoa_r+0x33e>
 8005720:	07e1      	lsls	r1, r4, #31
 8005722:	d508      	bpl.n	8005736 <_dtoa_r+0x36e>
 8005724:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005728:	e9d5 2300 	ldrd	r2, r3, [r5]
 800572c:	f7fa ff64 	bl	80005f8 <__aeabi_dmul>
 8005730:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005734:	3601      	adds	r6, #1
 8005736:	1064      	asrs	r4, r4, #1
 8005738:	3508      	adds	r5, #8
 800573a:	e7e5      	b.n	8005708 <_dtoa_r+0x340>
 800573c:	f000 80af 	beq.w	800589e <_dtoa_r+0x4d6>
 8005740:	427c      	negs	r4, r7
 8005742:	4b81      	ldr	r3, [pc, #516]	@ (8005948 <_dtoa_r+0x580>)
 8005744:	4d81      	ldr	r5, [pc, #516]	@ (800594c <_dtoa_r+0x584>)
 8005746:	f004 020f 	and.w	r2, r4, #15
 800574a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005756:	f7fa ff4f 	bl	80005f8 <__aeabi_dmul>
 800575a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800575e:	1124      	asrs	r4, r4, #4
 8005760:	2300      	movs	r3, #0
 8005762:	2602      	movs	r6, #2
 8005764:	2c00      	cmp	r4, #0
 8005766:	f040 808f 	bne.w	8005888 <_dtoa_r+0x4c0>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1d3      	bne.n	8005716 <_dtoa_r+0x34e>
 800576e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005770:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8094 	beq.w	80058a2 <_dtoa_r+0x4da>
 800577a:	4b75      	ldr	r3, [pc, #468]	@ (8005950 <_dtoa_r+0x588>)
 800577c:	2200      	movs	r2, #0
 800577e:	4620      	mov	r0, r4
 8005780:	4629      	mov	r1, r5
 8005782:	f7fb f9ab 	bl	8000adc <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	f000 808b 	beq.w	80058a2 <_dtoa_r+0x4da>
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8087 	beq.w	80058a2 <_dtoa_r+0x4da>
 8005794:	f1bb 0f00 	cmp.w	fp, #0
 8005798:	dd34      	ble.n	8005804 <_dtoa_r+0x43c>
 800579a:	4620      	mov	r0, r4
 800579c:	4b6d      	ldr	r3, [pc, #436]	@ (8005954 <_dtoa_r+0x58c>)
 800579e:	2200      	movs	r2, #0
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fa ff29 	bl	80005f8 <__aeabi_dmul>
 80057a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057aa:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80057ae:	3601      	adds	r6, #1
 80057b0:	465c      	mov	r4, fp
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7fa feb6 	bl	8000524 <__aeabi_i2d>
 80057b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057bc:	f7fa ff1c 	bl	80005f8 <__aeabi_dmul>
 80057c0:	4b65      	ldr	r3, [pc, #404]	@ (8005958 <_dtoa_r+0x590>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	f7fa fd62 	bl	800028c <__adddf3>
 80057c8:	4605      	mov	r5, r0
 80057ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057ce:	2c00      	cmp	r4, #0
 80057d0:	d16a      	bne.n	80058a8 <_dtoa_r+0x4e0>
 80057d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d6:	4b61      	ldr	r3, [pc, #388]	@ (800595c <_dtoa_r+0x594>)
 80057d8:	2200      	movs	r2, #0
 80057da:	f7fa fd55 	bl	8000288 <__aeabi_dsub>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057e6:	462a      	mov	r2, r5
 80057e8:	4633      	mov	r3, r6
 80057ea:	f7fb f995 	bl	8000b18 <__aeabi_dcmpgt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f040 8298 	bne.w	8005d24 <_dtoa_r+0x95c>
 80057f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f8:	462a      	mov	r2, r5
 80057fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057fe:	f7fb f96d 	bl	8000adc <__aeabi_dcmplt>
 8005802:	bb38      	cbnz	r0, 8005854 <_dtoa_r+0x48c>
 8005804:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005808:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800580c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800580e:	2b00      	cmp	r3, #0
 8005810:	f2c0 8157 	blt.w	8005ac2 <_dtoa_r+0x6fa>
 8005814:	2f0e      	cmp	r7, #14
 8005816:	f300 8154 	bgt.w	8005ac2 <_dtoa_r+0x6fa>
 800581a:	4b4b      	ldr	r3, [pc, #300]	@ (8005948 <_dtoa_r+0x580>)
 800581c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005820:	ed93 7b00 	vldr	d7, [r3]
 8005824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005826:	2b00      	cmp	r3, #0
 8005828:	ed8d 7b00 	vstr	d7, [sp]
 800582c:	f280 80e5 	bge.w	80059fa <_dtoa_r+0x632>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f300 80e1 	bgt.w	80059fa <_dtoa_r+0x632>
 8005838:	d10c      	bne.n	8005854 <_dtoa_r+0x48c>
 800583a:	4b48      	ldr	r3, [pc, #288]	@ (800595c <_dtoa_r+0x594>)
 800583c:	2200      	movs	r2, #0
 800583e:	ec51 0b17 	vmov	r0, r1, d7
 8005842:	f7fa fed9 	bl	80005f8 <__aeabi_dmul>
 8005846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800584a:	f7fb f95b 	bl	8000b04 <__aeabi_dcmpge>
 800584e:	2800      	cmp	r0, #0
 8005850:	f000 8266 	beq.w	8005d20 <_dtoa_r+0x958>
 8005854:	2400      	movs	r4, #0
 8005856:	4625      	mov	r5, r4
 8005858:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800585a:	4656      	mov	r6, sl
 800585c:	ea6f 0803 	mvn.w	r8, r3
 8005860:	2700      	movs	r7, #0
 8005862:	4621      	mov	r1, r4
 8005864:	4648      	mov	r0, r9
 8005866:	f000 fcbf 	bl	80061e8 <_Bfree>
 800586a:	2d00      	cmp	r5, #0
 800586c:	f000 80bd 	beq.w	80059ea <_dtoa_r+0x622>
 8005870:	b12f      	cbz	r7, 800587e <_dtoa_r+0x4b6>
 8005872:	42af      	cmp	r7, r5
 8005874:	d003      	beq.n	800587e <_dtoa_r+0x4b6>
 8005876:	4639      	mov	r1, r7
 8005878:	4648      	mov	r0, r9
 800587a:	f000 fcb5 	bl	80061e8 <_Bfree>
 800587e:	4629      	mov	r1, r5
 8005880:	4648      	mov	r0, r9
 8005882:	f000 fcb1 	bl	80061e8 <_Bfree>
 8005886:	e0b0      	b.n	80059ea <_dtoa_r+0x622>
 8005888:	07e2      	lsls	r2, r4, #31
 800588a:	d505      	bpl.n	8005898 <_dtoa_r+0x4d0>
 800588c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005890:	f7fa feb2 	bl	80005f8 <__aeabi_dmul>
 8005894:	3601      	adds	r6, #1
 8005896:	2301      	movs	r3, #1
 8005898:	1064      	asrs	r4, r4, #1
 800589a:	3508      	adds	r5, #8
 800589c:	e762      	b.n	8005764 <_dtoa_r+0x39c>
 800589e:	2602      	movs	r6, #2
 80058a0:	e765      	b.n	800576e <_dtoa_r+0x3a6>
 80058a2:	9c03      	ldr	r4, [sp, #12]
 80058a4:	46b8      	mov	r8, r7
 80058a6:	e784      	b.n	80057b2 <_dtoa_r+0x3ea>
 80058a8:	4b27      	ldr	r3, [pc, #156]	@ (8005948 <_dtoa_r+0x580>)
 80058aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058b4:	4454      	add	r4, sl
 80058b6:	2900      	cmp	r1, #0
 80058b8:	d054      	beq.n	8005964 <_dtoa_r+0x59c>
 80058ba:	4929      	ldr	r1, [pc, #164]	@ (8005960 <_dtoa_r+0x598>)
 80058bc:	2000      	movs	r0, #0
 80058be:	f7fa ffc5 	bl	800084c <__aeabi_ddiv>
 80058c2:	4633      	mov	r3, r6
 80058c4:	462a      	mov	r2, r5
 80058c6:	f7fa fcdf 	bl	8000288 <__aeabi_dsub>
 80058ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80058ce:	4656      	mov	r6, sl
 80058d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d4:	f7fb f940 	bl	8000b58 <__aeabi_d2iz>
 80058d8:	4605      	mov	r5, r0
 80058da:	f7fa fe23 	bl	8000524 <__aeabi_i2d>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e6:	f7fa fccf 	bl	8000288 <__aeabi_dsub>
 80058ea:	3530      	adds	r5, #48	@ 0x30
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058f4:	f806 5b01 	strb.w	r5, [r6], #1
 80058f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80058fc:	f7fb f8ee 	bl	8000adc <__aeabi_dcmplt>
 8005900:	2800      	cmp	r0, #0
 8005902:	d172      	bne.n	80059ea <_dtoa_r+0x622>
 8005904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005908:	4911      	ldr	r1, [pc, #68]	@ (8005950 <_dtoa_r+0x588>)
 800590a:	2000      	movs	r0, #0
 800590c:	f7fa fcbc 	bl	8000288 <__aeabi_dsub>
 8005910:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005914:	f7fb f8e2 	bl	8000adc <__aeabi_dcmplt>
 8005918:	2800      	cmp	r0, #0
 800591a:	f040 80b4 	bne.w	8005a86 <_dtoa_r+0x6be>
 800591e:	42a6      	cmp	r6, r4
 8005920:	f43f af70 	beq.w	8005804 <_dtoa_r+0x43c>
 8005924:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005928:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <_dtoa_r+0x58c>)
 800592a:	2200      	movs	r2, #0
 800592c:	f7fa fe64 	bl	80005f8 <__aeabi_dmul>
 8005930:	4b08      	ldr	r3, [pc, #32]	@ (8005954 <_dtoa_r+0x58c>)
 8005932:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005936:	2200      	movs	r2, #0
 8005938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800593c:	f7fa fe5c 	bl	80005f8 <__aeabi_dmul>
 8005940:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005944:	e7c4      	b.n	80058d0 <_dtoa_r+0x508>
 8005946:	bf00      	nop
 8005948:	08008bc0 	.word	0x08008bc0
 800594c:	08008b98 	.word	0x08008b98
 8005950:	3ff00000 	.word	0x3ff00000
 8005954:	40240000 	.word	0x40240000
 8005958:	401c0000 	.word	0x401c0000
 800595c:	40140000 	.word	0x40140000
 8005960:	3fe00000 	.word	0x3fe00000
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	f7fa fe46 	bl	80005f8 <__aeabi_dmul>
 800596c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005970:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005972:	4656      	mov	r6, sl
 8005974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005978:	f7fb f8ee 	bl	8000b58 <__aeabi_d2iz>
 800597c:	4605      	mov	r5, r0
 800597e:	f7fa fdd1 	bl	8000524 <__aeabi_i2d>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800598a:	f7fa fc7d 	bl	8000288 <__aeabi_dsub>
 800598e:	3530      	adds	r5, #48	@ 0x30
 8005990:	f806 5b01 	strb.w	r5, [r6], #1
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	42a6      	cmp	r6, r4
 800599a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	d124      	bne.n	80059ee <_dtoa_r+0x626>
 80059a4:	4baf      	ldr	r3, [pc, #700]	@ (8005c64 <_dtoa_r+0x89c>)
 80059a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059aa:	f7fa fc6f 	bl	800028c <__adddf3>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b6:	f7fb f8af 	bl	8000b18 <__aeabi_dcmpgt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d163      	bne.n	8005a86 <_dtoa_r+0x6be>
 80059be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059c2:	49a8      	ldr	r1, [pc, #672]	@ (8005c64 <_dtoa_r+0x89c>)
 80059c4:	2000      	movs	r0, #0
 80059c6:	f7fa fc5f 	bl	8000288 <__aeabi_dsub>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d2:	f7fb f883 	bl	8000adc <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	f43f af14 	beq.w	8005804 <_dtoa_r+0x43c>
 80059dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80059de:	1e73      	subs	r3, r6, #1
 80059e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059e6:	2b30      	cmp	r3, #48	@ 0x30
 80059e8:	d0f8      	beq.n	80059dc <_dtoa_r+0x614>
 80059ea:	4647      	mov	r7, r8
 80059ec:	e03b      	b.n	8005a66 <_dtoa_r+0x69e>
 80059ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005c68 <_dtoa_r+0x8a0>)
 80059f0:	f7fa fe02 	bl	80005f8 <__aeabi_dmul>
 80059f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059f8:	e7bc      	b.n	8005974 <_dtoa_r+0x5ac>
 80059fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80059fe:	4656      	mov	r6, sl
 8005a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a04:	4620      	mov	r0, r4
 8005a06:	4629      	mov	r1, r5
 8005a08:	f7fa ff20 	bl	800084c <__aeabi_ddiv>
 8005a0c:	f7fb f8a4 	bl	8000b58 <__aeabi_d2iz>
 8005a10:	4680      	mov	r8, r0
 8005a12:	f7fa fd87 	bl	8000524 <__aeabi_i2d>
 8005a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a1a:	f7fa fded 	bl	80005f8 <__aeabi_dmul>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a2a:	f7fa fc2d 	bl	8000288 <__aeabi_dsub>
 8005a2e:	f806 4b01 	strb.w	r4, [r6], #1
 8005a32:	9d03      	ldr	r5, [sp, #12]
 8005a34:	eba6 040a 	sub.w	r4, r6, sl
 8005a38:	42a5      	cmp	r5, r4
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	d133      	bne.n	8005aa8 <_dtoa_r+0x6e0>
 8005a40:	f7fa fc24 	bl	800028c <__adddf3>
 8005a44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a48:	4604      	mov	r4, r0
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	f7fb f864 	bl	8000b18 <__aeabi_dcmpgt>
 8005a50:	b9c0      	cbnz	r0, 8005a84 <_dtoa_r+0x6bc>
 8005a52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f7fb f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a5e:	b110      	cbz	r0, 8005a66 <_dtoa_r+0x69e>
 8005a60:	f018 0f01 	tst.w	r8, #1
 8005a64:	d10e      	bne.n	8005a84 <_dtoa_r+0x6bc>
 8005a66:	9902      	ldr	r1, [sp, #8]
 8005a68:	4648      	mov	r0, r9
 8005a6a:	f000 fbbd 	bl	80061e8 <_Bfree>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	7033      	strb	r3, [r6, #0]
 8005a72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a74:	3701      	adds	r7, #1
 8005a76:	601f      	str	r7, [r3, #0]
 8005a78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 824b 	beq.w	8005f16 <_dtoa_r+0xb4e>
 8005a80:	601e      	str	r6, [r3, #0]
 8005a82:	e248      	b.n	8005f16 <_dtoa_r+0xb4e>
 8005a84:	46b8      	mov	r8, r7
 8005a86:	4633      	mov	r3, r6
 8005a88:	461e      	mov	r6, r3
 8005a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a8e:	2a39      	cmp	r2, #57	@ 0x39
 8005a90:	d106      	bne.n	8005aa0 <_dtoa_r+0x6d8>
 8005a92:	459a      	cmp	sl, r3
 8005a94:	d1f8      	bne.n	8005a88 <_dtoa_r+0x6c0>
 8005a96:	2230      	movs	r2, #48	@ 0x30
 8005a98:	f108 0801 	add.w	r8, r8, #1
 8005a9c:	f88a 2000 	strb.w	r2, [sl]
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e7a0      	b.n	80059ea <_dtoa_r+0x622>
 8005aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8005c68 <_dtoa_r+0x8a0>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f7fa fda4 	bl	80005f8 <__aeabi_dmul>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	f7fb f806 	bl	8000ac8 <__aeabi_dcmpeq>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d09f      	beq.n	8005a00 <_dtoa_r+0x638>
 8005ac0:	e7d1      	b.n	8005a66 <_dtoa_r+0x69e>
 8005ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	f000 80ea 	beq.w	8005c9e <_dtoa_r+0x8d6>
 8005aca:	9a07      	ldr	r2, [sp, #28]
 8005acc:	2a01      	cmp	r2, #1
 8005ace:	f300 80cd 	bgt.w	8005c6c <_dtoa_r+0x8a4>
 8005ad2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	f000 80c1 	beq.w	8005c5c <_dtoa_r+0x894>
 8005ada:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ade:	9c08      	ldr	r4, [sp, #32]
 8005ae0:	9e00      	ldr	r6, [sp, #0]
 8005ae2:	9a00      	ldr	r2, [sp, #0]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	9200      	str	r2, [sp, #0]
 8005ae8:	9a06      	ldr	r2, [sp, #24]
 8005aea:	2101      	movs	r1, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	4648      	mov	r0, r9
 8005af0:	9206      	str	r2, [sp, #24]
 8005af2:	f000 fc77 	bl	80063e4 <__i2b>
 8005af6:	4605      	mov	r5, r0
 8005af8:	b166      	cbz	r6, 8005b14 <_dtoa_r+0x74c>
 8005afa:	9b06      	ldr	r3, [sp, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	dd09      	ble.n	8005b14 <_dtoa_r+0x74c>
 8005b00:	42b3      	cmp	r3, r6
 8005b02:	9a00      	ldr	r2, [sp, #0]
 8005b04:	bfa8      	it	ge
 8005b06:	4633      	movge	r3, r6
 8005b08:	1ad2      	subs	r2, r2, r3
 8005b0a:	9200      	str	r2, [sp, #0]
 8005b0c:	9a06      	ldr	r2, [sp, #24]
 8005b0e:	1af6      	subs	r6, r6, r3
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	9306      	str	r3, [sp, #24]
 8005b14:	9b08      	ldr	r3, [sp, #32]
 8005b16:	b30b      	cbz	r3, 8005b5c <_dtoa_r+0x794>
 8005b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80c6 	beq.w	8005cac <_dtoa_r+0x8e4>
 8005b20:	2c00      	cmp	r4, #0
 8005b22:	f000 80c0 	beq.w	8005ca6 <_dtoa_r+0x8de>
 8005b26:	4629      	mov	r1, r5
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4648      	mov	r0, r9
 8005b2c:	f000 fd12 	bl	8006554 <__pow5mult>
 8005b30:	9a02      	ldr	r2, [sp, #8]
 8005b32:	4601      	mov	r1, r0
 8005b34:	4605      	mov	r5, r0
 8005b36:	4648      	mov	r0, r9
 8005b38:	f000 fc6a 	bl	8006410 <__multiply>
 8005b3c:	9902      	ldr	r1, [sp, #8]
 8005b3e:	4680      	mov	r8, r0
 8005b40:	4648      	mov	r0, r9
 8005b42:	f000 fb51 	bl	80061e8 <_Bfree>
 8005b46:	9b08      	ldr	r3, [sp, #32]
 8005b48:	1b1b      	subs	r3, r3, r4
 8005b4a:	9308      	str	r3, [sp, #32]
 8005b4c:	f000 80b1 	beq.w	8005cb2 <_dtoa_r+0x8ea>
 8005b50:	9a08      	ldr	r2, [sp, #32]
 8005b52:	4641      	mov	r1, r8
 8005b54:	4648      	mov	r0, r9
 8005b56:	f000 fcfd 	bl	8006554 <__pow5mult>
 8005b5a:	9002      	str	r0, [sp, #8]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4648      	mov	r0, r9
 8005b60:	f000 fc40 	bl	80063e4 <__i2b>
 8005b64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b66:	4604      	mov	r4, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 81d8 	beq.w	8005f1e <_dtoa_r+0xb56>
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4601      	mov	r1, r0
 8005b72:	4648      	mov	r0, r9
 8005b74:	f000 fcee 	bl	8006554 <__pow5mult>
 8005b78:	9b07      	ldr	r3, [sp, #28]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	f300 809f 	bgt.w	8005cc0 <_dtoa_r+0x8f8>
 8005b82:	9b04      	ldr	r3, [sp, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8097 	bne.w	8005cb8 <_dtoa_r+0x8f0>
 8005b8a:	9b05      	ldr	r3, [sp, #20]
 8005b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8093 	bne.w	8005cbc <_dtoa_r+0x8f4>
 8005b96:	9b05      	ldr	r3, [sp, #20]
 8005b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b9c:	0d1b      	lsrs	r3, r3, #20
 8005b9e:	051b      	lsls	r3, r3, #20
 8005ba0:	b133      	cbz	r3, 8005bb0 <_dtoa_r+0x7e8>
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	9b06      	ldr	r3, [sp, #24]
 8005baa:	3301      	adds	r3, #1
 8005bac:	9306      	str	r3, [sp, #24]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	9308      	str	r3, [sp, #32]
 8005bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 81b8 	beq.w	8005f2a <_dtoa_r+0xb62>
 8005bba:	6923      	ldr	r3, [r4, #16]
 8005bbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bc0:	6918      	ldr	r0, [r3, #16]
 8005bc2:	f000 fbc3 	bl	800634c <__hi0bits>
 8005bc6:	f1c0 0020 	rsb	r0, r0, #32
 8005bca:	9b06      	ldr	r3, [sp, #24]
 8005bcc:	4418      	add	r0, r3
 8005bce:	f010 001f 	ands.w	r0, r0, #31
 8005bd2:	f000 8082 	beq.w	8005cda <_dtoa_r+0x912>
 8005bd6:	f1c0 0320 	rsb	r3, r0, #32
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	dd73      	ble.n	8005cc6 <_dtoa_r+0x8fe>
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	f1c0 001c 	rsb	r0, r0, #28
 8005be4:	4403      	add	r3, r0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	9b06      	ldr	r3, [sp, #24]
 8005bea:	4403      	add	r3, r0
 8005bec:	4406      	add	r6, r0
 8005bee:	9306      	str	r3, [sp, #24]
 8005bf0:	9b00      	ldr	r3, [sp, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dd05      	ble.n	8005c02 <_dtoa_r+0x83a>
 8005bf6:	9902      	ldr	r1, [sp, #8]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4648      	mov	r0, r9
 8005bfc:	f000 fd04 	bl	8006608 <__lshift>
 8005c00:	9002      	str	r0, [sp, #8]
 8005c02:	9b06      	ldr	r3, [sp, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dd05      	ble.n	8005c14 <_dtoa_r+0x84c>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4648      	mov	r0, r9
 8005c0e:	f000 fcfb 	bl	8006608 <__lshift>
 8005c12:	4604      	mov	r4, r0
 8005c14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d061      	beq.n	8005cde <_dtoa_r+0x916>
 8005c1a:	9802      	ldr	r0, [sp, #8]
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	f000 fd5f 	bl	80066e0 <__mcmp>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	da5b      	bge.n	8005cde <_dtoa_r+0x916>
 8005c26:	2300      	movs	r3, #0
 8005c28:	9902      	ldr	r1, [sp, #8]
 8005c2a:	220a      	movs	r2, #10
 8005c2c:	4648      	mov	r0, r9
 8005c2e:	f000 fafd 	bl	800622c <__multadd>
 8005c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c34:	9002      	str	r0, [sp, #8]
 8005c36:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8177 	beq.w	8005f2e <_dtoa_r+0xb66>
 8005c40:	4629      	mov	r1, r5
 8005c42:	2300      	movs	r3, #0
 8005c44:	220a      	movs	r2, #10
 8005c46:	4648      	mov	r0, r9
 8005c48:	f000 faf0 	bl	800622c <__multadd>
 8005c4c:	f1bb 0f00 	cmp.w	fp, #0
 8005c50:	4605      	mov	r5, r0
 8005c52:	dc6f      	bgt.n	8005d34 <_dtoa_r+0x96c>
 8005c54:	9b07      	ldr	r3, [sp, #28]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	dc49      	bgt.n	8005cee <_dtoa_r+0x926>
 8005c5a:	e06b      	b.n	8005d34 <_dtoa_r+0x96c>
 8005c5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c62:	e73c      	b.n	8005ade <_dtoa_r+0x716>
 8005c64:	3fe00000 	.word	0x3fe00000
 8005c68:	40240000 	.word	0x40240000
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	1e5c      	subs	r4, r3, #1
 8005c70:	9b08      	ldr	r3, [sp, #32]
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	db09      	blt.n	8005c8a <_dtoa_r+0x8c2>
 8005c76:	1b1c      	subs	r4, r3, r4
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f6bf af30 	bge.w	8005ae0 <_dtoa_r+0x718>
 8005c80:	9b00      	ldr	r3, [sp, #0]
 8005c82:	9a03      	ldr	r2, [sp, #12]
 8005c84:	1a9e      	subs	r6, r3, r2
 8005c86:	2300      	movs	r3, #0
 8005c88:	e72b      	b.n	8005ae2 <_dtoa_r+0x71a>
 8005c8a:	9b08      	ldr	r3, [sp, #32]
 8005c8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c8e:	9408      	str	r4, [sp, #32]
 8005c90:	1ae3      	subs	r3, r4, r3
 8005c92:	441a      	add	r2, r3
 8005c94:	9e00      	ldr	r6, [sp, #0]
 8005c96:	9b03      	ldr	r3, [sp, #12]
 8005c98:	920d      	str	r2, [sp, #52]	@ 0x34
 8005c9a:	2400      	movs	r4, #0
 8005c9c:	e721      	b.n	8005ae2 <_dtoa_r+0x71a>
 8005c9e:	9c08      	ldr	r4, [sp, #32]
 8005ca0:	9e00      	ldr	r6, [sp, #0]
 8005ca2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005ca4:	e728      	b.n	8005af8 <_dtoa_r+0x730>
 8005ca6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005caa:	e751      	b.n	8005b50 <_dtoa_r+0x788>
 8005cac:	9a08      	ldr	r2, [sp, #32]
 8005cae:	9902      	ldr	r1, [sp, #8]
 8005cb0:	e750      	b.n	8005b54 <_dtoa_r+0x78c>
 8005cb2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005cb6:	e751      	b.n	8005b5c <_dtoa_r+0x794>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e779      	b.n	8005bb0 <_dtoa_r+0x7e8>
 8005cbc:	9b04      	ldr	r3, [sp, #16]
 8005cbe:	e777      	b.n	8005bb0 <_dtoa_r+0x7e8>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9308      	str	r3, [sp, #32]
 8005cc4:	e779      	b.n	8005bba <_dtoa_r+0x7f2>
 8005cc6:	d093      	beq.n	8005bf0 <_dtoa_r+0x828>
 8005cc8:	9a00      	ldr	r2, [sp, #0]
 8005cca:	331c      	adds	r3, #28
 8005ccc:	441a      	add	r2, r3
 8005cce:	9200      	str	r2, [sp, #0]
 8005cd0:	9a06      	ldr	r2, [sp, #24]
 8005cd2:	441a      	add	r2, r3
 8005cd4:	441e      	add	r6, r3
 8005cd6:	9206      	str	r2, [sp, #24]
 8005cd8:	e78a      	b.n	8005bf0 <_dtoa_r+0x828>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	e7f4      	b.n	8005cc8 <_dtoa_r+0x900>
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	46b8      	mov	r8, r7
 8005ce4:	dc20      	bgt.n	8005d28 <_dtoa_r+0x960>
 8005ce6:	469b      	mov	fp, r3
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	dd1e      	ble.n	8005d2c <_dtoa_r+0x964>
 8005cee:	f1bb 0f00 	cmp.w	fp, #0
 8005cf2:	f47f adb1 	bne.w	8005858 <_dtoa_r+0x490>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	465b      	mov	r3, fp
 8005cfa:	2205      	movs	r2, #5
 8005cfc:	4648      	mov	r0, r9
 8005cfe:	f000 fa95 	bl	800622c <__multadd>
 8005d02:	4601      	mov	r1, r0
 8005d04:	4604      	mov	r4, r0
 8005d06:	9802      	ldr	r0, [sp, #8]
 8005d08:	f000 fcea 	bl	80066e0 <__mcmp>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f77f ada3 	ble.w	8005858 <_dtoa_r+0x490>
 8005d12:	4656      	mov	r6, sl
 8005d14:	2331      	movs	r3, #49	@ 0x31
 8005d16:	f806 3b01 	strb.w	r3, [r6], #1
 8005d1a:	f108 0801 	add.w	r8, r8, #1
 8005d1e:	e59f      	b.n	8005860 <_dtoa_r+0x498>
 8005d20:	9c03      	ldr	r4, [sp, #12]
 8005d22:	46b8      	mov	r8, r7
 8005d24:	4625      	mov	r5, r4
 8005d26:	e7f4      	b.n	8005d12 <_dtoa_r+0x94a>
 8005d28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 8101 	beq.w	8005f36 <_dtoa_r+0xb6e>
 8005d34:	2e00      	cmp	r6, #0
 8005d36:	dd05      	ble.n	8005d44 <_dtoa_r+0x97c>
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	4648      	mov	r0, r9
 8005d3e:	f000 fc63 	bl	8006608 <__lshift>
 8005d42:	4605      	mov	r5, r0
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d05c      	beq.n	8005e04 <_dtoa_r+0xa3c>
 8005d4a:	6869      	ldr	r1, [r5, #4]
 8005d4c:	4648      	mov	r0, r9
 8005d4e:	f000 fa0b 	bl	8006168 <_Balloc>
 8005d52:	4606      	mov	r6, r0
 8005d54:	b928      	cbnz	r0, 8005d62 <_dtoa_r+0x99a>
 8005d56:	4b82      	ldr	r3, [pc, #520]	@ (8005f60 <_dtoa_r+0xb98>)
 8005d58:	4602      	mov	r2, r0
 8005d5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d5e:	f7ff bb4a 	b.w	80053f6 <_dtoa_r+0x2e>
 8005d62:	692a      	ldr	r2, [r5, #16]
 8005d64:	3202      	adds	r2, #2
 8005d66:	0092      	lsls	r2, r2, #2
 8005d68:	f105 010c 	add.w	r1, r5, #12
 8005d6c:	300c      	adds	r0, #12
 8005d6e:	f001 ffed 	bl	8007d4c <memcpy>
 8005d72:	2201      	movs	r2, #1
 8005d74:	4631      	mov	r1, r6
 8005d76:	4648      	mov	r0, r9
 8005d78:	f000 fc46 	bl	8006608 <__lshift>
 8005d7c:	f10a 0301 	add.w	r3, sl, #1
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	eb0a 030b 	add.w	r3, sl, fp
 8005d86:	9308      	str	r3, [sp, #32]
 8005d88:	9b04      	ldr	r3, [sp, #16]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	462f      	mov	r7, r5
 8005d90:	9306      	str	r3, [sp, #24]
 8005d92:	4605      	mov	r5, r0
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	9802      	ldr	r0, [sp, #8]
 8005d98:	4621      	mov	r1, r4
 8005d9a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005d9e:	f7ff fa8b 	bl	80052b8 <quorem>
 8005da2:	4603      	mov	r3, r0
 8005da4:	3330      	adds	r3, #48	@ 0x30
 8005da6:	9003      	str	r0, [sp, #12]
 8005da8:	4639      	mov	r1, r7
 8005daa:	9802      	ldr	r0, [sp, #8]
 8005dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dae:	f000 fc97 	bl	80066e0 <__mcmp>
 8005db2:	462a      	mov	r2, r5
 8005db4:	9004      	str	r0, [sp, #16]
 8005db6:	4621      	mov	r1, r4
 8005db8:	4648      	mov	r0, r9
 8005dba:	f000 fcad 	bl	8006718 <__mdiff>
 8005dbe:	68c2      	ldr	r2, [r0, #12]
 8005dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	bb02      	cbnz	r2, 8005e08 <_dtoa_r+0xa40>
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	9802      	ldr	r0, [sp, #8]
 8005dca:	f000 fc89 	bl	80066e0 <__mcmp>
 8005dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4648      	mov	r0, r9
 8005dd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dda:	f000 fa05 	bl	80061e8 <_Bfree>
 8005dde:	9b07      	ldr	r3, [sp, #28]
 8005de0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005de2:	9e00      	ldr	r6, [sp, #0]
 8005de4:	ea42 0103 	orr.w	r1, r2, r3
 8005de8:	9b06      	ldr	r3, [sp, #24]
 8005dea:	4319      	orrs	r1, r3
 8005dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dee:	d10d      	bne.n	8005e0c <_dtoa_r+0xa44>
 8005df0:	2b39      	cmp	r3, #57	@ 0x39
 8005df2:	d027      	beq.n	8005e44 <_dtoa_r+0xa7c>
 8005df4:	9a04      	ldr	r2, [sp, #16]
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	dd01      	ble.n	8005dfe <_dtoa_r+0xa36>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	3331      	adds	r3, #49	@ 0x31
 8005dfe:	f88b 3000 	strb.w	r3, [fp]
 8005e02:	e52e      	b.n	8005862 <_dtoa_r+0x49a>
 8005e04:	4628      	mov	r0, r5
 8005e06:	e7b9      	b.n	8005d7c <_dtoa_r+0x9b4>
 8005e08:	2201      	movs	r2, #1
 8005e0a:	e7e2      	b.n	8005dd2 <_dtoa_r+0xa0a>
 8005e0c:	9904      	ldr	r1, [sp, #16]
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	db04      	blt.n	8005e1c <_dtoa_r+0xa54>
 8005e12:	9807      	ldr	r0, [sp, #28]
 8005e14:	4301      	orrs	r1, r0
 8005e16:	9806      	ldr	r0, [sp, #24]
 8005e18:	4301      	orrs	r1, r0
 8005e1a:	d120      	bne.n	8005e5e <_dtoa_r+0xa96>
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	ddee      	ble.n	8005dfe <_dtoa_r+0xa36>
 8005e20:	9902      	ldr	r1, [sp, #8]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	2201      	movs	r2, #1
 8005e26:	4648      	mov	r0, r9
 8005e28:	f000 fbee 	bl	8006608 <__lshift>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	9002      	str	r0, [sp, #8]
 8005e30:	f000 fc56 	bl	80066e0 <__mcmp>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	dc02      	bgt.n	8005e40 <_dtoa_r+0xa78>
 8005e3a:	d1e0      	bne.n	8005dfe <_dtoa_r+0xa36>
 8005e3c:	07da      	lsls	r2, r3, #31
 8005e3e:	d5de      	bpl.n	8005dfe <_dtoa_r+0xa36>
 8005e40:	2b39      	cmp	r3, #57	@ 0x39
 8005e42:	d1da      	bne.n	8005dfa <_dtoa_r+0xa32>
 8005e44:	2339      	movs	r3, #57	@ 0x39
 8005e46:	f88b 3000 	strb.w	r3, [fp]
 8005e4a:	4633      	mov	r3, r6
 8005e4c:	461e      	mov	r6, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e54:	2a39      	cmp	r2, #57	@ 0x39
 8005e56:	d04e      	beq.n	8005ef6 <_dtoa_r+0xb2e>
 8005e58:	3201      	adds	r2, #1
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	e501      	b.n	8005862 <_dtoa_r+0x49a>
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	dd03      	ble.n	8005e6a <_dtoa_r+0xaa2>
 8005e62:	2b39      	cmp	r3, #57	@ 0x39
 8005e64:	d0ee      	beq.n	8005e44 <_dtoa_r+0xa7c>
 8005e66:	3301      	adds	r3, #1
 8005e68:	e7c9      	b.n	8005dfe <_dtoa_r+0xa36>
 8005e6a:	9a00      	ldr	r2, [sp, #0]
 8005e6c:	9908      	ldr	r1, [sp, #32]
 8005e6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e72:	428a      	cmp	r2, r1
 8005e74:	d028      	beq.n	8005ec8 <_dtoa_r+0xb00>
 8005e76:	9902      	ldr	r1, [sp, #8]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4648      	mov	r0, r9
 8005e7e:	f000 f9d5 	bl	800622c <__multadd>
 8005e82:	42af      	cmp	r7, r5
 8005e84:	9002      	str	r0, [sp, #8]
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	f04f 020a 	mov.w	r2, #10
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4648      	mov	r0, r9
 8005e92:	d107      	bne.n	8005ea4 <_dtoa_r+0xadc>
 8005e94:	f000 f9ca 	bl	800622c <__multadd>
 8005e98:	4607      	mov	r7, r0
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	9b00      	ldr	r3, [sp, #0]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	e777      	b.n	8005d94 <_dtoa_r+0x9cc>
 8005ea4:	f000 f9c2 	bl	800622c <__multadd>
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4607      	mov	r7, r0
 8005eac:	2300      	movs	r3, #0
 8005eae:	220a      	movs	r2, #10
 8005eb0:	4648      	mov	r0, r9
 8005eb2:	f000 f9bb 	bl	800622c <__multadd>
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	e7f0      	b.n	8005e9c <_dtoa_r+0xad4>
 8005eba:	f1bb 0f00 	cmp.w	fp, #0
 8005ebe:	bfcc      	ite	gt
 8005ec0:	465e      	movgt	r6, fp
 8005ec2:	2601      	movle	r6, #1
 8005ec4:	4456      	add	r6, sl
 8005ec6:	2700      	movs	r7, #0
 8005ec8:	9902      	ldr	r1, [sp, #8]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	4648      	mov	r0, r9
 8005ed0:	f000 fb9a 	bl	8006608 <__lshift>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	9002      	str	r0, [sp, #8]
 8005ed8:	f000 fc02 	bl	80066e0 <__mcmp>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	dcb4      	bgt.n	8005e4a <_dtoa_r+0xa82>
 8005ee0:	d102      	bne.n	8005ee8 <_dtoa_r+0xb20>
 8005ee2:	9b00      	ldr	r3, [sp, #0]
 8005ee4:	07db      	lsls	r3, r3, #31
 8005ee6:	d4b0      	bmi.n	8005e4a <_dtoa_r+0xa82>
 8005ee8:	4633      	mov	r3, r6
 8005eea:	461e      	mov	r6, r3
 8005eec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ef0:	2a30      	cmp	r2, #48	@ 0x30
 8005ef2:	d0fa      	beq.n	8005eea <_dtoa_r+0xb22>
 8005ef4:	e4b5      	b.n	8005862 <_dtoa_r+0x49a>
 8005ef6:	459a      	cmp	sl, r3
 8005ef8:	d1a8      	bne.n	8005e4c <_dtoa_r+0xa84>
 8005efa:	2331      	movs	r3, #49	@ 0x31
 8005efc:	f108 0801 	add.w	r8, r8, #1
 8005f00:	f88a 3000 	strb.w	r3, [sl]
 8005f04:	e4ad      	b.n	8005862 <_dtoa_r+0x49a>
 8005f06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005f64 <_dtoa_r+0xb9c>
 8005f0c:	b11b      	cbz	r3, 8005f16 <_dtoa_r+0xb4e>
 8005f0e:	f10a 0308 	add.w	r3, sl, #8
 8005f12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	4650      	mov	r0, sl
 8005f18:	b017      	add	sp, #92	@ 0x5c
 8005f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1e:	9b07      	ldr	r3, [sp, #28]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	f77f ae2e 	ble.w	8005b82 <_dtoa_r+0x7ba>
 8005f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f28:	9308      	str	r3, [sp, #32]
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	e64d      	b.n	8005bca <_dtoa_r+0x802>
 8005f2e:	f1bb 0f00 	cmp.w	fp, #0
 8005f32:	f77f aed9 	ble.w	8005ce8 <_dtoa_r+0x920>
 8005f36:	4656      	mov	r6, sl
 8005f38:	9802      	ldr	r0, [sp, #8]
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	f7ff f9bc 	bl	80052b8 <quorem>
 8005f40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f44:	f806 3b01 	strb.w	r3, [r6], #1
 8005f48:	eba6 020a 	sub.w	r2, r6, sl
 8005f4c:	4593      	cmp	fp, r2
 8005f4e:	ddb4      	ble.n	8005eba <_dtoa_r+0xaf2>
 8005f50:	9902      	ldr	r1, [sp, #8]
 8005f52:	2300      	movs	r3, #0
 8005f54:	220a      	movs	r2, #10
 8005f56:	4648      	mov	r0, r9
 8005f58:	f000 f968 	bl	800622c <__multadd>
 8005f5c:	9002      	str	r0, [sp, #8]
 8005f5e:	e7eb      	b.n	8005f38 <_dtoa_r+0xb70>
 8005f60:	08008a65 	.word	0x08008a65
 8005f64:	080089e9 	.word	0x080089e9

08005f68 <_free_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d041      	beq.n	8005ff4 <_free_r+0x8c>
 8005f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f74:	1f0c      	subs	r4, r1, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfb8      	it	lt
 8005f7a:	18e4      	addlt	r4, r4, r3
 8005f7c:	f000 f8e8 	bl	8006150 <__malloc_lock>
 8005f80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff8 <_free_r+0x90>)
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	b933      	cbnz	r3, 8005f94 <_free_r+0x2c>
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	6014      	str	r4, [r2, #0]
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f90:	f000 b8e4 	b.w	800615c <__malloc_unlock>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d908      	bls.n	8005faa <_free_r+0x42>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	1821      	adds	r1, r4, r0
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf01      	itttt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	1809      	addeq	r1, r1, r0
 8005fa6:	6021      	streq	r1, [r4, #0]
 8005fa8:	e7ed      	b.n	8005f86 <_free_r+0x1e>
 8005faa:	461a      	mov	r2, r3
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b10b      	cbz	r3, 8005fb4 <_free_r+0x4c>
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x42>
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	1850      	adds	r0, r2, r1
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x6c>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	1850      	adds	r0, r2, r1
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	d1e0      	bne.n	8005f8a <_free_r+0x22>
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	4408      	add	r0, r1
 8005fd0:	6010      	str	r0, [r2, #0]
 8005fd2:	e7da      	b.n	8005f8a <_free_r+0x22>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x74>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	e7d6      	b.n	8005f8a <_free_r+0x22>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	1821      	adds	r1, r4, r0
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf04      	itt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	bf04      	itt	eq
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	6054      	str	r4, [r2, #4]
 8005ff2:	e7ca      	b.n	8005f8a <_free_r+0x22>
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000414 	.word	0x20000414

08005ffc <malloc>:
 8005ffc:	4b02      	ldr	r3, [pc, #8]	@ (8006008 <malloc+0xc>)
 8005ffe:	4601      	mov	r1, r0
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	f000 b825 	b.w	8006050 <_malloc_r>
 8006006:	bf00      	nop
 8006008:	20000018 	.word	0x20000018

0800600c <sbrk_aligned>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4e0f      	ldr	r6, [pc, #60]	@ (800604c <sbrk_aligned+0x40>)
 8006010:	460c      	mov	r4, r1
 8006012:	6831      	ldr	r1, [r6, #0]
 8006014:	4605      	mov	r5, r0
 8006016:	b911      	cbnz	r1, 800601e <sbrk_aligned+0x12>
 8006018:	f001 fe88 	bl	8007d2c <_sbrk_r>
 800601c:	6030      	str	r0, [r6, #0]
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f001 fe83 	bl	8007d2c <_sbrk_r>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	d103      	bne.n	8006032 <sbrk_aligned+0x26>
 800602a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800602e:	4620      	mov	r0, r4
 8006030:	bd70      	pop	{r4, r5, r6, pc}
 8006032:	1cc4      	adds	r4, r0, #3
 8006034:	f024 0403 	bic.w	r4, r4, #3
 8006038:	42a0      	cmp	r0, r4
 800603a:	d0f8      	beq.n	800602e <sbrk_aligned+0x22>
 800603c:	1a21      	subs	r1, r4, r0
 800603e:	4628      	mov	r0, r5
 8006040:	f001 fe74 	bl	8007d2c <_sbrk_r>
 8006044:	3001      	adds	r0, #1
 8006046:	d1f2      	bne.n	800602e <sbrk_aligned+0x22>
 8006048:	e7ef      	b.n	800602a <sbrk_aligned+0x1e>
 800604a:	bf00      	nop
 800604c:	20000410 	.word	0x20000410

08006050 <_malloc_r>:
 8006050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006054:	1ccd      	adds	r5, r1, #3
 8006056:	f025 0503 	bic.w	r5, r5, #3
 800605a:	3508      	adds	r5, #8
 800605c:	2d0c      	cmp	r5, #12
 800605e:	bf38      	it	cc
 8006060:	250c      	movcc	r5, #12
 8006062:	2d00      	cmp	r5, #0
 8006064:	4606      	mov	r6, r0
 8006066:	db01      	blt.n	800606c <_malloc_r+0x1c>
 8006068:	42a9      	cmp	r1, r5
 800606a:	d904      	bls.n	8006076 <_malloc_r+0x26>
 800606c:	230c      	movs	r3, #12
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	2000      	movs	r0, #0
 8006072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800614c <_malloc_r+0xfc>
 800607a:	f000 f869 	bl	8006150 <__malloc_lock>
 800607e:	f8d8 3000 	ldr.w	r3, [r8]
 8006082:	461c      	mov	r4, r3
 8006084:	bb44      	cbnz	r4, 80060d8 <_malloc_r+0x88>
 8006086:	4629      	mov	r1, r5
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff ffbf 	bl	800600c <sbrk_aligned>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	4604      	mov	r4, r0
 8006092:	d158      	bne.n	8006146 <_malloc_r+0xf6>
 8006094:	f8d8 4000 	ldr.w	r4, [r8]
 8006098:	4627      	mov	r7, r4
 800609a:	2f00      	cmp	r7, #0
 800609c:	d143      	bne.n	8006126 <_malloc_r+0xd6>
 800609e:	2c00      	cmp	r4, #0
 80060a0:	d04b      	beq.n	800613a <_malloc_r+0xea>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	4639      	mov	r1, r7
 80060a6:	4630      	mov	r0, r6
 80060a8:	eb04 0903 	add.w	r9, r4, r3
 80060ac:	f001 fe3e 	bl	8007d2c <_sbrk_r>
 80060b0:	4581      	cmp	r9, r0
 80060b2:	d142      	bne.n	800613a <_malloc_r+0xea>
 80060b4:	6821      	ldr	r1, [r4, #0]
 80060b6:	1a6d      	subs	r5, r5, r1
 80060b8:	4629      	mov	r1, r5
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ffa6 	bl	800600c <sbrk_aligned>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d03a      	beq.n	800613a <_malloc_r+0xea>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	442b      	add	r3, r5
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	f8d8 3000 	ldr.w	r3, [r8]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	bb62      	cbnz	r2, 800612c <_malloc_r+0xdc>
 80060d2:	f8c8 7000 	str.w	r7, [r8]
 80060d6:	e00f      	b.n	80060f8 <_malloc_r+0xa8>
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	1b52      	subs	r2, r2, r5
 80060dc:	d420      	bmi.n	8006120 <_malloc_r+0xd0>
 80060de:	2a0b      	cmp	r2, #11
 80060e0:	d917      	bls.n	8006112 <_malloc_r+0xc2>
 80060e2:	1961      	adds	r1, r4, r5
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	6025      	str	r5, [r4, #0]
 80060e8:	bf18      	it	ne
 80060ea:	6059      	strne	r1, [r3, #4]
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	bf08      	it	eq
 80060f0:	f8c8 1000 	streq.w	r1, [r8]
 80060f4:	5162      	str	r2, [r4, r5]
 80060f6:	604b      	str	r3, [r1, #4]
 80060f8:	4630      	mov	r0, r6
 80060fa:	f000 f82f 	bl	800615c <__malloc_unlock>
 80060fe:	f104 000b 	add.w	r0, r4, #11
 8006102:	1d23      	adds	r3, r4, #4
 8006104:	f020 0007 	bic.w	r0, r0, #7
 8006108:	1ac2      	subs	r2, r0, r3
 800610a:	bf1c      	itt	ne
 800610c:	1a1b      	subne	r3, r3, r0
 800610e:	50a3      	strne	r3, [r4, r2]
 8006110:	e7af      	b.n	8006072 <_malloc_r+0x22>
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	42a3      	cmp	r3, r4
 8006116:	bf0c      	ite	eq
 8006118:	f8c8 2000 	streq.w	r2, [r8]
 800611c:	605a      	strne	r2, [r3, #4]
 800611e:	e7eb      	b.n	80060f8 <_malloc_r+0xa8>
 8006120:	4623      	mov	r3, r4
 8006122:	6864      	ldr	r4, [r4, #4]
 8006124:	e7ae      	b.n	8006084 <_malloc_r+0x34>
 8006126:	463c      	mov	r4, r7
 8006128:	687f      	ldr	r7, [r7, #4]
 800612a:	e7b6      	b.n	800609a <_malloc_r+0x4a>
 800612c:	461a      	mov	r2, r3
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	42a3      	cmp	r3, r4
 8006132:	d1fb      	bne.n	800612c <_malloc_r+0xdc>
 8006134:	2300      	movs	r3, #0
 8006136:	6053      	str	r3, [r2, #4]
 8006138:	e7de      	b.n	80060f8 <_malloc_r+0xa8>
 800613a:	230c      	movs	r3, #12
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	4630      	mov	r0, r6
 8006140:	f000 f80c 	bl	800615c <__malloc_unlock>
 8006144:	e794      	b.n	8006070 <_malloc_r+0x20>
 8006146:	6005      	str	r5, [r0, #0]
 8006148:	e7d6      	b.n	80060f8 <_malloc_r+0xa8>
 800614a:	bf00      	nop
 800614c:	20000414 	.word	0x20000414

08006150 <__malloc_lock>:
 8006150:	4801      	ldr	r0, [pc, #4]	@ (8006158 <__malloc_lock+0x8>)
 8006152:	f7ff b8a8 	b.w	80052a6 <__retarget_lock_acquire_recursive>
 8006156:	bf00      	nop
 8006158:	2000040c 	.word	0x2000040c

0800615c <__malloc_unlock>:
 800615c:	4801      	ldr	r0, [pc, #4]	@ (8006164 <__malloc_unlock+0x8>)
 800615e:	f7ff b8a3 	b.w	80052a8 <__retarget_lock_release_recursive>
 8006162:	bf00      	nop
 8006164:	2000040c 	.word	0x2000040c

08006168 <_Balloc>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	69c6      	ldr	r6, [r0, #28]
 800616c:	4604      	mov	r4, r0
 800616e:	460d      	mov	r5, r1
 8006170:	b976      	cbnz	r6, 8006190 <_Balloc+0x28>
 8006172:	2010      	movs	r0, #16
 8006174:	f7ff ff42 	bl	8005ffc <malloc>
 8006178:	4602      	mov	r2, r0
 800617a:	61e0      	str	r0, [r4, #28]
 800617c:	b920      	cbnz	r0, 8006188 <_Balloc+0x20>
 800617e:	4b18      	ldr	r3, [pc, #96]	@ (80061e0 <_Balloc+0x78>)
 8006180:	4818      	ldr	r0, [pc, #96]	@ (80061e4 <_Balloc+0x7c>)
 8006182:	216b      	movs	r1, #107	@ 0x6b
 8006184:	f001 fdf8 	bl	8007d78 <__assert_func>
 8006188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800618c:	6006      	str	r6, [r0, #0]
 800618e:	60c6      	str	r6, [r0, #12]
 8006190:	69e6      	ldr	r6, [r4, #28]
 8006192:	68f3      	ldr	r3, [r6, #12]
 8006194:	b183      	cbz	r3, 80061b8 <_Balloc+0x50>
 8006196:	69e3      	ldr	r3, [r4, #28]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800619e:	b9b8      	cbnz	r0, 80061d0 <_Balloc+0x68>
 80061a0:	2101      	movs	r1, #1
 80061a2:	fa01 f605 	lsl.w	r6, r1, r5
 80061a6:	1d72      	adds	r2, r6, #5
 80061a8:	0092      	lsls	r2, r2, #2
 80061aa:	4620      	mov	r0, r4
 80061ac:	f001 fe02 	bl	8007db4 <_calloc_r>
 80061b0:	b160      	cbz	r0, 80061cc <_Balloc+0x64>
 80061b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061b6:	e00e      	b.n	80061d6 <_Balloc+0x6e>
 80061b8:	2221      	movs	r2, #33	@ 0x21
 80061ba:	2104      	movs	r1, #4
 80061bc:	4620      	mov	r0, r4
 80061be:	f001 fdf9 	bl	8007db4 <_calloc_r>
 80061c2:	69e3      	ldr	r3, [r4, #28]
 80061c4:	60f0      	str	r0, [r6, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e4      	bne.n	8006196 <_Balloc+0x2e>
 80061cc:	2000      	movs	r0, #0
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
 80061d0:	6802      	ldr	r2, [r0, #0]
 80061d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061d6:	2300      	movs	r3, #0
 80061d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061dc:	e7f7      	b.n	80061ce <_Balloc+0x66>
 80061de:	bf00      	nop
 80061e0:	080089f6 	.word	0x080089f6
 80061e4:	08008a76 	.word	0x08008a76

080061e8 <_Bfree>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	69c6      	ldr	r6, [r0, #28]
 80061ec:	4605      	mov	r5, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	b976      	cbnz	r6, 8006210 <_Bfree+0x28>
 80061f2:	2010      	movs	r0, #16
 80061f4:	f7ff ff02 	bl	8005ffc <malloc>
 80061f8:	4602      	mov	r2, r0
 80061fa:	61e8      	str	r0, [r5, #28]
 80061fc:	b920      	cbnz	r0, 8006208 <_Bfree+0x20>
 80061fe:	4b09      	ldr	r3, [pc, #36]	@ (8006224 <_Bfree+0x3c>)
 8006200:	4809      	ldr	r0, [pc, #36]	@ (8006228 <_Bfree+0x40>)
 8006202:	218f      	movs	r1, #143	@ 0x8f
 8006204:	f001 fdb8 	bl	8007d78 <__assert_func>
 8006208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800620c:	6006      	str	r6, [r0, #0]
 800620e:	60c6      	str	r6, [r0, #12]
 8006210:	b13c      	cbz	r4, 8006222 <_Bfree+0x3a>
 8006212:	69eb      	ldr	r3, [r5, #28]
 8006214:	6862      	ldr	r2, [r4, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800621c:	6021      	str	r1, [r4, #0]
 800621e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	080089f6 	.word	0x080089f6
 8006228:	08008a76 	.word	0x08008a76

0800622c <__multadd>:
 800622c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006230:	690d      	ldr	r5, [r1, #16]
 8006232:	4607      	mov	r7, r0
 8006234:	460c      	mov	r4, r1
 8006236:	461e      	mov	r6, r3
 8006238:	f101 0c14 	add.w	ip, r1, #20
 800623c:	2000      	movs	r0, #0
 800623e:	f8dc 3000 	ldr.w	r3, [ip]
 8006242:	b299      	uxth	r1, r3
 8006244:	fb02 6101 	mla	r1, r2, r1, r6
 8006248:	0c1e      	lsrs	r6, r3, #16
 800624a:	0c0b      	lsrs	r3, r1, #16
 800624c:	fb02 3306 	mla	r3, r2, r6, r3
 8006250:	b289      	uxth	r1, r1
 8006252:	3001      	adds	r0, #1
 8006254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006258:	4285      	cmp	r5, r0
 800625a:	f84c 1b04 	str.w	r1, [ip], #4
 800625e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006262:	dcec      	bgt.n	800623e <__multadd+0x12>
 8006264:	b30e      	cbz	r6, 80062aa <__multadd+0x7e>
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	42ab      	cmp	r3, r5
 800626a:	dc19      	bgt.n	80062a0 <__multadd+0x74>
 800626c:	6861      	ldr	r1, [r4, #4]
 800626e:	4638      	mov	r0, r7
 8006270:	3101      	adds	r1, #1
 8006272:	f7ff ff79 	bl	8006168 <_Balloc>
 8006276:	4680      	mov	r8, r0
 8006278:	b928      	cbnz	r0, 8006286 <__multadd+0x5a>
 800627a:	4602      	mov	r2, r0
 800627c:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <__multadd+0x84>)
 800627e:	480d      	ldr	r0, [pc, #52]	@ (80062b4 <__multadd+0x88>)
 8006280:	21ba      	movs	r1, #186	@ 0xba
 8006282:	f001 fd79 	bl	8007d78 <__assert_func>
 8006286:	6922      	ldr	r2, [r4, #16]
 8006288:	3202      	adds	r2, #2
 800628a:	f104 010c 	add.w	r1, r4, #12
 800628e:	0092      	lsls	r2, r2, #2
 8006290:	300c      	adds	r0, #12
 8006292:	f001 fd5b 	bl	8007d4c <memcpy>
 8006296:	4621      	mov	r1, r4
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff ffa5 	bl	80061e8 <_Bfree>
 800629e:	4644      	mov	r4, r8
 80062a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062a4:	3501      	adds	r5, #1
 80062a6:	615e      	str	r6, [r3, #20]
 80062a8:	6125      	str	r5, [r4, #16]
 80062aa:	4620      	mov	r0, r4
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	08008a65 	.word	0x08008a65
 80062b4:	08008a76 	.word	0x08008a76

080062b8 <__s2b>:
 80062b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062bc:	460c      	mov	r4, r1
 80062be:	4615      	mov	r5, r2
 80062c0:	461f      	mov	r7, r3
 80062c2:	2209      	movs	r2, #9
 80062c4:	3308      	adds	r3, #8
 80062c6:	4606      	mov	r6, r0
 80062c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062cc:	2100      	movs	r1, #0
 80062ce:	2201      	movs	r2, #1
 80062d0:	429a      	cmp	r2, r3
 80062d2:	db09      	blt.n	80062e8 <__s2b+0x30>
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff ff47 	bl	8006168 <_Balloc>
 80062da:	b940      	cbnz	r0, 80062ee <__s2b+0x36>
 80062dc:	4602      	mov	r2, r0
 80062de:	4b19      	ldr	r3, [pc, #100]	@ (8006344 <__s2b+0x8c>)
 80062e0:	4819      	ldr	r0, [pc, #100]	@ (8006348 <__s2b+0x90>)
 80062e2:	21d3      	movs	r1, #211	@ 0xd3
 80062e4:	f001 fd48 	bl	8007d78 <__assert_func>
 80062e8:	0052      	lsls	r2, r2, #1
 80062ea:	3101      	adds	r1, #1
 80062ec:	e7f0      	b.n	80062d0 <__s2b+0x18>
 80062ee:	9b08      	ldr	r3, [sp, #32]
 80062f0:	6143      	str	r3, [r0, #20]
 80062f2:	2d09      	cmp	r5, #9
 80062f4:	f04f 0301 	mov.w	r3, #1
 80062f8:	6103      	str	r3, [r0, #16]
 80062fa:	dd16      	ble.n	800632a <__s2b+0x72>
 80062fc:	f104 0909 	add.w	r9, r4, #9
 8006300:	46c8      	mov	r8, r9
 8006302:	442c      	add	r4, r5
 8006304:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006308:	4601      	mov	r1, r0
 800630a:	3b30      	subs	r3, #48	@ 0x30
 800630c:	220a      	movs	r2, #10
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ff8c 	bl	800622c <__multadd>
 8006314:	45a0      	cmp	r8, r4
 8006316:	d1f5      	bne.n	8006304 <__s2b+0x4c>
 8006318:	f1a5 0408 	sub.w	r4, r5, #8
 800631c:	444c      	add	r4, r9
 800631e:	1b2d      	subs	r5, r5, r4
 8006320:	1963      	adds	r3, r4, r5
 8006322:	42bb      	cmp	r3, r7
 8006324:	db04      	blt.n	8006330 <__s2b+0x78>
 8006326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632a:	340a      	adds	r4, #10
 800632c:	2509      	movs	r5, #9
 800632e:	e7f6      	b.n	800631e <__s2b+0x66>
 8006330:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006334:	4601      	mov	r1, r0
 8006336:	3b30      	subs	r3, #48	@ 0x30
 8006338:	220a      	movs	r2, #10
 800633a:	4630      	mov	r0, r6
 800633c:	f7ff ff76 	bl	800622c <__multadd>
 8006340:	e7ee      	b.n	8006320 <__s2b+0x68>
 8006342:	bf00      	nop
 8006344:	08008a65 	.word	0x08008a65
 8006348:	08008a76 	.word	0x08008a76

0800634c <__hi0bits>:
 800634c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006350:	4603      	mov	r3, r0
 8006352:	bf36      	itet	cc
 8006354:	0403      	lslcc	r3, r0, #16
 8006356:	2000      	movcs	r0, #0
 8006358:	2010      	movcc	r0, #16
 800635a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800635e:	bf3c      	itt	cc
 8006360:	021b      	lslcc	r3, r3, #8
 8006362:	3008      	addcc	r0, #8
 8006364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006368:	bf3c      	itt	cc
 800636a:	011b      	lslcc	r3, r3, #4
 800636c:	3004      	addcc	r0, #4
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006372:	bf3c      	itt	cc
 8006374:	009b      	lslcc	r3, r3, #2
 8006376:	3002      	addcc	r0, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	db05      	blt.n	8006388 <__hi0bits+0x3c>
 800637c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006380:	f100 0001 	add.w	r0, r0, #1
 8006384:	bf08      	it	eq
 8006386:	2020      	moveq	r0, #32
 8006388:	4770      	bx	lr

0800638a <__lo0bits>:
 800638a:	6803      	ldr	r3, [r0, #0]
 800638c:	4602      	mov	r2, r0
 800638e:	f013 0007 	ands.w	r0, r3, #7
 8006392:	d00b      	beq.n	80063ac <__lo0bits+0x22>
 8006394:	07d9      	lsls	r1, r3, #31
 8006396:	d421      	bmi.n	80063dc <__lo0bits+0x52>
 8006398:	0798      	lsls	r0, r3, #30
 800639a:	bf49      	itett	mi
 800639c:	085b      	lsrmi	r3, r3, #1
 800639e:	089b      	lsrpl	r3, r3, #2
 80063a0:	2001      	movmi	r0, #1
 80063a2:	6013      	strmi	r3, [r2, #0]
 80063a4:	bf5c      	itt	pl
 80063a6:	6013      	strpl	r3, [r2, #0]
 80063a8:	2002      	movpl	r0, #2
 80063aa:	4770      	bx	lr
 80063ac:	b299      	uxth	r1, r3
 80063ae:	b909      	cbnz	r1, 80063b4 <__lo0bits+0x2a>
 80063b0:	0c1b      	lsrs	r3, r3, #16
 80063b2:	2010      	movs	r0, #16
 80063b4:	b2d9      	uxtb	r1, r3
 80063b6:	b909      	cbnz	r1, 80063bc <__lo0bits+0x32>
 80063b8:	3008      	adds	r0, #8
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	0719      	lsls	r1, r3, #28
 80063be:	bf04      	itt	eq
 80063c0:	091b      	lsreq	r3, r3, #4
 80063c2:	3004      	addeq	r0, #4
 80063c4:	0799      	lsls	r1, r3, #30
 80063c6:	bf04      	itt	eq
 80063c8:	089b      	lsreq	r3, r3, #2
 80063ca:	3002      	addeq	r0, #2
 80063cc:	07d9      	lsls	r1, r3, #31
 80063ce:	d403      	bmi.n	80063d8 <__lo0bits+0x4e>
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	f100 0001 	add.w	r0, r0, #1
 80063d6:	d003      	beq.n	80063e0 <__lo0bits+0x56>
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4770      	bx	lr
 80063dc:	2000      	movs	r0, #0
 80063de:	4770      	bx	lr
 80063e0:	2020      	movs	r0, #32
 80063e2:	4770      	bx	lr

080063e4 <__i2b>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	460c      	mov	r4, r1
 80063e8:	2101      	movs	r1, #1
 80063ea:	f7ff febd 	bl	8006168 <_Balloc>
 80063ee:	4602      	mov	r2, r0
 80063f0:	b928      	cbnz	r0, 80063fe <__i2b+0x1a>
 80063f2:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <__i2b+0x24>)
 80063f4:	4805      	ldr	r0, [pc, #20]	@ (800640c <__i2b+0x28>)
 80063f6:	f240 1145 	movw	r1, #325	@ 0x145
 80063fa:	f001 fcbd 	bl	8007d78 <__assert_func>
 80063fe:	2301      	movs	r3, #1
 8006400:	6144      	str	r4, [r0, #20]
 8006402:	6103      	str	r3, [r0, #16]
 8006404:	bd10      	pop	{r4, pc}
 8006406:	bf00      	nop
 8006408:	08008a65 	.word	0x08008a65
 800640c:	08008a76 	.word	0x08008a76

08006410 <__multiply>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	4617      	mov	r7, r2
 8006416:	690a      	ldr	r2, [r1, #16]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	429a      	cmp	r2, r3
 800641c:	bfa8      	it	ge
 800641e:	463b      	movge	r3, r7
 8006420:	4689      	mov	r9, r1
 8006422:	bfa4      	itt	ge
 8006424:	460f      	movge	r7, r1
 8006426:	4699      	movge	r9, r3
 8006428:	693d      	ldr	r5, [r7, #16]
 800642a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	eb05 060a 	add.w	r6, r5, sl
 8006436:	42b3      	cmp	r3, r6
 8006438:	b085      	sub	sp, #20
 800643a:	bfb8      	it	lt
 800643c:	3101      	addlt	r1, #1
 800643e:	f7ff fe93 	bl	8006168 <_Balloc>
 8006442:	b930      	cbnz	r0, 8006452 <__multiply+0x42>
 8006444:	4602      	mov	r2, r0
 8006446:	4b41      	ldr	r3, [pc, #260]	@ (800654c <__multiply+0x13c>)
 8006448:	4841      	ldr	r0, [pc, #260]	@ (8006550 <__multiply+0x140>)
 800644a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800644e:	f001 fc93 	bl	8007d78 <__assert_func>
 8006452:	f100 0414 	add.w	r4, r0, #20
 8006456:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800645a:	4623      	mov	r3, r4
 800645c:	2200      	movs	r2, #0
 800645e:	4573      	cmp	r3, lr
 8006460:	d320      	bcc.n	80064a4 <__multiply+0x94>
 8006462:	f107 0814 	add.w	r8, r7, #20
 8006466:	f109 0114 	add.w	r1, r9, #20
 800646a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800646e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006472:	9302      	str	r3, [sp, #8]
 8006474:	1beb      	subs	r3, r5, r7
 8006476:	3b15      	subs	r3, #21
 8006478:	f023 0303 	bic.w	r3, r3, #3
 800647c:	3304      	adds	r3, #4
 800647e:	3715      	adds	r7, #21
 8006480:	42bd      	cmp	r5, r7
 8006482:	bf38      	it	cc
 8006484:	2304      	movcc	r3, #4
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	9b02      	ldr	r3, [sp, #8]
 800648a:	9103      	str	r1, [sp, #12]
 800648c:	428b      	cmp	r3, r1
 800648e:	d80c      	bhi.n	80064aa <__multiply+0x9a>
 8006490:	2e00      	cmp	r6, #0
 8006492:	dd03      	ble.n	800649c <__multiply+0x8c>
 8006494:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006498:	2b00      	cmp	r3, #0
 800649a:	d055      	beq.n	8006548 <__multiply+0x138>
 800649c:	6106      	str	r6, [r0, #16]
 800649e:	b005      	add	sp, #20
 80064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	f843 2b04 	str.w	r2, [r3], #4
 80064a8:	e7d9      	b.n	800645e <__multiply+0x4e>
 80064aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80064ae:	f1ba 0f00 	cmp.w	sl, #0
 80064b2:	d01f      	beq.n	80064f4 <__multiply+0xe4>
 80064b4:	46c4      	mov	ip, r8
 80064b6:	46a1      	mov	r9, r4
 80064b8:	2700      	movs	r7, #0
 80064ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 80064be:	f8d9 3000 	ldr.w	r3, [r9]
 80064c2:	fa1f fb82 	uxth.w	fp, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80064cc:	443b      	add	r3, r7
 80064ce:	f8d9 7000 	ldr.w	r7, [r9]
 80064d2:	0c12      	lsrs	r2, r2, #16
 80064d4:	0c3f      	lsrs	r7, r7, #16
 80064d6:	fb0a 7202 	mla	r2, sl, r2, r7
 80064da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80064de:	b29b      	uxth	r3, r3
 80064e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064e4:	4565      	cmp	r5, ip
 80064e6:	f849 3b04 	str.w	r3, [r9], #4
 80064ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80064ee:	d8e4      	bhi.n	80064ba <__multiply+0xaa>
 80064f0:	9b01      	ldr	r3, [sp, #4]
 80064f2:	50e7      	str	r7, [r4, r3]
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80064fa:	3104      	adds	r1, #4
 80064fc:	f1b9 0f00 	cmp.w	r9, #0
 8006500:	d020      	beq.n	8006544 <__multiply+0x134>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	4647      	mov	r7, r8
 8006506:	46a4      	mov	ip, r4
 8006508:	f04f 0a00 	mov.w	sl, #0
 800650c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006510:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006514:	fb09 220b 	mla	r2, r9, fp, r2
 8006518:	4452      	add	r2, sl
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006520:	f84c 3b04 	str.w	r3, [ip], #4
 8006524:	f857 3b04 	ldr.w	r3, [r7], #4
 8006528:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800652c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006530:	fb09 330a 	mla	r3, r9, sl, r3
 8006534:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006538:	42bd      	cmp	r5, r7
 800653a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800653e:	d8e5      	bhi.n	800650c <__multiply+0xfc>
 8006540:	9a01      	ldr	r2, [sp, #4]
 8006542:	50a3      	str	r3, [r4, r2]
 8006544:	3404      	adds	r4, #4
 8006546:	e79f      	b.n	8006488 <__multiply+0x78>
 8006548:	3e01      	subs	r6, #1
 800654a:	e7a1      	b.n	8006490 <__multiply+0x80>
 800654c:	08008a65 	.word	0x08008a65
 8006550:	08008a76 	.word	0x08008a76

08006554 <__pow5mult>:
 8006554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006558:	4615      	mov	r5, r2
 800655a:	f012 0203 	ands.w	r2, r2, #3
 800655e:	4607      	mov	r7, r0
 8006560:	460e      	mov	r6, r1
 8006562:	d007      	beq.n	8006574 <__pow5mult+0x20>
 8006564:	4c25      	ldr	r4, [pc, #148]	@ (80065fc <__pow5mult+0xa8>)
 8006566:	3a01      	subs	r2, #1
 8006568:	2300      	movs	r3, #0
 800656a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800656e:	f7ff fe5d 	bl	800622c <__multadd>
 8006572:	4606      	mov	r6, r0
 8006574:	10ad      	asrs	r5, r5, #2
 8006576:	d03d      	beq.n	80065f4 <__pow5mult+0xa0>
 8006578:	69fc      	ldr	r4, [r7, #28]
 800657a:	b97c      	cbnz	r4, 800659c <__pow5mult+0x48>
 800657c:	2010      	movs	r0, #16
 800657e:	f7ff fd3d 	bl	8005ffc <malloc>
 8006582:	4602      	mov	r2, r0
 8006584:	61f8      	str	r0, [r7, #28]
 8006586:	b928      	cbnz	r0, 8006594 <__pow5mult+0x40>
 8006588:	4b1d      	ldr	r3, [pc, #116]	@ (8006600 <__pow5mult+0xac>)
 800658a:	481e      	ldr	r0, [pc, #120]	@ (8006604 <__pow5mult+0xb0>)
 800658c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006590:	f001 fbf2 	bl	8007d78 <__assert_func>
 8006594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006598:	6004      	str	r4, [r0, #0]
 800659a:	60c4      	str	r4, [r0, #12]
 800659c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80065a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065a4:	b94c      	cbnz	r4, 80065ba <__pow5mult+0x66>
 80065a6:	f240 2171 	movw	r1, #625	@ 0x271
 80065aa:	4638      	mov	r0, r7
 80065ac:	f7ff ff1a 	bl	80063e4 <__i2b>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80065b6:	4604      	mov	r4, r0
 80065b8:	6003      	str	r3, [r0, #0]
 80065ba:	f04f 0900 	mov.w	r9, #0
 80065be:	07eb      	lsls	r3, r5, #31
 80065c0:	d50a      	bpl.n	80065d8 <__pow5mult+0x84>
 80065c2:	4631      	mov	r1, r6
 80065c4:	4622      	mov	r2, r4
 80065c6:	4638      	mov	r0, r7
 80065c8:	f7ff ff22 	bl	8006410 <__multiply>
 80065cc:	4631      	mov	r1, r6
 80065ce:	4680      	mov	r8, r0
 80065d0:	4638      	mov	r0, r7
 80065d2:	f7ff fe09 	bl	80061e8 <_Bfree>
 80065d6:	4646      	mov	r6, r8
 80065d8:	106d      	asrs	r5, r5, #1
 80065da:	d00b      	beq.n	80065f4 <__pow5mult+0xa0>
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	b938      	cbnz	r0, 80065f0 <__pow5mult+0x9c>
 80065e0:	4622      	mov	r2, r4
 80065e2:	4621      	mov	r1, r4
 80065e4:	4638      	mov	r0, r7
 80065e6:	f7ff ff13 	bl	8006410 <__multiply>
 80065ea:	6020      	str	r0, [r4, #0]
 80065ec:	f8c0 9000 	str.w	r9, [r0]
 80065f0:	4604      	mov	r4, r0
 80065f2:	e7e4      	b.n	80065be <__pow5mult+0x6a>
 80065f4:	4630      	mov	r0, r6
 80065f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fa:	bf00      	nop
 80065fc:	08008b88 	.word	0x08008b88
 8006600:	080089f6 	.word	0x080089f6
 8006604:	08008a76 	.word	0x08008a76

08006608 <__lshift>:
 8006608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	460c      	mov	r4, r1
 800660e:	6849      	ldr	r1, [r1, #4]
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	4607      	mov	r7, r0
 800661a:	4691      	mov	r9, r2
 800661c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006620:	f108 0601 	add.w	r6, r8, #1
 8006624:	42b3      	cmp	r3, r6
 8006626:	db0b      	blt.n	8006640 <__lshift+0x38>
 8006628:	4638      	mov	r0, r7
 800662a:	f7ff fd9d 	bl	8006168 <_Balloc>
 800662e:	4605      	mov	r5, r0
 8006630:	b948      	cbnz	r0, 8006646 <__lshift+0x3e>
 8006632:	4602      	mov	r2, r0
 8006634:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <__lshift+0xd0>)
 8006636:	4829      	ldr	r0, [pc, #164]	@ (80066dc <__lshift+0xd4>)
 8006638:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800663c:	f001 fb9c 	bl	8007d78 <__assert_func>
 8006640:	3101      	adds	r1, #1
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	e7ee      	b.n	8006624 <__lshift+0x1c>
 8006646:	2300      	movs	r3, #0
 8006648:	f100 0114 	add.w	r1, r0, #20
 800664c:	f100 0210 	add.w	r2, r0, #16
 8006650:	4618      	mov	r0, r3
 8006652:	4553      	cmp	r3, sl
 8006654:	db33      	blt.n	80066be <__lshift+0xb6>
 8006656:	6920      	ldr	r0, [r4, #16]
 8006658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800665c:	f104 0314 	add.w	r3, r4, #20
 8006660:	f019 091f 	ands.w	r9, r9, #31
 8006664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800666c:	d02b      	beq.n	80066c6 <__lshift+0xbe>
 800666e:	f1c9 0e20 	rsb	lr, r9, #32
 8006672:	468a      	mov	sl, r1
 8006674:	2200      	movs	r2, #0
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	fa00 f009 	lsl.w	r0, r0, r9
 800667c:	4310      	orrs	r0, r2
 800667e:	f84a 0b04 	str.w	r0, [sl], #4
 8006682:	f853 2b04 	ldr.w	r2, [r3], #4
 8006686:	459c      	cmp	ip, r3
 8006688:	fa22 f20e 	lsr.w	r2, r2, lr
 800668c:	d8f3      	bhi.n	8006676 <__lshift+0x6e>
 800668e:	ebac 0304 	sub.w	r3, ip, r4
 8006692:	3b15      	subs	r3, #21
 8006694:	f023 0303 	bic.w	r3, r3, #3
 8006698:	3304      	adds	r3, #4
 800669a:	f104 0015 	add.w	r0, r4, #21
 800669e:	4560      	cmp	r0, ip
 80066a0:	bf88      	it	hi
 80066a2:	2304      	movhi	r3, #4
 80066a4:	50ca      	str	r2, [r1, r3]
 80066a6:	b10a      	cbz	r2, 80066ac <__lshift+0xa4>
 80066a8:	f108 0602 	add.w	r6, r8, #2
 80066ac:	3e01      	subs	r6, #1
 80066ae:	4638      	mov	r0, r7
 80066b0:	612e      	str	r6, [r5, #16]
 80066b2:	4621      	mov	r1, r4
 80066b4:	f7ff fd98 	bl	80061e8 <_Bfree>
 80066b8:	4628      	mov	r0, r5
 80066ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066be:	f842 0f04 	str.w	r0, [r2, #4]!
 80066c2:	3301      	adds	r3, #1
 80066c4:	e7c5      	b.n	8006652 <__lshift+0x4a>
 80066c6:	3904      	subs	r1, #4
 80066c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80066d0:	459c      	cmp	ip, r3
 80066d2:	d8f9      	bhi.n	80066c8 <__lshift+0xc0>
 80066d4:	e7ea      	b.n	80066ac <__lshift+0xa4>
 80066d6:	bf00      	nop
 80066d8:	08008a65 	.word	0x08008a65
 80066dc:	08008a76 	.word	0x08008a76

080066e0 <__mcmp>:
 80066e0:	690a      	ldr	r2, [r1, #16]
 80066e2:	4603      	mov	r3, r0
 80066e4:	6900      	ldr	r0, [r0, #16]
 80066e6:	1a80      	subs	r0, r0, r2
 80066e8:	b530      	push	{r4, r5, lr}
 80066ea:	d10e      	bne.n	800670a <__mcmp+0x2a>
 80066ec:	3314      	adds	r3, #20
 80066ee:	3114      	adds	r1, #20
 80066f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006700:	4295      	cmp	r5, r2
 8006702:	d003      	beq.n	800670c <__mcmp+0x2c>
 8006704:	d205      	bcs.n	8006712 <__mcmp+0x32>
 8006706:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800670a:	bd30      	pop	{r4, r5, pc}
 800670c:	42a3      	cmp	r3, r4
 800670e:	d3f3      	bcc.n	80066f8 <__mcmp+0x18>
 8006710:	e7fb      	b.n	800670a <__mcmp+0x2a>
 8006712:	2001      	movs	r0, #1
 8006714:	e7f9      	b.n	800670a <__mcmp+0x2a>
	...

08006718 <__mdiff>:
 8006718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	4689      	mov	r9, r1
 800671e:	4606      	mov	r6, r0
 8006720:	4611      	mov	r1, r2
 8006722:	4648      	mov	r0, r9
 8006724:	4614      	mov	r4, r2
 8006726:	f7ff ffdb 	bl	80066e0 <__mcmp>
 800672a:	1e05      	subs	r5, r0, #0
 800672c:	d112      	bne.n	8006754 <__mdiff+0x3c>
 800672e:	4629      	mov	r1, r5
 8006730:	4630      	mov	r0, r6
 8006732:	f7ff fd19 	bl	8006168 <_Balloc>
 8006736:	4602      	mov	r2, r0
 8006738:	b928      	cbnz	r0, 8006746 <__mdiff+0x2e>
 800673a:	4b3f      	ldr	r3, [pc, #252]	@ (8006838 <__mdiff+0x120>)
 800673c:	f240 2137 	movw	r1, #567	@ 0x237
 8006740:	483e      	ldr	r0, [pc, #248]	@ (800683c <__mdiff+0x124>)
 8006742:	f001 fb19 	bl	8007d78 <__assert_func>
 8006746:	2301      	movs	r3, #1
 8006748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800674c:	4610      	mov	r0, r2
 800674e:	b003      	add	sp, #12
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	bfbc      	itt	lt
 8006756:	464b      	movlt	r3, r9
 8006758:	46a1      	movlt	r9, r4
 800675a:	4630      	mov	r0, r6
 800675c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006760:	bfba      	itte	lt
 8006762:	461c      	movlt	r4, r3
 8006764:	2501      	movlt	r5, #1
 8006766:	2500      	movge	r5, #0
 8006768:	f7ff fcfe 	bl	8006168 <_Balloc>
 800676c:	4602      	mov	r2, r0
 800676e:	b918      	cbnz	r0, 8006778 <__mdiff+0x60>
 8006770:	4b31      	ldr	r3, [pc, #196]	@ (8006838 <__mdiff+0x120>)
 8006772:	f240 2145 	movw	r1, #581	@ 0x245
 8006776:	e7e3      	b.n	8006740 <__mdiff+0x28>
 8006778:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800677c:	6926      	ldr	r6, [r4, #16]
 800677e:	60c5      	str	r5, [r0, #12]
 8006780:	f109 0310 	add.w	r3, r9, #16
 8006784:	f109 0514 	add.w	r5, r9, #20
 8006788:	f104 0e14 	add.w	lr, r4, #20
 800678c:	f100 0b14 	add.w	fp, r0, #20
 8006790:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006794:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	46d9      	mov	r9, fp
 800679c:	f04f 0c00 	mov.w	ip, #0
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80067a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80067aa:	9301      	str	r3, [sp, #4]
 80067ac:	fa1f f38a 	uxth.w	r3, sl
 80067b0:	4619      	mov	r1, r3
 80067b2:	b283      	uxth	r3, r0
 80067b4:	1acb      	subs	r3, r1, r3
 80067b6:	0c00      	lsrs	r0, r0, #16
 80067b8:	4463      	add	r3, ip
 80067ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80067be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067c8:	4576      	cmp	r6, lr
 80067ca:	f849 3b04 	str.w	r3, [r9], #4
 80067ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067d2:	d8e5      	bhi.n	80067a0 <__mdiff+0x88>
 80067d4:	1b33      	subs	r3, r6, r4
 80067d6:	3b15      	subs	r3, #21
 80067d8:	f023 0303 	bic.w	r3, r3, #3
 80067dc:	3415      	adds	r4, #21
 80067de:	3304      	adds	r3, #4
 80067e0:	42a6      	cmp	r6, r4
 80067e2:	bf38      	it	cc
 80067e4:	2304      	movcc	r3, #4
 80067e6:	441d      	add	r5, r3
 80067e8:	445b      	add	r3, fp
 80067ea:	461e      	mov	r6, r3
 80067ec:	462c      	mov	r4, r5
 80067ee:	4544      	cmp	r4, r8
 80067f0:	d30e      	bcc.n	8006810 <__mdiff+0xf8>
 80067f2:	f108 0103 	add.w	r1, r8, #3
 80067f6:	1b49      	subs	r1, r1, r5
 80067f8:	f021 0103 	bic.w	r1, r1, #3
 80067fc:	3d03      	subs	r5, #3
 80067fe:	45a8      	cmp	r8, r5
 8006800:	bf38      	it	cc
 8006802:	2100      	movcc	r1, #0
 8006804:	440b      	add	r3, r1
 8006806:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800680a:	b191      	cbz	r1, 8006832 <__mdiff+0x11a>
 800680c:	6117      	str	r7, [r2, #16]
 800680e:	e79d      	b.n	800674c <__mdiff+0x34>
 8006810:	f854 1b04 	ldr.w	r1, [r4], #4
 8006814:	46e6      	mov	lr, ip
 8006816:	0c08      	lsrs	r0, r1, #16
 8006818:	fa1c fc81 	uxtah	ip, ip, r1
 800681c:	4471      	add	r1, lr
 800681e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006822:	b289      	uxth	r1, r1
 8006824:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006828:	f846 1b04 	str.w	r1, [r6], #4
 800682c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006830:	e7dd      	b.n	80067ee <__mdiff+0xd6>
 8006832:	3f01      	subs	r7, #1
 8006834:	e7e7      	b.n	8006806 <__mdiff+0xee>
 8006836:	bf00      	nop
 8006838:	08008a65 	.word	0x08008a65
 800683c:	08008a76 	.word	0x08008a76

08006840 <__ulp>:
 8006840:	b082      	sub	sp, #8
 8006842:	ed8d 0b00 	vstr	d0, [sp]
 8006846:	9a01      	ldr	r2, [sp, #4]
 8006848:	4b0f      	ldr	r3, [pc, #60]	@ (8006888 <__ulp+0x48>)
 800684a:	4013      	ands	r3, r2
 800684c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006850:	2b00      	cmp	r3, #0
 8006852:	dc08      	bgt.n	8006866 <__ulp+0x26>
 8006854:	425b      	negs	r3, r3
 8006856:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800685a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800685e:	da04      	bge.n	800686a <__ulp+0x2a>
 8006860:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006864:	4113      	asrs	r3, r2
 8006866:	2200      	movs	r2, #0
 8006868:	e008      	b.n	800687c <__ulp+0x3c>
 800686a:	f1a2 0314 	sub.w	r3, r2, #20
 800686e:	2b1e      	cmp	r3, #30
 8006870:	bfda      	itte	le
 8006872:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006876:	40da      	lsrle	r2, r3
 8006878:	2201      	movgt	r2, #1
 800687a:	2300      	movs	r3, #0
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	ec41 0b10 	vmov	d0, r0, r1
 8006884:	b002      	add	sp, #8
 8006886:	4770      	bx	lr
 8006888:	7ff00000 	.word	0x7ff00000

0800688c <__b2d>:
 800688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	6906      	ldr	r6, [r0, #16]
 8006892:	f100 0814 	add.w	r8, r0, #20
 8006896:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800689a:	1f37      	subs	r7, r6, #4
 800689c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7ff fd53 	bl	800634c <__hi0bits>
 80068a6:	f1c0 0320 	rsb	r3, r0, #32
 80068aa:	280a      	cmp	r0, #10
 80068ac:	600b      	str	r3, [r1, #0]
 80068ae:	491b      	ldr	r1, [pc, #108]	@ (800691c <__b2d+0x90>)
 80068b0:	dc15      	bgt.n	80068de <__b2d+0x52>
 80068b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80068b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80068ba:	45b8      	cmp	r8, r7
 80068bc:	ea43 0501 	orr.w	r5, r3, r1
 80068c0:	bf34      	ite	cc
 80068c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80068c6:	2300      	movcs	r3, #0
 80068c8:	3015      	adds	r0, #21
 80068ca:	fa02 f000 	lsl.w	r0, r2, r0
 80068ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80068d2:	4303      	orrs	r3, r0
 80068d4:	461c      	mov	r4, r3
 80068d6:	ec45 4b10 	vmov	d0, r4, r5
 80068da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068de:	45b8      	cmp	r8, r7
 80068e0:	bf3a      	itte	cc
 80068e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80068e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80068ea:	2300      	movcs	r3, #0
 80068ec:	380b      	subs	r0, #11
 80068ee:	d012      	beq.n	8006916 <__b2d+0x8a>
 80068f0:	f1c0 0120 	rsb	r1, r0, #32
 80068f4:	fa23 f401 	lsr.w	r4, r3, r1
 80068f8:	4082      	lsls	r2, r0
 80068fa:	4322      	orrs	r2, r4
 80068fc:	4547      	cmp	r7, r8
 80068fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006902:	bf8c      	ite	hi
 8006904:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006908:	2200      	movls	r2, #0
 800690a:	4083      	lsls	r3, r0
 800690c:	40ca      	lsrs	r2, r1
 800690e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006912:	4313      	orrs	r3, r2
 8006914:	e7de      	b.n	80068d4 <__b2d+0x48>
 8006916:	ea42 0501 	orr.w	r5, r2, r1
 800691a:	e7db      	b.n	80068d4 <__b2d+0x48>
 800691c:	3ff00000 	.word	0x3ff00000

08006920 <__d2b>:
 8006920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006924:	460f      	mov	r7, r1
 8006926:	2101      	movs	r1, #1
 8006928:	ec59 8b10 	vmov	r8, r9, d0
 800692c:	4616      	mov	r6, r2
 800692e:	f7ff fc1b 	bl	8006168 <_Balloc>
 8006932:	4604      	mov	r4, r0
 8006934:	b930      	cbnz	r0, 8006944 <__d2b+0x24>
 8006936:	4602      	mov	r2, r0
 8006938:	4b23      	ldr	r3, [pc, #140]	@ (80069c8 <__d2b+0xa8>)
 800693a:	4824      	ldr	r0, [pc, #144]	@ (80069cc <__d2b+0xac>)
 800693c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006940:	f001 fa1a 	bl	8007d78 <__assert_func>
 8006944:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800694c:	b10d      	cbz	r5, 8006952 <__d2b+0x32>
 800694e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	f1b8 0300 	subs.w	r3, r8, #0
 8006958:	d023      	beq.n	80069a2 <__d2b+0x82>
 800695a:	4668      	mov	r0, sp
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	f7ff fd14 	bl	800638a <__lo0bits>
 8006962:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006966:	b1d0      	cbz	r0, 800699e <__d2b+0x7e>
 8006968:	f1c0 0320 	rsb	r3, r0, #32
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	430b      	orrs	r3, r1
 8006972:	40c2      	lsrs	r2, r0
 8006974:	6163      	str	r3, [r4, #20]
 8006976:	9201      	str	r2, [sp, #4]
 8006978:	9b01      	ldr	r3, [sp, #4]
 800697a:	61a3      	str	r3, [r4, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	bf0c      	ite	eq
 8006980:	2201      	moveq	r2, #1
 8006982:	2202      	movne	r2, #2
 8006984:	6122      	str	r2, [r4, #16]
 8006986:	b1a5      	cbz	r5, 80069b2 <__d2b+0x92>
 8006988:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800698c:	4405      	add	r5, r0
 800698e:	603d      	str	r5, [r7, #0]
 8006990:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006994:	6030      	str	r0, [r6, #0]
 8006996:	4620      	mov	r0, r4
 8006998:	b003      	add	sp, #12
 800699a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800699e:	6161      	str	r1, [r4, #20]
 80069a0:	e7ea      	b.n	8006978 <__d2b+0x58>
 80069a2:	a801      	add	r0, sp, #4
 80069a4:	f7ff fcf1 	bl	800638a <__lo0bits>
 80069a8:	9b01      	ldr	r3, [sp, #4]
 80069aa:	6163      	str	r3, [r4, #20]
 80069ac:	3020      	adds	r0, #32
 80069ae:	2201      	movs	r2, #1
 80069b0:	e7e8      	b.n	8006984 <__d2b+0x64>
 80069b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80069ba:	6038      	str	r0, [r7, #0]
 80069bc:	6918      	ldr	r0, [r3, #16]
 80069be:	f7ff fcc5 	bl	800634c <__hi0bits>
 80069c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069c6:	e7e5      	b.n	8006994 <__d2b+0x74>
 80069c8:	08008a65 	.word	0x08008a65
 80069cc:	08008a76 	.word	0x08008a76

080069d0 <__ratio>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	b085      	sub	sp, #20
 80069d6:	e9cd 1000 	strd	r1, r0, [sp]
 80069da:	a902      	add	r1, sp, #8
 80069dc:	f7ff ff56 	bl	800688c <__b2d>
 80069e0:	9800      	ldr	r0, [sp, #0]
 80069e2:	a903      	add	r1, sp, #12
 80069e4:	ec55 4b10 	vmov	r4, r5, d0
 80069e8:	f7ff ff50 	bl	800688c <__b2d>
 80069ec:	9b01      	ldr	r3, [sp, #4]
 80069ee:	6919      	ldr	r1, [r3, #16]
 80069f0:	9b00      	ldr	r3, [sp, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	1ac9      	subs	r1, r1, r3
 80069f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	ec5b ab10 	vmov	sl, fp, d0
 8006a00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	bfce      	itee	gt
 8006a08:	462a      	movgt	r2, r5
 8006a0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a0e:	465a      	movle	r2, fp
 8006a10:	462f      	mov	r7, r5
 8006a12:	46d9      	mov	r9, fp
 8006a14:	bfcc      	ite	gt
 8006a16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006a1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006a1e:	464b      	mov	r3, r9
 8006a20:	4652      	mov	r2, sl
 8006a22:	4620      	mov	r0, r4
 8006a24:	4639      	mov	r1, r7
 8006a26:	f7f9 ff11 	bl	800084c <__aeabi_ddiv>
 8006a2a:	ec41 0b10 	vmov	d0, r0, r1
 8006a2e:	b005      	add	sp, #20
 8006a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a34 <__copybits>:
 8006a34:	3901      	subs	r1, #1
 8006a36:	b570      	push	{r4, r5, r6, lr}
 8006a38:	1149      	asrs	r1, r1, #5
 8006a3a:	6914      	ldr	r4, [r2, #16]
 8006a3c:	3101      	adds	r1, #1
 8006a3e:	f102 0314 	add.w	r3, r2, #20
 8006a42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a4a:	1f05      	subs	r5, r0, #4
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d30c      	bcc.n	8006a6a <__copybits+0x36>
 8006a50:	1aa3      	subs	r3, r4, r2
 8006a52:	3b11      	subs	r3, #17
 8006a54:	f023 0303 	bic.w	r3, r3, #3
 8006a58:	3211      	adds	r2, #17
 8006a5a:	42a2      	cmp	r2, r4
 8006a5c:	bf88      	it	hi
 8006a5e:	2300      	movhi	r3, #0
 8006a60:	4418      	add	r0, r3
 8006a62:	2300      	movs	r3, #0
 8006a64:	4288      	cmp	r0, r1
 8006a66:	d305      	bcc.n	8006a74 <__copybits+0x40>
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
 8006a6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006a6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006a72:	e7eb      	b.n	8006a4c <__copybits+0x18>
 8006a74:	f840 3b04 	str.w	r3, [r0], #4
 8006a78:	e7f4      	b.n	8006a64 <__copybits+0x30>

08006a7a <__any_on>:
 8006a7a:	f100 0214 	add.w	r2, r0, #20
 8006a7e:	6900      	ldr	r0, [r0, #16]
 8006a80:	114b      	asrs	r3, r1, #5
 8006a82:	4298      	cmp	r0, r3
 8006a84:	b510      	push	{r4, lr}
 8006a86:	db11      	blt.n	8006aac <__any_on+0x32>
 8006a88:	dd0a      	ble.n	8006aa0 <__any_on+0x26>
 8006a8a:	f011 011f 	ands.w	r1, r1, #31
 8006a8e:	d007      	beq.n	8006aa0 <__any_on+0x26>
 8006a90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006a94:	fa24 f001 	lsr.w	r0, r4, r1
 8006a98:	fa00 f101 	lsl.w	r1, r0, r1
 8006a9c:	428c      	cmp	r4, r1
 8006a9e:	d10b      	bne.n	8006ab8 <__any_on+0x3e>
 8006aa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d803      	bhi.n	8006ab0 <__any_on+0x36>
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	bd10      	pop	{r4, pc}
 8006aac:	4603      	mov	r3, r0
 8006aae:	e7f7      	b.n	8006aa0 <__any_on+0x26>
 8006ab0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ab4:	2900      	cmp	r1, #0
 8006ab6:	d0f5      	beq.n	8006aa4 <__any_on+0x2a>
 8006ab8:	2001      	movs	r0, #1
 8006aba:	e7f6      	b.n	8006aaa <__any_on+0x30>

08006abc <sulp>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4604      	mov	r4, r0
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	ec45 4b10 	vmov	d0, r4, r5
 8006ac6:	4616      	mov	r6, r2
 8006ac8:	f7ff feba 	bl	8006840 <__ulp>
 8006acc:	ec51 0b10 	vmov	r0, r1, d0
 8006ad0:	b17e      	cbz	r6, 8006af2 <sulp+0x36>
 8006ad2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ad6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	dd09      	ble.n	8006af2 <sulp+0x36>
 8006ade:	051b      	lsls	r3, r3, #20
 8006ae0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ae4:	2400      	movs	r4, #0
 8006ae6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	f7f9 fd83 	bl	80005f8 <__aeabi_dmul>
 8006af2:	ec41 0b10 	vmov	d0, r0, r1
 8006af6:	bd70      	pop	{r4, r5, r6, pc}

08006af8 <_strtod_l>:
 8006af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	b09f      	sub	sp, #124	@ 0x7c
 8006afe:	460c      	mov	r4, r1
 8006b00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b02:	2200      	movs	r2, #0
 8006b04:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b06:	9005      	str	r0, [sp, #20]
 8006b08:	f04f 0a00 	mov.w	sl, #0
 8006b0c:	f04f 0b00 	mov.w	fp, #0
 8006b10:	460a      	mov	r2, r1
 8006b12:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b14:	7811      	ldrb	r1, [r2, #0]
 8006b16:	292b      	cmp	r1, #43	@ 0x2b
 8006b18:	d04a      	beq.n	8006bb0 <_strtod_l+0xb8>
 8006b1a:	d838      	bhi.n	8006b8e <_strtod_l+0x96>
 8006b1c:	290d      	cmp	r1, #13
 8006b1e:	d832      	bhi.n	8006b86 <_strtod_l+0x8e>
 8006b20:	2908      	cmp	r1, #8
 8006b22:	d832      	bhi.n	8006b8a <_strtod_l+0x92>
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d03b      	beq.n	8006ba0 <_strtod_l+0xa8>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b2e:	782a      	ldrb	r2, [r5, #0]
 8006b30:	2a30      	cmp	r2, #48	@ 0x30
 8006b32:	f040 80b2 	bne.w	8006c9a <_strtod_l+0x1a2>
 8006b36:	786a      	ldrb	r2, [r5, #1]
 8006b38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b3c:	2a58      	cmp	r2, #88	@ 0x58
 8006b3e:	d16e      	bne.n	8006c1e <_strtod_l+0x126>
 8006b40:	9302      	str	r3, [sp, #8]
 8006b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	4a8f      	ldr	r2, [pc, #572]	@ (8006d88 <_strtod_l+0x290>)
 8006b4c:	9805      	ldr	r0, [sp, #20]
 8006b4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b50:	a919      	add	r1, sp, #100	@ 0x64
 8006b52:	f001 f9ab 	bl	8007eac <__gethex>
 8006b56:	f010 060f 	ands.w	r6, r0, #15
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	d005      	beq.n	8006b6a <_strtod_l+0x72>
 8006b5e:	2e06      	cmp	r6, #6
 8006b60:	d128      	bne.n	8006bb4 <_strtod_l+0xbc>
 8006b62:	3501      	adds	r5, #1
 8006b64:	2300      	movs	r3, #0
 8006b66:	9519      	str	r5, [sp, #100]	@ 0x64
 8006b68:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 858e 	bne.w	800768e <_strtod_l+0xb96>
 8006b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b74:	b1cb      	cbz	r3, 8006baa <_strtod_l+0xb2>
 8006b76:	4652      	mov	r2, sl
 8006b78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006b7c:	ec43 2b10 	vmov	d0, r2, r3
 8006b80:	b01f      	add	sp, #124	@ 0x7c
 8006b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b86:	2920      	cmp	r1, #32
 8006b88:	d1ce      	bne.n	8006b28 <_strtod_l+0x30>
 8006b8a:	3201      	adds	r2, #1
 8006b8c:	e7c1      	b.n	8006b12 <_strtod_l+0x1a>
 8006b8e:	292d      	cmp	r1, #45	@ 0x2d
 8006b90:	d1ca      	bne.n	8006b28 <_strtod_l+0x30>
 8006b92:	2101      	movs	r1, #1
 8006b94:	910e      	str	r1, [sp, #56]	@ 0x38
 8006b96:	1c51      	adds	r1, r2, #1
 8006b98:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b9a:	7852      	ldrb	r2, [r2, #1]
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	d1c5      	bne.n	8006b2c <_strtod_l+0x34>
 8006ba0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ba2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 8570 	bne.w	800768a <_strtod_l+0xb92>
 8006baa:	4652      	mov	r2, sl
 8006bac:	465b      	mov	r3, fp
 8006bae:	e7e5      	b.n	8006b7c <_strtod_l+0x84>
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	e7ef      	b.n	8006b94 <_strtod_l+0x9c>
 8006bb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006bb6:	b13a      	cbz	r2, 8006bc8 <_strtod_l+0xd0>
 8006bb8:	2135      	movs	r1, #53	@ 0x35
 8006bba:	a81c      	add	r0, sp, #112	@ 0x70
 8006bbc:	f7ff ff3a 	bl	8006a34 <__copybits>
 8006bc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bc2:	9805      	ldr	r0, [sp, #20]
 8006bc4:	f7ff fb10 	bl	80061e8 <_Bfree>
 8006bc8:	3e01      	subs	r6, #1
 8006bca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006bcc:	2e04      	cmp	r6, #4
 8006bce:	d806      	bhi.n	8006bde <_strtod_l+0xe6>
 8006bd0:	e8df f006 	tbb	[pc, r6]
 8006bd4:	201d0314 	.word	0x201d0314
 8006bd8:	14          	.byte	0x14
 8006bd9:	00          	.byte	0x00
 8006bda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006bde:	05e1      	lsls	r1, r4, #23
 8006be0:	bf48      	it	mi
 8006be2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006be6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bea:	0d1b      	lsrs	r3, r3, #20
 8006bec:	051b      	lsls	r3, r3, #20
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1bb      	bne.n	8006b6a <_strtod_l+0x72>
 8006bf2:	f7fe fb2d 	bl	8005250 <__errno>
 8006bf6:	2322      	movs	r3, #34	@ 0x22
 8006bf8:	6003      	str	r3, [r0, #0]
 8006bfa:	e7b6      	b.n	8006b6a <_strtod_l+0x72>
 8006bfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c0c:	e7e7      	b.n	8006bde <_strtod_l+0xe6>
 8006c0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006d90 <_strtod_l+0x298>
 8006c12:	e7e4      	b.n	8006bde <_strtod_l+0xe6>
 8006c14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c18:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006c1c:	e7df      	b.n	8006bde <_strtod_l+0xe6>
 8006c1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	2b30      	cmp	r3, #48	@ 0x30
 8006c28:	d0f9      	beq.n	8006c1e <_strtod_l+0x126>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d09d      	beq.n	8006b6a <_strtod_l+0x72>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	2700      	movs	r7, #0
 8006c32:	9308      	str	r3, [sp, #32]
 8006c34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c36:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c38:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006c3a:	46b9      	mov	r9, r7
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c40:	7805      	ldrb	r5, [r0, #0]
 8006c42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c46:	b2d9      	uxtb	r1, r3
 8006c48:	2909      	cmp	r1, #9
 8006c4a:	d928      	bls.n	8006c9e <_strtod_l+0x1a6>
 8006c4c:	494f      	ldr	r1, [pc, #316]	@ (8006d8c <_strtod_l+0x294>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f001 f838 	bl	8007cc4 <strncmp>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d032      	beq.n	8006cbe <_strtod_l+0x1c6>
 8006c58:	2000      	movs	r0, #0
 8006c5a:	462a      	mov	r2, r5
 8006c5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c5e:	464d      	mov	r5, r9
 8006c60:	4603      	mov	r3, r0
 8006c62:	2a65      	cmp	r2, #101	@ 0x65
 8006c64:	d001      	beq.n	8006c6a <_strtod_l+0x172>
 8006c66:	2a45      	cmp	r2, #69	@ 0x45
 8006c68:	d114      	bne.n	8006c94 <_strtod_l+0x19c>
 8006c6a:	b91d      	cbnz	r5, 8006c74 <_strtod_l+0x17c>
 8006c6c:	9a08      	ldr	r2, [sp, #32]
 8006c6e:	4302      	orrs	r2, r0
 8006c70:	d096      	beq.n	8006ba0 <_strtod_l+0xa8>
 8006c72:	2500      	movs	r5, #0
 8006c74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006c76:	1c62      	adds	r2, r4, #1
 8006c78:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c7a:	7862      	ldrb	r2, [r4, #1]
 8006c7c:	2a2b      	cmp	r2, #43	@ 0x2b
 8006c7e:	d07a      	beq.n	8006d76 <_strtod_l+0x27e>
 8006c80:	2a2d      	cmp	r2, #45	@ 0x2d
 8006c82:	d07e      	beq.n	8006d82 <_strtod_l+0x28a>
 8006c84:	f04f 0c00 	mov.w	ip, #0
 8006c88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006c8c:	2909      	cmp	r1, #9
 8006c8e:	f240 8085 	bls.w	8006d9c <_strtod_l+0x2a4>
 8006c92:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c94:	f04f 0800 	mov.w	r8, #0
 8006c98:	e0a5      	b.n	8006de6 <_strtod_l+0x2ee>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e7c8      	b.n	8006c30 <_strtod_l+0x138>
 8006c9e:	f1b9 0f08 	cmp.w	r9, #8
 8006ca2:	bfd8      	it	le
 8006ca4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006ca6:	f100 0001 	add.w	r0, r0, #1
 8006caa:	bfda      	itte	le
 8006cac:	fb02 3301 	mlale	r3, r2, r1, r3
 8006cb0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006cb2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006cb6:	f109 0901 	add.w	r9, r9, #1
 8006cba:	9019      	str	r0, [sp, #100]	@ 0x64
 8006cbc:	e7bf      	b.n	8006c3e <_strtod_l+0x146>
 8006cbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cc4:	785a      	ldrb	r2, [r3, #1]
 8006cc6:	f1b9 0f00 	cmp.w	r9, #0
 8006cca:	d03b      	beq.n	8006d44 <_strtod_l+0x24c>
 8006ccc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cce:	464d      	mov	r5, r9
 8006cd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006cd4:	2b09      	cmp	r3, #9
 8006cd6:	d912      	bls.n	8006cfe <_strtod_l+0x206>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e7c2      	b.n	8006c62 <_strtod_l+0x16a>
 8006cdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ce2:	785a      	ldrb	r2, [r3, #1]
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	2a30      	cmp	r2, #48	@ 0x30
 8006ce8:	d0f8      	beq.n	8006cdc <_strtod_l+0x1e4>
 8006cea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	f200 84d2 	bhi.w	8007698 <_strtod_l+0xba0>
 8006cf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cf6:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	3a30      	subs	r2, #48	@ 0x30
 8006d00:	f100 0301 	add.w	r3, r0, #1
 8006d04:	d018      	beq.n	8006d38 <_strtod_l+0x240>
 8006d06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d08:	4419      	add	r1, r3
 8006d0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006d0c:	462e      	mov	r6, r5
 8006d0e:	f04f 0e0a 	mov.w	lr, #10
 8006d12:	1c71      	adds	r1, r6, #1
 8006d14:	eba1 0c05 	sub.w	ip, r1, r5
 8006d18:	4563      	cmp	r3, ip
 8006d1a:	dc15      	bgt.n	8006d48 <_strtod_l+0x250>
 8006d1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006d20:	182b      	adds	r3, r5, r0
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	f105 0501 	add.w	r5, r5, #1
 8006d28:	4405      	add	r5, r0
 8006d2a:	dc1a      	bgt.n	8006d62 <_strtod_l+0x26a>
 8006d2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d2e:	230a      	movs	r3, #10
 8006d30:	fb03 2301 	mla	r3, r3, r1, r2
 8006d34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d36:	2300      	movs	r3, #0
 8006d38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d3a:	1c51      	adds	r1, r2, #1
 8006d3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d3e:	7852      	ldrb	r2, [r2, #1]
 8006d40:	4618      	mov	r0, r3
 8006d42:	e7c5      	b.n	8006cd0 <_strtod_l+0x1d8>
 8006d44:	4648      	mov	r0, r9
 8006d46:	e7ce      	b.n	8006ce6 <_strtod_l+0x1ee>
 8006d48:	2e08      	cmp	r6, #8
 8006d4a:	dc05      	bgt.n	8006d58 <_strtod_l+0x260>
 8006d4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006d4e:	fb0e f606 	mul.w	r6, lr, r6
 8006d52:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006d54:	460e      	mov	r6, r1
 8006d56:	e7dc      	b.n	8006d12 <_strtod_l+0x21a>
 8006d58:	2910      	cmp	r1, #16
 8006d5a:	bfd8      	it	le
 8006d5c:	fb0e f707 	mulle.w	r7, lr, r7
 8006d60:	e7f8      	b.n	8006d54 <_strtod_l+0x25c>
 8006d62:	2b0f      	cmp	r3, #15
 8006d64:	bfdc      	itt	le
 8006d66:	230a      	movle	r3, #10
 8006d68:	fb03 2707 	mlale	r7, r3, r7, r2
 8006d6c:	e7e3      	b.n	8006d36 <_strtod_l+0x23e>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d72:	2301      	movs	r3, #1
 8006d74:	e77a      	b.n	8006c6c <_strtod_l+0x174>
 8006d76:	f04f 0c00 	mov.w	ip, #0
 8006d7a:	1ca2      	adds	r2, r4, #2
 8006d7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d7e:	78a2      	ldrb	r2, [r4, #2]
 8006d80:	e782      	b.n	8006c88 <_strtod_l+0x190>
 8006d82:	f04f 0c01 	mov.w	ip, #1
 8006d86:	e7f8      	b.n	8006d7a <_strtod_l+0x282>
 8006d88:	08008c9c 	.word	0x08008c9c
 8006d8c:	08008acf 	.word	0x08008acf
 8006d90:	7ff00000 	.word	0x7ff00000
 8006d94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d96:	1c51      	adds	r1, r2, #1
 8006d98:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d9a:	7852      	ldrb	r2, [r2, #1]
 8006d9c:	2a30      	cmp	r2, #48	@ 0x30
 8006d9e:	d0f9      	beq.n	8006d94 <_strtod_l+0x29c>
 8006da0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006da4:	2908      	cmp	r1, #8
 8006da6:	f63f af75 	bhi.w	8006c94 <_strtod_l+0x19c>
 8006daa:	3a30      	subs	r2, #48	@ 0x30
 8006dac:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006db0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006db2:	f04f 080a 	mov.w	r8, #10
 8006db6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006db8:	1c56      	adds	r6, r2, #1
 8006dba:	9619      	str	r6, [sp, #100]	@ 0x64
 8006dbc:	7852      	ldrb	r2, [r2, #1]
 8006dbe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006dc2:	f1be 0f09 	cmp.w	lr, #9
 8006dc6:	d939      	bls.n	8006e3c <_strtod_l+0x344>
 8006dc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006dca:	1a76      	subs	r6, r6, r1
 8006dcc:	2e08      	cmp	r6, #8
 8006dce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006dd2:	dc03      	bgt.n	8006ddc <_strtod_l+0x2e4>
 8006dd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dd6:	4588      	cmp	r8, r1
 8006dd8:	bfa8      	it	ge
 8006dda:	4688      	movge	r8, r1
 8006ddc:	f1bc 0f00 	cmp.w	ip, #0
 8006de0:	d001      	beq.n	8006de6 <_strtod_l+0x2ee>
 8006de2:	f1c8 0800 	rsb	r8, r8, #0
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	d14e      	bne.n	8006e88 <_strtod_l+0x390>
 8006dea:	9908      	ldr	r1, [sp, #32]
 8006dec:	4308      	orrs	r0, r1
 8006dee:	f47f aebc 	bne.w	8006b6a <_strtod_l+0x72>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f47f aed4 	bne.w	8006ba0 <_strtod_l+0xa8>
 8006df8:	2a69      	cmp	r2, #105	@ 0x69
 8006dfa:	d028      	beq.n	8006e4e <_strtod_l+0x356>
 8006dfc:	dc25      	bgt.n	8006e4a <_strtod_l+0x352>
 8006dfe:	2a49      	cmp	r2, #73	@ 0x49
 8006e00:	d025      	beq.n	8006e4e <_strtod_l+0x356>
 8006e02:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e04:	f47f aecc 	bne.w	8006ba0 <_strtod_l+0xa8>
 8006e08:	499a      	ldr	r1, [pc, #616]	@ (8007074 <_strtod_l+0x57c>)
 8006e0a:	a819      	add	r0, sp, #100	@ 0x64
 8006e0c:	f001 fa70 	bl	80082f0 <__match>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f43f aec5 	beq.w	8006ba0 <_strtod_l+0xa8>
 8006e16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b28      	cmp	r3, #40	@ 0x28
 8006e1c:	d12e      	bne.n	8006e7c <_strtod_l+0x384>
 8006e1e:	4996      	ldr	r1, [pc, #600]	@ (8007078 <_strtod_l+0x580>)
 8006e20:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e22:	a819      	add	r0, sp, #100	@ 0x64
 8006e24:	f001 fa78 	bl	8008318 <__hexnan>
 8006e28:	2805      	cmp	r0, #5
 8006e2a:	d127      	bne.n	8006e7c <_strtod_l+0x384>
 8006e2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e3a:	e696      	b.n	8006b6a <_strtod_l+0x72>
 8006e3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e3e:	fb08 2101 	mla	r1, r8, r1, r2
 8006e42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e48:	e7b5      	b.n	8006db6 <_strtod_l+0x2be>
 8006e4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e4c:	e7da      	b.n	8006e04 <_strtod_l+0x30c>
 8006e4e:	498b      	ldr	r1, [pc, #556]	@ (800707c <_strtod_l+0x584>)
 8006e50:	a819      	add	r0, sp, #100	@ 0x64
 8006e52:	f001 fa4d 	bl	80082f0 <__match>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f43f aea2 	beq.w	8006ba0 <_strtod_l+0xa8>
 8006e5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e5e:	4988      	ldr	r1, [pc, #544]	@ (8007080 <_strtod_l+0x588>)
 8006e60:	3b01      	subs	r3, #1
 8006e62:	a819      	add	r0, sp, #100	@ 0x64
 8006e64:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e66:	f001 fa43 	bl	80082f0 <__match>
 8006e6a:	b910      	cbnz	r0, 8006e72 <_strtod_l+0x37a>
 8006e6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e6e:	3301      	adds	r3, #1
 8006e70:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007090 <_strtod_l+0x598>
 8006e76:	f04f 0a00 	mov.w	sl, #0
 8006e7a:	e676      	b.n	8006b6a <_strtod_l+0x72>
 8006e7c:	4881      	ldr	r0, [pc, #516]	@ (8007084 <_strtod_l+0x58c>)
 8006e7e:	f000 ff73 	bl	8007d68 <nan>
 8006e82:	ec5b ab10 	vmov	sl, fp, d0
 8006e86:	e670      	b.n	8006b6a <_strtod_l+0x72>
 8006e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006e8c:	eba8 0303 	sub.w	r3, r8, r3
 8006e90:	f1b9 0f00 	cmp.w	r9, #0
 8006e94:	bf08      	it	eq
 8006e96:	46a9      	moveq	r9, r5
 8006e98:	2d10      	cmp	r5, #16
 8006e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9c:	462c      	mov	r4, r5
 8006e9e:	bfa8      	it	ge
 8006ea0:	2410      	movge	r4, #16
 8006ea2:	f7f9 fb2f 	bl	8000504 <__aeabi_ui2d>
 8006ea6:	2d09      	cmp	r5, #9
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	468b      	mov	fp, r1
 8006eac:	dc13      	bgt.n	8006ed6 <_strtod_l+0x3de>
 8006eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f43f ae5a 	beq.w	8006b6a <_strtod_l+0x72>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb8:	dd78      	ble.n	8006fac <_strtod_l+0x4b4>
 8006eba:	2b16      	cmp	r3, #22
 8006ebc:	dc5f      	bgt.n	8006f7e <_strtod_l+0x486>
 8006ebe:	4972      	ldr	r1, [pc, #456]	@ (8007088 <_strtod_l+0x590>)
 8006ec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ec8:	4652      	mov	r2, sl
 8006eca:	465b      	mov	r3, fp
 8006ecc:	f7f9 fb94 	bl	80005f8 <__aeabi_dmul>
 8006ed0:	4682      	mov	sl, r0
 8006ed2:	468b      	mov	fp, r1
 8006ed4:	e649      	b.n	8006b6a <_strtod_l+0x72>
 8006ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8007088 <_strtod_l+0x590>)
 8006ed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006edc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ee0:	f7f9 fb8a 	bl	80005f8 <__aeabi_dmul>
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	468b      	mov	fp, r1
 8006eea:	f7f9 fb0b 	bl	8000504 <__aeabi_ui2d>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f7f9 f9c9 	bl	800028c <__adddf3>
 8006efa:	2d0f      	cmp	r5, #15
 8006efc:	4682      	mov	sl, r0
 8006efe:	468b      	mov	fp, r1
 8006f00:	ddd5      	ble.n	8006eae <_strtod_l+0x3b6>
 8006f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f04:	1b2c      	subs	r4, r5, r4
 8006f06:	441c      	add	r4, r3
 8006f08:	2c00      	cmp	r4, #0
 8006f0a:	f340 8093 	ble.w	8007034 <_strtod_l+0x53c>
 8006f0e:	f014 030f 	ands.w	r3, r4, #15
 8006f12:	d00a      	beq.n	8006f2a <_strtod_l+0x432>
 8006f14:	495c      	ldr	r1, [pc, #368]	@ (8007088 <_strtod_l+0x590>)
 8006f16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	465b      	mov	r3, fp
 8006f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f22:	f7f9 fb69 	bl	80005f8 <__aeabi_dmul>
 8006f26:	4682      	mov	sl, r0
 8006f28:	468b      	mov	fp, r1
 8006f2a:	f034 040f 	bics.w	r4, r4, #15
 8006f2e:	d073      	beq.n	8007018 <_strtod_l+0x520>
 8006f30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f34:	dd49      	ble.n	8006fca <_strtod_l+0x4d2>
 8006f36:	2400      	movs	r4, #0
 8006f38:	46a0      	mov	r8, r4
 8006f3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f3c:	46a1      	mov	r9, r4
 8006f3e:	9a05      	ldr	r2, [sp, #20]
 8006f40:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007090 <_strtod_l+0x598>
 8006f44:	2322      	movs	r3, #34	@ 0x22
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	f04f 0a00 	mov.w	sl, #0
 8006f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f43f ae0b 	beq.w	8006b6a <_strtod_l+0x72>
 8006f54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f56:	9805      	ldr	r0, [sp, #20]
 8006f58:	f7ff f946 	bl	80061e8 <_Bfree>
 8006f5c:	9805      	ldr	r0, [sp, #20]
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7ff f942 	bl	80061e8 <_Bfree>
 8006f64:	9805      	ldr	r0, [sp, #20]
 8006f66:	4641      	mov	r1, r8
 8006f68:	f7ff f93e 	bl	80061e8 <_Bfree>
 8006f6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f6e:	9805      	ldr	r0, [sp, #20]
 8006f70:	f7ff f93a 	bl	80061e8 <_Bfree>
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	4621      	mov	r1, r4
 8006f78:	f7ff f936 	bl	80061e8 <_Bfree>
 8006f7c:	e5f5      	b.n	8006b6a <_strtod_l+0x72>
 8006f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006f84:	4293      	cmp	r3, r2
 8006f86:	dbbc      	blt.n	8006f02 <_strtod_l+0x40a>
 8006f88:	4c3f      	ldr	r4, [pc, #252]	@ (8007088 <_strtod_l+0x590>)
 8006f8a:	f1c5 050f 	rsb	r5, r5, #15
 8006f8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f92:	4652      	mov	r2, sl
 8006f94:	465b      	mov	r3, fp
 8006f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f9a:	f7f9 fb2d 	bl	80005f8 <__aeabi_dmul>
 8006f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa0:	1b5d      	subs	r5, r3, r5
 8006fa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006faa:	e78f      	b.n	8006ecc <_strtod_l+0x3d4>
 8006fac:	3316      	adds	r3, #22
 8006fae:	dba8      	blt.n	8006f02 <_strtod_l+0x40a>
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb2:	eba3 0808 	sub.w	r8, r3, r8
 8006fb6:	4b34      	ldr	r3, [pc, #208]	@ (8007088 <_strtod_l+0x590>)
 8006fb8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006fbc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	f7f9 fc42 	bl	800084c <__aeabi_ddiv>
 8006fc8:	e782      	b.n	8006ed0 <_strtod_l+0x3d8>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4f2f      	ldr	r7, [pc, #188]	@ (800708c <_strtod_l+0x594>)
 8006fce:	1124      	asrs	r4, r4, #4
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	461e      	mov	r6, r3
 8006fd6:	2c01      	cmp	r4, #1
 8006fd8:	dc21      	bgt.n	800701e <_strtod_l+0x526>
 8006fda:	b10b      	cbz	r3, 8006fe0 <_strtod_l+0x4e8>
 8006fdc:	4682      	mov	sl, r0
 8006fde:	468b      	mov	fp, r1
 8006fe0:	492a      	ldr	r1, [pc, #168]	@ (800708c <_strtod_l+0x594>)
 8006fe2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006fe6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006fea:	4652      	mov	r2, sl
 8006fec:	465b      	mov	r3, fp
 8006fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ff2:	f7f9 fb01 	bl	80005f8 <__aeabi_dmul>
 8006ff6:	4b26      	ldr	r3, [pc, #152]	@ (8007090 <_strtod_l+0x598>)
 8006ff8:	460a      	mov	r2, r1
 8006ffa:	400b      	ands	r3, r1
 8006ffc:	4925      	ldr	r1, [pc, #148]	@ (8007094 <_strtod_l+0x59c>)
 8006ffe:	428b      	cmp	r3, r1
 8007000:	4682      	mov	sl, r0
 8007002:	d898      	bhi.n	8006f36 <_strtod_l+0x43e>
 8007004:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007008:	428b      	cmp	r3, r1
 800700a:	bf86      	itte	hi
 800700c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007098 <_strtod_l+0x5a0>
 8007010:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007014:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007018:	2300      	movs	r3, #0
 800701a:	9308      	str	r3, [sp, #32]
 800701c:	e076      	b.n	800710c <_strtod_l+0x614>
 800701e:	07e2      	lsls	r2, r4, #31
 8007020:	d504      	bpl.n	800702c <_strtod_l+0x534>
 8007022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007026:	f7f9 fae7 	bl	80005f8 <__aeabi_dmul>
 800702a:	2301      	movs	r3, #1
 800702c:	3601      	adds	r6, #1
 800702e:	1064      	asrs	r4, r4, #1
 8007030:	3708      	adds	r7, #8
 8007032:	e7d0      	b.n	8006fd6 <_strtod_l+0x4de>
 8007034:	d0f0      	beq.n	8007018 <_strtod_l+0x520>
 8007036:	4264      	negs	r4, r4
 8007038:	f014 020f 	ands.w	r2, r4, #15
 800703c:	d00a      	beq.n	8007054 <_strtod_l+0x55c>
 800703e:	4b12      	ldr	r3, [pc, #72]	@ (8007088 <_strtod_l+0x590>)
 8007040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007044:	4650      	mov	r0, sl
 8007046:	4659      	mov	r1, fp
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f7f9 fbfe 	bl	800084c <__aeabi_ddiv>
 8007050:	4682      	mov	sl, r0
 8007052:	468b      	mov	fp, r1
 8007054:	1124      	asrs	r4, r4, #4
 8007056:	d0df      	beq.n	8007018 <_strtod_l+0x520>
 8007058:	2c1f      	cmp	r4, #31
 800705a:	dd1f      	ble.n	800709c <_strtod_l+0x5a4>
 800705c:	2400      	movs	r4, #0
 800705e:	46a0      	mov	r8, r4
 8007060:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007062:	46a1      	mov	r9, r4
 8007064:	9a05      	ldr	r2, [sp, #20]
 8007066:	2322      	movs	r3, #34	@ 0x22
 8007068:	f04f 0a00 	mov.w	sl, #0
 800706c:	f04f 0b00 	mov.w	fp, #0
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e76b      	b.n	8006f4c <_strtod_l+0x454>
 8007074:	080089bd 	.word	0x080089bd
 8007078:	08008c88 	.word	0x08008c88
 800707c:	080089b5 	.word	0x080089b5
 8007080:	080089ec 	.word	0x080089ec
 8007084:	08008b25 	.word	0x08008b25
 8007088:	08008bc0 	.word	0x08008bc0
 800708c:	08008b98 	.word	0x08008b98
 8007090:	7ff00000 	.word	0x7ff00000
 8007094:	7ca00000 	.word	0x7ca00000
 8007098:	7fefffff 	.word	0x7fefffff
 800709c:	f014 0310 	ands.w	r3, r4, #16
 80070a0:	bf18      	it	ne
 80070a2:	236a      	movne	r3, #106	@ 0x6a
 80070a4:	4ea9      	ldr	r6, [pc, #676]	@ (800734c <_strtod_l+0x854>)
 80070a6:	9308      	str	r3, [sp, #32]
 80070a8:	4650      	mov	r0, sl
 80070aa:	4659      	mov	r1, fp
 80070ac:	2300      	movs	r3, #0
 80070ae:	07e7      	lsls	r7, r4, #31
 80070b0:	d504      	bpl.n	80070bc <_strtod_l+0x5c4>
 80070b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070b6:	f7f9 fa9f 	bl	80005f8 <__aeabi_dmul>
 80070ba:	2301      	movs	r3, #1
 80070bc:	1064      	asrs	r4, r4, #1
 80070be:	f106 0608 	add.w	r6, r6, #8
 80070c2:	d1f4      	bne.n	80070ae <_strtod_l+0x5b6>
 80070c4:	b10b      	cbz	r3, 80070ca <_strtod_l+0x5d2>
 80070c6:	4682      	mov	sl, r0
 80070c8:	468b      	mov	fp, r1
 80070ca:	9b08      	ldr	r3, [sp, #32]
 80070cc:	b1b3      	cbz	r3, 80070fc <_strtod_l+0x604>
 80070ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80070d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	4659      	mov	r1, fp
 80070da:	dd0f      	ble.n	80070fc <_strtod_l+0x604>
 80070dc:	2b1f      	cmp	r3, #31
 80070de:	dd56      	ble.n	800718e <_strtod_l+0x696>
 80070e0:	2b34      	cmp	r3, #52	@ 0x34
 80070e2:	bfde      	ittt	le
 80070e4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80070e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80070ec:	4093      	lslle	r3, r2
 80070ee:	f04f 0a00 	mov.w	sl, #0
 80070f2:	bfcc      	ite	gt
 80070f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80070f8:	ea03 0b01 	andle.w	fp, r3, r1
 80070fc:	2200      	movs	r2, #0
 80070fe:	2300      	movs	r3, #0
 8007100:	4650      	mov	r0, sl
 8007102:	4659      	mov	r1, fp
 8007104:	f7f9 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007108:	2800      	cmp	r0, #0
 800710a:	d1a7      	bne.n	800705c <_strtod_l+0x564>
 800710c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007112:	9805      	ldr	r0, [sp, #20]
 8007114:	462b      	mov	r3, r5
 8007116:	464a      	mov	r2, r9
 8007118:	f7ff f8ce 	bl	80062b8 <__s2b>
 800711c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800711e:	2800      	cmp	r0, #0
 8007120:	f43f af09 	beq.w	8006f36 <_strtod_l+0x43e>
 8007124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007128:	2a00      	cmp	r2, #0
 800712a:	eba3 0308 	sub.w	r3, r3, r8
 800712e:	bfa8      	it	ge
 8007130:	2300      	movge	r3, #0
 8007132:	9312      	str	r3, [sp, #72]	@ 0x48
 8007134:	2400      	movs	r4, #0
 8007136:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800713a:	9316      	str	r3, [sp, #88]	@ 0x58
 800713c:	46a0      	mov	r8, r4
 800713e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007140:	9805      	ldr	r0, [sp, #20]
 8007142:	6859      	ldr	r1, [r3, #4]
 8007144:	f7ff f810 	bl	8006168 <_Balloc>
 8007148:	4681      	mov	r9, r0
 800714a:	2800      	cmp	r0, #0
 800714c:	f43f aef7 	beq.w	8006f3e <_strtod_l+0x446>
 8007150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	3202      	adds	r2, #2
 8007156:	f103 010c 	add.w	r1, r3, #12
 800715a:	0092      	lsls	r2, r2, #2
 800715c:	300c      	adds	r0, #12
 800715e:	f000 fdf5 	bl	8007d4c <memcpy>
 8007162:	ec4b ab10 	vmov	d0, sl, fp
 8007166:	9805      	ldr	r0, [sp, #20]
 8007168:	aa1c      	add	r2, sp, #112	@ 0x70
 800716a:	a91b      	add	r1, sp, #108	@ 0x6c
 800716c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007170:	f7ff fbd6 	bl	8006920 <__d2b>
 8007174:	901a      	str	r0, [sp, #104]	@ 0x68
 8007176:	2800      	cmp	r0, #0
 8007178:	f43f aee1 	beq.w	8006f3e <_strtod_l+0x446>
 800717c:	9805      	ldr	r0, [sp, #20]
 800717e:	2101      	movs	r1, #1
 8007180:	f7ff f930 	bl	80063e4 <__i2b>
 8007184:	4680      	mov	r8, r0
 8007186:	b948      	cbnz	r0, 800719c <_strtod_l+0x6a4>
 8007188:	f04f 0800 	mov.w	r8, #0
 800718c:	e6d7      	b.n	8006f3e <_strtod_l+0x446>
 800718e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007192:	fa02 f303 	lsl.w	r3, r2, r3
 8007196:	ea03 0a0a 	and.w	sl, r3, sl
 800719a:	e7af      	b.n	80070fc <_strtod_l+0x604>
 800719c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800719e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	bfab      	itete	ge
 80071a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80071a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80071a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80071aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80071ac:	bfac      	ite	ge
 80071ae:	18ef      	addge	r7, r5, r3
 80071b0:	1b5e      	sublt	r6, r3, r5
 80071b2:	9b08      	ldr	r3, [sp, #32]
 80071b4:	1aed      	subs	r5, r5, r3
 80071b6:	4415      	add	r5, r2
 80071b8:	4b65      	ldr	r3, [pc, #404]	@ (8007350 <_strtod_l+0x858>)
 80071ba:	3d01      	subs	r5, #1
 80071bc:	429d      	cmp	r5, r3
 80071be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80071c2:	da50      	bge.n	8007266 <_strtod_l+0x76e>
 80071c4:	1b5b      	subs	r3, r3, r5
 80071c6:	2b1f      	cmp	r3, #31
 80071c8:	eba2 0203 	sub.w	r2, r2, r3
 80071cc:	f04f 0101 	mov.w	r1, #1
 80071d0:	dc3d      	bgt.n	800724e <_strtod_l+0x756>
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
 80071d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071d8:	2300      	movs	r3, #0
 80071da:	9310      	str	r3, [sp, #64]	@ 0x40
 80071dc:	18bd      	adds	r5, r7, r2
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	42af      	cmp	r7, r5
 80071e2:	4416      	add	r6, r2
 80071e4:	441e      	add	r6, r3
 80071e6:	463b      	mov	r3, r7
 80071e8:	bfa8      	it	ge
 80071ea:	462b      	movge	r3, r5
 80071ec:	42b3      	cmp	r3, r6
 80071ee:	bfa8      	it	ge
 80071f0:	4633      	movge	r3, r6
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfc2      	ittt	gt
 80071f6:	1aed      	subgt	r5, r5, r3
 80071f8:	1af6      	subgt	r6, r6, r3
 80071fa:	1aff      	subgt	r7, r7, r3
 80071fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dd16      	ble.n	8007230 <_strtod_l+0x738>
 8007202:	4641      	mov	r1, r8
 8007204:	9805      	ldr	r0, [sp, #20]
 8007206:	461a      	mov	r2, r3
 8007208:	f7ff f9a4 	bl	8006554 <__pow5mult>
 800720c:	4680      	mov	r8, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	d0ba      	beq.n	8007188 <_strtod_l+0x690>
 8007212:	4601      	mov	r1, r0
 8007214:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007216:	9805      	ldr	r0, [sp, #20]
 8007218:	f7ff f8fa 	bl	8006410 <__multiply>
 800721c:	900a      	str	r0, [sp, #40]	@ 0x28
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f ae8d 	beq.w	8006f3e <_strtod_l+0x446>
 8007224:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007226:	9805      	ldr	r0, [sp, #20]
 8007228:	f7fe ffde 	bl	80061e8 <_Bfree>
 800722c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007230:	2d00      	cmp	r5, #0
 8007232:	dc1d      	bgt.n	8007270 <_strtod_l+0x778>
 8007234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd23      	ble.n	8007282 <_strtod_l+0x78a>
 800723a:	4649      	mov	r1, r9
 800723c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800723e:	9805      	ldr	r0, [sp, #20]
 8007240:	f7ff f988 	bl	8006554 <__pow5mult>
 8007244:	4681      	mov	r9, r0
 8007246:	b9e0      	cbnz	r0, 8007282 <_strtod_l+0x78a>
 8007248:	f04f 0900 	mov.w	r9, #0
 800724c:	e677      	b.n	8006f3e <_strtod_l+0x446>
 800724e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007252:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007256:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800725a:	35e2      	adds	r5, #226	@ 0xe2
 800725c:	fa01 f305 	lsl.w	r3, r1, r5
 8007260:	9310      	str	r3, [sp, #64]	@ 0x40
 8007262:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007264:	e7ba      	b.n	80071dc <_strtod_l+0x6e4>
 8007266:	2300      	movs	r3, #0
 8007268:	9310      	str	r3, [sp, #64]	@ 0x40
 800726a:	2301      	movs	r3, #1
 800726c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800726e:	e7b5      	b.n	80071dc <_strtod_l+0x6e4>
 8007270:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007272:	9805      	ldr	r0, [sp, #20]
 8007274:	462a      	mov	r2, r5
 8007276:	f7ff f9c7 	bl	8006608 <__lshift>
 800727a:	901a      	str	r0, [sp, #104]	@ 0x68
 800727c:	2800      	cmp	r0, #0
 800727e:	d1d9      	bne.n	8007234 <_strtod_l+0x73c>
 8007280:	e65d      	b.n	8006f3e <_strtod_l+0x446>
 8007282:	2e00      	cmp	r6, #0
 8007284:	dd07      	ble.n	8007296 <_strtod_l+0x79e>
 8007286:	4649      	mov	r1, r9
 8007288:	9805      	ldr	r0, [sp, #20]
 800728a:	4632      	mov	r2, r6
 800728c:	f7ff f9bc 	bl	8006608 <__lshift>
 8007290:	4681      	mov	r9, r0
 8007292:	2800      	cmp	r0, #0
 8007294:	d0d8      	beq.n	8007248 <_strtod_l+0x750>
 8007296:	2f00      	cmp	r7, #0
 8007298:	dd08      	ble.n	80072ac <_strtod_l+0x7b4>
 800729a:	4641      	mov	r1, r8
 800729c:	9805      	ldr	r0, [sp, #20]
 800729e:	463a      	mov	r2, r7
 80072a0:	f7ff f9b2 	bl	8006608 <__lshift>
 80072a4:	4680      	mov	r8, r0
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f43f ae49 	beq.w	8006f3e <_strtod_l+0x446>
 80072ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072ae:	9805      	ldr	r0, [sp, #20]
 80072b0:	464a      	mov	r2, r9
 80072b2:	f7ff fa31 	bl	8006718 <__mdiff>
 80072b6:	4604      	mov	r4, r0
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f43f ae40 	beq.w	8006f3e <_strtod_l+0x446>
 80072be:	68c3      	ldr	r3, [r0, #12]
 80072c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072c2:	2300      	movs	r3, #0
 80072c4:	60c3      	str	r3, [r0, #12]
 80072c6:	4641      	mov	r1, r8
 80072c8:	f7ff fa0a 	bl	80066e0 <__mcmp>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	da45      	bge.n	800735c <_strtod_l+0x864>
 80072d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072d2:	ea53 030a 	orrs.w	r3, r3, sl
 80072d6:	d16b      	bne.n	80073b0 <_strtod_l+0x8b8>
 80072d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d167      	bne.n	80073b0 <_strtod_l+0x8b8>
 80072e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072e4:	0d1b      	lsrs	r3, r3, #20
 80072e6:	051b      	lsls	r3, r3, #20
 80072e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80072ec:	d960      	bls.n	80073b0 <_strtod_l+0x8b8>
 80072ee:	6963      	ldr	r3, [r4, #20]
 80072f0:	b913      	cbnz	r3, 80072f8 <_strtod_l+0x800>
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	dd5b      	ble.n	80073b0 <_strtod_l+0x8b8>
 80072f8:	4621      	mov	r1, r4
 80072fa:	2201      	movs	r2, #1
 80072fc:	9805      	ldr	r0, [sp, #20]
 80072fe:	f7ff f983 	bl	8006608 <__lshift>
 8007302:	4641      	mov	r1, r8
 8007304:	4604      	mov	r4, r0
 8007306:	f7ff f9eb 	bl	80066e0 <__mcmp>
 800730a:	2800      	cmp	r0, #0
 800730c:	dd50      	ble.n	80073b0 <_strtod_l+0x8b8>
 800730e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007312:	9a08      	ldr	r2, [sp, #32]
 8007314:	0d1b      	lsrs	r3, r3, #20
 8007316:	051b      	lsls	r3, r3, #20
 8007318:	2a00      	cmp	r2, #0
 800731a:	d06a      	beq.n	80073f2 <_strtod_l+0x8fa>
 800731c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007320:	d867      	bhi.n	80073f2 <_strtod_l+0x8fa>
 8007322:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007326:	f67f ae9d 	bls.w	8007064 <_strtod_l+0x56c>
 800732a:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <_strtod_l+0x85c>)
 800732c:	4650      	mov	r0, sl
 800732e:	4659      	mov	r1, fp
 8007330:	2200      	movs	r2, #0
 8007332:	f7f9 f961 	bl	80005f8 <__aeabi_dmul>
 8007336:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <_strtod_l+0x860>)
 8007338:	400b      	ands	r3, r1
 800733a:	4682      	mov	sl, r0
 800733c:	468b      	mov	fp, r1
 800733e:	2b00      	cmp	r3, #0
 8007340:	f47f ae08 	bne.w	8006f54 <_strtod_l+0x45c>
 8007344:	9a05      	ldr	r2, [sp, #20]
 8007346:	2322      	movs	r3, #34	@ 0x22
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	e603      	b.n	8006f54 <_strtod_l+0x45c>
 800734c:	08008cb0 	.word	0x08008cb0
 8007350:	fffffc02 	.word	0xfffffc02
 8007354:	39500000 	.word	0x39500000
 8007358:	7ff00000 	.word	0x7ff00000
 800735c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007360:	d165      	bne.n	800742e <_strtod_l+0x936>
 8007362:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007368:	b35a      	cbz	r2, 80073c2 <_strtod_l+0x8ca>
 800736a:	4a9f      	ldr	r2, [pc, #636]	@ (80075e8 <_strtod_l+0xaf0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d12b      	bne.n	80073c8 <_strtod_l+0x8d0>
 8007370:	9b08      	ldr	r3, [sp, #32]
 8007372:	4651      	mov	r1, sl
 8007374:	b303      	cbz	r3, 80073b8 <_strtod_l+0x8c0>
 8007376:	4b9d      	ldr	r3, [pc, #628]	@ (80075ec <_strtod_l+0xaf4>)
 8007378:	465a      	mov	r2, fp
 800737a:	4013      	ands	r3, r2
 800737c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007384:	d81b      	bhi.n	80073be <_strtod_l+0x8c6>
 8007386:	0d1b      	lsrs	r3, r3, #20
 8007388:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	4299      	cmp	r1, r3
 8007392:	d119      	bne.n	80073c8 <_strtod_l+0x8d0>
 8007394:	4b96      	ldr	r3, [pc, #600]	@ (80075f0 <_strtod_l+0xaf8>)
 8007396:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007398:	429a      	cmp	r2, r3
 800739a:	d102      	bne.n	80073a2 <_strtod_l+0x8aa>
 800739c:	3101      	adds	r1, #1
 800739e:	f43f adce 	beq.w	8006f3e <_strtod_l+0x446>
 80073a2:	4b92      	ldr	r3, [pc, #584]	@ (80075ec <_strtod_l+0xaf4>)
 80073a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073a6:	401a      	ands	r2, r3
 80073a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80073ac:	f04f 0a00 	mov.w	sl, #0
 80073b0:	9b08      	ldr	r3, [sp, #32]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1b9      	bne.n	800732a <_strtod_l+0x832>
 80073b6:	e5cd      	b.n	8006f54 <_strtod_l+0x45c>
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073bc:	e7e8      	b.n	8007390 <_strtod_l+0x898>
 80073be:	4613      	mov	r3, r2
 80073c0:	e7e6      	b.n	8007390 <_strtod_l+0x898>
 80073c2:	ea53 030a 	orrs.w	r3, r3, sl
 80073c6:	d0a2      	beq.n	800730e <_strtod_l+0x816>
 80073c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073ca:	b1db      	cbz	r3, 8007404 <_strtod_l+0x90c>
 80073cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073ce:	4213      	tst	r3, r2
 80073d0:	d0ee      	beq.n	80073b0 <_strtod_l+0x8b8>
 80073d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073d4:	9a08      	ldr	r2, [sp, #32]
 80073d6:	4650      	mov	r0, sl
 80073d8:	4659      	mov	r1, fp
 80073da:	b1bb      	cbz	r3, 800740c <_strtod_l+0x914>
 80073dc:	f7ff fb6e 	bl	8006abc <sulp>
 80073e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073e4:	ec53 2b10 	vmov	r2, r3, d0
 80073e8:	f7f8 ff50 	bl	800028c <__adddf3>
 80073ec:	4682      	mov	sl, r0
 80073ee:	468b      	mov	fp, r1
 80073f0:	e7de      	b.n	80073b0 <_strtod_l+0x8b8>
 80073f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80073f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80073fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80073fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007402:	e7d5      	b.n	80073b0 <_strtod_l+0x8b8>
 8007404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007406:	ea13 0f0a 	tst.w	r3, sl
 800740a:	e7e1      	b.n	80073d0 <_strtod_l+0x8d8>
 800740c:	f7ff fb56 	bl	8006abc <sulp>
 8007410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007414:	ec53 2b10 	vmov	r2, r3, d0
 8007418:	f7f8 ff36 	bl	8000288 <__aeabi_dsub>
 800741c:	2200      	movs	r2, #0
 800741e:	2300      	movs	r3, #0
 8007420:	4682      	mov	sl, r0
 8007422:	468b      	mov	fp, r1
 8007424:	f7f9 fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8007428:	2800      	cmp	r0, #0
 800742a:	d0c1      	beq.n	80073b0 <_strtod_l+0x8b8>
 800742c:	e61a      	b.n	8007064 <_strtod_l+0x56c>
 800742e:	4641      	mov	r1, r8
 8007430:	4620      	mov	r0, r4
 8007432:	f7ff facd 	bl	80069d0 <__ratio>
 8007436:	ec57 6b10 	vmov	r6, r7, d0
 800743a:	2200      	movs	r2, #0
 800743c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007440:	4630      	mov	r0, r6
 8007442:	4639      	mov	r1, r7
 8007444:	f7f9 fb54 	bl	8000af0 <__aeabi_dcmple>
 8007448:	2800      	cmp	r0, #0
 800744a:	d06f      	beq.n	800752c <_strtod_l+0xa34>
 800744c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d17a      	bne.n	8007548 <_strtod_l+0xa50>
 8007452:	f1ba 0f00 	cmp.w	sl, #0
 8007456:	d158      	bne.n	800750a <_strtod_l+0xa12>
 8007458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800745a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800745e:	2b00      	cmp	r3, #0
 8007460:	d15a      	bne.n	8007518 <_strtod_l+0xa20>
 8007462:	4b64      	ldr	r3, [pc, #400]	@ (80075f4 <_strtod_l+0xafc>)
 8007464:	2200      	movs	r2, #0
 8007466:	4630      	mov	r0, r6
 8007468:	4639      	mov	r1, r7
 800746a:	f7f9 fb37 	bl	8000adc <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	d159      	bne.n	8007526 <_strtod_l+0xa2e>
 8007472:	4630      	mov	r0, r6
 8007474:	4639      	mov	r1, r7
 8007476:	4b60      	ldr	r3, [pc, #384]	@ (80075f8 <_strtod_l+0xb00>)
 8007478:	2200      	movs	r2, #0
 800747a:	f7f9 f8bd 	bl	80005f8 <__aeabi_dmul>
 800747e:	4606      	mov	r6, r0
 8007480:	460f      	mov	r7, r1
 8007482:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007486:	9606      	str	r6, [sp, #24]
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800748e:	4d57      	ldr	r5, [pc, #348]	@ (80075ec <_strtod_l+0xaf4>)
 8007490:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007496:	401d      	ands	r5, r3
 8007498:	4b58      	ldr	r3, [pc, #352]	@ (80075fc <_strtod_l+0xb04>)
 800749a:	429d      	cmp	r5, r3
 800749c:	f040 80b2 	bne.w	8007604 <_strtod_l+0xb0c>
 80074a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80074a6:	ec4b ab10 	vmov	d0, sl, fp
 80074aa:	f7ff f9c9 	bl	8006840 <__ulp>
 80074ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074b2:	ec51 0b10 	vmov	r0, r1, d0
 80074b6:	f7f9 f89f 	bl	80005f8 <__aeabi_dmul>
 80074ba:	4652      	mov	r2, sl
 80074bc:	465b      	mov	r3, fp
 80074be:	f7f8 fee5 	bl	800028c <__adddf3>
 80074c2:	460b      	mov	r3, r1
 80074c4:	4949      	ldr	r1, [pc, #292]	@ (80075ec <_strtod_l+0xaf4>)
 80074c6:	4a4e      	ldr	r2, [pc, #312]	@ (8007600 <_strtod_l+0xb08>)
 80074c8:	4019      	ands	r1, r3
 80074ca:	4291      	cmp	r1, r2
 80074cc:	4682      	mov	sl, r0
 80074ce:	d942      	bls.n	8007556 <_strtod_l+0xa5e>
 80074d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074d2:	4b47      	ldr	r3, [pc, #284]	@ (80075f0 <_strtod_l+0xaf8>)
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d103      	bne.n	80074e0 <_strtod_l+0x9e8>
 80074d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074da:	3301      	adds	r3, #1
 80074dc:	f43f ad2f 	beq.w	8006f3e <_strtod_l+0x446>
 80074e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80075f0 <_strtod_l+0xaf8>
 80074e4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80074e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074ea:	9805      	ldr	r0, [sp, #20]
 80074ec:	f7fe fe7c 	bl	80061e8 <_Bfree>
 80074f0:	9805      	ldr	r0, [sp, #20]
 80074f2:	4649      	mov	r1, r9
 80074f4:	f7fe fe78 	bl	80061e8 <_Bfree>
 80074f8:	9805      	ldr	r0, [sp, #20]
 80074fa:	4641      	mov	r1, r8
 80074fc:	f7fe fe74 	bl	80061e8 <_Bfree>
 8007500:	9805      	ldr	r0, [sp, #20]
 8007502:	4621      	mov	r1, r4
 8007504:	f7fe fe70 	bl	80061e8 <_Bfree>
 8007508:	e619      	b.n	800713e <_strtod_l+0x646>
 800750a:	f1ba 0f01 	cmp.w	sl, #1
 800750e:	d103      	bne.n	8007518 <_strtod_l+0xa20>
 8007510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	f43f ada6 	beq.w	8007064 <_strtod_l+0x56c>
 8007518:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80075c8 <_strtod_l+0xad0>
 800751c:	4f35      	ldr	r7, [pc, #212]	@ (80075f4 <_strtod_l+0xafc>)
 800751e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007522:	2600      	movs	r6, #0
 8007524:	e7b1      	b.n	800748a <_strtod_l+0x992>
 8007526:	4f34      	ldr	r7, [pc, #208]	@ (80075f8 <_strtod_l+0xb00>)
 8007528:	2600      	movs	r6, #0
 800752a:	e7aa      	b.n	8007482 <_strtod_l+0x98a>
 800752c:	4b32      	ldr	r3, [pc, #200]	@ (80075f8 <_strtod_l+0xb00>)
 800752e:	4630      	mov	r0, r6
 8007530:	4639      	mov	r1, r7
 8007532:	2200      	movs	r2, #0
 8007534:	f7f9 f860 	bl	80005f8 <__aeabi_dmul>
 8007538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d09f      	beq.n	8007482 <_strtod_l+0x98a>
 8007542:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007546:	e7a0      	b.n	800748a <_strtod_l+0x992>
 8007548:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80075d0 <_strtod_l+0xad8>
 800754c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007550:	ec57 6b17 	vmov	r6, r7, d7
 8007554:	e799      	b.n	800748a <_strtod_l+0x992>
 8007556:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800755a:	9b08      	ldr	r3, [sp, #32]
 800755c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1c1      	bne.n	80074e8 <_strtod_l+0x9f0>
 8007564:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007568:	0d1b      	lsrs	r3, r3, #20
 800756a:	051b      	lsls	r3, r3, #20
 800756c:	429d      	cmp	r5, r3
 800756e:	d1bb      	bne.n	80074e8 <_strtod_l+0x9f0>
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f9 fb88 	bl	8000c88 <__aeabi_d2lz>
 8007578:	f7f9 f810 	bl	800059c <__aeabi_l2d>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f7f8 fe80 	bl	8000288 <__aeabi_dsub>
 8007588:	460b      	mov	r3, r1
 800758a:	4602      	mov	r2, r0
 800758c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007590:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007596:	ea46 060a 	orr.w	r6, r6, sl
 800759a:	431e      	orrs	r6, r3
 800759c:	d06f      	beq.n	800767e <_strtod_l+0xb86>
 800759e:	a30e      	add	r3, pc, #56	@ (adr r3, 80075d8 <_strtod_l+0xae0>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f7f9 fa9a 	bl	8000adc <__aeabi_dcmplt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	f47f acd3 	bne.w	8006f54 <_strtod_l+0x45c>
 80075ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80075e0 <_strtod_l+0xae8>)
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075b8:	f7f9 faae 	bl	8000b18 <__aeabi_dcmpgt>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d093      	beq.n	80074e8 <_strtod_l+0x9f0>
 80075c0:	e4c8      	b.n	8006f54 <_strtod_l+0x45c>
 80075c2:	bf00      	nop
 80075c4:	f3af 8000 	nop.w
 80075c8:	00000000 	.word	0x00000000
 80075cc:	bff00000 	.word	0xbff00000
 80075d0:	00000000 	.word	0x00000000
 80075d4:	3ff00000 	.word	0x3ff00000
 80075d8:	94a03595 	.word	0x94a03595
 80075dc:	3fdfffff 	.word	0x3fdfffff
 80075e0:	35afe535 	.word	0x35afe535
 80075e4:	3fe00000 	.word	0x3fe00000
 80075e8:	000fffff 	.word	0x000fffff
 80075ec:	7ff00000 	.word	0x7ff00000
 80075f0:	7fefffff 	.word	0x7fefffff
 80075f4:	3ff00000 	.word	0x3ff00000
 80075f8:	3fe00000 	.word	0x3fe00000
 80075fc:	7fe00000 	.word	0x7fe00000
 8007600:	7c9fffff 	.word	0x7c9fffff
 8007604:	9b08      	ldr	r3, [sp, #32]
 8007606:	b323      	cbz	r3, 8007652 <_strtod_l+0xb5a>
 8007608:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800760c:	d821      	bhi.n	8007652 <_strtod_l+0xb5a>
 800760e:	a328      	add	r3, pc, #160	@ (adr r3, 80076b0 <_strtod_l+0xbb8>)
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7f9 fa6a 	bl	8000af0 <__aeabi_dcmple>
 800761c:	b1a0      	cbz	r0, 8007648 <_strtod_l+0xb50>
 800761e:	4639      	mov	r1, r7
 8007620:	4630      	mov	r0, r6
 8007622:	f7f9 fac1 	bl	8000ba8 <__aeabi_d2uiz>
 8007626:	2801      	cmp	r0, #1
 8007628:	bf38      	it	cc
 800762a:	2001      	movcc	r0, #1
 800762c:	f7f8 ff6a 	bl	8000504 <__aeabi_ui2d>
 8007630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007632:	4606      	mov	r6, r0
 8007634:	460f      	mov	r7, r1
 8007636:	b9fb      	cbnz	r3, 8007678 <_strtod_l+0xb80>
 8007638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800763c:	9014      	str	r0, [sp, #80]	@ 0x50
 800763e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007640:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007644:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007648:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800764a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800764e:	1b5b      	subs	r3, r3, r5
 8007650:	9311      	str	r3, [sp, #68]	@ 0x44
 8007652:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007656:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800765a:	f7ff f8f1 	bl	8006840 <__ulp>
 800765e:	4650      	mov	r0, sl
 8007660:	ec53 2b10 	vmov	r2, r3, d0
 8007664:	4659      	mov	r1, fp
 8007666:	f7f8 ffc7 	bl	80005f8 <__aeabi_dmul>
 800766a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800766e:	f7f8 fe0d 	bl	800028c <__adddf3>
 8007672:	4682      	mov	sl, r0
 8007674:	468b      	mov	fp, r1
 8007676:	e770      	b.n	800755a <_strtod_l+0xa62>
 8007678:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800767c:	e7e0      	b.n	8007640 <_strtod_l+0xb48>
 800767e:	a30e      	add	r3, pc, #56	@ (adr r3, 80076b8 <_strtod_l+0xbc0>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f7f9 fa2a 	bl	8000adc <__aeabi_dcmplt>
 8007688:	e798      	b.n	80075bc <_strtod_l+0xac4>
 800768a:	2300      	movs	r3, #0
 800768c:	930e      	str	r3, [sp, #56]	@ 0x38
 800768e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	f7ff ba6d 	b.w	8006b72 <_strtod_l+0x7a>
 8007698:	2a65      	cmp	r2, #101	@ 0x65
 800769a:	f43f ab68 	beq.w	8006d6e <_strtod_l+0x276>
 800769e:	2a45      	cmp	r2, #69	@ 0x45
 80076a0:	f43f ab65 	beq.w	8006d6e <_strtod_l+0x276>
 80076a4:	2301      	movs	r3, #1
 80076a6:	f7ff bba0 	b.w	8006dea <_strtod_l+0x2f2>
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w
 80076b0:	ffc00000 	.word	0xffc00000
 80076b4:	41dfffff 	.word	0x41dfffff
 80076b8:	94a03595 	.word	0x94a03595
 80076bc:	3fcfffff 	.word	0x3fcfffff

080076c0 <_strtod_r>:
 80076c0:	4b01      	ldr	r3, [pc, #4]	@ (80076c8 <_strtod_r+0x8>)
 80076c2:	f7ff ba19 	b.w	8006af8 <_strtod_l>
 80076c6:	bf00      	nop
 80076c8:	20000068 	.word	0x20000068

080076cc <_strtol_l.isra.0>:
 80076cc:	2b24      	cmp	r3, #36	@ 0x24
 80076ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d2:	4686      	mov	lr, r0
 80076d4:	4690      	mov	r8, r2
 80076d6:	d801      	bhi.n	80076dc <_strtol_l.isra.0+0x10>
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d106      	bne.n	80076ea <_strtol_l.isra.0+0x1e>
 80076dc:	f7fd fdb8 	bl	8005250 <__errno>
 80076e0:	2316      	movs	r3, #22
 80076e2:	6003      	str	r3, [r0, #0]
 80076e4:	2000      	movs	r0, #0
 80076e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ea:	4834      	ldr	r0, [pc, #208]	@ (80077bc <_strtol_l.isra.0+0xf0>)
 80076ec:	460d      	mov	r5, r1
 80076ee:	462a      	mov	r2, r5
 80076f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076f4:	5d06      	ldrb	r6, [r0, r4]
 80076f6:	f016 0608 	ands.w	r6, r6, #8
 80076fa:	d1f8      	bne.n	80076ee <_strtol_l.isra.0+0x22>
 80076fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80076fe:	d110      	bne.n	8007722 <_strtol_l.isra.0+0x56>
 8007700:	782c      	ldrb	r4, [r5, #0]
 8007702:	2601      	movs	r6, #1
 8007704:	1c95      	adds	r5, r2, #2
 8007706:	f033 0210 	bics.w	r2, r3, #16
 800770a:	d115      	bne.n	8007738 <_strtol_l.isra.0+0x6c>
 800770c:	2c30      	cmp	r4, #48	@ 0x30
 800770e:	d10d      	bne.n	800772c <_strtol_l.isra.0+0x60>
 8007710:	782a      	ldrb	r2, [r5, #0]
 8007712:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007716:	2a58      	cmp	r2, #88	@ 0x58
 8007718:	d108      	bne.n	800772c <_strtol_l.isra.0+0x60>
 800771a:	786c      	ldrb	r4, [r5, #1]
 800771c:	3502      	adds	r5, #2
 800771e:	2310      	movs	r3, #16
 8007720:	e00a      	b.n	8007738 <_strtol_l.isra.0+0x6c>
 8007722:	2c2b      	cmp	r4, #43	@ 0x2b
 8007724:	bf04      	itt	eq
 8007726:	782c      	ldrbeq	r4, [r5, #0]
 8007728:	1c95      	addeq	r5, r2, #2
 800772a:	e7ec      	b.n	8007706 <_strtol_l.isra.0+0x3a>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1f6      	bne.n	800771e <_strtol_l.isra.0+0x52>
 8007730:	2c30      	cmp	r4, #48	@ 0x30
 8007732:	bf14      	ite	ne
 8007734:	230a      	movne	r3, #10
 8007736:	2308      	moveq	r3, #8
 8007738:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800773c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007740:	2200      	movs	r2, #0
 8007742:	fbbc f9f3 	udiv	r9, ip, r3
 8007746:	4610      	mov	r0, r2
 8007748:	fb03 ca19 	mls	sl, r3, r9, ip
 800774c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007750:	2f09      	cmp	r7, #9
 8007752:	d80f      	bhi.n	8007774 <_strtol_l.isra.0+0xa8>
 8007754:	463c      	mov	r4, r7
 8007756:	42a3      	cmp	r3, r4
 8007758:	dd1b      	ble.n	8007792 <_strtol_l.isra.0+0xc6>
 800775a:	1c57      	adds	r7, r2, #1
 800775c:	d007      	beq.n	800776e <_strtol_l.isra.0+0xa2>
 800775e:	4581      	cmp	r9, r0
 8007760:	d314      	bcc.n	800778c <_strtol_l.isra.0+0xc0>
 8007762:	d101      	bne.n	8007768 <_strtol_l.isra.0+0x9c>
 8007764:	45a2      	cmp	sl, r4
 8007766:	db11      	blt.n	800778c <_strtol_l.isra.0+0xc0>
 8007768:	fb00 4003 	mla	r0, r0, r3, r4
 800776c:	2201      	movs	r2, #1
 800776e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007772:	e7eb      	b.n	800774c <_strtol_l.isra.0+0x80>
 8007774:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007778:	2f19      	cmp	r7, #25
 800777a:	d801      	bhi.n	8007780 <_strtol_l.isra.0+0xb4>
 800777c:	3c37      	subs	r4, #55	@ 0x37
 800777e:	e7ea      	b.n	8007756 <_strtol_l.isra.0+0x8a>
 8007780:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007784:	2f19      	cmp	r7, #25
 8007786:	d804      	bhi.n	8007792 <_strtol_l.isra.0+0xc6>
 8007788:	3c57      	subs	r4, #87	@ 0x57
 800778a:	e7e4      	b.n	8007756 <_strtol_l.isra.0+0x8a>
 800778c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007790:	e7ed      	b.n	800776e <_strtol_l.isra.0+0xa2>
 8007792:	1c53      	adds	r3, r2, #1
 8007794:	d108      	bne.n	80077a8 <_strtol_l.isra.0+0xdc>
 8007796:	2322      	movs	r3, #34	@ 0x22
 8007798:	f8ce 3000 	str.w	r3, [lr]
 800779c:	4660      	mov	r0, ip
 800779e:	f1b8 0f00 	cmp.w	r8, #0
 80077a2:	d0a0      	beq.n	80076e6 <_strtol_l.isra.0+0x1a>
 80077a4:	1e69      	subs	r1, r5, #1
 80077a6:	e006      	b.n	80077b6 <_strtol_l.isra.0+0xea>
 80077a8:	b106      	cbz	r6, 80077ac <_strtol_l.isra.0+0xe0>
 80077aa:	4240      	negs	r0, r0
 80077ac:	f1b8 0f00 	cmp.w	r8, #0
 80077b0:	d099      	beq.n	80076e6 <_strtol_l.isra.0+0x1a>
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	d1f6      	bne.n	80077a4 <_strtol_l.isra.0+0xd8>
 80077b6:	f8c8 1000 	str.w	r1, [r8]
 80077ba:	e794      	b.n	80076e6 <_strtol_l.isra.0+0x1a>
 80077bc:	08008cd9 	.word	0x08008cd9

080077c0 <_strtol_r>:
 80077c0:	f7ff bf84 	b.w	80076cc <_strtol_l.isra.0>

080077c4 <__ssputs_r>:
 80077c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	688e      	ldr	r6, [r1, #8]
 80077ca:	461f      	mov	r7, r3
 80077cc:	42be      	cmp	r6, r7
 80077ce:	680b      	ldr	r3, [r1, #0]
 80077d0:	4682      	mov	sl, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	4690      	mov	r8, r2
 80077d6:	d82d      	bhi.n	8007834 <__ssputs_r+0x70>
 80077d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077e0:	d026      	beq.n	8007830 <__ssputs_r+0x6c>
 80077e2:	6965      	ldr	r5, [r4, #20]
 80077e4:	6909      	ldr	r1, [r1, #16]
 80077e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077ea:	eba3 0901 	sub.w	r9, r3, r1
 80077ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077f2:	1c7b      	adds	r3, r7, #1
 80077f4:	444b      	add	r3, r9
 80077f6:	106d      	asrs	r5, r5, #1
 80077f8:	429d      	cmp	r5, r3
 80077fa:	bf38      	it	cc
 80077fc:	461d      	movcc	r5, r3
 80077fe:	0553      	lsls	r3, r2, #21
 8007800:	d527      	bpl.n	8007852 <__ssputs_r+0x8e>
 8007802:	4629      	mov	r1, r5
 8007804:	f7fe fc24 	bl	8006050 <_malloc_r>
 8007808:	4606      	mov	r6, r0
 800780a:	b360      	cbz	r0, 8007866 <__ssputs_r+0xa2>
 800780c:	6921      	ldr	r1, [r4, #16]
 800780e:	464a      	mov	r2, r9
 8007810:	f000 fa9c 	bl	8007d4c <memcpy>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800781a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	6126      	str	r6, [r4, #16]
 8007822:	6165      	str	r5, [r4, #20]
 8007824:	444e      	add	r6, r9
 8007826:	eba5 0509 	sub.w	r5, r5, r9
 800782a:	6026      	str	r6, [r4, #0]
 800782c:	60a5      	str	r5, [r4, #8]
 800782e:	463e      	mov	r6, r7
 8007830:	42be      	cmp	r6, r7
 8007832:	d900      	bls.n	8007836 <__ssputs_r+0x72>
 8007834:	463e      	mov	r6, r7
 8007836:	6820      	ldr	r0, [r4, #0]
 8007838:	4632      	mov	r2, r6
 800783a:	4641      	mov	r1, r8
 800783c:	f000 fa28 	bl	8007c90 <memmove>
 8007840:	68a3      	ldr	r3, [r4, #8]
 8007842:	1b9b      	subs	r3, r3, r6
 8007844:	60a3      	str	r3, [r4, #8]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	4433      	add	r3, r6
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	2000      	movs	r0, #0
 800784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007852:	462a      	mov	r2, r5
 8007854:	f000 fe0d 	bl	8008472 <_realloc_r>
 8007858:	4606      	mov	r6, r0
 800785a:	2800      	cmp	r0, #0
 800785c:	d1e0      	bne.n	8007820 <__ssputs_r+0x5c>
 800785e:	6921      	ldr	r1, [r4, #16]
 8007860:	4650      	mov	r0, sl
 8007862:	f7fe fb81 	bl	8005f68 <_free_r>
 8007866:	230c      	movs	r3, #12
 8007868:	f8ca 3000 	str.w	r3, [sl]
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007878:	e7e9      	b.n	800784e <__ssputs_r+0x8a>
	...

0800787c <_svfiprintf_r>:
 800787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	4698      	mov	r8, r3
 8007882:	898b      	ldrh	r3, [r1, #12]
 8007884:	061b      	lsls	r3, r3, #24
 8007886:	b09d      	sub	sp, #116	@ 0x74
 8007888:	4607      	mov	r7, r0
 800788a:	460d      	mov	r5, r1
 800788c:	4614      	mov	r4, r2
 800788e:	d510      	bpl.n	80078b2 <_svfiprintf_r+0x36>
 8007890:	690b      	ldr	r3, [r1, #16]
 8007892:	b973      	cbnz	r3, 80078b2 <_svfiprintf_r+0x36>
 8007894:	2140      	movs	r1, #64	@ 0x40
 8007896:	f7fe fbdb 	bl	8006050 <_malloc_r>
 800789a:	6028      	str	r0, [r5, #0]
 800789c:	6128      	str	r0, [r5, #16]
 800789e:	b930      	cbnz	r0, 80078ae <_svfiprintf_r+0x32>
 80078a0:	230c      	movs	r3, #12
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078a8:	b01d      	add	sp, #116	@ 0x74
 80078aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ae:	2340      	movs	r3, #64	@ 0x40
 80078b0:	616b      	str	r3, [r5, #20]
 80078b2:	2300      	movs	r3, #0
 80078b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b6:	2320      	movs	r3, #32
 80078b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80078c0:	2330      	movs	r3, #48	@ 0x30
 80078c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a60 <_svfiprintf_r+0x1e4>
 80078c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078ca:	f04f 0901 	mov.w	r9, #1
 80078ce:	4623      	mov	r3, r4
 80078d0:	469a      	mov	sl, r3
 80078d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078d6:	b10a      	cbz	r2, 80078dc <_svfiprintf_r+0x60>
 80078d8:	2a25      	cmp	r2, #37	@ 0x25
 80078da:	d1f9      	bne.n	80078d0 <_svfiprintf_r+0x54>
 80078dc:	ebba 0b04 	subs.w	fp, sl, r4
 80078e0:	d00b      	beq.n	80078fa <_svfiprintf_r+0x7e>
 80078e2:	465b      	mov	r3, fp
 80078e4:	4622      	mov	r2, r4
 80078e6:	4629      	mov	r1, r5
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff ff6b 	bl	80077c4 <__ssputs_r>
 80078ee:	3001      	adds	r0, #1
 80078f0:	f000 80a7 	beq.w	8007a42 <_svfiprintf_r+0x1c6>
 80078f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078f6:	445a      	add	r2, fp
 80078f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80078fa:	f89a 3000 	ldrb.w	r3, [sl]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 809f 	beq.w	8007a42 <_svfiprintf_r+0x1c6>
 8007904:	2300      	movs	r3, #0
 8007906:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800790a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800790e:	f10a 0a01 	add.w	sl, sl, #1
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	9307      	str	r3, [sp, #28]
 8007916:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800791a:	931a      	str	r3, [sp, #104]	@ 0x68
 800791c:	4654      	mov	r4, sl
 800791e:	2205      	movs	r2, #5
 8007920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007924:	484e      	ldr	r0, [pc, #312]	@ (8007a60 <_svfiprintf_r+0x1e4>)
 8007926:	f7f8 fc53 	bl	80001d0 <memchr>
 800792a:	9a04      	ldr	r2, [sp, #16]
 800792c:	b9d8      	cbnz	r0, 8007966 <_svfiprintf_r+0xea>
 800792e:	06d0      	lsls	r0, r2, #27
 8007930:	bf44      	itt	mi
 8007932:	2320      	movmi	r3, #32
 8007934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007938:	0711      	lsls	r1, r2, #28
 800793a:	bf44      	itt	mi
 800793c:	232b      	movmi	r3, #43	@ 0x2b
 800793e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007942:	f89a 3000 	ldrb.w	r3, [sl]
 8007946:	2b2a      	cmp	r3, #42	@ 0x2a
 8007948:	d015      	beq.n	8007976 <_svfiprintf_r+0xfa>
 800794a:	9a07      	ldr	r2, [sp, #28]
 800794c:	4654      	mov	r4, sl
 800794e:	2000      	movs	r0, #0
 8007950:	f04f 0c0a 	mov.w	ip, #10
 8007954:	4621      	mov	r1, r4
 8007956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800795a:	3b30      	subs	r3, #48	@ 0x30
 800795c:	2b09      	cmp	r3, #9
 800795e:	d94b      	bls.n	80079f8 <_svfiprintf_r+0x17c>
 8007960:	b1b0      	cbz	r0, 8007990 <_svfiprintf_r+0x114>
 8007962:	9207      	str	r2, [sp, #28]
 8007964:	e014      	b.n	8007990 <_svfiprintf_r+0x114>
 8007966:	eba0 0308 	sub.w	r3, r0, r8
 800796a:	fa09 f303 	lsl.w	r3, r9, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	46a2      	mov	sl, r4
 8007974:	e7d2      	b.n	800791c <_svfiprintf_r+0xa0>
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	1d19      	adds	r1, r3, #4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	9103      	str	r1, [sp, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	bfbb      	ittet	lt
 8007982:	425b      	neglt	r3, r3
 8007984:	f042 0202 	orrlt.w	r2, r2, #2
 8007988:	9307      	strge	r3, [sp, #28]
 800798a:	9307      	strlt	r3, [sp, #28]
 800798c:	bfb8      	it	lt
 800798e:	9204      	strlt	r2, [sp, #16]
 8007990:	7823      	ldrb	r3, [r4, #0]
 8007992:	2b2e      	cmp	r3, #46	@ 0x2e
 8007994:	d10a      	bne.n	80079ac <_svfiprintf_r+0x130>
 8007996:	7863      	ldrb	r3, [r4, #1]
 8007998:	2b2a      	cmp	r3, #42	@ 0x2a
 800799a:	d132      	bne.n	8007a02 <_svfiprintf_r+0x186>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1d1a      	adds	r2, r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	9203      	str	r2, [sp, #12]
 80079a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079a8:	3402      	adds	r4, #2
 80079aa:	9305      	str	r3, [sp, #20]
 80079ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a70 <_svfiprintf_r+0x1f4>
 80079b0:	7821      	ldrb	r1, [r4, #0]
 80079b2:	2203      	movs	r2, #3
 80079b4:	4650      	mov	r0, sl
 80079b6:	f7f8 fc0b 	bl	80001d0 <memchr>
 80079ba:	b138      	cbz	r0, 80079cc <_svfiprintf_r+0x150>
 80079bc:	9b04      	ldr	r3, [sp, #16]
 80079be:	eba0 000a 	sub.w	r0, r0, sl
 80079c2:	2240      	movs	r2, #64	@ 0x40
 80079c4:	4082      	lsls	r2, r0
 80079c6:	4313      	orrs	r3, r2
 80079c8:	3401      	adds	r4, #1
 80079ca:	9304      	str	r3, [sp, #16]
 80079cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d0:	4824      	ldr	r0, [pc, #144]	@ (8007a64 <_svfiprintf_r+0x1e8>)
 80079d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079d6:	2206      	movs	r2, #6
 80079d8:	f7f8 fbfa 	bl	80001d0 <memchr>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d036      	beq.n	8007a4e <_svfiprintf_r+0x1d2>
 80079e0:	4b21      	ldr	r3, [pc, #132]	@ (8007a68 <_svfiprintf_r+0x1ec>)
 80079e2:	bb1b      	cbnz	r3, 8007a2c <_svfiprintf_r+0x1b0>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	3307      	adds	r3, #7
 80079e8:	f023 0307 	bic.w	r3, r3, #7
 80079ec:	3308      	adds	r3, #8
 80079ee:	9303      	str	r3, [sp, #12]
 80079f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f2:	4433      	add	r3, r6
 80079f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f6:	e76a      	b.n	80078ce <_svfiprintf_r+0x52>
 80079f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80079fc:	460c      	mov	r4, r1
 80079fe:	2001      	movs	r0, #1
 8007a00:	e7a8      	b.n	8007954 <_svfiprintf_r+0xd8>
 8007a02:	2300      	movs	r3, #0
 8007a04:	3401      	adds	r4, #1
 8007a06:	9305      	str	r3, [sp, #20]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	f04f 0c0a 	mov.w	ip, #10
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a14:	3a30      	subs	r2, #48	@ 0x30
 8007a16:	2a09      	cmp	r2, #9
 8007a18:	d903      	bls.n	8007a22 <_svfiprintf_r+0x1a6>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0c6      	beq.n	80079ac <_svfiprintf_r+0x130>
 8007a1e:	9105      	str	r1, [sp, #20]
 8007a20:	e7c4      	b.n	80079ac <_svfiprintf_r+0x130>
 8007a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a26:	4604      	mov	r4, r0
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e7f0      	b.n	8007a0e <_svfiprintf_r+0x192>
 8007a2c:	ab03      	add	r3, sp, #12
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	462a      	mov	r2, r5
 8007a32:	4b0e      	ldr	r3, [pc, #56]	@ (8007a6c <_svfiprintf_r+0x1f0>)
 8007a34:	a904      	add	r1, sp, #16
 8007a36:	4638      	mov	r0, r7
 8007a38:	f7fc fc18 	bl	800426c <_printf_float>
 8007a3c:	1c42      	adds	r2, r0, #1
 8007a3e:	4606      	mov	r6, r0
 8007a40:	d1d6      	bne.n	80079f0 <_svfiprintf_r+0x174>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	065b      	lsls	r3, r3, #25
 8007a46:	f53f af2d 	bmi.w	80078a4 <_svfiprintf_r+0x28>
 8007a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a4c:	e72c      	b.n	80078a8 <_svfiprintf_r+0x2c>
 8007a4e:	ab03      	add	r3, sp, #12
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	462a      	mov	r2, r5
 8007a54:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <_svfiprintf_r+0x1f0>)
 8007a56:	a904      	add	r1, sp, #16
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f7fc fe9f 	bl	800479c <_printf_i>
 8007a5e:	e7ed      	b.n	8007a3c <_svfiprintf_r+0x1c0>
 8007a60:	08008ad1 	.word	0x08008ad1
 8007a64:	08008adb 	.word	0x08008adb
 8007a68:	0800426d 	.word	0x0800426d
 8007a6c:	080077c5 	.word	0x080077c5
 8007a70:	08008ad7 	.word	0x08008ad7

08007a74 <__sflush_r>:
 8007a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7c:	0716      	lsls	r6, r2, #28
 8007a7e:	4605      	mov	r5, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	d454      	bmi.n	8007b2e <__sflush_r+0xba>
 8007a84:	684b      	ldr	r3, [r1, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dc02      	bgt.n	8007a90 <__sflush_r+0x1c>
 8007a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd48      	ble.n	8007b22 <__sflush_r+0xae>
 8007a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d045      	beq.n	8007b22 <__sflush_r+0xae>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a9c:	682f      	ldr	r7, [r5, #0]
 8007a9e:	6a21      	ldr	r1, [r4, #32]
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	d030      	beq.n	8007b06 <__sflush_r+0x92>
 8007aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	0759      	lsls	r1, r3, #29
 8007aaa:	d505      	bpl.n	8007ab8 <__sflush_r+0x44>
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ab2:	b10b      	cbz	r3, 8007ab8 <__sflush_r+0x44>
 8007ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	2300      	movs	r3, #0
 8007aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007abc:	6a21      	ldr	r1, [r4, #32]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b0      	blx	r6
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	d106      	bne.n	8007ad6 <__sflush_r+0x62>
 8007ac8:	6829      	ldr	r1, [r5, #0]
 8007aca:	291d      	cmp	r1, #29
 8007acc:	d82b      	bhi.n	8007b26 <__sflush_r+0xb2>
 8007ace:	4a2a      	ldr	r2, [pc, #168]	@ (8007b78 <__sflush_r+0x104>)
 8007ad0:	40ca      	lsrs	r2, r1
 8007ad2:	07d6      	lsls	r6, r2, #31
 8007ad4:	d527      	bpl.n	8007b26 <__sflush_r+0xb2>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	6062      	str	r2, [r4, #4]
 8007ada:	04d9      	lsls	r1, r3, #19
 8007adc:	6922      	ldr	r2, [r4, #16]
 8007ade:	6022      	str	r2, [r4, #0]
 8007ae0:	d504      	bpl.n	8007aec <__sflush_r+0x78>
 8007ae2:	1c42      	adds	r2, r0, #1
 8007ae4:	d101      	bne.n	8007aea <__sflush_r+0x76>
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	b903      	cbnz	r3, 8007aec <__sflush_r+0x78>
 8007aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aee:	602f      	str	r7, [r5, #0]
 8007af0:	b1b9      	cbz	r1, 8007b22 <__sflush_r+0xae>
 8007af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007af6:	4299      	cmp	r1, r3
 8007af8:	d002      	beq.n	8007b00 <__sflush_r+0x8c>
 8007afa:	4628      	mov	r0, r5
 8007afc:	f7fe fa34 	bl	8005f68 <_free_r>
 8007b00:	2300      	movs	r3, #0
 8007b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b04:	e00d      	b.n	8007b22 <__sflush_r+0xae>
 8007b06:	2301      	movs	r3, #1
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b0      	blx	r6
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	1c50      	adds	r0, r2, #1
 8007b10:	d1c9      	bne.n	8007aa6 <__sflush_r+0x32>
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0c6      	beq.n	8007aa6 <__sflush_r+0x32>
 8007b18:	2b1d      	cmp	r3, #29
 8007b1a:	d001      	beq.n	8007b20 <__sflush_r+0xac>
 8007b1c:	2b16      	cmp	r3, #22
 8007b1e:	d11e      	bne.n	8007b5e <__sflush_r+0xea>
 8007b20:	602f      	str	r7, [r5, #0]
 8007b22:	2000      	movs	r0, #0
 8007b24:	e022      	b.n	8007b6c <__sflush_r+0xf8>
 8007b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b2a:	b21b      	sxth	r3, r3
 8007b2c:	e01b      	b.n	8007b66 <__sflush_r+0xf2>
 8007b2e:	690f      	ldr	r7, [r1, #16]
 8007b30:	2f00      	cmp	r7, #0
 8007b32:	d0f6      	beq.n	8007b22 <__sflush_r+0xae>
 8007b34:	0793      	lsls	r3, r2, #30
 8007b36:	680e      	ldr	r6, [r1, #0]
 8007b38:	bf08      	it	eq
 8007b3a:	694b      	ldreq	r3, [r1, #20]
 8007b3c:	600f      	str	r7, [r1, #0]
 8007b3e:	bf18      	it	ne
 8007b40:	2300      	movne	r3, #0
 8007b42:	eba6 0807 	sub.w	r8, r6, r7
 8007b46:	608b      	str	r3, [r1, #8]
 8007b48:	f1b8 0f00 	cmp.w	r8, #0
 8007b4c:	dde9      	ble.n	8007b22 <__sflush_r+0xae>
 8007b4e:	6a21      	ldr	r1, [r4, #32]
 8007b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b52:	4643      	mov	r3, r8
 8007b54:	463a      	mov	r2, r7
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b0      	blx	r6
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	dc08      	bgt.n	8007b70 <__sflush_r+0xfc>
 8007b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b70:	4407      	add	r7, r0
 8007b72:	eba8 0800 	sub.w	r8, r8, r0
 8007b76:	e7e7      	b.n	8007b48 <__sflush_r+0xd4>
 8007b78:	20400001 	.word	0x20400001

08007b7c <_fflush_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	690b      	ldr	r3, [r1, #16]
 8007b80:	4605      	mov	r5, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	b913      	cbnz	r3, 8007b8c <_fflush_r+0x10>
 8007b86:	2500      	movs	r5, #0
 8007b88:	4628      	mov	r0, r5
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	b118      	cbz	r0, 8007b96 <_fflush_r+0x1a>
 8007b8e:	6a03      	ldr	r3, [r0, #32]
 8007b90:	b90b      	cbnz	r3, 8007b96 <_fflush_r+0x1a>
 8007b92:	f7fd f9bb 	bl	8004f0c <__sinit>
 8007b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0f3      	beq.n	8007b86 <_fflush_r+0xa>
 8007b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ba0:	07d0      	lsls	r0, r2, #31
 8007ba2:	d404      	bmi.n	8007bae <_fflush_r+0x32>
 8007ba4:	0599      	lsls	r1, r3, #22
 8007ba6:	d402      	bmi.n	8007bae <_fflush_r+0x32>
 8007ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007baa:	f7fd fb7c 	bl	80052a6 <__retarget_lock_acquire_recursive>
 8007bae:	4628      	mov	r0, r5
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f7ff ff5f 	bl	8007a74 <__sflush_r>
 8007bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bb8:	07da      	lsls	r2, r3, #31
 8007bba:	4605      	mov	r5, r0
 8007bbc:	d4e4      	bmi.n	8007b88 <_fflush_r+0xc>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	059b      	lsls	r3, r3, #22
 8007bc2:	d4e1      	bmi.n	8007b88 <_fflush_r+0xc>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bc6:	f7fd fb6f 	bl	80052a8 <__retarget_lock_release_recursive>
 8007bca:	e7dd      	b.n	8007b88 <_fflush_r+0xc>

08007bcc <__swhatbuf_r>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	460c      	mov	r4, r1
 8007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	b096      	sub	sp, #88	@ 0x58
 8007bd8:	4615      	mov	r5, r2
 8007bda:	461e      	mov	r6, r3
 8007bdc:	da0d      	bge.n	8007bfa <__swhatbuf_r+0x2e>
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007be4:	f04f 0100 	mov.w	r1, #0
 8007be8:	bf14      	ite	ne
 8007bea:	2340      	movne	r3, #64	@ 0x40
 8007bec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	6031      	str	r1, [r6, #0]
 8007bf4:	602b      	str	r3, [r5, #0]
 8007bf6:	b016      	add	sp, #88	@ 0x58
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
 8007bfa:	466a      	mov	r2, sp
 8007bfc:	f000 f874 	bl	8007ce8 <_fstat_r>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	dbec      	blt.n	8007bde <__swhatbuf_r+0x12>
 8007c04:	9901      	ldr	r1, [sp, #4]
 8007c06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c0e:	4259      	negs	r1, r3
 8007c10:	4159      	adcs	r1, r3
 8007c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c16:	e7eb      	b.n	8007bf0 <__swhatbuf_r+0x24>

08007c18 <__smakebuf_r>:
 8007c18:	898b      	ldrh	r3, [r1, #12]
 8007c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c1c:	079d      	lsls	r5, r3, #30
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	d507      	bpl.n	8007c34 <__smakebuf_r+0x1c>
 8007c24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	6123      	str	r3, [r4, #16]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	6163      	str	r3, [r4, #20]
 8007c30:	b003      	add	sp, #12
 8007c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c34:	ab01      	add	r3, sp, #4
 8007c36:	466a      	mov	r2, sp
 8007c38:	f7ff ffc8 	bl	8007bcc <__swhatbuf_r>
 8007c3c:	9f00      	ldr	r7, [sp, #0]
 8007c3e:	4605      	mov	r5, r0
 8007c40:	4639      	mov	r1, r7
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7fe fa04 	bl	8006050 <_malloc_r>
 8007c48:	b948      	cbnz	r0, 8007c5e <__smakebuf_r+0x46>
 8007c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4e:	059a      	lsls	r2, r3, #22
 8007c50:	d4ee      	bmi.n	8007c30 <__smakebuf_r+0x18>
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	f043 0302 	orr.w	r3, r3, #2
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	e7e2      	b.n	8007c24 <__smakebuf_r+0xc>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	6020      	str	r0, [r4, #0]
 8007c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c6e:	b15b      	cbz	r3, 8007c88 <__smakebuf_r+0x70>
 8007c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c74:	4630      	mov	r0, r6
 8007c76:	f000 f849 	bl	8007d0c <_isatty_r>
 8007c7a:	b128      	cbz	r0, 8007c88 <__smakebuf_r+0x70>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f023 0303 	bic.w	r3, r3, #3
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	431d      	orrs	r5, r3
 8007c8c:	81a5      	strh	r5, [r4, #12]
 8007c8e:	e7cf      	b.n	8007c30 <__smakebuf_r+0x18>

08007c90 <memmove>:
 8007c90:	4288      	cmp	r0, r1
 8007c92:	b510      	push	{r4, lr}
 8007c94:	eb01 0402 	add.w	r4, r1, r2
 8007c98:	d902      	bls.n	8007ca0 <memmove+0x10>
 8007c9a:	4284      	cmp	r4, r0
 8007c9c:	4623      	mov	r3, r4
 8007c9e:	d807      	bhi.n	8007cb0 <memmove+0x20>
 8007ca0:	1e43      	subs	r3, r0, #1
 8007ca2:	42a1      	cmp	r1, r4
 8007ca4:	d008      	beq.n	8007cb8 <memmove+0x28>
 8007ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cae:	e7f8      	b.n	8007ca2 <memmove+0x12>
 8007cb0:	4402      	add	r2, r0
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	428a      	cmp	r2, r1
 8007cb6:	d100      	bne.n	8007cba <memmove+0x2a>
 8007cb8:	bd10      	pop	{r4, pc}
 8007cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cc2:	e7f7      	b.n	8007cb4 <memmove+0x24>

08007cc4 <strncmp>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	b16a      	cbz	r2, 8007ce4 <strncmp+0x20>
 8007cc8:	3901      	subs	r1, #1
 8007cca:	1884      	adds	r4, r0, r2
 8007ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d103      	bne.n	8007ce0 <strncmp+0x1c>
 8007cd8:	42a0      	cmp	r0, r4
 8007cda:	d001      	beq.n	8007ce0 <strncmp+0x1c>
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	d1f5      	bne.n	8007ccc <strncmp+0x8>
 8007ce0:	1ad0      	subs	r0, r2, r3
 8007ce2:	bd10      	pop	{r4, pc}
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	e7fc      	b.n	8007ce2 <strncmp+0x1e>

08007ce8 <_fstat_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d07      	ldr	r5, [pc, #28]	@ (8007d08 <_fstat_r+0x20>)
 8007cec:	2300      	movs	r3, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	602b      	str	r3, [r5, #0]
 8007cf6:	f7f9 fb01 	bl	80012fc <_fstat>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	d102      	bne.n	8007d04 <_fstat_r+0x1c>
 8007cfe:	682b      	ldr	r3, [r5, #0]
 8007d00:	b103      	cbz	r3, 8007d04 <_fstat_r+0x1c>
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	bd38      	pop	{r3, r4, r5, pc}
 8007d06:	bf00      	nop
 8007d08:	20000408 	.word	0x20000408

08007d0c <_isatty_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d06      	ldr	r5, [pc, #24]	@ (8007d28 <_isatty_r+0x1c>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	602b      	str	r3, [r5, #0]
 8007d18:	f7f9 fb00 	bl	800131c <_isatty>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_isatty_r+0x1a>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_isatty_r+0x1a>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	20000408 	.word	0x20000408

08007d2c <_sbrk_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d06      	ldr	r5, [pc, #24]	@ (8007d48 <_sbrk_r+0x1c>)
 8007d30:	2300      	movs	r3, #0
 8007d32:	4604      	mov	r4, r0
 8007d34:	4608      	mov	r0, r1
 8007d36:	602b      	str	r3, [r5, #0]
 8007d38:	f7f9 fb08 	bl	800134c <_sbrk>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d102      	bne.n	8007d46 <_sbrk_r+0x1a>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	b103      	cbz	r3, 8007d46 <_sbrk_r+0x1a>
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	20000408 	.word	0x20000408

08007d4c <memcpy>:
 8007d4c:	440a      	add	r2, r1
 8007d4e:	4291      	cmp	r1, r2
 8007d50:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d54:	d100      	bne.n	8007d58 <memcpy+0xc>
 8007d56:	4770      	bx	lr
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d62:	4291      	cmp	r1, r2
 8007d64:	d1f9      	bne.n	8007d5a <memcpy+0xe>
 8007d66:	bd10      	pop	{r4, pc}

08007d68 <nan>:
 8007d68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007d70 <nan+0x8>
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	00000000 	.word	0x00000000
 8007d74:	7ff80000 	.word	0x7ff80000

08007d78 <__assert_func>:
 8007d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4b09      	ldr	r3, [pc, #36]	@ (8007da4 <__assert_func+0x2c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4605      	mov	r5, r0
 8007d84:	68d8      	ldr	r0, [r3, #12]
 8007d86:	b14c      	cbz	r4, 8007d9c <__assert_func+0x24>
 8007d88:	4b07      	ldr	r3, [pc, #28]	@ (8007da8 <__assert_func+0x30>)
 8007d8a:	9100      	str	r1, [sp, #0]
 8007d8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d90:	4906      	ldr	r1, [pc, #24]	@ (8007dac <__assert_func+0x34>)
 8007d92:	462b      	mov	r3, r5
 8007d94:	f000 fba8 	bl	80084e8 <fiprintf>
 8007d98:	f000 fbb8 	bl	800850c <abort>
 8007d9c:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <__assert_func+0x38>)
 8007d9e:	461c      	mov	r4, r3
 8007da0:	e7f3      	b.n	8007d8a <__assert_func+0x12>
 8007da2:	bf00      	nop
 8007da4:	20000018 	.word	0x20000018
 8007da8:	08008aea 	.word	0x08008aea
 8007dac:	08008af7 	.word	0x08008af7
 8007db0:	08008b25 	.word	0x08008b25

08007db4 <_calloc_r>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	fba1 5402 	umull	r5, r4, r1, r2
 8007dba:	b934      	cbnz	r4, 8007dca <_calloc_r+0x16>
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	f7fe f947 	bl	8006050 <_malloc_r>
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	b928      	cbnz	r0, 8007dd2 <_calloc_r+0x1e>
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	bd70      	pop	{r4, r5, r6, pc}
 8007dca:	220c      	movs	r2, #12
 8007dcc:	6002      	str	r2, [r0, #0]
 8007dce:	2600      	movs	r6, #0
 8007dd0:	e7f9      	b.n	8007dc6 <_calloc_r+0x12>
 8007dd2:	462a      	mov	r2, r5
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	f7fd f9e8 	bl	80051aa <memset>
 8007dda:	e7f4      	b.n	8007dc6 <_calloc_r+0x12>

08007ddc <rshift>:
 8007ddc:	6903      	ldr	r3, [r0, #16]
 8007dde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007de2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007de6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007dea:	f100 0414 	add.w	r4, r0, #20
 8007dee:	dd45      	ble.n	8007e7c <rshift+0xa0>
 8007df0:	f011 011f 	ands.w	r1, r1, #31
 8007df4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007df8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007dfc:	d10c      	bne.n	8007e18 <rshift+0x3c>
 8007dfe:	f100 0710 	add.w	r7, r0, #16
 8007e02:	4629      	mov	r1, r5
 8007e04:	42b1      	cmp	r1, r6
 8007e06:	d334      	bcc.n	8007e72 <rshift+0x96>
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	1eea      	subs	r2, r5, #3
 8007e0e:	4296      	cmp	r6, r2
 8007e10:	bf38      	it	cc
 8007e12:	2300      	movcc	r3, #0
 8007e14:	4423      	add	r3, r4
 8007e16:	e015      	b.n	8007e44 <rshift+0x68>
 8007e18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e1c:	f1c1 0820 	rsb	r8, r1, #32
 8007e20:	40cf      	lsrs	r7, r1
 8007e22:	f105 0e04 	add.w	lr, r5, #4
 8007e26:	46a1      	mov	r9, r4
 8007e28:	4576      	cmp	r6, lr
 8007e2a:	46f4      	mov	ip, lr
 8007e2c:	d815      	bhi.n	8007e5a <rshift+0x7e>
 8007e2e:	1a9a      	subs	r2, r3, r2
 8007e30:	0092      	lsls	r2, r2, #2
 8007e32:	3a04      	subs	r2, #4
 8007e34:	3501      	adds	r5, #1
 8007e36:	42ae      	cmp	r6, r5
 8007e38:	bf38      	it	cc
 8007e3a:	2200      	movcc	r2, #0
 8007e3c:	18a3      	adds	r3, r4, r2
 8007e3e:	50a7      	str	r7, [r4, r2]
 8007e40:	b107      	cbz	r7, 8007e44 <rshift+0x68>
 8007e42:	3304      	adds	r3, #4
 8007e44:	1b1a      	subs	r2, r3, r4
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e4c:	bf08      	it	eq
 8007e4e:	2300      	moveq	r3, #0
 8007e50:	6102      	str	r2, [r0, #16]
 8007e52:	bf08      	it	eq
 8007e54:	6143      	streq	r3, [r0, #20]
 8007e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e5a:	f8dc c000 	ldr.w	ip, [ip]
 8007e5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e62:	ea4c 0707 	orr.w	r7, ip, r7
 8007e66:	f849 7b04 	str.w	r7, [r9], #4
 8007e6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e6e:	40cf      	lsrs	r7, r1
 8007e70:	e7da      	b.n	8007e28 <rshift+0x4c>
 8007e72:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e76:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e7a:	e7c3      	b.n	8007e04 <rshift+0x28>
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	e7e1      	b.n	8007e44 <rshift+0x68>

08007e80 <__hexdig_fun>:
 8007e80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d802      	bhi.n	8007e8e <__hexdig_fun+0xe>
 8007e88:	3820      	subs	r0, #32
 8007e8a:	b2c0      	uxtb	r0, r0
 8007e8c:	4770      	bx	lr
 8007e8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d801      	bhi.n	8007e9a <__hexdig_fun+0x1a>
 8007e96:	3847      	subs	r0, #71	@ 0x47
 8007e98:	e7f7      	b.n	8007e8a <__hexdig_fun+0xa>
 8007e9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	d801      	bhi.n	8007ea6 <__hexdig_fun+0x26>
 8007ea2:	3827      	subs	r0, #39	@ 0x27
 8007ea4:	e7f1      	b.n	8007e8a <__hexdig_fun+0xa>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	4770      	bx	lr
	...

08007eac <__gethex>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	b085      	sub	sp, #20
 8007eb2:	468a      	mov	sl, r1
 8007eb4:	9302      	str	r3, [sp, #8]
 8007eb6:	680b      	ldr	r3, [r1, #0]
 8007eb8:	9001      	str	r0, [sp, #4]
 8007eba:	4690      	mov	r8, r2
 8007ebc:	1c9c      	adds	r4, r3, #2
 8007ebe:	46a1      	mov	r9, r4
 8007ec0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007ec4:	2830      	cmp	r0, #48	@ 0x30
 8007ec6:	d0fa      	beq.n	8007ebe <__gethex+0x12>
 8007ec8:	eba9 0303 	sub.w	r3, r9, r3
 8007ecc:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ed0:	f7ff ffd6 	bl	8007e80 <__hexdig_fun>
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d168      	bne.n	8007fac <__gethex+0x100>
 8007eda:	49a0      	ldr	r1, [pc, #640]	@ (800815c <__gethex+0x2b0>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	4648      	mov	r0, r9
 8007ee0:	f7ff fef0 	bl	8007cc4 <strncmp>
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d167      	bne.n	8007fba <__gethex+0x10e>
 8007eea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007eee:	4626      	mov	r6, r4
 8007ef0:	f7ff ffc6 	bl	8007e80 <__hexdig_fun>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d062      	beq.n	8007fbe <__gethex+0x112>
 8007ef8:	4623      	mov	r3, r4
 8007efa:	7818      	ldrb	r0, [r3, #0]
 8007efc:	2830      	cmp	r0, #48	@ 0x30
 8007efe:	4699      	mov	r9, r3
 8007f00:	f103 0301 	add.w	r3, r3, #1
 8007f04:	d0f9      	beq.n	8007efa <__gethex+0x4e>
 8007f06:	f7ff ffbb 	bl	8007e80 <__hexdig_fun>
 8007f0a:	fab0 f580 	clz	r5, r0
 8007f0e:	096d      	lsrs	r5, r5, #5
 8007f10:	f04f 0b01 	mov.w	fp, #1
 8007f14:	464a      	mov	r2, r9
 8007f16:	4616      	mov	r6, r2
 8007f18:	3201      	adds	r2, #1
 8007f1a:	7830      	ldrb	r0, [r6, #0]
 8007f1c:	f7ff ffb0 	bl	8007e80 <__hexdig_fun>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1f8      	bne.n	8007f16 <__gethex+0x6a>
 8007f24:	498d      	ldr	r1, [pc, #564]	@ (800815c <__gethex+0x2b0>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff fecb 	bl	8007cc4 <strncmp>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d13f      	bne.n	8007fb2 <__gethex+0x106>
 8007f32:	b944      	cbnz	r4, 8007f46 <__gethex+0x9a>
 8007f34:	1c74      	adds	r4, r6, #1
 8007f36:	4622      	mov	r2, r4
 8007f38:	4616      	mov	r6, r2
 8007f3a:	3201      	adds	r2, #1
 8007f3c:	7830      	ldrb	r0, [r6, #0]
 8007f3e:	f7ff ff9f 	bl	8007e80 <__hexdig_fun>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d1f8      	bne.n	8007f38 <__gethex+0x8c>
 8007f46:	1ba4      	subs	r4, r4, r6
 8007f48:	00a7      	lsls	r7, r4, #2
 8007f4a:	7833      	ldrb	r3, [r6, #0]
 8007f4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007f50:	2b50      	cmp	r3, #80	@ 0x50
 8007f52:	d13e      	bne.n	8007fd2 <__gethex+0x126>
 8007f54:	7873      	ldrb	r3, [r6, #1]
 8007f56:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f58:	d033      	beq.n	8007fc2 <__gethex+0x116>
 8007f5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f5c:	d034      	beq.n	8007fc8 <__gethex+0x11c>
 8007f5e:	1c71      	adds	r1, r6, #1
 8007f60:	2400      	movs	r4, #0
 8007f62:	7808      	ldrb	r0, [r1, #0]
 8007f64:	f7ff ff8c 	bl	8007e80 <__hexdig_fun>
 8007f68:	1e43      	subs	r3, r0, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b18      	cmp	r3, #24
 8007f6e:	d830      	bhi.n	8007fd2 <__gethex+0x126>
 8007f70:	f1a0 0210 	sub.w	r2, r0, #16
 8007f74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f78:	f7ff ff82 	bl	8007e80 <__hexdig_fun>
 8007f7c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007f80:	fa5f fc8c 	uxtb.w	ip, ip
 8007f84:	f1bc 0f18 	cmp.w	ip, #24
 8007f88:	f04f 030a 	mov.w	r3, #10
 8007f8c:	d91e      	bls.n	8007fcc <__gethex+0x120>
 8007f8e:	b104      	cbz	r4, 8007f92 <__gethex+0xe6>
 8007f90:	4252      	negs	r2, r2
 8007f92:	4417      	add	r7, r2
 8007f94:	f8ca 1000 	str.w	r1, [sl]
 8007f98:	b1ed      	cbz	r5, 8007fd6 <__gethex+0x12a>
 8007f9a:	f1bb 0f00 	cmp.w	fp, #0
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2506      	moveq	r5, #6
 8007fa2:	2500      	movne	r5, #0
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	b005      	add	sp, #20
 8007fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fac:	2500      	movs	r5, #0
 8007fae:	462c      	mov	r4, r5
 8007fb0:	e7b0      	b.n	8007f14 <__gethex+0x68>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	d1c7      	bne.n	8007f46 <__gethex+0x9a>
 8007fb6:	4627      	mov	r7, r4
 8007fb8:	e7c7      	b.n	8007f4a <__gethex+0x9e>
 8007fba:	464e      	mov	r6, r9
 8007fbc:	462f      	mov	r7, r5
 8007fbe:	2501      	movs	r5, #1
 8007fc0:	e7c3      	b.n	8007f4a <__gethex+0x9e>
 8007fc2:	2400      	movs	r4, #0
 8007fc4:	1cb1      	adds	r1, r6, #2
 8007fc6:	e7cc      	b.n	8007f62 <__gethex+0xb6>
 8007fc8:	2401      	movs	r4, #1
 8007fca:	e7fb      	b.n	8007fc4 <__gethex+0x118>
 8007fcc:	fb03 0002 	mla	r0, r3, r2, r0
 8007fd0:	e7ce      	b.n	8007f70 <__gethex+0xc4>
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	e7de      	b.n	8007f94 <__gethex+0xe8>
 8007fd6:	eba6 0309 	sub.w	r3, r6, r9
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4629      	mov	r1, r5
 8007fde:	2b07      	cmp	r3, #7
 8007fe0:	dc0a      	bgt.n	8007ff8 <__gethex+0x14c>
 8007fe2:	9801      	ldr	r0, [sp, #4]
 8007fe4:	f7fe f8c0 	bl	8006168 <_Balloc>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	b940      	cbnz	r0, 8007ffe <__gethex+0x152>
 8007fec:	4b5c      	ldr	r3, [pc, #368]	@ (8008160 <__gethex+0x2b4>)
 8007fee:	4602      	mov	r2, r0
 8007ff0:	21e4      	movs	r1, #228	@ 0xe4
 8007ff2:	485c      	ldr	r0, [pc, #368]	@ (8008164 <__gethex+0x2b8>)
 8007ff4:	f7ff fec0 	bl	8007d78 <__assert_func>
 8007ff8:	3101      	adds	r1, #1
 8007ffa:	105b      	asrs	r3, r3, #1
 8007ffc:	e7ef      	b.n	8007fde <__gethex+0x132>
 8007ffe:	f100 0a14 	add.w	sl, r0, #20
 8008002:	2300      	movs	r3, #0
 8008004:	4655      	mov	r5, sl
 8008006:	469b      	mov	fp, r3
 8008008:	45b1      	cmp	r9, r6
 800800a:	d337      	bcc.n	800807c <__gethex+0x1d0>
 800800c:	f845 bb04 	str.w	fp, [r5], #4
 8008010:	eba5 050a 	sub.w	r5, r5, sl
 8008014:	10ad      	asrs	r5, r5, #2
 8008016:	6125      	str	r5, [r4, #16]
 8008018:	4658      	mov	r0, fp
 800801a:	f7fe f997 	bl	800634c <__hi0bits>
 800801e:	016d      	lsls	r5, r5, #5
 8008020:	f8d8 6000 	ldr.w	r6, [r8]
 8008024:	1a2d      	subs	r5, r5, r0
 8008026:	42b5      	cmp	r5, r6
 8008028:	dd54      	ble.n	80080d4 <__gethex+0x228>
 800802a:	1bad      	subs	r5, r5, r6
 800802c:	4629      	mov	r1, r5
 800802e:	4620      	mov	r0, r4
 8008030:	f7fe fd23 	bl	8006a7a <__any_on>
 8008034:	4681      	mov	r9, r0
 8008036:	b178      	cbz	r0, 8008058 <__gethex+0x1ac>
 8008038:	1e6b      	subs	r3, r5, #1
 800803a:	1159      	asrs	r1, r3, #5
 800803c:	f003 021f 	and.w	r2, r3, #31
 8008040:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008044:	f04f 0901 	mov.w	r9, #1
 8008048:	fa09 f202 	lsl.w	r2, r9, r2
 800804c:	420a      	tst	r2, r1
 800804e:	d003      	beq.n	8008058 <__gethex+0x1ac>
 8008050:	454b      	cmp	r3, r9
 8008052:	dc36      	bgt.n	80080c2 <__gethex+0x216>
 8008054:	f04f 0902 	mov.w	r9, #2
 8008058:	4629      	mov	r1, r5
 800805a:	4620      	mov	r0, r4
 800805c:	f7ff febe 	bl	8007ddc <rshift>
 8008060:	442f      	add	r7, r5
 8008062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008066:	42bb      	cmp	r3, r7
 8008068:	da42      	bge.n	80080f0 <__gethex+0x244>
 800806a:	9801      	ldr	r0, [sp, #4]
 800806c:	4621      	mov	r1, r4
 800806e:	f7fe f8bb 	bl	80061e8 <_Bfree>
 8008072:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008074:	2300      	movs	r3, #0
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	25a3      	movs	r5, #163	@ 0xa3
 800807a:	e793      	b.n	8007fa4 <__gethex+0xf8>
 800807c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008080:	2a2e      	cmp	r2, #46	@ 0x2e
 8008082:	d012      	beq.n	80080aa <__gethex+0x1fe>
 8008084:	2b20      	cmp	r3, #32
 8008086:	d104      	bne.n	8008092 <__gethex+0x1e6>
 8008088:	f845 bb04 	str.w	fp, [r5], #4
 800808c:	f04f 0b00 	mov.w	fp, #0
 8008090:	465b      	mov	r3, fp
 8008092:	7830      	ldrb	r0, [r6, #0]
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	f7ff fef3 	bl	8007e80 <__hexdig_fun>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	f000 000f 	and.w	r0, r0, #15
 80080a0:	4098      	lsls	r0, r3
 80080a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80080a6:	3304      	adds	r3, #4
 80080a8:	e7ae      	b.n	8008008 <__gethex+0x15c>
 80080aa:	45b1      	cmp	r9, r6
 80080ac:	d8ea      	bhi.n	8008084 <__gethex+0x1d8>
 80080ae:	492b      	ldr	r1, [pc, #172]	@ (800815c <__gethex+0x2b0>)
 80080b0:	9303      	str	r3, [sp, #12]
 80080b2:	2201      	movs	r2, #1
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff fe05 	bl	8007cc4 <strncmp>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1e1      	bne.n	8008084 <__gethex+0x1d8>
 80080c0:	e7a2      	b.n	8008008 <__gethex+0x15c>
 80080c2:	1ea9      	subs	r1, r5, #2
 80080c4:	4620      	mov	r0, r4
 80080c6:	f7fe fcd8 	bl	8006a7a <__any_on>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0c2      	beq.n	8008054 <__gethex+0x1a8>
 80080ce:	f04f 0903 	mov.w	r9, #3
 80080d2:	e7c1      	b.n	8008058 <__gethex+0x1ac>
 80080d4:	da09      	bge.n	80080ea <__gethex+0x23e>
 80080d6:	1b75      	subs	r5, r6, r5
 80080d8:	4621      	mov	r1, r4
 80080da:	9801      	ldr	r0, [sp, #4]
 80080dc:	462a      	mov	r2, r5
 80080de:	f7fe fa93 	bl	8006608 <__lshift>
 80080e2:	1b7f      	subs	r7, r7, r5
 80080e4:	4604      	mov	r4, r0
 80080e6:	f100 0a14 	add.w	sl, r0, #20
 80080ea:	f04f 0900 	mov.w	r9, #0
 80080ee:	e7b8      	b.n	8008062 <__gethex+0x1b6>
 80080f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080f4:	42bd      	cmp	r5, r7
 80080f6:	dd6f      	ble.n	80081d8 <__gethex+0x32c>
 80080f8:	1bed      	subs	r5, r5, r7
 80080fa:	42ae      	cmp	r6, r5
 80080fc:	dc34      	bgt.n	8008168 <__gethex+0x2bc>
 80080fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d022      	beq.n	800814c <__gethex+0x2a0>
 8008106:	2b03      	cmp	r3, #3
 8008108:	d024      	beq.n	8008154 <__gethex+0x2a8>
 800810a:	2b01      	cmp	r3, #1
 800810c:	d115      	bne.n	800813a <__gethex+0x28e>
 800810e:	42ae      	cmp	r6, r5
 8008110:	d113      	bne.n	800813a <__gethex+0x28e>
 8008112:	2e01      	cmp	r6, #1
 8008114:	d10b      	bne.n	800812e <__gethex+0x282>
 8008116:	9a02      	ldr	r2, [sp, #8]
 8008118:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	2301      	movs	r3, #1
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	f8ca 3000 	str.w	r3, [sl]
 8008126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008128:	2562      	movs	r5, #98	@ 0x62
 800812a:	601c      	str	r4, [r3, #0]
 800812c:	e73a      	b.n	8007fa4 <__gethex+0xf8>
 800812e:	1e71      	subs	r1, r6, #1
 8008130:	4620      	mov	r0, r4
 8008132:	f7fe fca2 	bl	8006a7a <__any_on>
 8008136:	2800      	cmp	r0, #0
 8008138:	d1ed      	bne.n	8008116 <__gethex+0x26a>
 800813a:	9801      	ldr	r0, [sp, #4]
 800813c:	4621      	mov	r1, r4
 800813e:	f7fe f853 	bl	80061e8 <_Bfree>
 8008142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008144:	2300      	movs	r3, #0
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	2550      	movs	r5, #80	@ 0x50
 800814a:	e72b      	b.n	8007fa4 <__gethex+0xf8>
 800814c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f3      	bne.n	800813a <__gethex+0x28e>
 8008152:	e7e0      	b.n	8008116 <__gethex+0x26a>
 8008154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1dd      	bne.n	8008116 <__gethex+0x26a>
 800815a:	e7ee      	b.n	800813a <__gethex+0x28e>
 800815c:	08008acf 	.word	0x08008acf
 8008160:	08008a65 	.word	0x08008a65
 8008164:	08008b26 	.word	0x08008b26
 8008168:	1e6f      	subs	r7, r5, #1
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	d130      	bne.n	80081d2 <__gethex+0x326>
 8008170:	b127      	cbz	r7, 800817c <__gethex+0x2d0>
 8008172:	4639      	mov	r1, r7
 8008174:	4620      	mov	r0, r4
 8008176:	f7fe fc80 	bl	8006a7a <__any_on>
 800817a:	4681      	mov	r9, r0
 800817c:	117a      	asrs	r2, r7, #5
 800817e:	2301      	movs	r3, #1
 8008180:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008184:	f007 071f 	and.w	r7, r7, #31
 8008188:	40bb      	lsls	r3, r7
 800818a:	4213      	tst	r3, r2
 800818c:	4629      	mov	r1, r5
 800818e:	4620      	mov	r0, r4
 8008190:	bf18      	it	ne
 8008192:	f049 0902 	orrne.w	r9, r9, #2
 8008196:	f7ff fe21 	bl	8007ddc <rshift>
 800819a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800819e:	1b76      	subs	r6, r6, r5
 80081a0:	2502      	movs	r5, #2
 80081a2:	f1b9 0f00 	cmp.w	r9, #0
 80081a6:	d047      	beq.n	8008238 <__gethex+0x38c>
 80081a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d015      	beq.n	80081dc <__gethex+0x330>
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d017      	beq.n	80081e4 <__gethex+0x338>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d109      	bne.n	80081cc <__gethex+0x320>
 80081b8:	f019 0f02 	tst.w	r9, #2
 80081bc:	d006      	beq.n	80081cc <__gethex+0x320>
 80081be:	f8da 3000 	ldr.w	r3, [sl]
 80081c2:	ea49 0903 	orr.w	r9, r9, r3
 80081c6:	f019 0f01 	tst.w	r9, #1
 80081ca:	d10e      	bne.n	80081ea <__gethex+0x33e>
 80081cc:	f045 0510 	orr.w	r5, r5, #16
 80081d0:	e032      	b.n	8008238 <__gethex+0x38c>
 80081d2:	f04f 0901 	mov.w	r9, #1
 80081d6:	e7d1      	b.n	800817c <__gethex+0x2d0>
 80081d8:	2501      	movs	r5, #1
 80081da:	e7e2      	b.n	80081a2 <__gethex+0x2f6>
 80081dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081de:	f1c3 0301 	rsb	r3, r3, #1
 80081e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <__gethex+0x320>
 80081ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081ee:	f104 0314 	add.w	r3, r4, #20
 80081f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80081f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80081fa:	f04f 0c00 	mov.w	ip, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	f853 2b04 	ldr.w	r2, [r3], #4
 8008204:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008208:	d01b      	beq.n	8008242 <__gethex+0x396>
 800820a:	3201      	adds	r2, #1
 800820c:	6002      	str	r2, [r0, #0]
 800820e:	2d02      	cmp	r5, #2
 8008210:	f104 0314 	add.w	r3, r4, #20
 8008214:	d13c      	bne.n	8008290 <__gethex+0x3e4>
 8008216:	f8d8 2000 	ldr.w	r2, [r8]
 800821a:	3a01      	subs	r2, #1
 800821c:	42b2      	cmp	r2, r6
 800821e:	d109      	bne.n	8008234 <__gethex+0x388>
 8008220:	1171      	asrs	r1, r6, #5
 8008222:	2201      	movs	r2, #1
 8008224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008228:	f006 061f 	and.w	r6, r6, #31
 800822c:	fa02 f606 	lsl.w	r6, r2, r6
 8008230:	421e      	tst	r6, r3
 8008232:	d13a      	bne.n	80082aa <__gethex+0x3fe>
 8008234:	f045 0520 	orr.w	r5, r5, #32
 8008238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823a:	601c      	str	r4, [r3, #0]
 800823c:	9b02      	ldr	r3, [sp, #8]
 800823e:	601f      	str	r7, [r3, #0]
 8008240:	e6b0      	b.n	8007fa4 <__gethex+0xf8>
 8008242:	4299      	cmp	r1, r3
 8008244:	f843 cc04 	str.w	ip, [r3, #-4]
 8008248:	d8d9      	bhi.n	80081fe <__gethex+0x352>
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	459b      	cmp	fp, r3
 800824e:	db17      	blt.n	8008280 <__gethex+0x3d4>
 8008250:	6861      	ldr	r1, [r4, #4]
 8008252:	9801      	ldr	r0, [sp, #4]
 8008254:	3101      	adds	r1, #1
 8008256:	f7fd ff87 	bl	8006168 <_Balloc>
 800825a:	4681      	mov	r9, r0
 800825c:	b918      	cbnz	r0, 8008266 <__gethex+0x3ba>
 800825e:	4b1a      	ldr	r3, [pc, #104]	@ (80082c8 <__gethex+0x41c>)
 8008260:	4602      	mov	r2, r0
 8008262:	2184      	movs	r1, #132	@ 0x84
 8008264:	e6c5      	b.n	8007ff2 <__gethex+0x146>
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	3202      	adds	r2, #2
 800826a:	f104 010c 	add.w	r1, r4, #12
 800826e:	0092      	lsls	r2, r2, #2
 8008270:	300c      	adds	r0, #12
 8008272:	f7ff fd6b 	bl	8007d4c <memcpy>
 8008276:	4621      	mov	r1, r4
 8008278:	9801      	ldr	r0, [sp, #4]
 800827a:	f7fd ffb5 	bl	80061e8 <_Bfree>
 800827e:	464c      	mov	r4, r9
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008288:	6122      	str	r2, [r4, #16]
 800828a:	2201      	movs	r2, #1
 800828c:	615a      	str	r2, [r3, #20]
 800828e:	e7be      	b.n	800820e <__gethex+0x362>
 8008290:	6922      	ldr	r2, [r4, #16]
 8008292:	455a      	cmp	r2, fp
 8008294:	dd0b      	ble.n	80082ae <__gethex+0x402>
 8008296:	2101      	movs	r1, #1
 8008298:	4620      	mov	r0, r4
 800829a:	f7ff fd9f 	bl	8007ddc <rshift>
 800829e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082a2:	3701      	adds	r7, #1
 80082a4:	42bb      	cmp	r3, r7
 80082a6:	f6ff aee0 	blt.w	800806a <__gethex+0x1be>
 80082aa:	2501      	movs	r5, #1
 80082ac:	e7c2      	b.n	8008234 <__gethex+0x388>
 80082ae:	f016 061f 	ands.w	r6, r6, #31
 80082b2:	d0fa      	beq.n	80082aa <__gethex+0x3fe>
 80082b4:	4453      	add	r3, sl
 80082b6:	f1c6 0620 	rsb	r6, r6, #32
 80082ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80082be:	f7fe f845 	bl	800634c <__hi0bits>
 80082c2:	42b0      	cmp	r0, r6
 80082c4:	dbe7      	blt.n	8008296 <__gethex+0x3ea>
 80082c6:	e7f0      	b.n	80082aa <__gethex+0x3fe>
 80082c8:	08008a65 	.word	0x08008a65

080082cc <L_shift>:
 80082cc:	f1c2 0208 	rsb	r2, r2, #8
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	b570      	push	{r4, r5, r6, lr}
 80082d4:	f1c2 0620 	rsb	r6, r2, #32
 80082d8:	6843      	ldr	r3, [r0, #4]
 80082da:	6804      	ldr	r4, [r0, #0]
 80082dc:	fa03 f506 	lsl.w	r5, r3, r6
 80082e0:	432c      	orrs	r4, r5
 80082e2:	40d3      	lsrs	r3, r2
 80082e4:	6004      	str	r4, [r0, #0]
 80082e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80082ea:	4288      	cmp	r0, r1
 80082ec:	d3f4      	bcc.n	80082d8 <L_shift+0xc>
 80082ee:	bd70      	pop	{r4, r5, r6, pc}

080082f0 <__match>:
 80082f0:	b530      	push	{r4, r5, lr}
 80082f2:	6803      	ldr	r3, [r0, #0]
 80082f4:	3301      	adds	r3, #1
 80082f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082fa:	b914      	cbnz	r4, 8008302 <__match+0x12>
 80082fc:	6003      	str	r3, [r0, #0]
 80082fe:	2001      	movs	r0, #1
 8008300:	bd30      	pop	{r4, r5, pc}
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800830a:	2d19      	cmp	r5, #25
 800830c:	bf98      	it	ls
 800830e:	3220      	addls	r2, #32
 8008310:	42a2      	cmp	r2, r4
 8008312:	d0f0      	beq.n	80082f6 <__match+0x6>
 8008314:	2000      	movs	r0, #0
 8008316:	e7f3      	b.n	8008300 <__match+0x10>

08008318 <__hexnan>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	680b      	ldr	r3, [r1, #0]
 800831e:	6801      	ldr	r1, [r0, #0]
 8008320:	115e      	asrs	r6, r3, #5
 8008322:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008326:	f013 031f 	ands.w	r3, r3, #31
 800832a:	b087      	sub	sp, #28
 800832c:	bf18      	it	ne
 800832e:	3604      	addne	r6, #4
 8008330:	2500      	movs	r5, #0
 8008332:	1f37      	subs	r7, r6, #4
 8008334:	4682      	mov	sl, r0
 8008336:	4690      	mov	r8, r2
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	f846 5c04 	str.w	r5, [r6, #-4]
 800833e:	46b9      	mov	r9, r7
 8008340:	463c      	mov	r4, r7
 8008342:	9502      	str	r5, [sp, #8]
 8008344:	46ab      	mov	fp, r5
 8008346:	784a      	ldrb	r2, [r1, #1]
 8008348:	1c4b      	adds	r3, r1, #1
 800834a:	9303      	str	r3, [sp, #12]
 800834c:	b342      	cbz	r2, 80083a0 <__hexnan+0x88>
 800834e:	4610      	mov	r0, r2
 8008350:	9105      	str	r1, [sp, #20]
 8008352:	9204      	str	r2, [sp, #16]
 8008354:	f7ff fd94 	bl	8007e80 <__hexdig_fun>
 8008358:	2800      	cmp	r0, #0
 800835a:	d151      	bne.n	8008400 <__hexnan+0xe8>
 800835c:	9a04      	ldr	r2, [sp, #16]
 800835e:	9905      	ldr	r1, [sp, #20]
 8008360:	2a20      	cmp	r2, #32
 8008362:	d818      	bhi.n	8008396 <__hexnan+0x7e>
 8008364:	9b02      	ldr	r3, [sp, #8]
 8008366:	459b      	cmp	fp, r3
 8008368:	dd13      	ble.n	8008392 <__hexnan+0x7a>
 800836a:	454c      	cmp	r4, r9
 800836c:	d206      	bcs.n	800837c <__hexnan+0x64>
 800836e:	2d07      	cmp	r5, #7
 8008370:	dc04      	bgt.n	800837c <__hexnan+0x64>
 8008372:	462a      	mov	r2, r5
 8008374:	4649      	mov	r1, r9
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff ffa8 	bl	80082cc <L_shift>
 800837c:	4544      	cmp	r4, r8
 800837e:	d952      	bls.n	8008426 <__hexnan+0x10e>
 8008380:	2300      	movs	r3, #0
 8008382:	f1a4 0904 	sub.w	r9, r4, #4
 8008386:	f844 3c04 	str.w	r3, [r4, #-4]
 800838a:	f8cd b008 	str.w	fp, [sp, #8]
 800838e:	464c      	mov	r4, r9
 8008390:	461d      	mov	r5, r3
 8008392:	9903      	ldr	r1, [sp, #12]
 8008394:	e7d7      	b.n	8008346 <__hexnan+0x2e>
 8008396:	2a29      	cmp	r2, #41	@ 0x29
 8008398:	d157      	bne.n	800844a <__hexnan+0x132>
 800839a:	3102      	adds	r1, #2
 800839c:	f8ca 1000 	str.w	r1, [sl]
 80083a0:	f1bb 0f00 	cmp.w	fp, #0
 80083a4:	d051      	beq.n	800844a <__hexnan+0x132>
 80083a6:	454c      	cmp	r4, r9
 80083a8:	d206      	bcs.n	80083b8 <__hexnan+0xa0>
 80083aa:	2d07      	cmp	r5, #7
 80083ac:	dc04      	bgt.n	80083b8 <__hexnan+0xa0>
 80083ae:	462a      	mov	r2, r5
 80083b0:	4649      	mov	r1, r9
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7ff ff8a 	bl	80082cc <L_shift>
 80083b8:	4544      	cmp	r4, r8
 80083ba:	d936      	bls.n	800842a <__hexnan+0x112>
 80083bc:	f1a8 0204 	sub.w	r2, r8, #4
 80083c0:	4623      	mov	r3, r4
 80083c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80083c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80083ca:	429f      	cmp	r7, r3
 80083cc:	d2f9      	bcs.n	80083c2 <__hexnan+0xaa>
 80083ce:	1b3b      	subs	r3, r7, r4
 80083d0:	f023 0303 	bic.w	r3, r3, #3
 80083d4:	3304      	adds	r3, #4
 80083d6:	3401      	adds	r4, #1
 80083d8:	3e03      	subs	r6, #3
 80083da:	42b4      	cmp	r4, r6
 80083dc:	bf88      	it	hi
 80083de:	2304      	movhi	r3, #4
 80083e0:	4443      	add	r3, r8
 80083e2:	2200      	movs	r2, #0
 80083e4:	f843 2b04 	str.w	r2, [r3], #4
 80083e8:	429f      	cmp	r7, r3
 80083ea:	d2fb      	bcs.n	80083e4 <__hexnan+0xcc>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	b91b      	cbnz	r3, 80083f8 <__hexnan+0xe0>
 80083f0:	4547      	cmp	r7, r8
 80083f2:	d128      	bne.n	8008446 <__hexnan+0x12e>
 80083f4:	2301      	movs	r3, #1
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	2005      	movs	r0, #5
 80083fa:	b007      	add	sp, #28
 80083fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008400:	3501      	adds	r5, #1
 8008402:	2d08      	cmp	r5, #8
 8008404:	f10b 0b01 	add.w	fp, fp, #1
 8008408:	dd06      	ble.n	8008418 <__hexnan+0x100>
 800840a:	4544      	cmp	r4, r8
 800840c:	d9c1      	bls.n	8008392 <__hexnan+0x7a>
 800840e:	2300      	movs	r3, #0
 8008410:	f844 3c04 	str.w	r3, [r4, #-4]
 8008414:	2501      	movs	r5, #1
 8008416:	3c04      	subs	r4, #4
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	f000 000f 	and.w	r0, r0, #15
 800841e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008422:	6020      	str	r0, [r4, #0]
 8008424:	e7b5      	b.n	8008392 <__hexnan+0x7a>
 8008426:	2508      	movs	r5, #8
 8008428:	e7b3      	b.n	8008392 <__hexnan+0x7a>
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0dd      	beq.n	80083ec <__hexnan+0xd4>
 8008430:	f1c3 0320 	rsb	r3, r3, #32
 8008434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008438:	40da      	lsrs	r2, r3
 800843a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800843e:	4013      	ands	r3, r2
 8008440:	f846 3c04 	str.w	r3, [r6, #-4]
 8008444:	e7d2      	b.n	80083ec <__hexnan+0xd4>
 8008446:	3f04      	subs	r7, #4
 8008448:	e7d0      	b.n	80083ec <__hexnan+0xd4>
 800844a:	2004      	movs	r0, #4
 800844c:	e7d5      	b.n	80083fa <__hexnan+0xe2>

0800844e <__ascii_mbtowc>:
 800844e:	b082      	sub	sp, #8
 8008450:	b901      	cbnz	r1, 8008454 <__ascii_mbtowc+0x6>
 8008452:	a901      	add	r1, sp, #4
 8008454:	b142      	cbz	r2, 8008468 <__ascii_mbtowc+0x1a>
 8008456:	b14b      	cbz	r3, 800846c <__ascii_mbtowc+0x1e>
 8008458:	7813      	ldrb	r3, [r2, #0]
 800845a:	600b      	str	r3, [r1, #0]
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	1e10      	subs	r0, r2, #0
 8008460:	bf18      	it	ne
 8008462:	2001      	movne	r0, #1
 8008464:	b002      	add	sp, #8
 8008466:	4770      	bx	lr
 8008468:	4610      	mov	r0, r2
 800846a:	e7fb      	b.n	8008464 <__ascii_mbtowc+0x16>
 800846c:	f06f 0001 	mvn.w	r0, #1
 8008470:	e7f8      	b.n	8008464 <__ascii_mbtowc+0x16>

08008472 <_realloc_r>:
 8008472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008476:	4607      	mov	r7, r0
 8008478:	4614      	mov	r4, r2
 800847a:	460d      	mov	r5, r1
 800847c:	b921      	cbnz	r1, 8008488 <_realloc_r+0x16>
 800847e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008482:	4611      	mov	r1, r2
 8008484:	f7fd bde4 	b.w	8006050 <_malloc_r>
 8008488:	b92a      	cbnz	r2, 8008496 <_realloc_r+0x24>
 800848a:	f7fd fd6d 	bl	8005f68 <_free_r>
 800848e:	4625      	mov	r5, r4
 8008490:	4628      	mov	r0, r5
 8008492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008496:	f000 f840 	bl	800851a <_malloc_usable_size_r>
 800849a:	4284      	cmp	r4, r0
 800849c:	4606      	mov	r6, r0
 800849e:	d802      	bhi.n	80084a6 <_realloc_r+0x34>
 80084a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084a4:	d8f4      	bhi.n	8008490 <_realloc_r+0x1e>
 80084a6:	4621      	mov	r1, r4
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7fd fdd1 	bl	8006050 <_malloc_r>
 80084ae:	4680      	mov	r8, r0
 80084b0:	b908      	cbnz	r0, 80084b6 <_realloc_r+0x44>
 80084b2:	4645      	mov	r5, r8
 80084b4:	e7ec      	b.n	8008490 <_realloc_r+0x1e>
 80084b6:	42b4      	cmp	r4, r6
 80084b8:	4622      	mov	r2, r4
 80084ba:	4629      	mov	r1, r5
 80084bc:	bf28      	it	cs
 80084be:	4632      	movcs	r2, r6
 80084c0:	f7ff fc44 	bl	8007d4c <memcpy>
 80084c4:	4629      	mov	r1, r5
 80084c6:	4638      	mov	r0, r7
 80084c8:	f7fd fd4e 	bl	8005f68 <_free_r>
 80084cc:	e7f1      	b.n	80084b2 <_realloc_r+0x40>

080084ce <__ascii_wctomb>:
 80084ce:	4603      	mov	r3, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	b141      	cbz	r1, 80084e6 <__ascii_wctomb+0x18>
 80084d4:	2aff      	cmp	r2, #255	@ 0xff
 80084d6:	d904      	bls.n	80084e2 <__ascii_wctomb+0x14>
 80084d8:	228a      	movs	r2, #138	@ 0x8a
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084e0:	4770      	bx	lr
 80084e2:	700a      	strb	r2, [r1, #0]
 80084e4:	2001      	movs	r0, #1
 80084e6:	4770      	bx	lr

080084e8 <fiprintf>:
 80084e8:	b40e      	push	{r1, r2, r3}
 80084ea:	b503      	push	{r0, r1, lr}
 80084ec:	4601      	mov	r1, r0
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	4805      	ldr	r0, [pc, #20]	@ (8008508 <fiprintf+0x20>)
 80084f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f6:	6800      	ldr	r0, [r0, #0]
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	f000 f83f 	bl	800857c <_vfiprintf_r>
 80084fe:	b002      	add	sp, #8
 8008500:	f85d eb04 	ldr.w	lr, [sp], #4
 8008504:	b003      	add	sp, #12
 8008506:	4770      	bx	lr
 8008508:	20000018 	.word	0x20000018

0800850c <abort>:
 800850c:	b508      	push	{r3, lr}
 800850e:	2006      	movs	r0, #6
 8008510:	f000 fa08 	bl	8008924 <raise>
 8008514:	2001      	movs	r0, #1
 8008516:	f7f8 fea1 	bl	800125c <_exit>

0800851a <_malloc_usable_size_r>:
 800851a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851e:	1f18      	subs	r0, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	bfbc      	itt	lt
 8008524:	580b      	ldrlt	r3, [r1, r0]
 8008526:	18c0      	addlt	r0, r0, r3
 8008528:	4770      	bx	lr

0800852a <__sfputc_r>:
 800852a:	6893      	ldr	r3, [r2, #8]
 800852c:	3b01      	subs	r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	b410      	push	{r4}
 8008532:	6093      	str	r3, [r2, #8]
 8008534:	da08      	bge.n	8008548 <__sfputc_r+0x1e>
 8008536:	6994      	ldr	r4, [r2, #24]
 8008538:	42a3      	cmp	r3, r4
 800853a:	db01      	blt.n	8008540 <__sfputc_r+0x16>
 800853c:	290a      	cmp	r1, #10
 800853e:	d103      	bne.n	8008548 <__sfputc_r+0x1e>
 8008540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008544:	f000 b932 	b.w	80087ac <__swbuf_r>
 8008548:	6813      	ldr	r3, [r2, #0]
 800854a:	1c58      	adds	r0, r3, #1
 800854c:	6010      	str	r0, [r2, #0]
 800854e:	7019      	strb	r1, [r3, #0]
 8008550:	4608      	mov	r0, r1
 8008552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008556:	4770      	bx	lr

08008558 <__sfputs_r>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	4606      	mov	r6, r0
 800855c:	460f      	mov	r7, r1
 800855e:	4614      	mov	r4, r2
 8008560:	18d5      	adds	r5, r2, r3
 8008562:	42ac      	cmp	r4, r5
 8008564:	d101      	bne.n	800856a <__sfputs_r+0x12>
 8008566:	2000      	movs	r0, #0
 8008568:	e007      	b.n	800857a <__sfputs_r+0x22>
 800856a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856e:	463a      	mov	r2, r7
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff ffda 	bl	800852a <__sfputc_r>
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	d1f3      	bne.n	8008562 <__sfputs_r+0xa>
 800857a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800857c <_vfiprintf_r>:
 800857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	460d      	mov	r5, r1
 8008582:	b09d      	sub	sp, #116	@ 0x74
 8008584:	4614      	mov	r4, r2
 8008586:	4698      	mov	r8, r3
 8008588:	4606      	mov	r6, r0
 800858a:	b118      	cbz	r0, 8008594 <_vfiprintf_r+0x18>
 800858c:	6a03      	ldr	r3, [r0, #32]
 800858e:	b90b      	cbnz	r3, 8008594 <_vfiprintf_r+0x18>
 8008590:	f7fc fcbc 	bl	8004f0c <__sinit>
 8008594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008596:	07d9      	lsls	r1, r3, #31
 8008598:	d405      	bmi.n	80085a6 <_vfiprintf_r+0x2a>
 800859a:	89ab      	ldrh	r3, [r5, #12]
 800859c:	059a      	lsls	r2, r3, #22
 800859e:	d402      	bmi.n	80085a6 <_vfiprintf_r+0x2a>
 80085a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085a2:	f7fc fe80 	bl	80052a6 <__retarget_lock_acquire_recursive>
 80085a6:	89ab      	ldrh	r3, [r5, #12]
 80085a8:	071b      	lsls	r3, r3, #28
 80085aa:	d501      	bpl.n	80085b0 <_vfiprintf_r+0x34>
 80085ac:	692b      	ldr	r3, [r5, #16]
 80085ae:	b99b      	cbnz	r3, 80085d8 <_vfiprintf_r+0x5c>
 80085b0:	4629      	mov	r1, r5
 80085b2:	4630      	mov	r0, r6
 80085b4:	f000 f938 	bl	8008828 <__swsetup_r>
 80085b8:	b170      	cbz	r0, 80085d8 <_vfiprintf_r+0x5c>
 80085ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085bc:	07dc      	lsls	r4, r3, #31
 80085be:	d504      	bpl.n	80085ca <_vfiprintf_r+0x4e>
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085c4:	b01d      	add	sp, #116	@ 0x74
 80085c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ca:	89ab      	ldrh	r3, [r5, #12]
 80085cc:	0598      	lsls	r0, r3, #22
 80085ce:	d4f7      	bmi.n	80085c0 <_vfiprintf_r+0x44>
 80085d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085d2:	f7fc fe69 	bl	80052a8 <__retarget_lock_release_recursive>
 80085d6:	e7f3      	b.n	80085c0 <_vfiprintf_r+0x44>
 80085d8:	2300      	movs	r3, #0
 80085da:	9309      	str	r3, [sp, #36]	@ 0x24
 80085dc:	2320      	movs	r3, #32
 80085de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e6:	2330      	movs	r3, #48	@ 0x30
 80085e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008798 <_vfiprintf_r+0x21c>
 80085ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085f0:	f04f 0901 	mov.w	r9, #1
 80085f4:	4623      	mov	r3, r4
 80085f6:	469a      	mov	sl, r3
 80085f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085fc:	b10a      	cbz	r2, 8008602 <_vfiprintf_r+0x86>
 80085fe:	2a25      	cmp	r2, #37	@ 0x25
 8008600:	d1f9      	bne.n	80085f6 <_vfiprintf_r+0x7a>
 8008602:	ebba 0b04 	subs.w	fp, sl, r4
 8008606:	d00b      	beq.n	8008620 <_vfiprintf_r+0xa4>
 8008608:	465b      	mov	r3, fp
 800860a:	4622      	mov	r2, r4
 800860c:	4629      	mov	r1, r5
 800860e:	4630      	mov	r0, r6
 8008610:	f7ff ffa2 	bl	8008558 <__sfputs_r>
 8008614:	3001      	adds	r0, #1
 8008616:	f000 80a7 	beq.w	8008768 <_vfiprintf_r+0x1ec>
 800861a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800861c:	445a      	add	r2, fp
 800861e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008620:	f89a 3000 	ldrb.w	r3, [sl]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 809f 	beq.w	8008768 <_vfiprintf_r+0x1ec>
 800862a:	2300      	movs	r3, #0
 800862c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008634:	f10a 0a01 	add.w	sl, sl, #1
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	9307      	str	r3, [sp, #28]
 800863c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008640:	931a      	str	r3, [sp, #104]	@ 0x68
 8008642:	4654      	mov	r4, sl
 8008644:	2205      	movs	r2, #5
 8008646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864a:	4853      	ldr	r0, [pc, #332]	@ (8008798 <_vfiprintf_r+0x21c>)
 800864c:	f7f7 fdc0 	bl	80001d0 <memchr>
 8008650:	9a04      	ldr	r2, [sp, #16]
 8008652:	b9d8      	cbnz	r0, 800868c <_vfiprintf_r+0x110>
 8008654:	06d1      	lsls	r1, r2, #27
 8008656:	bf44      	itt	mi
 8008658:	2320      	movmi	r3, #32
 800865a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800865e:	0713      	lsls	r3, r2, #28
 8008660:	bf44      	itt	mi
 8008662:	232b      	movmi	r3, #43	@ 0x2b
 8008664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008668:	f89a 3000 	ldrb.w	r3, [sl]
 800866c:	2b2a      	cmp	r3, #42	@ 0x2a
 800866e:	d015      	beq.n	800869c <_vfiprintf_r+0x120>
 8008670:	9a07      	ldr	r2, [sp, #28]
 8008672:	4654      	mov	r4, sl
 8008674:	2000      	movs	r0, #0
 8008676:	f04f 0c0a 	mov.w	ip, #10
 800867a:	4621      	mov	r1, r4
 800867c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008680:	3b30      	subs	r3, #48	@ 0x30
 8008682:	2b09      	cmp	r3, #9
 8008684:	d94b      	bls.n	800871e <_vfiprintf_r+0x1a2>
 8008686:	b1b0      	cbz	r0, 80086b6 <_vfiprintf_r+0x13a>
 8008688:	9207      	str	r2, [sp, #28]
 800868a:	e014      	b.n	80086b6 <_vfiprintf_r+0x13a>
 800868c:	eba0 0308 	sub.w	r3, r0, r8
 8008690:	fa09 f303 	lsl.w	r3, r9, r3
 8008694:	4313      	orrs	r3, r2
 8008696:	9304      	str	r3, [sp, #16]
 8008698:	46a2      	mov	sl, r4
 800869a:	e7d2      	b.n	8008642 <_vfiprintf_r+0xc6>
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	1d19      	adds	r1, r3, #4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	9103      	str	r1, [sp, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bfbb      	ittet	lt
 80086a8:	425b      	neglt	r3, r3
 80086aa:	f042 0202 	orrlt.w	r2, r2, #2
 80086ae:	9307      	strge	r3, [sp, #28]
 80086b0:	9307      	strlt	r3, [sp, #28]
 80086b2:	bfb8      	it	lt
 80086b4:	9204      	strlt	r2, [sp, #16]
 80086b6:	7823      	ldrb	r3, [r4, #0]
 80086b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80086ba:	d10a      	bne.n	80086d2 <_vfiprintf_r+0x156>
 80086bc:	7863      	ldrb	r3, [r4, #1]
 80086be:	2b2a      	cmp	r3, #42	@ 0x2a
 80086c0:	d132      	bne.n	8008728 <_vfiprintf_r+0x1ac>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	1d1a      	adds	r2, r3, #4
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	9203      	str	r2, [sp, #12]
 80086ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086ce:	3402      	adds	r4, #2
 80086d0:	9305      	str	r3, [sp, #20]
 80086d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087a8 <_vfiprintf_r+0x22c>
 80086d6:	7821      	ldrb	r1, [r4, #0]
 80086d8:	2203      	movs	r2, #3
 80086da:	4650      	mov	r0, sl
 80086dc:	f7f7 fd78 	bl	80001d0 <memchr>
 80086e0:	b138      	cbz	r0, 80086f2 <_vfiprintf_r+0x176>
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	eba0 000a 	sub.w	r0, r0, sl
 80086e8:	2240      	movs	r2, #64	@ 0x40
 80086ea:	4082      	lsls	r2, r0
 80086ec:	4313      	orrs	r3, r2
 80086ee:	3401      	adds	r4, #1
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f6:	4829      	ldr	r0, [pc, #164]	@ (800879c <_vfiprintf_r+0x220>)
 80086f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086fc:	2206      	movs	r2, #6
 80086fe:	f7f7 fd67 	bl	80001d0 <memchr>
 8008702:	2800      	cmp	r0, #0
 8008704:	d03f      	beq.n	8008786 <_vfiprintf_r+0x20a>
 8008706:	4b26      	ldr	r3, [pc, #152]	@ (80087a0 <_vfiprintf_r+0x224>)
 8008708:	bb1b      	cbnz	r3, 8008752 <_vfiprintf_r+0x1d6>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	3307      	adds	r3, #7
 800870e:	f023 0307 	bic.w	r3, r3, #7
 8008712:	3308      	adds	r3, #8
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008718:	443b      	add	r3, r7
 800871a:	9309      	str	r3, [sp, #36]	@ 0x24
 800871c:	e76a      	b.n	80085f4 <_vfiprintf_r+0x78>
 800871e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008722:	460c      	mov	r4, r1
 8008724:	2001      	movs	r0, #1
 8008726:	e7a8      	b.n	800867a <_vfiprintf_r+0xfe>
 8008728:	2300      	movs	r3, #0
 800872a:	3401      	adds	r4, #1
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	4619      	mov	r1, r3
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	4620      	mov	r0, r4
 8008736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800873a:	3a30      	subs	r2, #48	@ 0x30
 800873c:	2a09      	cmp	r2, #9
 800873e:	d903      	bls.n	8008748 <_vfiprintf_r+0x1cc>
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0c6      	beq.n	80086d2 <_vfiprintf_r+0x156>
 8008744:	9105      	str	r1, [sp, #20]
 8008746:	e7c4      	b.n	80086d2 <_vfiprintf_r+0x156>
 8008748:	fb0c 2101 	mla	r1, ip, r1, r2
 800874c:	4604      	mov	r4, r0
 800874e:	2301      	movs	r3, #1
 8008750:	e7f0      	b.n	8008734 <_vfiprintf_r+0x1b8>
 8008752:	ab03      	add	r3, sp, #12
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4b12      	ldr	r3, [pc, #72]	@ (80087a4 <_vfiprintf_r+0x228>)
 800875a:	a904      	add	r1, sp, #16
 800875c:	4630      	mov	r0, r6
 800875e:	f7fb fd85 	bl	800426c <_printf_float>
 8008762:	4607      	mov	r7, r0
 8008764:	1c78      	adds	r0, r7, #1
 8008766:	d1d6      	bne.n	8008716 <_vfiprintf_r+0x19a>
 8008768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800876a:	07d9      	lsls	r1, r3, #31
 800876c:	d405      	bmi.n	800877a <_vfiprintf_r+0x1fe>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	059a      	lsls	r2, r3, #22
 8008772:	d402      	bmi.n	800877a <_vfiprintf_r+0x1fe>
 8008774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008776:	f7fc fd97 	bl	80052a8 <__retarget_lock_release_recursive>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	065b      	lsls	r3, r3, #25
 800877e:	f53f af1f 	bmi.w	80085c0 <_vfiprintf_r+0x44>
 8008782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008784:	e71e      	b.n	80085c4 <_vfiprintf_r+0x48>
 8008786:	ab03      	add	r3, sp, #12
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	462a      	mov	r2, r5
 800878c:	4b05      	ldr	r3, [pc, #20]	@ (80087a4 <_vfiprintf_r+0x228>)
 800878e:	a904      	add	r1, sp, #16
 8008790:	4630      	mov	r0, r6
 8008792:	f7fc f803 	bl	800479c <_printf_i>
 8008796:	e7e4      	b.n	8008762 <_vfiprintf_r+0x1e6>
 8008798:	08008ad1 	.word	0x08008ad1
 800879c:	08008adb 	.word	0x08008adb
 80087a0:	0800426d 	.word	0x0800426d
 80087a4:	08008559 	.word	0x08008559
 80087a8:	08008ad7 	.word	0x08008ad7

080087ac <__swbuf_r>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	460e      	mov	r6, r1
 80087b0:	4614      	mov	r4, r2
 80087b2:	4605      	mov	r5, r0
 80087b4:	b118      	cbz	r0, 80087be <__swbuf_r+0x12>
 80087b6:	6a03      	ldr	r3, [r0, #32]
 80087b8:	b90b      	cbnz	r3, 80087be <__swbuf_r+0x12>
 80087ba:	f7fc fba7 	bl	8004f0c <__sinit>
 80087be:	69a3      	ldr	r3, [r4, #24]
 80087c0:	60a3      	str	r3, [r4, #8]
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	071a      	lsls	r2, r3, #28
 80087c6:	d501      	bpl.n	80087cc <__swbuf_r+0x20>
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	b943      	cbnz	r3, 80087de <__swbuf_r+0x32>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 f82a 	bl	8008828 <__swsetup_r>
 80087d4:	b118      	cbz	r0, 80087de <__swbuf_r+0x32>
 80087d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80087da:	4638      	mov	r0, r7
 80087dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	6922      	ldr	r2, [r4, #16]
 80087e2:	1a98      	subs	r0, r3, r2
 80087e4:	6963      	ldr	r3, [r4, #20]
 80087e6:	b2f6      	uxtb	r6, r6
 80087e8:	4283      	cmp	r3, r0
 80087ea:	4637      	mov	r7, r6
 80087ec:	dc05      	bgt.n	80087fa <__swbuf_r+0x4e>
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f7ff f9c3 	bl	8007b7c <_fflush_r>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d1ed      	bne.n	80087d6 <__swbuf_r+0x2a>
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	60a3      	str	r3, [r4, #8]
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	6022      	str	r2, [r4, #0]
 8008806:	701e      	strb	r6, [r3, #0]
 8008808:	6962      	ldr	r2, [r4, #20]
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	429a      	cmp	r2, r3
 800880e:	d004      	beq.n	800881a <__swbuf_r+0x6e>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	07db      	lsls	r3, r3, #31
 8008814:	d5e1      	bpl.n	80087da <__swbuf_r+0x2e>
 8008816:	2e0a      	cmp	r6, #10
 8008818:	d1df      	bne.n	80087da <__swbuf_r+0x2e>
 800881a:	4621      	mov	r1, r4
 800881c:	4628      	mov	r0, r5
 800881e:	f7ff f9ad 	bl	8007b7c <_fflush_r>
 8008822:	2800      	cmp	r0, #0
 8008824:	d0d9      	beq.n	80087da <__swbuf_r+0x2e>
 8008826:	e7d6      	b.n	80087d6 <__swbuf_r+0x2a>

08008828 <__swsetup_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4b29      	ldr	r3, [pc, #164]	@ (80088d0 <__swsetup_r+0xa8>)
 800882c:	4605      	mov	r5, r0
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	460c      	mov	r4, r1
 8008832:	b118      	cbz	r0, 800883c <__swsetup_r+0x14>
 8008834:	6a03      	ldr	r3, [r0, #32]
 8008836:	b90b      	cbnz	r3, 800883c <__swsetup_r+0x14>
 8008838:	f7fc fb68 	bl	8004f0c <__sinit>
 800883c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008840:	0719      	lsls	r1, r3, #28
 8008842:	d422      	bmi.n	800888a <__swsetup_r+0x62>
 8008844:	06da      	lsls	r2, r3, #27
 8008846:	d407      	bmi.n	8008858 <__swsetup_r+0x30>
 8008848:	2209      	movs	r2, #9
 800884a:	602a      	str	r2, [r5, #0]
 800884c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008856:	e033      	b.n	80088c0 <__swsetup_r+0x98>
 8008858:	0758      	lsls	r0, r3, #29
 800885a:	d512      	bpl.n	8008882 <__swsetup_r+0x5a>
 800885c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800885e:	b141      	cbz	r1, 8008872 <__swsetup_r+0x4a>
 8008860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008864:	4299      	cmp	r1, r3
 8008866:	d002      	beq.n	800886e <__swsetup_r+0x46>
 8008868:	4628      	mov	r0, r5
 800886a:	f7fd fb7d 	bl	8005f68 <_free_r>
 800886e:	2300      	movs	r3, #0
 8008870:	6363      	str	r3, [r4, #52]	@ 0x34
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	2300      	movs	r3, #0
 800887c:	6063      	str	r3, [r4, #4]
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f043 0308 	orr.w	r3, r3, #8
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	6923      	ldr	r3, [r4, #16]
 800888c:	b94b      	cbnz	r3, 80088a2 <__swsetup_r+0x7a>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008898:	d003      	beq.n	80088a2 <__swsetup_r+0x7a>
 800889a:	4621      	mov	r1, r4
 800889c:	4628      	mov	r0, r5
 800889e:	f7ff f9bb 	bl	8007c18 <__smakebuf_r>
 80088a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a6:	f013 0201 	ands.w	r2, r3, #1
 80088aa:	d00a      	beq.n	80088c2 <__swsetup_r+0x9a>
 80088ac:	2200      	movs	r2, #0
 80088ae:	60a2      	str	r2, [r4, #8]
 80088b0:	6962      	ldr	r2, [r4, #20]
 80088b2:	4252      	negs	r2, r2
 80088b4:	61a2      	str	r2, [r4, #24]
 80088b6:	6922      	ldr	r2, [r4, #16]
 80088b8:	b942      	cbnz	r2, 80088cc <__swsetup_r+0xa4>
 80088ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088be:	d1c5      	bne.n	800884c <__swsetup_r+0x24>
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	0799      	lsls	r1, r3, #30
 80088c4:	bf58      	it	pl
 80088c6:	6962      	ldrpl	r2, [r4, #20]
 80088c8:	60a2      	str	r2, [r4, #8]
 80088ca:	e7f4      	b.n	80088b6 <__swsetup_r+0x8e>
 80088cc:	2000      	movs	r0, #0
 80088ce:	e7f7      	b.n	80088c0 <__swsetup_r+0x98>
 80088d0:	20000018 	.word	0x20000018

080088d4 <_raise_r>:
 80088d4:	291f      	cmp	r1, #31
 80088d6:	b538      	push	{r3, r4, r5, lr}
 80088d8:	4605      	mov	r5, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	d904      	bls.n	80088e8 <_raise_r+0x14>
 80088de:	2316      	movs	r3, #22
 80088e0:	6003      	str	r3, [r0, #0]
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088ea:	b112      	cbz	r2, 80088f2 <_raise_r+0x1e>
 80088ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088f0:	b94b      	cbnz	r3, 8008906 <_raise_r+0x32>
 80088f2:	4628      	mov	r0, r5
 80088f4:	f000 f830 	bl	8008958 <_getpid_r>
 80088f8:	4622      	mov	r2, r4
 80088fa:	4601      	mov	r1, r0
 80088fc:	4628      	mov	r0, r5
 80088fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008902:	f000 b817 	b.w	8008934 <_kill_r>
 8008906:	2b01      	cmp	r3, #1
 8008908:	d00a      	beq.n	8008920 <_raise_r+0x4c>
 800890a:	1c59      	adds	r1, r3, #1
 800890c:	d103      	bne.n	8008916 <_raise_r+0x42>
 800890e:	2316      	movs	r3, #22
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	2001      	movs	r0, #1
 8008914:	e7e7      	b.n	80088e6 <_raise_r+0x12>
 8008916:	2100      	movs	r1, #0
 8008918:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800891c:	4620      	mov	r0, r4
 800891e:	4798      	blx	r3
 8008920:	2000      	movs	r0, #0
 8008922:	e7e0      	b.n	80088e6 <_raise_r+0x12>

08008924 <raise>:
 8008924:	4b02      	ldr	r3, [pc, #8]	@ (8008930 <raise+0xc>)
 8008926:	4601      	mov	r1, r0
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	f7ff bfd3 	b.w	80088d4 <_raise_r>
 800892e:	bf00      	nop
 8008930:	20000018 	.word	0x20000018

08008934 <_kill_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d07      	ldr	r5, [pc, #28]	@ (8008954 <_kill_r+0x20>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	f7f8 fc7b 	bl	800123c <_kill>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	d102      	bne.n	8008950 <_kill_r+0x1c>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	b103      	cbz	r3, 8008950 <_kill_r+0x1c>
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	bd38      	pop	{r3, r4, r5, pc}
 8008952:	bf00      	nop
 8008954:	20000408 	.word	0x20000408

08008958 <_getpid_r>:
 8008958:	f7f8 bc68 	b.w	800122c <_getpid>

0800895c <_init>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr

08008968 <_fini>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr
