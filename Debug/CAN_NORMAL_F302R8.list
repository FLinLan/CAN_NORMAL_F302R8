
CAN_NORMAL_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009200  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08009390  08009390  0000a390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800984c  0800984c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800984c  0800984c  0000a84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009854  08009854  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009854  08009854  0000a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009858  08009858  0000a858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800985c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d4  08009a30  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08009a30  0000b418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af1c  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001912  00000000  00000000  00016120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00017a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064c  00000000  00000000  00018280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf09  00000000  00000000  000188cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c4c  00000000  00000000  000347d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0ce0  00000000  00000000  0003e421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  000df144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e2abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009378 	.word	0x08009378

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009378 	.word	0x08009378

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cfc:	1d39      	adds	r1, r7, #4
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d02:	2201      	movs	r2, #1
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <__io_putchar+0x20>)
 8000d06:	f002 fd6f 	bl	80037e8 <HAL_UART_Transmit>
  return ch;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000218 	.word	0x20000218

08000d18 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <__io_getchar+0x38>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2208      	movs	r2, #8
 8000d28:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d2a:	1df9      	adds	r1, r7, #7
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d30:	2201      	movs	r2, #1
 8000d32:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <__io_getchar+0x38>)
 8000d34:	f002 fde1 	bl	80038fa <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d38:	1df9      	adds	r1, r7, #7
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <__io_getchar+0x38>)
 8000d42:	f002 fd51 	bl	80037e8 <HAL_UART_Transmit>
  return ch;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000218 	.word	0x20000218

08000d54 <floatToUpperBytes>:
uint8_t TxData[8] = {0x00, 0x00, 0x00, 0x00, // IEEE 754 float: vel : 2 rev/s: UPPER BYTES
					 0x00, 0x00, 0x00, 0x00}; // IEEE 754 float: torque : 0: LOWER BYTES
uint8_t RxData[8];
uint32_t TxMailbox;

void floatToUpperBytes(float val, uint8_t* byteArr) {
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d5e:	6038      	str	r0, [r7, #0]
  union {
    float var;
    uint8_t buf[sizeof(float)];
  } u;
  u.var = val;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	60fb      	str	r3, [r7, #12]
  memcpy(byteArr, u.buf, sizeof(float)); // Write to bytes 0–3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f000 fb7b 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f85b 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f000 f905 	bl	8000f94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d8a:	f000 f8d3 	bl	8000f34 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000d8e:	f000 f89b 	bl	8000ec8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000d92:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <main+0xa8>)
 8000d94:	f000 fcd1 	bl	800173a <HAL_CAN_Start>
  setvbuf(stdin, NULL, _IONBF, 0); // for scanf setup, avoiding errors in syscalls.c
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <main+0xac>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6858      	ldr	r0, [r3, #4]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2202      	movs	r2, #2
 8000da2:	2100      	movs	r1, #0
 8000da4:	f004 f90c 	bl	8004fc0 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
		if (scanf("%x %d %f", &cmd_id, &dlc, &value) == 3)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	f107 0208 	add.w	r2, r7, #8
 8000dae:	f107 010c 	add.w	r1, r7, #12
 8000db2:	481d      	ldr	r0, [pc, #116]	@ (8000e28 <main+0xb0>)
 8000db4:	f004 f8f2 	bl	8004f9c <iscanf>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d1f4      	bne.n	8000da8 <main+0x30>
		{
			printf("packet sent: CMD:0x%x, DLC:%d, VAL: %f \r\n", cmd_id, dlc, value);
 8000dbe:	68fc      	ldr	r4, [r7, #12]
 8000dc0:	68bd      	ldr	r5, [r7, #8]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fbbf 	bl	8000548 <__aeabi_f2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	e9cd 2300 	strd	r2, r3, [sp]
 8000dd2:	462a      	mov	r2, r5
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	4815      	ldr	r0, [pc, #84]	@ (8000e2c <main+0xb4>)
 8000dd8:	f004 f8ce 	bl	8004f78 <iprintf>
			memset(TxData, 0, sizeof(TxData));
 8000ddc:	2208      	movs	r2, #8
 8000dde:	2100      	movs	r1, #0
 8000de0:	4813      	ldr	r0, [pc, #76]	@ (8000e30 <main+0xb8>)
 8000de2:	f004 fa06 	bl	80051f2 <memset>

			TxHeader.StdId = (NODE_ID << 5) | cmd_id;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <main+0xbc>)
 8000dec:	601a      	str	r2, [r3, #0]
			TxHeader.IDE = CAN_ID_STD;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <main+0xbc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
			TxHeader.RTR = CAN_RTR_DATA;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <main+0xbc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
			TxHeader.DLC = dlc;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <main+0xbc>)
 8000e00:	611a      	str	r2, [r3, #16]

			// Put value as bytes directly into TxData
			// example usage: "0x0D 8 2.0" VELOCITY_MODE with DLC = 8 and spinning at INPUT_VEL 2 rev/s.
			floatToUpperBytes(value, TxData);
 8000e02:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e06:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <main+0xb8>)
 8000e08:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0c:	f7ff ffa2 	bl	8000d54 <floatToUpperBytes>
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <main+0xc0>)
 8000e12:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <main+0xb8>)
 8000e14:	4907      	ldr	r1, [pc, #28]	@ (8000e34 <main+0xbc>)
 8000e16:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <main+0xa8>)
 8000e18:	f000 fcd3 	bl	80017c2 <HAL_CAN_AddTxMessage>
		if (scanf("%x %d %f", &cmd_id, &dlc, &value) == 3)
 8000e1c:	e7c4      	b.n	8000da8 <main+0x30>
 8000e1e:	bf00      	nop
 8000e20:	200001f0 	.word	0x200001f0
 8000e24:	20000018 	.word	0x20000018
 8000e28:	08009390 	.word	0x08009390
 8000e2c:	0800939c 	.word	0x0800939c
 8000e30:	200002b8 	.word	0x200002b8
 8000e34:	200002a0 	.word	0x200002a0
 8000e38:	200002c0 	.word	0x200002c0

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b090      	sub	sp, #64	@ 0x40
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2228      	movs	r2, #40	@ 0x28
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 f9d1 	bl	80051f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e70:	2302      	movs	r3, #2
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e7a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fa41 	bl	800230c <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e90:	f000 f8fe 	bl	8001090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2102      	movs	r1, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fa3a 	bl	8003328 <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000eba:	f000 f8e9 	bl	8001090 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3740      	adds	r7, #64	@ 0x40
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <MX_CAN_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000ee6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000eea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000eee:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000ef2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_CAN_Init+0x64>)
 8000f1a:	f000 fb13 	bl	8001544 <HAL_CAN_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f24:	f000 f8b4 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200001f0 	.word	0x200001f0
 8000f30:	40006400 	.word	0x40006400

08000f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <MX_USART2_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f78:	f002 fbe8 	bl	800374c <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 f885 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000218 	.word	0x20000218
 8000f90:	40004400 	.word	0x40004400

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a35      	ldr	r2, [pc, #212]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b33      	ldr	r3, [pc, #204]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc2:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a29      	ldr	r2, [pc, #164]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a23      	ldr	r2, [pc, #140]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2120      	movs	r1, #32
 800100e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001012:	f001 f963 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101c:	481a      	ldr	r0, [pc, #104]	@ (8001088 <MX_GPIO_Init+0xf4>)
 800101e:	f001 f95d 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001028:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4814      	ldr	r0, [pc, #80]	@ (800108c <MX_GPIO_Init+0xf8>)
 800103a:	f000 ffdd 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 800103e:	2320      	movs	r3, #32
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001058:	f000 ffce 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800105c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_GPIO_Init+0xf4>)
 8001076:	f000 ffbf 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	@ 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <Error_Handler+0x8>

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <HAL_MspInit+0x44>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a0e      	ldr	r2, [pc, #56]	@ (80010e0 <HAL_MspInit+0x44>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <HAL_MspInit+0x44>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_MspInit+0x44>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <HAL_MspInit+0x44>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_MspInit+0x44>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010d2:	2007      	movs	r0, #7
 80010d4:	f000 ff4e 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1c      	ldr	r2, [pc, #112]	@ (8001174 <HAL_CAN_MspInit+0x90>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d131      	bne.n	800116a <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <HAL_CAN_MspInit+0x94>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_CAN_MspInit+0x94>)
 800110c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_CAN_MspInit+0x94>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <HAL_CAN_MspInit+0x94>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <HAL_CAN_MspInit+0x94>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <HAL_CAN_MspInit+0x94>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001136:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001148:	2309      	movs	r3, #9
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f000 ff4f 	bl	8001ff8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2014      	movs	r0, #20
 8001160:	f000 ff13 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001164:	2014      	movs	r0, #20
 8001166:	f000 ff2c 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40006400 	.word	0x40006400
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <HAL_UART_MspInit+0x7c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d128      	bne.n	80011f0 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_UART_MspInit+0x80>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a16      	ldr	r2, [pc, #88]	@ (80011fc <HAL_UART_MspInit+0x80>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <HAL_UART_MspInit+0x80>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <HAL_UART_MspInit+0x80>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <HAL_UART_MspInit+0x80>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_UART_MspInit+0x80>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ce:	230c      	movs	r3, #12
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011de:	2307      	movs	r3, #7
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ec:	f000 ff04 	bl	8001ff8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40021000 	.word	0x40021000

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <UsageFault_Handler+0x4>

08001228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f000 f955 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001266:	f000 fb7c 	bl	8001962 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001f0 	.word	0x200001f0

08001274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_kill>:

int _kill(int pid, int sig)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800128e:	f004 f803 	bl	8005298 <__errno>
 8001292:	4603      	mov	r3, r0
 8001294:	2216      	movs	r2, #22
 8001296:	601a      	str	r2, [r3, #0]
  return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_exit>:

void _exit (int status)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ffe7 	bl	8001284 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b6:	bf00      	nop
 80012b8:	e7fd      	b.n	80012b6 <_exit+0x12>

080012ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e00a      	b.n	80012e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012cc:	f7ff fd24 	bl	8000d18 <__io_getchar>
 80012d0:	4601      	mov	r1, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	60ba      	str	r2, [r7, #8]
 80012d8:	b2ca      	uxtb	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbf0      	blt.n	80012cc <_read+0x12>
  }

  return len;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e009      	b.n	800131a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fcf0 	bl	8000cf4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	dbf1      	blt.n	8001306 <_write+0x12>
  }
  return len;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_close>:

int _close(int file)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001354:	605a      	str	r2, [r3, #4]
  return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_isatty>:

int _isatty(int file)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f003 ff68 	bl	8005298 <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20004000 	.word	0x20004000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	200002c4 	.word	0x200002c4
 80013fc:	20000418 	.word	0x20000418

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800145c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001428:	f7ff ffea 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	@ (8001464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	@ (8001470 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f003 ff27 	bl	80052a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001456:	f7ff fc8f 	bl	8000d78 <main>

0800145a <LoopForever>:

LoopForever:
    b LoopForever
 800145a:	e7fe      	b.n	800145a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800145c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001468:	0800985c 	.word	0x0800985c
  ldr r2, =_sbss
 800146c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001470:	20000418 	.word	0x20000418

08001474 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_IRQHandler>
	...

08001478 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 fd73 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fe02 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fd8b 	bl	8001fde <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e0:	f000 fd53 	bl	8001f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	@ (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	200002c8 	.word	0x200002c8

0800152c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200002c8 	.word	0x200002c8

08001544 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0ed      	b.n	8001732 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fdbe 	bl	80010e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001578:	f7ff ffd8 	bl	800152c <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800157e:	e012      	b.n	80015a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001580:	f7ff ffd4 	bl	800152c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b0a      	cmp	r3, #10
 800158c:	d90b      	bls.n	80015a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2205      	movs	r2, #5
 800159e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0c5      	b.n	8001732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0e5      	beq.n	8001580 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0202 	bic.w	r2, r2, #2
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff ffb2 	bl	800152c <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ca:	e012      	b.n	80015f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015cc:	f7ff ffae 	bl	800152c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d90b      	bls.n	80015f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2205      	movs	r2, #5
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e09f      	b.n	8001732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e5      	bne.n	80015cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e1b      	ldrb	r3, [r3, #24]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e007      	b.n	800162a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7e5b      	ldrb	r3, [r3, #25]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e007      	b.n	8001654 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001652:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e9b      	ldrb	r3, [r3, #26]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d108      	bne.n	800166e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e007      	b.n	800167e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0220 	bic.w	r2, r2, #32
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7edb      	ldrb	r3, [r3, #27]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d108      	bne.n	8001698 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0210 	bic.w	r2, r2, #16
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e007      	b.n	80016a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0210 	orr.w	r2, r2, #16
 80016a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7f1b      	ldrb	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0208 	orr.w	r2, r2, #8
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e007      	b.n	80016d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0208 	bic.w	r2, r2, #8
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7f5b      	ldrb	r3, [r3, #29]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0204 	orr.w	r2, r2, #4
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e007      	b.n	80016fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0204 	bic.w	r2, r2, #4
 80016fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	ea42 0103 	orr.w	r1, r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d12e      	bne.n	80017ac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2202      	movs	r2, #2
 8001752:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001766:	f7ff fee1 	bl	800152c <HAL_GetTick>
 800176a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800176c:	e012      	b.n	8001794 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800176e:	f7ff fedd 	bl	800152c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b0a      	cmp	r3, #10
 800177a:	d90b      	bls.n	8001794 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2205      	movs	r2, #5
 800178c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e012      	b.n	80017ba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1e5      	bne.n	800176e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e006      	b.n	80017ba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
  }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b089      	sub	sp, #36	@ 0x24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e0:	7ffb      	ldrb	r3, [r7, #31]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d003      	beq.n	80017ee <HAL_CAN_AddTxMessage+0x2c>
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f040 80ad 	bne.w	8001948 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10a      	bne.n	800180e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8095 	beq.w	8001938 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	0e1b      	lsrs	r3, r3, #24
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001818:	2201      	movs	r2, #1
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	409a      	lsls	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	6809      	ldr	r1, [r1, #0]
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3318      	adds	r3, #24
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	440b      	add	r3, r1
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e00f      	b.n	8001866 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001850:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001856:	68f9      	ldr	r1, [r7, #12]
 8001858:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800185a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3318      	adds	r3, #24
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	440b      	add	r3, r1
 8001864:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3318      	adds	r3, #24
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	440b      	add	r3, r1
 8001876:	3304      	adds	r3, #4
 8001878:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	7d1b      	ldrb	r3, [r3, #20]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d111      	bne.n	80018a6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3318      	adds	r3, #24
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	3304      	adds	r3, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	6811      	ldr	r1, [r2, #0]
 8001896:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3318      	adds	r3, #24
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	440b      	add	r3, r1
 80018a2:	3304      	adds	r3, #4
 80018a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3307      	adds	r3, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	061a      	lsls	r2, r3, #24
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3306      	adds	r3, #6
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3305      	adds	r3, #5
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	4313      	orrs	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	3204      	adds	r2, #4
 80018c6:	7812      	ldrb	r2, [r2, #0]
 80018c8:	4610      	mov	r0, r2
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	6811      	ldr	r1, [r2, #0]
 80018ce:	ea43 0200 	orr.w	r2, r3, r0
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	440b      	add	r3, r1
 80018d8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80018dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3303      	adds	r3, #3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3302      	adds	r3, #2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3301      	adds	r3, #1
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	4313      	orrs	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	4610      	mov	r0, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	6811      	ldr	r1, [r2, #0]
 8001904:	ea43 0200 	orr.w	r2, r3, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	440b      	add	r3, r1
 800190e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001912:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3318      	adds	r3, #24
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	6811      	ldr	r1, [r2, #0]
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3318      	adds	r3, #24
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	440b      	add	r3, r1
 8001932:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e00e      	b.n	8001956 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e006      	b.n	8001956 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
  }
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	@ 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b08a      	sub	sp, #40	@ 0x28
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d07c      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d023      	beq.n	80019fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f983 	bl	8001cd0 <HAL_CAN_TxMailbox0CompleteCallback>
 80019ca:	e016      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019de:	e00c      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f2:	e002      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f989 	bl	8001d0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d024      	beq.n	8001a4e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f963 	bl	8001ce4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a1e:	e016      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a32:	e00c      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a46:	e002      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f969 	bl	8001d20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d024      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f943 	bl	8001cf8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a72:	e016      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a86:	e00c      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9a:	e002      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f949 	bl	8001d34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f93a 	bl	8001d5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f921 	bl	8001d48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2210      	movs	r2, #16
 8001b28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00b      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2208      	movs	r2, #8
 8001b44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f91c 	bl	8001d84 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f903 	bl	8001d70 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2210      	movs	r2, #16
 8001b84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f906 	bl	8001d98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8ff 	bl	8001dac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d07b      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d072      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d043      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03e      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c30:	2b60      	cmp	r3, #96	@ 0x60
 8001c32:	d02b      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x32a>
 8001c34:	2b60      	cmp	r3, #96	@ 0x60
 8001c36:	d82e      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c38:	2b50      	cmp	r3, #80	@ 0x50
 8001c3a:	d022      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x320>
 8001c3c:	2b50      	cmp	r3, #80	@ 0x50
 8001c3e:	d82a      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c40:	2b40      	cmp	r3, #64	@ 0x40
 8001c42:	d019      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x316>
 8001c44:	2b40      	cmp	r3, #64	@ 0x40
 8001c46:	d826      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c48:	2b30      	cmp	r3, #48	@ 0x30
 8001c4a:	d010      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x30c>
 8001c4c:	2b30      	cmp	r3, #48	@ 0x30
 8001c4e:	d822      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x2f8>
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d005      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c58:	e01d      	b.n	8001c96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c62:	e019      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c6c:	e014      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f043 0320 	orr.w	r3, r3, #32
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c76:	e00f      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c80:	e00a      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c8a:	e005      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c94:	e000      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ca6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2204      	movs	r2, #4
 8001cae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f87c 	bl	8001dc0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	@ 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff29 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff3e 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff31 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa2 	bl	8001f30 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e14e      	b.n	80022a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8140 	beq.w	80022a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206e:	2201      	movs	r2, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d017      	beq.n	80020d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d123      	bne.n	800212a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 809a 	beq.w	80022a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	4b55      	ldr	r3, [pc, #340]	@ (80022c4 <HAL_GPIO_Init+0x2cc>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a54      	ldr	r2, [pc, #336]	@ (80022c4 <HAL_GPIO_Init+0x2cc>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <HAL_GPIO_Init+0x2cc>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002184:	4a50      	ldr	r2, [pc, #320]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021ae:	d013      	beq.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a46      	ldr	r2, [pc, #280]	@ (80022cc <HAL_GPIO_Init+0x2d4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00d      	beq.n	80021d4 <HAL_GPIO_Init+0x1dc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a45      	ldr	r2, [pc, #276]	@ (80022d0 <HAL_GPIO_Init+0x2d8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <HAL_GPIO_Init+0x1d8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a44      	ldr	r2, [pc, #272]	@ (80022d4 <HAL_GPIO_Init+0x2dc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_GPIO_Init+0x1d4>
 80021c8:	2303      	movs	r3, #3
 80021ca:	e006      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021cc:	2305      	movs	r3, #5
 80021ce:	e004      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_GPIO_Init+0x1e2>
 80021d8:	2300      	movs	r3, #0
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	f002 0203 	and.w	r2, r2, #3
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4093      	lsls	r3, r2
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ea:	4937      	ldr	r1, [pc, #220]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f8:	4b37      	ldr	r3, [pc, #220]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800221c:	4a2e      	ldr	r2, [pc, #184]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002222:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002246:	4a24      	ldr	r2, [pc, #144]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224c:	4b22      	ldr	r3, [pc, #136]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002270:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002276:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800229a:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f47f aea9 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010000 	.word	0x40010000
 80022cc:	48000400 	.word	0x48000400
 80022d0:	48000800 	.word	0x48000800
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002312:	af00      	add	r7, sp, #0
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	f000 bff4 	b.w	800331a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 816d 	beq.w	8002622 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002348:	4bb4      	ldr	r3, [pc, #720]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00c      	beq.n	800236e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002354:	4bb1      	ldr	r3, [pc, #708]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d157      	bne.n	8002410 <HAL_RCC_OscConfig+0x104>
 8002360:	4bae      	ldr	r3, [pc, #696]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d150      	bne.n	8002410 <HAL_RCC_OscConfig+0x104>
 800236e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002372:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002382:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b3f      	cmp	r3, #63	@ 0x3f
 800238e:	d802      	bhi.n	8002396 <HAL_RCC_OscConfig+0x8a>
 8002390:	4ba2      	ldr	r3, [pc, #648]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0xb6>
 8002396:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800239a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80023aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ae:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80023b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80023be:	4b97      	ldr	r3, [pc, #604]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023c6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80023ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80023d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8114 	beq.w	8002620 <HAL_RCC_OscConfig+0x314>
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 810b 	bne.w	8002620 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f000 bf85 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x124>
 8002422:	4b7e      	ldr	r3, [pc, #504]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7d      	ldr	r2, [pc, #500]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e036      	b.n	800249e <HAL_RCC_OscConfig+0x192>
 8002430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002434:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0x14e>
 8002440:	4b76      	ldr	r3, [pc, #472]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a75      	ldr	r2, [pc, #468]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a72      	ldr	r2, [pc, #456]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e021      	b.n	800249e <HAL_RCC_OscConfig+0x192>
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x17a>
 800246c:	4b6b      	ldr	r3, [pc, #428]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6a      	ldr	r2, [pc, #424]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002472:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b68      	ldr	r3, [pc, #416]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a67      	ldr	r2, [pc, #412]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e00b      	b.n	800249e <HAL_RCC_OscConfig+0x192>
 8002486:	4b65      	ldr	r3, [pc, #404]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a64      	ldr	r2, [pc, #400]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800248c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b62      	ldr	r3, [pc, #392]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a61      	ldr	r2, [pc, #388]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 8002498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249e:	4b5f      	ldr	r3, [pc, #380]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f023 020f 	bic.w	r2, r3, #15
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	495a      	ldr	r1, [pc, #360]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d054      	beq.n	8002572 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff f830 	bl	800152c <HAL_GetTick>
 80024cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d2:	f7ff f82b 	bl	800152c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d902      	bls.n	80024e8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	f000 bf19 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 80024e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80024fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b3f      	cmp	r3, #63	@ 0x3f
 8002508:	d802      	bhi.n	8002510 <HAL_RCC_OscConfig+0x204>
 800250a:	4b44      	ldr	r3, [pc, #272]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e015      	b.n	800253c <HAL_RCC_OscConfig+0x230>
 8002510:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002514:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002524:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002528:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800252c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002538:	4b38      	ldr	r3, [pc, #224]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002540:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002544:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002548:	fa92 f2a2 	rbit	r2, r2
 800254c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002550:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002554:	fab2 f282 	clz	r2, r2
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f042 0220 	orr.w	r2, r2, #32
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f002 021f 	and.w	r2, r2, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0b0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1c6>
 8002570:	e057      	b.n	8002622 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe ffdb 	bl	800152c <HAL_GetTick>
 8002576:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe ffd6 	bl	800152c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	@ 0x64
 800258a:	d902      	bls.n	8002592 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	f000 bec4 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 8002592:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002596:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80025a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80025b2:	d802      	bhi.n	80025ba <HAL_RCC_OscConfig+0x2ae>
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x2da>
 80025ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025be:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80025ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025d2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80025d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_RCC_OscConfig+0x310>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025ea:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80025ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80025f2:	fa92 f2a2 	rbit	r2, r2
 80025f6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80025fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80025fe:	fab2 f282 	clz	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f002 021f 	and.w	r2, r2, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1b0      	bne.n	800257c <HAL_RCC_OscConfig+0x270>
 800261a:	e002      	b.n	8002622 <HAL_RCC_OscConfig+0x316>
 800261c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 816c 	beq.w	8002910 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002638:	4bcc      	ldr	r3, [pc, #816]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002644:	4bc9      	ldr	r3, [pc, #804]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d16d      	bne.n	800272c <HAL_RCC_OscConfig+0x420>
 8002650:	4bc6      	ldr	r3, [pc, #792]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d167      	bne.n	800272c <HAL_RCC_OscConfig+0x420>
 800265c:	2302      	movs	r3, #2
 800265e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800266e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b3f      	cmp	r3, #63	@ 0x3f
 800267a:	d802      	bhi.n	8002682 <HAL_RCC_OscConfig+0x376>
 800267c:	4bbb      	ldr	r3, [pc, #748]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e013      	b.n	80026aa <HAL_RCC_OscConfig+0x39e>
 8002682:	2302      	movs	r3, #2
 8002684:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002694:	2302      	movs	r3, #2
 8002696:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800269a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80026a6:	4bb1      	ldr	r3, [pc, #708]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2202      	movs	r2, #2
 80026ac:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80026b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80026b4:	fa92 f2a2 	rbit	r2, r2
 80026b8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80026bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80026c0:	fab2 f282 	clz	r2, r2
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f042 0220 	orr.w	r2, r2, #32
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f002 021f 	and.w	r2, r2, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f202 	lsl.w	r2, r1, r2
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3e6>
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d002      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f000 be14 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b9e      	ldr	r3, [pc, #632]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	21f8      	movs	r1, #248	@ 0xf8
 8002708:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002710:	fa91 f1a1 	rbit	r1, r1
 8002714:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002718:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800271c:	fab1 f181 	clz	r1, r1
 8002720:	b2c9      	uxtb	r1, r1
 8002722:	408b      	lsls	r3, r1
 8002724:	4991      	ldr	r1, [pc, #580]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e0f1      	b.n	8002910 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8083 	beq.w	8002844 <HAL_RCC_OscConfig+0x538>
 800273e:	2301      	movs	r3, #1
 8002740:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002750:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800275e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	461a      	mov	r2, r3
 8002766:	2301      	movs	r3, #1
 8002768:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fedf 	bl	800152c <HAL_GetTick>
 800276e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe feda 	bl	800152c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d902      	bls.n	800278a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	f000 bdc8 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800279c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80027a8:	d802      	bhi.n	80027b0 <HAL_RCC_OscConfig+0x4a4>
 80027aa:	4b70      	ldr	r3, [pc, #448]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e013      	b.n	80027d8 <HAL_RCC_OscConfig+0x4cc>
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80027c2:	2302      	movs	r3, #2
 80027c4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80027c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80027d4:	4b65      	ldr	r3, [pc, #404]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	2202      	movs	r2, #2
 80027da:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80027de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80027e2:	fa92 f2a2 	rbit	r2, r2
 80027e6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80027ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0b4      	beq.n	8002774 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b58      	ldr	r3, [pc, #352]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	21f8      	movs	r1, #248	@ 0xf8
 8002820:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002828:	fa91 f1a1 	rbit	r1, r1
 800282c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002830:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002834:	fab1 f181 	clz	r1, r1
 8002838:	b2c9      	uxtb	r1, r1
 800283a:	408b      	lsls	r3, r1
 800283c:	494b      	ldr	r1, [pc, #300]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
 8002842:	e065      	b.n	8002910 <HAL_RCC_OscConfig+0x604>
 8002844:	2301      	movs	r3, #1
 8002846:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002856:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002864:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fe5c 	bl	800152c <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287a:	f7fe fe57 	bl	800152c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	f000 bd45 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80028a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ae:	d802      	bhi.n	80028b6 <HAL_RCC_OscConfig+0x5aa>
 80028b0:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	e013      	b.n	80028de <HAL_RCC_OscConfig+0x5d2>
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80028ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80028da:	4b24      	ldr	r3, [pc, #144]	@ (800296c <HAL_RCC_OscConfig+0x660>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	2202      	movs	r2, #2
 80028e0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80028e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80028e8:	fa92 f2a2 	rbit	r2, r2
 80028ec:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80028f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f042 0220 	orr.w	r2, r2, #32
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f002 021f 	and.w	r2, r2, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1b4      	bne.n	800287a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8115 	beq.w	8002b50 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d07e      	beq.n	8002a34 <HAL_RCC_OscConfig+0x728>
 8002936:	2301      	movs	r3, #1
 8002938:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_OscConfig+0x664>)
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	461a      	mov	r2, r3
 800295c:	2301      	movs	r3, #1
 800295e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fde4 	bl	800152c <HAL_GetTick>
 8002964:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002968:	e00f      	b.n	800298a <HAL_RCC_OscConfig+0x67e>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fdda 	bl	800152c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d902      	bls.n	800298a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	f000 bcc8 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029a4:	2202      	movs	r2, #2
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029c8:	2202      	movs	r2, #2
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e4:	4bb0      	ldr	r3, [pc, #704]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 80029e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029f0:	2102      	movs	r1, #2
 80029f2:	6019      	str	r1, [r3, #0]
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f1a3 	rbit	r1, r3
 8002a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a0a:	6019      	str	r1, [r3, #0]
  return result;
 8002a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0a0      	beq.n	8002974 <HAL_RCC_OscConfig+0x668>
 8002a32:	e08d      	b.n	8002b50 <HAL_RCC_OscConfig+0x844>
 8002a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a56:	601a      	str	r2, [r3, #0]
  return result;
 8002a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b90      	ldr	r3, [pc, #576]	@ (8002cac <HAL_RCC_OscConfig+0x9a0>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	461a      	mov	r2, r3
 8002a72:	2300      	movs	r3, #0
 8002a74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fd59 	bl	800152c <HAL_GetTick>
 8002a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fd54 	bl	800152c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d902      	bls.n	8002a96 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	f000 bc42 	b.w	800331a <HAL_RCC_OscConfig+0x100e>
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	fa93 f2a3 	rbit	r2, r3
 8002ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fa93 f2a3 	rbit	r2, r3
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b02:	4b69      	ldr	r3, [pc, #420]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b0e:	2102      	movs	r1, #2
 8002b10:	6019      	str	r1, [r3, #0]
 8002b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	fa93 f1a3 	rbit	r1, r3
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b28:	6019      	str	r1, [r3, #0]
  return result;
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d197      	bne.n	8002a80 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 819e 	beq.w	8002ea2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d116      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	61d3      	str	r3, [r2, #28]
 8002b84:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	4b42      	ldr	r3, [pc, #264]	@ (8002cb0 <HAL_RCC_OscConfig+0x9a4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11a      	bne.n	8002be8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <HAL_RCC_OscConfig+0x9a4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8002cb0 <HAL_RCC_OscConfig+0x9a4>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fcb5 	bl	800152c <HAL_GetTick>
 8002bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc6:	e009      	b.n	8002bdc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc8:	f7fe fcb0 	bl	800152c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b64      	cmp	r3, #100	@ 0x64
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e39e      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_OscConfig+0x9a4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ef      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d106      	bne.n	8002c06 <HAL_RCC_OscConfig+0x8fa>
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	e035      	b.n	8002c72 <HAL_RCC_OscConfig+0x966>
 8002c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x924>
 8002c16:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6213      	str	r3, [r2, #32]
 8002c22:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a20      	ldr	r2, [pc, #128]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6213      	str	r3, [r2, #32]
 8002c2e:	e020      	b.n	8002c72 <HAL_RCC_OscConfig+0x966>
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x94e>
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6213      	str	r3, [r2, #32]
 8002c4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a15      	ldr	r2, [pc, #84]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0x966>
 8002c5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6213      	str	r3, [r2, #32]
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca8 <HAL_RCC_OscConfig+0x99c>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8087 	beq.w	8002d92 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe fc52 	bl	800152c <HAL_GetTick>
 8002c88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	e012      	b.n	8002cb4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fc4d 	bl	800152c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d908      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e339      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	10908120 	.word	0x10908120
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cdc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cfa:	601a      	str	r2, [r3, #0]
  return result;
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_RCC_OscConfig+0xa10>
 8002d16:	4b98      	ldr	r3, [pc, #608]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	e013      	b.n	8002d44 <HAL_RCC_OscConfig+0xa38>
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d24:	2202      	movs	r2, #2
 8002d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f2a3 	rbit	r2, r3
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	4b8d      	ldr	r3, [pc, #564]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d48:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	6011      	str	r1, [r2, #0]
 8002d50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d54:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	fa92 f1a2 	rbit	r1, r2
 8002d5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d62:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d66:	6011      	str	r1, [r2, #0]
  return result;
 8002d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d6c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f43f af7f 	beq.w	8002c8e <HAL_RCC_OscConfig+0x982>
 8002d90:	e07d      	b.n	8002e8e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fbcb 	bl	800152c <HAL_GetTick>
 8002d96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fbc6 	bl	800152c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e2b2      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002de0:	2202      	movs	r2, #2
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dfa:	601a      	str	r2, [r3, #0]
  return result;
 8002dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e00:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_OscConfig+0xb10>
 8002e16:	4b58      	ldr	r3, [pc, #352]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	e013      	b.n	8002e44 <HAL_RCC_OscConfig+0xb38>
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4b4d      	ldr	r3, [pc, #308]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e48:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	6011      	str	r1, [r2, #0]
 8002e50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e54:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	fa92 f1a2 	rbit	r1, r2
 8002e5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e62:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e66:	6011      	str	r1, [r2, #0]
  return result;
 8002e68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e6c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d186      	bne.n	8002d9c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e8e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b38      	ldr	r3, [pc, #224]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a37      	ldr	r2, [pc, #220]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8232 	beq.w	8003318 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb4:	4b30      	ldr	r3, [pc, #192]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	f000 8201 	beq.w	80032c4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	f040 8157 	bne.w	8003182 <HAL_RCC_OscConfig+0xe76>
 8002ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002edc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ef8:	601a      	str	r2, [r3, #0]
  return result;
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f02:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fb07 	bl	800152c <HAL_GetTick>
 8002f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	e009      	b.n	8002f38 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fb02 	bl	800152c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e1f0      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 8002f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f5c:	601a      	str	r2, [r3, #0]
  return result;
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f70:	d804      	bhi.n	8002f7c <HAL_RCC_OscConfig+0xc70>
 8002f72:	4b01      	ldr	r3, [pc, #4]	@ (8002f78 <HAL_RCC_OscConfig+0xc6c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e029      	b.n	8002fcc <HAL_RCC_OscConfig+0xcc0>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002faa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	4bc3      	ldr	r3, [pc, #780]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fd0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002fd4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fd8:	6011      	str	r1, [r2, #0]
 8002fda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fde:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fa92 f1a2 	rbit	r1, r2
 8002fe8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ff0:	6011      	str	r1, [r2, #0]
  return result;
 8002ff2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ff6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d185      	bne.n	8002f24 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003018:	4baf      	ldr	r3, [pc, #700]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003024:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800302c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003030:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	430b      	orrs	r3, r1
 800303a:	49a7      	ldr	r1, [pc, #668]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003048:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800304c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003060:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003064:	601a      	str	r2, [r3, #0]
  return result;
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800306e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800307a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	2301      	movs	r3, #1
 8003084:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe fa51 	bl	800152c <HAL_GetTick>
 800308a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800308e:	e009      	b.n	80030a4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fa4c 	bl	800152c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e13a      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fa93 f2a3 	rbit	r2, r3
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030c8:	601a      	str	r2, [r3, #0]
  return result;
 80030ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b3f      	cmp	r3, #63	@ 0x3f
 80030dc:	d802      	bhi.n	80030e4 <HAL_RCC_OscConfig+0xdd8>
 80030de:	4b7e      	ldr	r3, [pc, #504]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e027      	b.n	8003134 <HAL_RCC_OscConfig+0xe28>
 80030e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003112:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	4b69      	ldr	r3, [pc, #420]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003138:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800313c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003140:	6011      	str	r1, [r2, #0]
 8003142:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003146:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	fa92 f1a2 	rbit	r1, r2
 8003150:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003154:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003158:	6011      	str	r1, [r2, #0]
  return result;
 800315a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800315e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f002 021f 	and.w	r2, r2, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d087      	beq.n	8003090 <HAL_RCC_OscConfig+0xd84>
 8003180:	e0ca      	b.n	8003318 <HAL_RCC_OscConfig+0x100c>
 8003182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003186:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800318a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800318e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031a6:	601a      	str	r2, [r3, #0]
  return result;
 80031a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	461a      	mov	r2, r3
 80031c4:	2300      	movs	r3, #0
 80031c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe f9b0 	bl	800152c <HAL_GetTick>
 80031cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d0:	e009      	b.n	80031e6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe f9ab 	bl	800152c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e099      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 80031e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	fa93 f2a3 	rbit	r2, r3
 8003202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003206:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800320a:	601a      	str	r2, [r3, #0]
  return result;
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003214:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b3f      	cmp	r3, #63	@ 0x3f
 800321e:	d802      	bhi.n	8003226 <HAL_RCC_OscConfig+0xf1a>
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	e027      	b.n	8003276 <HAL_RCC_OscConfig+0xf6a>
 8003226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800322e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fa93 f2a3 	rbit	r2, r3
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003254:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_RCC_OscConfig+0xfcc>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800327a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800327e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003282:	6011      	str	r1, [r2, #0]
 8003284:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003288:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	fa92 f1a2 	rbit	r1, r2
 8003292:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003296:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800329a:	6011      	str	r1, [r2, #0]
  return result;
 800329c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032a0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	fab2 f282 	clz	r2, r2
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f042 0220 	orr.w	r2, r2, #32
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f002 021f 	and.w	r2, r2, #31
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d187      	bne.n	80031d2 <HAL_RCC_OscConfig+0xec6>
 80032c2:	e029      	b.n	8003318 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d103      	bne.n	80032dc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e020      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
 80032d8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_RCC_OscConfig+0x1018>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d10b      	bne.n	8003314 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003300:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b09e      	sub	sp, #120	@ 0x78
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e154      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b89      	ldr	r3, [pc, #548]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d910      	bls.n	8003370 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b86      	ldr	r3, [pc, #536]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0207 	bic.w	r2, r3, #7
 8003356:	4984      	ldr	r1, [pc, #528]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b82      	ldr	r3, [pc, #520]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e13c      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	4b7b      	ldr	r3, [pc, #492]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4978      	ldr	r1, [pc, #480]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80cd 	beq.w	8003536 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d137      	bne.n	8003414 <HAL_RCC_ClockConfig+0xec>
 80033a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80033bc:	d802      	bhi.n	80033c4 <HAL_RCC_ClockConfig+0x9c>
 80033be:	4b6b      	ldr	r3, [pc, #428]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e00f      	b.n	80033e4 <HAL_RCC_ClockConfig+0xbc>
 80033c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80033d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80033d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033e0:	4b62      	ldr	r3, [pc, #392]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ec:	fa92 f2a2 	rbit	r2, r2
 80033f0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80033f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f002 021f 	and.w	r2, r2, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d171      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0ea      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d137      	bne.n	800348c <HAL_RCC_ClockConfig+0x164>
 800341c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003420:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800342a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b3f      	cmp	r3, #63	@ 0x3f
 8003434:	d802      	bhi.n	800343c <HAL_RCC_ClockConfig+0x114>
 8003436:	4b4d      	ldr	r3, [pc, #308]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e00f      	b.n	800345c <HAL_RCC_ClockConfig+0x134>
 800343c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003440:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
 800344a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800344e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003458:	4b44      	ldr	r3, [pc, #272]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003460:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003464:	fa92 f2a2 	rbit	r2, r2
 8003468:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800346a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800346c:	fab2 f282 	clz	r2, r2
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f042 0220 	orr.w	r2, r2, #32
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	f002 021f 	and.w	r2, r2, #31
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d135      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0ae      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
 800348c:	2302      	movs	r3, #2
 800348e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034a2:	d802      	bhi.n	80034aa <HAL_RCC_ClockConfig+0x182>
 80034a4:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	e00d      	b.n	80034c6 <HAL_RCC_ClockConfig+0x19e>
 80034aa:	2302      	movs	r3, #2
 80034ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b6:	2302      	movs	r3, #2
 80034b8:	623b      	str	r3, [r7, #32]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	2202      	movs	r2, #2
 80034c8:	61ba      	str	r2, [r7, #24]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	617a      	str	r2, [r7, #20]
  return result;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f002 021f 	and.w	r2, r2, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e07a      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f4:	4b1d      	ldr	r3, [pc, #116]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f023 0203 	bic.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	491a      	ldr	r1, [pc, #104]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003506:	f7fe f811 	bl	800152c <HAL_GetTick>
 800350a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350c:	e00a      	b.n	8003524 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350e:	f7fe f80d 	bl	800152c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e062      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	4b11      	ldr	r3, [pc, #68]	@ (800356c <HAL_RCC_ClockConfig+0x244>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 020c 	and.w	r2, r3, #12
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	429a      	cmp	r2, r3
 8003534:	d1eb      	bne.n	800350e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003536:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d215      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003544:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 0207 	bic.w	r2, r3, #7
 800354c:	4906      	ldr	r1, [pc, #24]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d006      	beq.n	8003570 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e041      	b.n	80035ea <HAL_RCC_ClockConfig+0x2c2>
 8003566:	bf00      	nop
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	491a      	ldr	r1, [pc, #104]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359a:	4b16      	ldr	r3, [pc, #88]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4912      	ldr	r1, [pc, #72]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035ae:	f000 f829 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035b2:	4601      	mov	r1, r0
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_RCC_ClockConfig+0x2cc>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035bc:	22f0      	movs	r2, #240	@ 0xf0
 80035be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	fa92 f2a2 	rbit	r2, r2
 80035c6:	60fa      	str	r2, [r7, #12]
  return result;
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	40d3      	lsrs	r3, r2
 80035d2:	4a09      	ldr	r2, [pc, #36]	@ (80035f8 <HAL_RCC_ClockConfig+0x2d0>)
 80035d4:	5cd3      	ldrb	r3, [r2, r3]
 80035d6:	fa21 f303 	lsr.w	r3, r1, r3
 80035da:	4a08      	ldr	r2, [pc, #32]	@ (80035fc <HAL_RCC_ClockConfig+0x2d4>)
 80035dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035de:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <HAL_RCC_ClockConfig+0x2d8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd ff5e 	bl	80014a4 <HAL_InitTick>
  
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3778      	adds	r7, #120	@ 0x78
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	080093d4 	.word	0x080093d4
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800361e:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x94>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b04      	cmp	r3, #4
 800362c:	d002      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x30>
 800362e:	2b08      	cmp	r3, #8
 8003630:	d003      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x36>
 8003632:	e026      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003634:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_RCC_GetSysClockFreq+0x98>)
 8003636:	613b      	str	r3, [r7, #16]
      break;
 8003638:	e026      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	0c9b      	lsrs	r3, r3, #18
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	4a17      	ldr	r2, [pc, #92]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003644:	5cd3      	ldrb	r3, [r2, r3]
 8003646:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003648:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x94>)
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003660:	4a0e      	ldr	r2, [pc, #56]	@ (800369c <HAL_RCC_GetSysClockFreq+0x98>)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	fbb2 f2f3 	udiv	r2, r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e004      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a0c      	ldr	r2, [pc, #48]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	613b      	str	r3, [r7, #16]
      break;
 8003680:	e002      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_GetSysClockFreq+0x98>)
 8003684:	613b      	str	r3, [r7, #16]
      break;
 8003686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003688:	693b      	ldr	r3, [r7, #16]
}
 800368a:	4618      	mov	r0, r3
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	007a1200 	.word	0x007a1200
 80036a0:	080093ec 	.word	0x080093ec
 80036a4:	080093fc 	.word	0x080093fc
 80036a8:	003d0900 	.word	0x003d0900

080036ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b0:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000

080036c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036ca:	f7ff ffef 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036ce:	4601      	mov	r1, r0
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80036dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	603a      	str	r2, [r7, #0]
  return result;
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	40d3      	lsrs	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	080093e4 	.word	0x080093e4

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800370e:	f7ff ffcd 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 8003712:	4601      	mov	r1, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800371c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003720:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	fa92 f2a2 	rbit	r2, r2
 8003728:	603a      	str	r2, [r7, #0]
  return result;
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	40d3      	lsrs	r3, r2
 8003734:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	080093e4 	.word	0x080093e4

0800374c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e040      	b.n	80037e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fd04 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	@ 0x24
 8003778:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fab0 	bl	8003cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f977 	bl	8003a8c <UART_SetConfig>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e01b      	b.n	80037e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fb2f 	bl	8003e3c <UART_CheckIdleState>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	@ 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d177      	bne.n	80038f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_UART_Transmit+0x24>
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e070      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2221      	movs	r2, #33	@ 0x21
 800381c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800381e:	f7fd fe85 	bl	800152c <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383c:	d108      	bne.n	8003850 <HAL_UART_Transmit+0x68>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e003      	b.n	8003858 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003858:	e02f      	b.n	80038ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	@ 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fb91 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e03b      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800388c:	b292      	uxth	r2, r2
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	3302      	adds	r3, #2
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e007      	b.n	80038a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1c9      	bne.n	800385a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2140      	movs	r1, #64	@ 0x40
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fb5b 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e005      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b08a      	sub	sp, #40	@ 0x28
 80038fe:	af02      	add	r7, sp, #8
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003910:	2b20      	cmp	r3, #32
 8003912:	f040 80b6 	bne.w	8003a82 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Receive+0x28>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0ae      	b.n	8003a84 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2222      	movs	r2, #34	@ 0x22
 8003932:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393c:	f7fd fdf6 	bl	800152c <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800395a:	d10e      	bne.n	800397a <HAL_UART_Receive+0x80>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_UART_Receive+0x76>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800396a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800396e:	e02d      	b.n	80039cc <HAL_UART_Receive+0xd2>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	22ff      	movs	r2, #255	@ 0xff
 8003974:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003978:	e028      	b.n	80039cc <HAL_UART_Receive+0xd2>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_UART_Receive+0xa4>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_Receive+0x9a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	@ 0xff
 800398e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003992:	e01b      	b.n	80039cc <HAL_UART_Receive+0xd2>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	227f      	movs	r2, #127	@ 0x7f
 8003998:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800399c:	e016      	b.n	80039cc <HAL_UART_Receive+0xd2>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039a6:	d10d      	bne.n	80039c4 <HAL_UART_Receive+0xca>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_UART_Receive+0xc0>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	227f      	movs	r2, #127	@ 0x7f
 80039b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039b8:	e008      	b.n	80039cc <HAL_UART_Receive+0xd2>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	223f      	movs	r2, #63	@ 0x3f
 80039be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039c2:	e003      	b.n	80039cc <HAL_UART_Receive+0xd2>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039dc:	d108      	bne.n	80039f0 <HAL_UART_Receive+0xf6>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	e003      	b.n	80039f8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80039f8:	e037      	b.n	8003a6a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2120      	movs	r1, #32
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fac1 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e033      	b.n	8003a84 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	8a7b      	ldrh	r3, [r7, #18]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	3302      	adds	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e00d      	b.n	8003a58 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	8a7b      	ldrh	r3, [r7, #18]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1c1      	bne.n	80039fa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8003ce0 <UART_SetConfig+0x254>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a78      	ldr	r2, [pc, #480]	@ (8003ce4 <UART_SetConfig+0x258>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d120      	bne.n	8003b4a <UART_SetConfig+0xbe>
 8003b08:	4b77      	ldr	r3, [pc, #476]	@ (8003ce8 <UART_SetConfig+0x25c>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d817      	bhi.n	8003b44 <UART_SetConfig+0xb8>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <UART_SetConfig+0x90>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b3f 	.word	0x08003b3f
 8003b28:	08003b33 	.word	0x08003b33
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e01d      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b32:	2302      	movs	r3, #2
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e01a      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e017      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e014      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b44:	2310      	movs	r3, #16
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e011      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a67      	ldr	r2, [pc, #412]	@ (8003cec <UART_SetConfig+0x260>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d102      	bne.n	8003b5a <UART_SetConfig+0xce>
 8003b54:	2300      	movs	r3, #0
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a64      	ldr	r2, [pc, #400]	@ (8003cf0 <UART_SetConfig+0x264>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d102      	bne.n	8003b6a <UART_SetConfig+0xde>
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e001      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b76:	d15a      	bne.n	8003c2e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003b78:	7ffb      	ldrb	r3, [r7, #31]
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d827      	bhi.n	8003bce <UART_SetConfig+0x142>
 8003b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <UART_SetConfig+0xf8>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bcf 	.word	0x08003bcf
 8003b94:	08003bbf 	.word	0x08003bbf
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bcf 	.word	0x08003bcf
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7ff fd8c 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8003bac:	61b8      	str	r0, [r7, #24]
        break;
 8003bae:	e013      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7ff fdaa 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8003bb4:	61b8      	str	r0, [r7, #24]
        break;
 8003bb6:	e00f      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf4 <UART_SetConfig+0x268>)
 8003bba:	61bb      	str	r3, [r7, #24]
        break;
 8003bbc:	e00c      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7ff fd21 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8003bc2:	61b8      	str	r0, [r7, #24]
        break;
 8003bc4:	e008      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bca:	61bb      	str	r3, [r7, #24]
        break;
 8003bcc:	e004      	b.n	8003bd8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d074      	beq.n	8003cc8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	d916      	bls.n	8003c28 <UART_SetConfig+0x19c>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c00:	d212      	bcs.n	8003c28 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f023 030f 	bic.w	r3, r3, #15
 8003c0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	89fa      	ldrh	r2, [r7, #14]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	e04f      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77bb      	strb	r3, [r7, #30]
 8003c2c:	e04c      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d828      	bhi.n	8003c86 <UART_SetConfig+0x1fa>
 8003c34:	a201      	add	r2, pc, #4	@ (adr r2, 8003c3c <UART_SetConfig+0x1b0>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c87 	.word	0x08003c87
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003c87 	.word	0x08003c87
 8003c54:	08003c87 	.word	0x08003c87
 8003c58:	08003c87 	.word	0x08003c87
 8003c5c:	08003c7f 	.word	0x08003c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7ff fd30 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8003c64:	61b8      	str	r0, [r7, #24]
        break;
 8003c66:	e013      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7ff fd4e 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8003c6c:	61b8      	str	r0, [r7, #24]
        break;
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c70:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <UART_SetConfig+0x268>)
 8003c72:	61bb      	str	r3, [r7, #24]
        break;
 8003c74:	e00c      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c76:	f7ff fcc5 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8003c7a:	61b8      	str	r0, [r7, #24]
        break;
 8003c7c:	e008      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c82:	61bb      	str	r3, [r7, #24]
        break;
 8003c84:	e004      	b.n	8003c90 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d018      	beq.n	8003cc8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085a      	lsrs	r2, r3, #1
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b0f      	cmp	r3, #15
 8003cae:	d909      	bls.n	8003cc4 <UART_SetConfig+0x238>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb6:	d205      	bcs.n	8003cc4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	efff69f3 	.word	0xefff69f3
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40004400 	.word	0x40004400
 8003cf0:	40004800 	.word	0x40004800
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df6:	d10a      	bne.n	8003e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b098      	sub	sp, #96	@ 0x60
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e4c:	f7fd fb6e 	bl	800152c <HAL_GetTick>
 8003e50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d12e      	bne.n	8003ebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f88c 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d021      	beq.n	8003ebe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e6      	bne.n	8003e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e062      	b.n	8003f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d149      	bne.n	8003f60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f856 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03c      	beq.n	8003f60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e6      	bne.n	8003ee6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f38:	61fa      	str	r2, [r7, #28]
 8003f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	617b      	str	r3, [r7, #20]
   return(result);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e011      	b.n	8003f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3758      	adds	r7, #88	@ 0x58
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9c:	e04f      	b.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa4:	d04b      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7fd fac1 	bl	800152c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e04e      	b.n	800405e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d037      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b80      	cmp	r3, #128	@ 0x80
 8003fd2:	d034      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b40      	cmp	r3, #64	@ 0x40
 8003fd8:	d031      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d110      	bne.n	800400a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2208      	movs	r2, #8
 8003fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f838 	bl	8004066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e029      	b.n	800405e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004018:	d111      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f81e 	bl	8004066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e00f      	b.n	800405e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	429a      	cmp	r2, r3
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	429a      	cmp	r2, r3
 800405a:	d0a0      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004066:	b480      	push	{r7}
 8004068:	b095      	sub	sp, #84	@ 0x54
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800408c:	643b      	str	r3, [r7, #64]	@ 0x40
 800408e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d118      	bne.n	800410e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 0310 	bic.w	r3, r3, #16
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004122:	bf00      	nop
 8004124:	3754      	adds	r7, #84	@ 0x54
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <__cvt>:
 800412e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004132:	ec57 6b10 	vmov	r6, r7, d0
 8004136:	2f00      	cmp	r7, #0
 8004138:	460c      	mov	r4, r1
 800413a:	4619      	mov	r1, r3
 800413c:	463b      	mov	r3, r7
 800413e:	bfbb      	ittet	lt
 8004140:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004144:	461f      	movlt	r7, r3
 8004146:	2300      	movge	r3, #0
 8004148:	232d      	movlt	r3, #45	@ 0x2d
 800414a:	700b      	strb	r3, [r1, #0]
 800414c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800414e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004152:	4691      	mov	r9, r2
 8004154:	f023 0820 	bic.w	r8, r3, #32
 8004158:	bfbc      	itt	lt
 800415a:	4632      	movlt	r2, r6
 800415c:	4616      	movlt	r6, r2
 800415e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004162:	d005      	beq.n	8004170 <__cvt+0x42>
 8004164:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004168:	d100      	bne.n	800416c <__cvt+0x3e>
 800416a:	3401      	adds	r4, #1
 800416c:	2102      	movs	r1, #2
 800416e:	e000      	b.n	8004172 <__cvt+0x44>
 8004170:	2103      	movs	r1, #3
 8004172:	ab03      	add	r3, sp, #12
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	ab02      	add	r3, sp, #8
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	ec47 6b10 	vmov	d0, r6, r7
 800417e:	4653      	mov	r3, sl
 8004180:	4622      	mov	r2, r4
 8004182:	f001 f945 	bl	8005410 <_dtoa_r>
 8004186:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800418a:	4605      	mov	r5, r0
 800418c:	d119      	bne.n	80041c2 <__cvt+0x94>
 800418e:	f019 0f01 	tst.w	r9, #1
 8004192:	d00e      	beq.n	80041b2 <__cvt+0x84>
 8004194:	eb00 0904 	add.w	r9, r0, r4
 8004198:	2200      	movs	r2, #0
 800419a:	2300      	movs	r3, #0
 800419c:	4630      	mov	r0, r6
 800419e:	4639      	mov	r1, r7
 80041a0:	f7fc fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80041a4:	b108      	cbz	r0, 80041aa <__cvt+0x7c>
 80041a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80041aa:	2230      	movs	r2, #48	@ 0x30
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	454b      	cmp	r3, r9
 80041b0:	d31e      	bcc.n	80041f0 <__cvt+0xc2>
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80041b6:	1b5b      	subs	r3, r3, r5
 80041b8:	4628      	mov	r0, r5
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	b004      	add	sp, #16
 80041be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80041c6:	eb00 0904 	add.w	r9, r0, r4
 80041ca:	d1e5      	bne.n	8004198 <__cvt+0x6a>
 80041cc:	7803      	ldrb	r3, [r0, #0]
 80041ce:	2b30      	cmp	r3, #48	@ 0x30
 80041d0:	d10a      	bne.n	80041e8 <__cvt+0xba>
 80041d2:	2200      	movs	r2, #0
 80041d4:	2300      	movs	r3, #0
 80041d6:	4630      	mov	r0, r6
 80041d8:	4639      	mov	r1, r7
 80041da:	f7fc fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80041de:	b918      	cbnz	r0, 80041e8 <__cvt+0xba>
 80041e0:	f1c4 0401 	rsb	r4, r4, #1
 80041e4:	f8ca 4000 	str.w	r4, [sl]
 80041e8:	f8da 3000 	ldr.w	r3, [sl]
 80041ec:	4499      	add	r9, r3
 80041ee:	e7d3      	b.n	8004198 <__cvt+0x6a>
 80041f0:	1c59      	adds	r1, r3, #1
 80041f2:	9103      	str	r1, [sp, #12]
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e7d9      	b.n	80041ac <__cvt+0x7e>

080041f8 <__exponent>:
 80041f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041fa:	2900      	cmp	r1, #0
 80041fc:	bfba      	itte	lt
 80041fe:	4249      	neglt	r1, r1
 8004200:	232d      	movlt	r3, #45	@ 0x2d
 8004202:	232b      	movge	r3, #43	@ 0x2b
 8004204:	2909      	cmp	r1, #9
 8004206:	7002      	strb	r2, [r0, #0]
 8004208:	7043      	strb	r3, [r0, #1]
 800420a:	dd29      	ble.n	8004260 <__exponent+0x68>
 800420c:	f10d 0307 	add.w	r3, sp, #7
 8004210:	461d      	mov	r5, r3
 8004212:	270a      	movs	r7, #10
 8004214:	461a      	mov	r2, r3
 8004216:	fbb1 f6f7 	udiv	r6, r1, r7
 800421a:	fb07 1416 	mls	r4, r7, r6, r1
 800421e:	3430      	adds	r4, #48	@ 0x30
 8004220:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004224:	460c      	mov	r4, r1
 8004226:	2c63      	cmp	r4, #99	@ 0x63
 8004228:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800422c:	4631      	mov	r1, r6
 800422e:	dcf1      	bgt.n	8004214 <__exponent+0x1c>
 8004230:	3130      	adds	r1, #48	@ 0x30
 8004232:	1e94      	subs	r4, r2, #2
 8004234:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004238:	1c41      	adds	r1, r0, #1
 800423a:	4623      	mov	r3, r4
 800423c:	42ab      	cmp	r3, r5
 800423e:	d30a      	bcc.n	8004256 <__exponent+0x5e>
 8004240:	f10d 0309 	add.w	r3, sp, #9
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	42ac      	cmp	r4, r5
 8004248:	bf88      	it	hi
 800424a:	2300      	movhi	r3, #0
 800424c:	3302      	adds	r3, #2
 800424e:	4403      	add	r3, r0
 8004250:	1a18      	subs	r0, r3, r0
 8004252:	b003      	add	sp, #12
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004256:	f813 6b01 	ldrb.w	r6, [r3], #1
 800425a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800425e:	e7ed      	b.n	800423c <__exponent+0x44>
 8004260:	2330      	movs	r3, #48	@ 0x30
 8004262:	3130      	adds	r1, #48	@ 0x30
 8004264:	7083      	strb	r3, [r0, #2]
 8004266:	70c1      	strb	r1, [r0, #3]
 8004268:	1d03      	adds	r3, r0, #4
 800426a:	e7f1      	b.n	8004250 <__exponent+0x58>

0800426c <_printf_float>:
 800426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004270:	b08d      	sub	sp, #52	@ 0x34
 8004272:	460c      	mov	r4, r1
 8004274:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004278:	4616      	mov	r6, r2
 800427a:	461f      	mov	r7, r3
 800427c:	4605      	mov	r5, r0
 800427e:	f000 ffc1 	bl	8005204 <_localeconv_r>
 8004282:	6803      	ldr	r3, [r0, #0]
 8004284:	9304      	str	r3, [sp, #16]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fb fff2 	bl	8000270 <strlen>
 800428c:	2300      	movs	r3, #0
 800428e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004290:	f8d8 3000 	ldr.w	r3, [r8]
 8004294:	9005      	str	r0, [sp, #20]
 8004296:	3307      	adds	r3, #7
 8004298:	f023 0307 	bic.w	r3, r3, #7
 800429c:	f103 0208 	add.w	r2, r3, #8
 80042a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80042a4:	f8d4 b000 	ldr.w	fp, [r4]
 80042a8:	f8c8 2000 	str.w	r2, [r8]
 80042ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80042b4:	9307      	str	r3, [sp, #28]
 80042b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80042ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80042be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004534 <_printf_float+0x2c8>)
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042c8:	f7fc fc30 	bl	8000b2c <__aeabi_dcmpun>
 80042cc:	bb70      	cbnz	r0, 800432c <_printf_float+0xc0>
 80042ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042d2:	4b98      	ldr	r3, [pc, #608]	@ (8004534 <_printf_float+0x2c8>)
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042d8:	f7fc fc0a 	bl	8000af0 <__aeabi_dcmple>
 80042dc:	bb30      	cbnz	r0, 800432c <_printf_float+0xc0>
 80042de:	2200      	movs	r2, #0
 80042e0:	2300      	movs	r3, #0
 80042e2:	4640      	mov	r0, r8
 80042e4:	4649      	mov	r1, r9
 80042e6:	f7fc fbf9 	bl	8000adc <__aeabi_dcmplt>
 80042ea:	b110      	cbz	r0, 80042f2 <_printf_float+0x86>
 80042ec:	232d      	movs	r3, #45	@ 0x2d
 80042ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042f2:	4a91      	ldr	r2, [pc, #580]	@ (8004538 <_printf_float+0x2cc>)
 80042f4:	4b91      	ldr	r3, [pc, #580]	@ (800453c <_printf_float+0x2d0>)
 80042f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80042fa:	bf8c      	ite	hi
 80042fc:	4690      	movhi	r8, r2
 80042fe:	4698      	movls	r8, r3
 8004300:	2303      	movs	r3, #3
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	f02b 0304 	bic.w	r3, fp, #4
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	f04f 0900 	mov.w	r9, #0
 800430e:	9700      	str	r7, [sp, #0]
 8004310:	4633      	mov	r3, r6
 8004312:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f9d2 	bl	80046c0 <_printf_common>
 800431c:	3001      	adds	r0, #1
 800431e:	f040 808d 	bne.w	800443c <_printf_float+0x1d0>
 8004322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004326:	b00d      	add	sp, #52	@ 0x34
 8004328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	4640      	mov	r0, r8
 8004332:	4649      	mov	r1, r9
 8004334:	f7fc fbfa 	bl	8000b2c <__aeabi_dcmpun>
 8004338:	b140      	cbz	r0, 800434c <_printf_float+0xe0>
 800433a:	464b      	mov	r3, r9
 800433c:	2b00      	cmp	r3, #0
 800433e:	bfbc      	itt	lt
 8004340:	232d      	movlt	r3, #45	@ 0x2d
 8004342:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004346:	4a7e      	ldr	r2, [pc, #504]	@ (8004540 <_printf_float+0x2d4>)
 8004348:	4b7e      	ldr	r3, [pc, #504]	@ (8004544 <_printf_float+0x2d8>)
 800434a:	e7d4      	b.n	80042f6 <_printf_float+0x8a>
 800434c:	6863      	ldr	r3, [r4, #4]
 800434e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004352:	9206      	str	r2, [sp, #24]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	d13b      	bne.n	80043d0 <_printf_float+0x164>
 8004358:	2306      	movs	r3, #6
 800435a:	6063      	str	r3, [r4, #4]
 800435c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004360:	2300      	movs	r3, #0
 8004362:	6022      	str	r2, [r4, #0]
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	ab0a      	add	r3, sp, #40	@ 0x28
 8004368:	e9cd a301 	strd	sl, r3, [sp, #4]
 800436c:	ab09      	add	r3, sp, #36	@ 0x24
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	6861      	ldr	r1, [r4, #4]
 8004372:	ec49 8b10 	vmov	d0, r8, r9
 8004376:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800437a:	4628      	mov	r0, r5
 800437c:	f7ff fed7 	bl	800412e <__cvt>
 8004380:	9b06      	ldr	r3, [sp, #24]
 8004382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004384:	2b47      	cmp	r3, #71	@ 0x47
 8004386:	4680      	mov	r8, r0
 8004388:	d129      	bne.n	80043de <_printf_float+0x172>
 800438a:	1cc8      	adds	r0, r1, #3
 800438c:	db02      	blt.n	8004394 <_printf_float+0x128>
 800438e:	6863      	ldr	r3, [r4, #4]
 8004390:	4299      	cmp	r1, r3
 8004392:	dd41      	ble.n	8004418 <_printf_float+0x1ac>
 8004394:	f1aa 0a02 	sub.w	sl, sl, #2
 8004398:	fa5f fa8a 	uxtb.w	sl, sl
 800439c:	3901      	subs	r1, #1
 800439e:	4652      	mov	r2, sl
 80043a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80043a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80043a6:	f7ff ff27 	bl	80041f8 <__exponent>
 80043aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80043ac:	1813      	adds	r3, r2, r0
 80043ae:	2a01      	cmp	r2, #1
 80043b0:	4681      	mov	r9, r0
 80043b2:	6123      	str	r3, [r4, #16]
 80043b4:	dc02      	bgt.n	80043bc <_printf_float+0x150>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	07d2      	lsls	r2, r2, #31
 80043ba:	d501      	bpl.n	80043c0 <_printf_float+0x154>
 80043bc:	3301      	adds	r3, #1
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0a2      	beq.n	800430e <_printf_float+0xa2>
 80043c8:	232d      	movs	r3, #45	@ 0x2d
 80043ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ce:	e79e      	b.n	800430e <_printf_float+0xa2>
 80043d0:	9a06      	ldr	r2, [sp, #24]
 80043d2:	2a47      	cmp	r2, #71	@ 0x47
 80043d4:	d1c2      	bne.n	800435c <_printf_float+0xf0>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1c0      	bne.n	800435c <_printf_float+0xf0>
 80043da:	2301      	movs	r3, #1
 80043dc:	e7bd      	b.n	800435a <_printf_float+0xee>
 80043de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043e2:	d9db      	bls.n	800439c <_printf_float+0x130>
 80043e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80043e8:	d118      	bne.n	800441c <_printf_float+0x1b0>
 80043ea:	2900      	cmp	r1, #0
 80043ec:	6863      	ldr	r3, [r4, #4]
 80043ee:	dd0b      	ble.n	8004408 <_printf_float+0x19c>
 80043f0:	6121      	str	r1, [r4, #16]
 80043f2:	b913      	cbnz	r3, 80043fa <_printf_float+0x18e>
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	07d0      	lsls	r0, r2, #31
 80043f8:	d502      	bpl.n	8004400 <_printf_float+0x194>
 80043fa:	3301      	adds	r3, #1
 80043fc:	440b      	add	r3, r1
 80043fe:	6123      	str	r3, [r4, #16]
 8004400:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004402:	f04f 0900 	mov.w	r9, #0
 8004406:	e7db      	b.n	80043c0 <_printf_float+0x154>
 8004408:	b913      	cbnz	r3, 8004410 <_printf_float+0x1a4>
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	07d2      	lsls	r2, r2, #31
 800440e:	d501      	bpl.n	8004414 <_printf_float+0x1a8>
 8004410:	3302      	adds	r3, #2
 8004412:	e7f4      	b.n	80043fe <_printf_float+0x192>
 8004414:	2301      	movs	r3, #1
 8004416:	e7f2      	b.n	80043fe <_printf_float+0x192>
 8004418:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800441c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800441e:	4299      	cmp	r1, r3
 8004420:	db05      	blt.n	800442e <_printf_float+0x1c2>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	6121      	str	r1, [r4, #16]
 8004426:	07d8      	lsls	r0, r3, #31
 8004428:	d5ea      	bpl.n	8004400 <_printf_float+0x194>
 800442a:	1c4b      	adds	r3, r1, #1
 800442c:	e7e7      	b.n	80043fe <_printf_float+0x192>
 800442e:	2900      	cmp	r1, #0
 8004430:	bfd4      	ite	le
 8004432:	f1c1 0202 	rsble	r2, r1, #2
 8004436:	2201      	movgt	r2, #1
 8004438:	4413      	add	r3, r2
 800443a:	e7e0      	b.n	80043fe <_printf_float+0x192>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	055a      	lsls	r2, r3, #21
 8004440:	d407      	bmi.n	8004452 <_printf_float+0x1e6>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	4642      	mov	r2, r8
 8004446:	4631      	mov	r1, r6
 8004448:	4628      	mov	r0, r5
 800444a:	47b8      	blx	r7
 800444c:	3001      	adds	r0, #1
 800444e:	d12b      	bne.n	80044a8 <_printf_float+0x23c>
 8004450:	e767      	b.n	8004322 <_printf_float+0xb6>
 8004452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004456:	f240 80dd 	bls.w	8004614 <_printf_float+0x3a8>
 800445a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800445e:	2200      	movs	r2, #0
 8004460:	2300      	movs	r3, #0
 8004462:	f7fc fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8004466:	2800      	cmp	r0, #0
 8004468:	d033      	beq.n	80044d2 <_printf_float+0x266>
 800446a:	4a37      	ldr	r2, [pc, #220]	@ (8004548 <_printf_float+0x2dc>)
 800446c:	2301      	movs	r3, #1
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	47b8      	blx	r7
 8004474:	3001      	adds	r0, #1
 8004476:	f43f af54 	beq.w	8004322 <_printf_float+0xb6>
 800447a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800447e:	4543      	cmp	r3, r8
 8004480:	db02      	blt.n	8004488 <_printf_float+0x21c>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	07d8      	lsls	r0, r3, #31
 8004486:	d50f      	bpl.n	80044a8 <_printf_float+0x23c>
 8004488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	f43f af45 	beq.w	8004322 <_printf_float+0xb6>
 8004498:	f04f 0900 	mov.w	r9, #0
 800449c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80044a0:	f104 0a1a 	add.w	sl, r4, #26
 80044a4:	45c8      	cmp	r8, r9
 80044a6:	dc09      	bgt.n	80044bc <_printf_float+0x250>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	079b      	lsls	r3, r3, #30
 80044ac:	f100 8103 	bmi.w	80046b6 <_printf_float+0x44a>
 80044b0:	68e0      	ldr	r0, [r4, #12]
 80044b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044b4:	4298      	cmp	r0, r3
 80044b6:	bfb8      	it	lt
 80044b8:	4618      	movlt	r0, r3
 80044ba:	e734      	b.n	8004326 <_printf_float+0xba>
 80044bc:	2301      	movs	r3, #1
 80044be:	4652      	mov	r2, sl
 80044c0:	4631      	mov	r1, r6
 80044c2:	4628      	mov	r0, r5
 80044c4:	47b8      	blx	r7
 80044c6:	3001      	adds	r0, #1
 80044c8:	f43f af2b 	beq.w	8004322 <_printf_float+0xb6>
 80044cc:	f109 0901 	add.w	r9, r9, #1
 80044d0:	e7e8      	b.n	80044a4 <_printf_float+0x238>
 80044d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	dc39      	bgt.n	800454c <_printf_float+0x2e0>
 80044d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <_printf_float+0x2dc>)
 80044da:	2301      	movs	r3, #1
 80044dc:	4631      	mov	r1, r6
 80044de:	4628      	mov	r0, r5
 80044e0:	47b8      	blx	r7
 80044e2:	3001      	adds	r0, #1
 80044e4:	f43f af1d 	beq.w	8004322 <_printf_float+0xb6>
 80044e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80044ec:	ea59 0303 	orrs.w	r3, r9, r3
 80044f0:	d102      	bne.n	80044f8 <_printf_float+0x28c>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	07d9      	lsls	r1, r3, #31
 80044f6:	d5d7      	bpl.n	80044a8 <_printf_float+0x23c>
 80044f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044fc:	4631      	mov	r1, r6
 80044fe:	4628      	mov	r0, r5
 8004500:	47b8      	blx	r7
 8004502:	3001      	adds	r0, #1
 8004504:	f43f af0d 	beq.w	8004322 <_printf_float+0xb6>
 8004508:	f04f 0a00 	mov.w	sl, #0
 800450c:	f104 0b1a 	add.w	fp, r4, #26
 8004510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004512:	425b      	negs	r3, r3
 8004514:	4553      	cmp	r3, sl
 8004516:	dc01      	bgt.n	800451c <_printf_float+0x2b0>
 8004518:	464b      	mov	r3, r9
 800451a:	e793      	b.n	8004444 <_printf_float+0x1d8>
 800451c:	2301      	movs	r3, #1
 800451e:	465a      	mov	r2, fp
 8004520:	4631      	mov	r1, r6
 8004522:	4628      	mov	r0, r5
 8004524:	47b8      	blx	r7
 8004526:	3001      	adds	r0, #1
 8004528:	f43f aefb 	beq.w	8004322 <_printf_float+0xb6>
 800452c:	f10a 0a01 	add.w	sl, sl, #1
 8004530:	e7ee      	b.n	8004510 <_printf_float+0x2a4>
 8004532:	bf00      	nop
 8004534:	7fefffff 	.word	0x7fefffff
 8004538:	08009410 	.word	0x08009410
 800453c:	0800940c 	.word	0x0800940c
 8004540:	08009418 	.word	0x08009418
 8004544:	08009414 	.word	0x08009414
 8004548:	08009552 	.word	0x08009552
 800454c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800454e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004552:	4553      	cmp	r3, sl
 8004554:	bfa8      	it	ge
 8004556:	4653      	movge	r3, sl
 8004558:	2b00      	cmp	r3, #0
 800455a:	4699      	mov	r9, r3
 800455c:	dc36      	bgt.n	80045cc <_printf_float+0x360>
 800455e:	f04f 0b00 	mov.w	fp, #0
 8004562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004566:	f104 021a 	add.w	r2, r4, #26
 800456a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800456c:	9306      	str	r3, [sp, #24]
 800456e:	eba3 0309 	sub.w	r3, r3, r9
 8004572:	455b      	cmp	r3, fp
 8004574:	dc31      	bgt.n	80045da <_printf_float+0x36e>
 8004576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004578:	459a      	cmp	sl, r3
 800457a:	dc3a      	bgt.n	80045f2 <_printf_float+0x386>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	07da      	lsls	r2, r3, #31
 8004580:	d437      	bmi.n	80045f2 <_printf_float+0x386>
 8004582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004584:	ebaa 0903 	sub.w	r9, sl, r3
 8004588:	9b06      	ldr	r3, [sp, #24]
 800458a:	ebaa 0303 	sub.w	r3, sl, r3
 800458e:	4599      	cmp	r9, r3
 8004590:	bfa8      	it	ge
 8004592:	4699      	movge	r9, r3
 8004594:	f1b9 0f00 	cmp.w	r9, #0
 8004598:	dc33      	bgt.n	8004602 <_printf_float+0x396>
 800459a:	f04f 0800 	mov.w	r8, #0
 800459e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045a2:	f104 0b1a 	add.w	fp, r4, #26
 80045a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045a8:	ebaa 0303 	sub.w	r3, sl, r3
 80045ac:	eba3 0309 	sub.w	r3, r3, r9
 80045b0:	4543      	cmp	r3, r8
 80045b2:	f77f af79 	ble.w	80044a8 <_printf_float+0x23c>
 80045b6:	2301      	movs	r3, #1
 80045b8:	465a      	mov	r2, fp
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	f43f aeae 	beq.w	8004322 <_printf_float+0xb6>
 80045c6:	f108 0801 	add.w	r8, r8, #1
 80045ca:	e7ec      	b.n	80045a6 <_printf_float+0x33a>
 80045cc:	4642      	mov	r2, r8
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	d1c2      	bne.n	800455e <_printf_float+0x2f2>
 80045d8:	e6a3      	b.n	8004322 <_printf_float+0xb6>
 80045da:	2301      	movs	r3, #1
 80045dc:	4631      	mov	r1, r6
 80045de:	4628      	mov	r0, r5
 80045e0:	9206      	str	r2, [sp, #24]
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f ae9c 	beq.w	8004322 <_printf_float+0xb6>
 80045ea:	9a06      	ldr	r2, [sp, #24]
 80045ec:	f10b 0b01 	add.w	fp, fp, #1
 80045f0:	e7bb      	b.n	800456a <_printf_float+0x2fe>
 80045f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	d1c0      	bne.n	8004582 <_printf_float+0x316>
 8004600:	e68f      	b.n	8004322 <_printf_float+0xb6>
 8004602:	9a06      	ldr	r2, [sp, #24]
 8004604:	464b      	mov	r3, r9
 8004606:	4442      	add	r2, r8
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	d1c3      	bne.n	800459a <_printf_float+0x32e>
 8004612:	e686      	b.n	8004322 <_printf_float+0xb6>
 8004614:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004618:	f1ba 0f01 	cmp.w	sl, #1
 800461c:	dc01      	bgt.n	8004622 <_printf_float+0x3b6>
 800461e:	07db      	lsls	r3, r3, #31
 8004620:	d536      	bpl.n	8004690 <_printf_float+0x424>
 8004622:	2301      	movs	r3, #1
 8004624:	4642      	mov	r2, r8
 8004626:	4631      	mov	r1, r6
 8004628:	4628      	mov	r0, r5
 800462a:	47b8      	blx	r7
 800462c:	3001      	adds	r0, #1
 800462e:	f43f ae78 	beq.w	8004322 <_printf_float+0xb6>
 8004632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004636:	4631      	mov	r1, r6
 8004638:	4628      	mov	r0, r5
 800463a:	47b8      	blx	r7
 800463c:	3001      	adds	r0, #1
 800463e:	f43f ae70 	beq.w	8004322 <_printf_float+0xb6>
 8004642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004646:	2200      	movs	r2, #0
 8004648:	2300      	movs	r3, #0
 800464a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800464e:	f7fc fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004652:	b9c0      	cbnz	r0, 8004686 <_printf_float+0x41a>
 8004654:	4653      	mov	r3, sl
 8004656:	f108 0201 	add.w	r2, r8, #1
 800465a:	4631      	mov	r1, r6
 800465c:	4628      	mov	r0, r5
 800465e:	47b8      	blx	r7
 8004660:	3001      	adds	r0, #1
 8004662:	d10c      	bne.n	800467e <_printf_float+0x412>
 8004664:	e65d      	b.n	8004322 <_printf_float+0xb6>
 8004666:	2301      	movs	r3, #1
 8004668:	465a      	mov	r2, fp
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	f43f ae56 	beq.w	8004322 <_printf_float+0xb6>
 8004676:	f108 0801 	add.w	r8, r8, #1
 800467a:	45d0      	cmp	r8, sl
 800467c:	dbf3      	blt.n	8004666 <_printf_float+0x3fa>
 800467e:	464b      	mov	r3, r9
 8004680:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004684:	e6df      	b.n	8004446 <_printf_float+0x1da>
 8004686:	f04f 0800 	mov.w	r8, #0
 800468a:	f104 0b1a 	add.w	fp, r4, #26
 800468e:	e7f4      	b.n	800467a <_printf_float+0x40e>
 8004690:	2301      	movs	r3, #1
 8004692:	4642      	mov	r2, r8
 8004694:	e7e1      	b.n	800465a <_printf_float+0x3ee>
 8004696:	2301      	movs	r3, #1
 8004698:	464a      	mov	r2, r9
 800469a:	4631      	mov	r1, r6
 800469c:	4628      	mov	r0, r5
 800469e:	47b8      	blx	r7
 80046a0:	3001      	adds	r0, #1
 80046a2:	f43f ae3e 	beq.w	8004322 <_printf_float+0xb6>
 80046a6:	f108 0801 	add.w	r8, r8, #1
 80046aa:	68e3      	ldr	r3, [r4, #12]
 80046ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80046ae:	1a5b      	subs	r3, r3, r1
 80046b0:	4543      	cmp	r3, r8
 80046b2:	dcf0      	bgt.n	8004696 <_printf_float+0x42a>
 80046b4:	e6fc      	b.n	80044b0 <_printf_float+0x244>
 80046b6:	f04f 0800 	mov.w	r8, #0
 80046ba:	f104 0919 	add.w	r9, r4, #25
 80046be:	e7f4      	b.n	80046aa <_printf_float+0x43e>

080046c0 <_printf_common>:
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	4698      	mov	r8, r3
 80046c8:	688a      	ldr	r2, [r1, #8]
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bfb8      	it	lt
 80046d4:	4613      	movlt	r3, r2
 80046d6:	6033      	str	r3, [r6, #0]
 80046d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046dc:	4607      	mov	r7, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	b10a      	cbz	r2, 80046e6 <_printf_common+0x26>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	0699      	lsls	r1, r3, #26
 80046ea:	bf42      	ittt	mi
 80046ec:	6833      	ldrmi	r3, [r6, #0]
 80046ee:	3302      	addmi	r3, #2
 80046f0:	6033      	strmi	r3, [r6, #0]
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	f015 0506 	ands.w	r5, r5, #6
 80046f8:	d106      	bne.n	8004708 <_printf_common+0x48>
 80046fa:	f104 0a19 	add.w	sl, r4, #25
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	6832      	ldr	r2, [r6, #0]
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	42ab      	cmp	r3, r5
 8004706:	dc26      	bgt.n	8004756 <_printf_common+0x96>
 8004708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	3b00      	subs	r3, #0
 8004710:	bf18      	it	ne
 8004712:	2301      	movne	r3, #1
 8004714:	0692      	lsls	r2, r2, #26
 8004716:	d42b      	bmi.n	8004770 <_printf_common+0xb0>
 8004718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800471c:	4641      	mov	r1, r8
 800471e:	4638      	mov	r0, r7
 8004720:	47c8      	blx	r9
 8004722:	3001      	adds	r0, #1
 8004724:	d01e      	beq.n	8004764 <_printf_common+0xa4>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	6922      	ldr	r2, [r4, #16]
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf02      	ittt	eq
 8004732:	68e5      	ldreq	r5, [r4, #12]
 8004734:	6833      	ldreq	r3, [r6, #0]
 8004736:	1aed      	subeq	r5, r5, r3
 8004738:	68a3      	ldr	r3, [r4, #8]
 800473a:	bf0c      	ite	eq
 800473c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004740:	2500      	movne	r5, #0
 8004742:	4293      	cmp	r3, r2
 8004744:	bfc4      	itt	gt
 8004746:	1a9b      	subgt	r3, r3, r2
 8004748:	18ed      	addgt	r5, r5, r3
 800474a:	2600      	movs	r6, #0
 800474c:	341a      	adds	r4, #26
 800474e:	42b5      	cmp	r5, r6
 8004750:	d11a      	bne.n	8004788 <_printf_common+0xc8>
 8004752:	2000      	movs	r0, #0
 8004754:	e008      	b.n	8004768 <_printf_common+0xa8>
 8004756:	2301      	movs	r3, #1
 8004758:	4652      	mov	r2, sl
 800475a:	4641      	mov	r1, r8
 800475c:	4638      	mov	r0, r7
 800475e:	47c8      	blx	r9
 8004760:	3001      	adds	r0, #1
 8004762:	d103      	bne.n	800476c <_printf_common+0xac>
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	3501      	adds	r5, #1
 800476e:	e7c6      	b.n	80046fe <_printf_common+0x3e>
 8004770:	18e1      	adds	r1, r4, r3
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	2030      	movs	r0, #48	@ 0x30
 8004776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800477a:	4422      	add	r2, r4
 800477c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004784:	3302      	adds	r3, #2
 8004786:	e7c7      	b.n	8004718 <_printf_common+0x58>
 8004788:	2301      	movs	r3, #1
 800478a:	4622      	mov	r2, r4
 800478c:	4641      	mov	r1, r8
 800478e:	4638      	mov	r0, r7
 8004790:	47c8      	blx	r9
 8004792:	3001      	adds	r0, #1
 8004794:	d0e6      	beq.n	8004764 <_printf_common+0xa4>
 8004796:	3601      	adds	r6, #1
 8004798:	e7d9      	b.n	800474e <_printf_common+0x8e>
	...

0800479c <_printf_i>:
 800479c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	7e0f      	ldrb	r7, [r1, #24]
 80047a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a4:	2f78      	cmp	r7, #120	@ 0x78
 80047a6:	4691      	mov	r9, r2
 80047a8:	4680      	mov	r8, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	469a      	mov	sl, r3
 80047ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047b2:	d807      	bhi.n	80047c4 <_printf_i+0x28>
 80047b4:	2f62      	cmp	r7, #98	@ 0x62
 80047b6:	d80a      	bhi.n	80047ce <_printf_i+0x32>
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	f000 80d1 	beq.w	8004960 <_printf_i+0x1c4>
 80047be:	2f58      	cmp	r7, #88	@ 0x58
 80047c0:	f000 80b8 	beq.w	8004934 <_printf_i+0x198>
 80047c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047cc:	e03a      	b.n	8004844 <_printf_i+0xa8>
 80047ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047d2:	2b15      	cmp	r3, #21
 80047d4:	d8f6      	bhi.n	80047c4 <_printf_i+0x28>
 80047d6:	a101      	add	r1, pc, #4	@ (adr r1, 80047dc <_printf_i+0x40>)
 80047d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047dc:	08004835 	.word	0x08004835
 80047e0:	08004849 	.word	0x08004849
 80047e4:	080047c5 	.word	0x080047c5
 80047e8:	080047c5 	.word	0x080047c5
 80047ec:	080047c5 	.word	0x080047c5
 80047f0:	080047c5 	.word	0x080047c5
 80047f4:	08004849 	.word	0x08004849
 80047f8:	080047c5 	.word	0x080047c5
 80047fc:	080047c5 	.word	0x080047c5
 8004800:	080047c5 	.word	0x080047c5
 8004804:	080047c5 	.word	0x080047c5
 8004808:	08004947 	.word	0x08004947
 800480c:	08004873 	.word	0x08004873
 8004810:	08004901 	.word	0x08004901
 8004814:	080047c5 	.word	0x080047c5
 8004818:	080047c5 	.word	0x080047c5
 800481c:	08004969 	.word	0x08004969
 8004820:	080047c5 	.word	0x080047c5
 8004824:	08004873 	.word	0x08004873
 8004828:	080047c5 	.word	0x080047c5
 800482c:	080047c5 	.word	0x080047c5
 8004830:	08004909 	.word	0x08004909
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6032      	str	r2, [r6, #0]
 800483c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004844:	2301      	movs	r3, #1
 8004846:	e09c      	b.n	8004982 <_printf_i+0x1e6>
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	1d19      	adds	r1, r3, #4
 800484e:	6031      	str	r1, [r6, #0]
 8004850:	0606      	lsls	r6, r0, #24
 8004852:	d501      	bpl.n	8004858 <_printf_i+0xbc>
 8004854:	681d      	ldr	r5, [r3, #0]
 8004856:	e003      	b.n	8004860 <_printf_i+0xc4>
 8004858:	0645      	lsls	r5, r0, #25
 800485a:	d5fb      	bpl.n	8004854 <_printf_i+0xb8>
 800485c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004860:	2d00      	cmp	r5, #0
 8004862:	da03      	bge.n	800486c <_printf_i+0xd0>
 8004864:	232d      	movs	r3, #45	@ 0x2d
 8004866:	426d      	negs	r5, r5
 8004868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800486c:	4858      	ldr	r0, [pc, #352]	@ (80049d0 <_printf_i+0x234>)
 800486e:	230a      	movs	r3, #10
 8004870:	e011      	b.n	8004896 <_printf_i+0xfa>
 8004872:	6821      	ldr	r1, [r4, #0]
 8004874:	6833      	ldr	r3, [r6, #0]
 8004876:	0608      	lsls	r0, r1, #24
 8004878:	f853 5b04 	ldr.w	r5, [r3], #4
 800487c:	d402      	bmi.n	8004884 <_printf_i+0xe8>
 800487e:	0649      	lsls	r1, r1, #25
 8004880:	bf48      	it	mi
 8004882:	b2ad      	uxthmi	r5, r5
 8004884:	2f6f      	cmp	r7, #111	@ 0x6f
 8004886:	4852      	ldr	r0, [pc, #328]	@ (80049d0 <_printf_i+0x234>)
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	bf14      	ite	ne
 800488c:	230a      	movne	r3, #10
 800488e:	2308      	moveq	r3, #8
 8004890:	2100      	movs	r1, #0
 8004892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004896:	6866      	ldr	r6, [r4, #4]
 8004898:	60a6      	str	r6, [r4, #8]
 800489a:	2e00      	cmp	r6, #0
 800489c:	db05      	blt.n	80048aa <_printf_i+0x10e>
 800489e:	6821      	ldr	r1, [r4, #0]
 80048a0:	432e      	orrs	r6, r5
 80048a2:	f021 0104 	bic.w	r1, r1, #4
 80048a6:	6021      	str	r1, [r4, #0]
 80048a8:	d04b      	beq.n	8004942 <_printf_i+0x1a6>
 80048aa:	4616      	mov	r6, r2
 80048ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80048b0:	fb03 5711 	mls	r7, r3, r1, r5
 80048b4:	5dc7      	ldrb	r7, [r0, r7]
 80048b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048ba:	462f      	mov	r7, r5
 80048bc:	42bb      	cmp	r3, r7
 80048be:	460d      	mov	r5, r1
 80048c0:	d9f4      	bls.n	80048ac <_printf_i+0x110>
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d10b      	bne.n	80048de <_printf_i+0x142>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	07df      	lsls	r7, r3, #31
 80048ca:	d508      	bpl.n	80048de <_printf_i+0x142>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	6861      	ldr	r1, [r4, #4]
 80048d0:	4299      	cmp	r1, r3
 80048d2:	bfde      	ittt	le
 80048d4:	2330      	movle	r3, #48	@ 0x30
 80048d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80048de:	1b92      	subs	r2, r2, r6
 80048e0:	6122      	str	r2, [r4, #16]
 80048e2:	f8cd a000 	str.w	sl, [sp]
 80048e6:	464b      	mov	r3, r9
 80048e8:	aa03      	add	r2, sp, #12
 80048ea:	4621      	mov	r1, r4
 80048ec:	4640      	mov	r0, r8
 80048ee:	f7ff fee7 	bl	80046c0 <_printf_common>
 80048f2:	3001      	adds	r0, #1
 80048f4:	d14a      	bne.n	800498c <_printf_i+0x1f0>
 80048f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048fa:	b004      	add	sp, #16
 80048fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	f043 0320 	orr.w	r3, r3, #32
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	4832      	ldr	r0, [pc, #200]	@ (80049d4 <_printf_i+0x238>)
 800490a:	2778      	movs	r7, #120	@ 0x78
 800490c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	6831      	ldr	r1, [r6, #0]
 8004914:	061f      	lsls	r7, r3, #24
 8004916:	f851 5b04 	ldr.w	r5, [r1], #4
 800491a:	d402      	bmi.n	8004922 <_printf_i+0x186>
 800491c:	065f      	lsls	r7, r3, #25
 800491e:	bf48      	it	mi
 8004920:	b2ad      	uxthmi	r5, r5
 8004922:	6031      	str	r1, [r6, #0]
 8004924:	07d9      	lsls	r1, r3, #31
 8004926:	bf44      	itt	mi
 8004928:	f043 0320 	orrmi.w	r3, r3, #32
 800492c:	6023      	strmi	r3, [r4, #0]
 800492e:	b11d      	cbz	r5, 8004938 <_printf_i+0x19c>
 8004930:	2310      	movs	r3, #16
 8004932:	e7ad      	b.n	8004890 <_printf_i+0xf4>
 8004934:	4826      	ldr	r0, [pc, #152]	@ (80049d0 <_printf_i+0x234>)
 8004936:	e7e9      	b.n	800490c <_printf_i+0x170>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f023 0320 	bic.w	r3, r3, #32
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	e7f6      	b.n	8004930 <_printf_i+0x194>
 8004942:	4616      	mov	r6, r2
 8004944:	e7bd      	b.n	80048c2 <_printf_i+0x126>
 8004946:	6833      	ldr	r3, [r6, #0]
 8004948:	6825      	ldr	r5, [r4, #0]
 800494a:	6961      	ldr	r1, [r4, #20]
 800494c:	1d18      	adds	r0, r3, #4
 800494e:	6030      	str	r0, [r6, #0]
 8004950:	062e      	lsls	r6, r5, #24
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	d501      	bpl.n	800495a <_printf_i+0x1be>
 8004956:	6019      	str	r1, [r3, #0]
 8004958:	e002      	b.n	8004960 <_printf_i+0x1c4>
 800495a:	0668      	lsls	r0, r5, #25
 800495c:	d5fb      	bpl.n	8004956 <_printf_i+0x1ba>
 800495e:	8019      	strh	r1, [r3, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	6123      	str	r3, [r4, #16]
 8004964:	4616      	mov	r6, r2
 8004966:	e7bc      	b.n	80048e2 <_printf_i+0x146>
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	6032      	str	r2, [r6, #0]
 800496e:	681e      	ldr	r6, [r3, #0]
 8004970:	6862      	ldr	r2, [r4, #4]
 8004972:	2100      	movs	r1, #0
 8004974:	4630      	mov	r0, r6
 8004976:	f7fb fc2b 	bl	80001d0 <memchr>
 800497a:	b108      	cbz	r0, 8004980 <_printf_i+0x1e4>
 800497c:	1b80      	subs	r0, r0, r6
 800497e:	6060      	str	r0, [r4, #4]
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	2300      	movs	r3, #0
 8004986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800498a:	e7aa      	b.n	80048e2 <_printf_i+0x146>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	4632      	mov	r2, r6
 8004990:	4649      	mov	r1, r9
 8004992:	4640      	mov	r0, r8
 8004994:	47d0      	blx	sl
 8004996:	3001      	adds	r0, #1
 8004998:	d0ad      	beq.n	80048f6 <_printf_i+0x15a>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	079b      	lsls	r3, r3, #30
 800499e:	d413      	bmi.n	80049c8 <_printf_i+0x22c>
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	4298      	cmp	r0, r3
 80049a6:	bfb8      	it	lt
 80049a8:	4618      	movlt	r0, r3
 80049aa:	e7a6      	b.n	80048fa <_printf_i+0x15e>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4632      	mov	r2, r6
 80049b0:	4649      	mov	r1, r9
 80049b2:	4640      	mov	r0, r8
 80049b4:	47d0      	blx	sl
 80049b6:	3001      	adds	r0, #1
 80049b8:	d09d      	beq.n	80048f6 <_printf_i+0x15a>
 80049ba:	3501      	adds	r5, #1
 80049bc:	68e3      	ldr	r3, [r4, #12]
 80049be:	9903      	ldr	r1, [sp, #12]
 80049c0:	1a5b      	subs	r3, r3, r1
 80049c2:	42ab      	cmp	r3, r5
 80049c4:	dcf2      	bgt.n	80049ac <_printf_i+0x210>
 80049c6:	e7eb      	b.n	80049a0 <_printf_i+0x204>
 80049c8:	2500      	movs	r5, #0
 80049ca:	f104 0619 	add.w	r6, r4, #25
 80049ce:	e7f5      	b.n	80049bc <_printf_i+0x220>
 80049d0:	0800941c 	.word	0x0800941c
 80049d4:	0800942d 	.word	0x0800942d

080049d8 <_scanf_float>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	b087      	sub	sp, #28
 80049de:	4691      	mov	r9, r2
 80049e0:	9303      	str	r3, [sp, #12]
 80049e2:	688b      	ldr	r3, [r1, #8]
 80049e4:	1e5a      	subs	r2, r3, #1
 80049e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80049ea:	bf81      	itttt	hi
 80049ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80049f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80049f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80049f8:	608b      	strhi	r3, [r1, #8]
 80049fa:	680b      	ldr	r3, [r1, #0]
 80049fc:	460a      	mov	r2, r1
 80049fe:	f04f 0500 	mov.w	r5, #0
 8004a02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004a06:	f842 3b1c 	str.w	r3, [r2], #28
 8004a0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004a0e:	4680      	mov	r8, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	bf98      	it	ls
 8004a14:	f04f 0b00 	movls.w	fp, #0
 8004a18:	9201      	str	r2, [sp, #4]
 8004a1a:	4616      	mov	r6, r2
 8004a1c:	46aa      	mov	sl, r5
 8004a1e:	462f      	mov	r7, r5
 8004a20:	9502      	str	r5, [sp, #8]
 8004a22:	68a2      	ldr	r2, [r4, #8]
 8004a24:	b15a      	cbz	r2, 8004a3e <_scanf_float+0x66>
 8004a26:	f8d9 3000 	ldr.w	r3, [r9]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004a2e:	d863      	bhi.n	8004af8 <_scanf_float+0x120>
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d83b      	bhi.n	8004aac <_scanf_float+0xd4>
 8004a34:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004a38:	b2c8      	uxtb	r0, r1
 8004a3a:	280e      	cmp	r0, #14
 8004a3c:	d939      	bls.n	8004ab2 <_scanf_float+0xda>
 8004a3e:	b11f      	cbz	r7, 8004a48 <_scanf_float+0x70>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004a4c:	f1ba 0f01 	cmp.w	sl, #1
 8004a50:	f200 8114 	bhi.w	8004c7c <_scanf_float+0x2a4>
 8004a54:	9b01      	ldr	r3, [sp, #4]
 8004a56:	429e      	cmp	r6, r3
 8004a58:	f200 8105 	bhi.w	8004c66 <_scanf_float+0x28e>
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	b007      	add	sp, #28
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a64:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004a68:	2a0d      	cmp	r2, #13
 8004a6a:	d8e8      	bhi.n	8004a3e <_scanf_float+0x66>
 8004a6c:	a101      	add	r1, pc, #4	@ (adr r1, 8004a74 <_scanf_float+0x9c>)
 8004a6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004bbd 	.word	0x08004bbd
 8004a78:	08004a3f 	.word	0x08004a3f
 8004a7c:	08004a3f 	.word	0x08004a3f
 8004a80:	08004a3f 	.word	0x08004a3f
 8004a84:	08004c19 	.word	0x08004c19
 8004a88:	08004bf3 	.word	0x08004bf3
 8004a8c:	08004a3f 	.word	0x08004a3f
 8004a90:	08004a3f 	.word	0x08004a3f
 8004a94:	08004bcb 	.word	0x08004bcb
 8004a98:	08004a3f 	.word	0x08004a3f
 8004a9c:	08004a3f 	.word	0x08004a3f
 8004aa0:	08004a3f 	.word	0x08004a3f
 8004aa4:	08004a3f 	.word	0x08004a3f
 8004aa8:	08004b87 	.word	0x08004b87
 8004aac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004ab0:	e7da      	b.n	8004a68 <_scanf_float+0x90>
 8004ab2:	290e      	cmp	r1, #14
 8004ab4:	d8c3      	bhi.n	8004a3e <_scanf_float+0x66>
 8004ab6:	a001      	add	r0, pc, #4	@ (adr r0, 8004abc <_scanf_float+0xe4>)
 8004ab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004abc:	08004b77 	.word	0x08004b77
 8004ac0:	08004a3f 	.word	0x08004a3f
 8004ac4:	08004b77 	.word	0x08004b77
 8004ac8:	08004c07 	.word	0x08004c07
 8004acc:	08004a3f 	.word	0x08004a3f
 8004ad0:	08004b19 	.word	0x08004b19
 8004ad4:	08004b5d 	.word	0x08004b5d
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	08004b5d 	.word	0x08004b5d
 8004ae0:	08004b5d 	.word	0x08004b5d
 8004ae4:	08004b5d 	.word	0x08004b5d
 8004ae8:	08004b5d 	.word	0x08004b5d
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	2b6e      	cmp	r3, #110	@ 0x6e
 8004afa:	d809      	bhi.n	8004b10 <_scanf_float+0x138>
 8004afc:	2b60      	cmp	r3, #96	@ 0x60
 8004afe:	d8b1      	bhi.n	8004a64 <_scanf_float+0x8c>
 8004b00:	2b54      	cmp	r3, #84	@ 0x54
 8004b02:	d07b      	beq.n	8004bfc <_scanf_float+0x224>
 8004b04:	2b59      	cmp	r3, #89	@ 0x59
 8004b06:	d19a      	bne.n	8004a3e <_scanf_float+0x66>
 8004b08:	2d07      	cmp	r5, #7
 8004b0a:	d198      	bne.n	8004a3e <_scanf_float+0x66>
 8004b0c:	2508      	movs	r5, #8
 8004b0e:	e02f      	b.n	8004b70 <_scanf_float+0x198>
 8004b10:	2b74      	cmp	r3, #116	@ 0x74
 8004b12:	d073      	beq.n	8004bfc <_scanf_float+0x224>
 8004b14:	2b79      	cmp	r3, #121	@ 0x79
 8004b16:	e7f6      	b.n	8004b06 <_scanf_float+0x12e>
 8004b18:	6821      	ldr	r1, [r4, #0]
 8004b1a:	05c8      	lsls	r0, r1, #23
 8004b1c:	d51e      	bpl.n	8004b5c <_scanf_float+0x184>
 8004b1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004b22:	6021      	str	r1, [r4, #0]
 8004b24:	3701      	adds	r7, #1
 8004b26:	f1bb 0f00 	cmp.w	fp, #0
 8004b2a:	d003      	beq.n	8004b34 <_scanf_float+0x15c>
 8004b2c:	3201      	adds	r2, #1
 8004b2e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004b32:	60a2      	str	r2, [r4, #8]
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	60a3      	str	r3, [r4, #8]
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f8c9 3004 	str.w	r3, [r9, #4]
 8004b4c:	f340 8082 	ble.w	8004c54 <_scanf_float+0x27c>
 8004b50:	f8d9 3000 	ldr.w	r3, [r9]
 8004b54:	3301      	adds	r3, #1
 8004b56:	f8c9 3000 	str.w	r3, [r9]
 8004b5a:	e762      	b.n	8004a22 <_scanf_float+0x4a>
 8004b5c:	eb1a 0105 	adds.w	r1, sl, r5
 8004b60:	f47f af6d 	bne.w	8004a3e <_scanf_float+0x66>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004b6a:	6022      	str	r2, [r4, #0]
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	468a      	mov	sl, r1
 8004b70:	f806 3b01 	strb.w	r3, [r6], #1
 8004b74:	e7de      	b.n	8004b34 <_scanf_float+0x15c>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	0610      	lsls	r0, r2, #24
 8004b7a:	f57f af60 	bpl.w	8004a3e <_scanf_float+0x66>
 8004b7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	e7f4      	b.n	8004b70 <_scanf_float+0x198>
 8004b86:	f1ba 0f00 	cmp.w	sl, #0
 8004b8a:	d10c      	bne.n	8004ba6 <_scanf_float+0x1ce>
 8004b8c:	b977      	cbnz	r7, 8004bac <_scanf_float+0x1d4>
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004b94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004b98:	d108      	bne.n	8004bac <_scanf_float+0x1d4>
 8004b9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b9e:	6022      	str	r2, [r4, #0]
 8004ba0:	f04f 0a01 	mov.w	sl, #1
 8004ba4:	e7e4      	b.n	8004b70 <_scanf_float+0x198>
 8004ba6:	f1ba 0f02 	cmp.w	sl, #2
 8004baa:	d050      	beq.n	8004c4e <_scanf_float+0x276>
 8004bac:	2d01      	cmp	r5, #1
 8004bae:	d002      	beq.n	8004bb6 <_scanf_float+0x1de>
 8004bb0:	2d04      	cmp	r5, #4
 8004bb2:	f47f af44 	bne.w	8004a3e <_scanf_float+0x66>
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	b2ed      	uxtb	r5, r5
 8004bba:	e7d9      	b.n	8004b70 <_scanf_float+0x198>
 8004bbc:	f1ba 0f01 	cmp.w	sl, #1
 8004bc0:	f47f af3d 	bne.w	8004a3e <_scanf_float+0x66>
 8004bc4:	f04f 0a02 	mov.w	sl, #2
 8004bc8:	e7d2      	b.n	8004b70 <_scanf_float+0x198>
 8004bca:	b975      	cbnz	r5, 8004bea <_scanf_float+0x212>
 8004bcc:	2f00      	cmp	r7, #0
 8004bce:	f47f af37 	bne.w	8004a40 <_scanf_float+0x68>
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004bd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004bdc:	f040 8103 	bne.w	8004de6 <_scanf_float+0x40e>
 8004be0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004be4:	6022      	str	r2, [r4, #0]
 8004be6:	2501      	movs	r5, #1
 8004be8:	e7c2      	b.n	8004b70 <_scanf_float+0x198>
 8004bea:	2d03      	cmp	r5, #3
 8004bec:	d0e3      	beq.n	8004bb6 <_scanf_float+0x1de>
 8004bee:	2d05      	cmp	r5, #5
 8004bf0:	e7df      	b.n	8004bb2 <_scanf_float+0x1da>
 8004bf2:	2d02      	cmp	r5, #2
 8004bf4:	f47f af23 	bne.w	8004a3e <_scanf_float+0x66>
 8004bf8:	2503      	movs	r5, #3
 8004bfa:	e7b9      	b.n	8004b70 <_scanf_float+0x198>
 8004bfc:	2d06      	cmp	r5, #6
 8004bfe:	f47f af1e 	bne.w	8004a3e <_scanf_float+0x66>
 8004c02:	2507      	movs	r5, #7
 8004c04:	e7b4      	b.n	8004b70 <_scanf_float+0x198>
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	0591      	lsls	r1, r2, #22
 8004c0a:	f57f af18 	bpl.w	8004a3e <_scanf_float+0x66>
 8004c0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004c12:	6022      	str	r2, [r4, #0]
 8004c14:	9702      	str	r7, [sp, #8]
 8004c16:	e7ab      	b.n	8004b70 <_scanf_float+0x198>
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004c1e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004c22:	d005      	beq.n	8004c30 <_scanf_float+0x258>
 8004c24:	0550      	lsls	r0, r2, #21
 8004c26:	f57f af0a 	bpl.w	8004a3e <_scanf_float+0x66>
 8004c2a:	2f00      	cmp	r7, #0
 8004c2c:	f000 80db 	beq.w	8004de6 <_scanf_float+0x40e>
 8004c30:	0591      	lsls	r1, r2, #22
 8004c32:	bf58      	it	pl
 8004c34:	9902      	ldrpl	r1, [sp, #8]
 8004c36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004c3a:	bf58      	it	pl
 8004c3c:	1a79      	subpl	r1, r7, r1
 8004c3e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004c42:	bf58      	it	pl
 8004c44:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c48:	6022      	str	r2, [r4, #0]
 8004c4a:	2700      	movs	r7, #0
 8004c4c:	e790      	b.n	8004b70 <_scanf_float+0x198>
 8004c4e:	f04f 0a03 	mov.w	sl, #3
 8004c52:	e78d      	b.n	8004b70 <_scanf_float+0x198>
 8004c54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	4798      	blx	r3
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f43f aedf 	beq.w	8004a22 <_scanf_float+0x4a>
 8004c64:	e6eb      	b.n	8004a3e <_scanf_float+0x66>
 8004c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c6e:	464a      	mov	r2, r9
 8004c70:	4640      	mov	r0, r8
 8004c72:	4798      	blx	r3
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	e6eb      	b.n	8004a54 <_scanf_float+0x7c>
 8004c7c:	1e6b      	subs	r3, r5, #1
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d824      	bhi.n	8004ccc <_scanf_float+0x2f4>
 8004c82:	2d02      	cmp	r5, #2
 8004c84:	d836      	bhi.n	8004cf4 <_scanf_float+0x31c>
 8004c86:	9b01      	ldr	r3, [sp, #4]
 8004c88:	429e      	cmp	r6, r3
 8004c8a:	f67f aee7 	bls.w	8004a5c <_scanf_float+0x84>
 8004c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c96:	464a      	mov	r2, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	4798      	blx	r3
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6123      	str	r3, [r4, #16]
 8004ca2:	e7f0      	b.n	8004c86 <_scanf_float+0x2ae>
 8004ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ca8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004cac:	464a      	mov	r2, r9
 8004cae:	4640      	mov	r0, r8
 8004cb0:	4798      	blx	r3
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	6123      	str	r3, [r4, #16]
 8004cb8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004cbc:	fa5f fa8a 	uxtb.w	sl, sl
 8004cc0:	f1ba 0f02 	cmp.w	sl, #2
 8004cc4:	d1ee      	bne.n	8004ca4 <_scanf_float+0x2cc>
 8004cc6:	3d03      	subs	r5, #3
 8004cc8:	b2ed      	uxtb	r5, r5
 8004cca:	1b76      	subs	r6, r6, r5
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	05da      	lsls	r2, r3, #23
 8004cd0:	d530      	bpl.n	8004d34 <_scanf_float+0x35c>
 8004cd2:	055b      	lsls	r3, r3, #21
 8004cd4:	d511      	bpl.n	8004cfa <_scanf_float+0x322>
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	429e      	cmp	r6, r3
 8004cda:	f67f aebf 	bls.w	8004a5c <_scanf_float+0x84>
 8004cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ce2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ce6:	464a      	mov	r2, r9
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4798      	blx	r3
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	e7f0      	b.n	8004cd6 <_scanf_float+0x2fe>
 8004cf4:	46aa      	mov	sl, r5
 8004cf6:	46b3      	mov	fp, r6
 8004cf8:	e7de      	b.n	8004cb8 <_scanf_float+0x2e0>
 8004cfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	2965      	cmp	r1, #101	@ 0x65
 8004d02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004d06:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	d00c      	beq.n	8004d28 <_scanf_float+0x350>
 8004d0e:	2945      	cmp	r1, #69	@ 0x45
 8004d10:	d00a      	beq.n	8004d28 <_scanf_float+0x350>
 8004d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d16:	464a      	mov	r2, r9
 8004d18:	4640      	mov	r0, r8
 8004d1a:	4798      	blx	r3
 8004d1c:	6923      	ldr	r3, [r4, #16]
 8004d1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	1eb5      	subs	r5, r6, #2
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d2c:	464a      	mov	r2, r9
 8004d2e:	4640      	mov	r0, r8
 8004d30:	4798      	blx	r3
 8004d32:	462e      	mov	r6, r5
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	f012 0210 	ands.w	r2, r2, #16
 8004d3a:	d001      	beq.n	8004d40 <_scanf_float+0x368>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e68e      	b.n	8004a5e <_scanf_float+0x86>
 8004d40:	7032      	strb	r2, [r6, #0]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4c:	d125      	bne.n	8004d9a <_scanf_float+0x3c2>
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	429f      	cmp	r7, r3
 8004d52:	d00a      	beq.n	8004d6a <_scanf_float+0x392>
 8004d54:	1bda      	subs	r2, r3, r7
 8004d56:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004d5a:	429e      	cmp	r6, r3
 8004d5c:	bf28      	it	cs
 8004d5e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004d62:	4922      	ldr	r1, [pc, #136]	@ (8004dec <_scanf_float+0x414>)
 8004d64:	4630      	mov	r0, r6
 8004d66:	f000 f9df 	bl	8005128 <siprintf>
 8004d6a:	9901      	ldr	r1, [sp, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4640      	mov	r0, r8
 8004d70:	f002 fcca 	bl	8007708 <_strtod_r>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f011 0f02 	tst.w	r1, #2
 8004d7e:	ec57 6b10 	vmov	r6, r7, d0
 8004d82:	f103 0204 	add.w	r2, r3, #4
 8004d86:	d015      	beq.n	8004db4 <_scanf_float+0x3dc>
 8004d88:	9903      	ldr	r1, [sp, #12]
 8004d8a:	600a      	str	r2, [r1, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	e9c3 6700 	strd	r6, r7, [r3]
 8004d92:	68e3      	ldr	r3, [r4, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60e3      	str	r3, [r4, #12]
 8004d98:	e7d0      	b.n	8004d3c <_scanf_float+0x364>
 8004d9a:	9b04      	ldr	r3, [sp, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0e4      	beq.n	8004d6a <_scanf_float+0x392>
 8004da0:	9905      	ldr	r1, [sp, #20]
 8004da2:	230a      	movs	r3, #10
 8004da4:	3101      	adds	r1, #1
 8004da6:	4640      	mov	r0, r8
 8004da8:	f002 fd2e 	bl	8007808 <_strtol_r>
 8004dac:	9b04      	ldr	r3, [sp, #16]
 8004dae:	9e05      	ldr	r6, [sp, #20]
 8004db0:	1ac2      	subs	r2, r0, r3
 8004db2:	e7d0      	b.n	8004d56 <_scanf_float+0x37e>
 8004db4:	f011 0f04 	tst.w	r1, #4
 8004db8:	9903      	ldr	r1, [sp, #12]
 8004dba:	600a      	str	r2, [r1, #0]
 8004dbc:	d1e6      	bne.n	8004d8c <_scanf_float+0x3b4>
 8004dbe:	681d      	ldr	r5, [r3, #0]
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f7fb feb0 	bl	8000b2c <__aeabi_dcmpun>
 8004dcc:	b128      	cbz	r0, 8004dda <_scanf_float+0x402>
 8004dce:	4808      	ldr	r0, [pc, #32]	@ (8004df0 <_scanf_float+0x418>)
 8004dd0:	f000 fa90 	bl	80052f4 <nanf>
 8004dd4:	ed85 0a00 	vstr	s0, [r5]
 8004dd8:	e7db      	b.n	8004d92 <_scanf_float+0x3ba>
 8004dda:	4630      	mov	r0, r6
 8004ddc:	4639      	mov	r1, r7
 8004dde:	f7fb ff03 	bl	8000be8 <__aeabi_d2f>
 8004de2:	6028      	str	r0, [r5, #0]
 8004de4:	e7d5      	b.n	8004d92 <_scanf_float+0x3ba>
 8004de6:	2700      	movs	r7, #0
 8004de8:	e62e      	b.n	8004a48 <_scanf_float+0x70>
 8004dea:	bf00      	nop
 8004dec:	0800943e 	.word	0x0800943e
 8004df0:	0800959a 	.word	0x0800959a

08004df4 <std>:
 8004df4:	2300      	movs	r3, #0
 8004df6:	b510      	push	{r4, lr}
 8004df8:	4604      	mov	r4, r0
 8004dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e02:	6083      	str	r3, [r0, #8]
 8004e04:	8181      	strh	r1, [r0, #12]
 8004e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e08:	81c2      	strh	r2, [r0, #14]
 8004e0a:	6183      	str	r3, [r0, #24]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2208      	movs	r2, #8
 8004e10:	305c      	adds	r0, #92	@ 0x5c
 8004e12:	f000 f9ee 	bl	80051f2 <memset>
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <std+0x58>)
 8004e18:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <std+0x5c>)
 8004e1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <std+0x60>)
 8004e20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e22:	4b0d      	ldr	r3, [pc, #52]	@ (8004e58 <std+0x64>)
 8004e24:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e26:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <std+0x68>)
 8004e28:	6224      	str	r4, [r4, #32]
 8004e2a:	429c      	cmp	r4, r3
 8004e2c:	d006      	beq.n	8004e3c <std+0x48>
 8004e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e32:	4294      	cmp	r4, r2
 8004e34:	d002      	beq.n	8004e3c <std+0x48>
 8004e36:	33d0      	adds	r3, #208	@ 0xd0
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	d105      	bne.n	8004e48 <std+0x54>
 8004e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f000 ba52 	b.w	80052ec <__retarget_lock_init_recursive>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	0800516d 	.word	0x0800516d
 8004e50:	0800518f 	.word	0x0800518f
 8004e54:	080051c7 	.word	0x080051c7
 8004e58:	080051eb 	.word	0x080051eb
 8004e5c:	200002cc 	.word	0x200002cc

08004e60 <stdio_exit_handler>:
 8004e60:	4a02      	ldr	r2, [pc, #8]	@ (8004e6c <stdio_exit_handler+0xc>)
 8004e62:	4903      	ldr	r1, [pc, #12]	@ (8004e70 <stdio_exit_handler+0x10>)
 8004e64:	4803      	ldr	r0, [pc, #12]	@ (8004e74 <stdio_exit_handler+0x14>)
 8004e66:	f000 b869 	b.w	8004f3c <_fwalk_sglue>
 8004e6a:	bf00      	nop
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	08008449 	.word	0x08008449
 8004e74:	2000001c 	.word	0x2000001c

08004e78 <cleanup_stdio>:
 8004e78:	6841      	ldr	r1, [r0, #4]
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <cleanup_stdio+0x34>)
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	d001      	beq.n	8004e88 <cleanup_stdio+0x10>
 8004e84:	f003 fae0 	bl	8008448 <_fflush_r>
 8004e88:	68a1      	ldr	r1, [r4, #8]
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <cleanup_stdio+0x38>)
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d002      	beq.n	8004e96 <cleanup_stdio+0x1e>
 8004e90:	4620      	mov	r0, r4
 8004e92:	f003 fad9 	bl	8008448 <_fflush_r>
 8004e96:	68e1      	ldr	r1, [r4, #12]
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <cleanup_stdio+0x3c>)
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d004      	beq.n	8004ea8 <cleanup_stdio+0x30>
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea4:	f003 bad0 	b.w	8008448 <_fflush_r>
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	200002cc 	.word	0x200002cc
 8004eb0:	20000334 	.word	0x20000334
 8004eb4:	2000039c 	.word	0x2000039c

08004eb8 <global_stdio_init.part.0>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <global_stdio_init.part.0+0x30>)
 8004ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8004eec <global_stdio_init.part.0+0x34>)
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef0 <global_stdio_init.part.0+0x38>)
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	f7ff ff94 	bl	8004df4 <std>
 8004ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	2109      	movs	r1, #9
 8004ed4:	f7ff ff8e 	bl	8004df4 <std>
 8004ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004edc:	2202      	movs	r2, #2
 8004ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee2:	2112      	movs	r1, #18
 8004ee4:	f7ff bf86 	b.w	8004df4 <std>
 8004ee8:	20000404 	.word	0x20000404
 8004eec:	200002cc 	.word	0x200002cc
 8004ef0:	08004e61 	.word	0x08004e61

08004ef4 <__sfp_lock_acquire>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	@ (8004efc <__sfp_lock_acquire+0x8>)
 8004ef6:	f000 b9fa 	b.w	80052ee <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	2000040d 	.word	0x2000040d

08004f00 <__sfp_lock_release>:
 8004f00:	4801      	ldr	r0, [pc, #4]	@ (8004f08 <__sfp_lock_release+0x8>)
 8004f02:	f000 b9f5 	b.w	80052f0 <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	2000040d 	.word	0x2000040d

08004f0c <__sinit>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4604      	mov	r4, r0
 8004f10:	f7ff fff0 	bl	8004ef4 <__sfp_lock_acquire>
 8004f14:	6a23      	ldr	r3, [r4, #32]
 8004f16:	b11b      	cbz	r3, 8004f20 <__sinit+0x14>
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	f7ff bff0 	b.w	8004f00 <__sfp_lock_release>
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <__sinit+0x28>)
 8004f22:	6223      	str	r3, [r4, #32]
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <__sinit+0x2c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f5      	bne.n	8004f18 <__sinit+0xc>
 8004f2c:	f7ff ffc4 	bl	8004eb8 <global_stdio_init.part.0>
 8004f30:	e7f2      	b.n	8004f18 <__sinit+0xc>
 8004f32:	bf00      	nop
 8004f34:	08004e79 	.word	0x08004e79
 8004f38:	20000404 	.word	0x20000404

08004f3c <_fwalk_sglue>:
 8004f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f40:	4607      	mov	r7, r0
 8004f42:	4688      	mov	r8, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	2600      	movs	r6, #0
 8004f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f50:	d505      	bpl.n	8004f5e <_fwalk_sglue+0x22>
 8004f52:	6824      	ldr	r4, [r4, #0]
 8004f54:	2c00      	cmp	r4, #0
 8004f56:	d1f7      	bne.n	8004f48 <_fwalk_sglue+0xc>
 8004f58:	4630      	mov	r0, r6
 8004f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d907      	bls.n	8004f74 <_fwalk_sglue+0x38>
 8004f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	d003      	beq.n	8004f74 <_fwalk_sglue+0x38>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	4306      	orrs	r6, r0
 8004f74:	3568      	adds	r5, #104	@ 0x68
 8004f76:	e7e9      	b.n	8004f4c <_fwalk_sglue+0x10>

08004f78 <iprintf>:
 8004f78:	b40f      	push	{r0, r1, r2, r3}
 8004f7a:	b507      	push	{r0, r1, r2, lr}
 8004f7c:	4906      	ldr	r1, [pc, #24]	@ (8004f98 <iprintf+0x20>)
 8004f7e:	ab04      	add	r3, sp, #16
 8004f80:	6808      	ldr	r0, [r1, #0]
 8004f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f86:	6881      	ldr	r1, [r0, #8]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	f002 fdc1 	bl	8007b10 <_vfiprintf_r>
 8004f8e:	b003      	add	sp, #12
 8004f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f94:	b004      	add	sp, #16
 8004f96:	4770      	bx	lr
 8004f98:	20000018 	.word	0x20000018

08004f9c <iscanf>:
 8004f9c:	b40f      	push	{r0, r1, r2, r3}
 8004f9e:	b507      	push	{r0, r1, r2, lr}
 8004fa0:	4906      	ldr	r1, [pc, #24]	@ (8004fbc <iscanf+0x20>)
 8004fa2:	ab04      	add	r3, sp, #16
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004faa:	6841      	ldr	r1, [r0, #4]
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	f003 f865 	bl	800807c <_vfiscanf_r>
 8004fb2:	b003      	add	sp, #12
 8004fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb8:	b004      	add	sp, #16
 8004fba:	4770      	bx	lr
 8004fbc:	20000018 	.word	0x20000018

08004fc0 <setvbuf>:
 8004fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	461d      	mov	r5, r3
 8004fc6:	4b57      	ldr	r3, [pc, #348]	@ (8005124 <setvbuf+0x164>)
 8004fc8:	681f      	ldr	r7, [r3, #0]
 8004fca:	4604      	mov	r4, r0
 8004fcc:	460e      	mov	r6, r1
 8004fce:	4690      	mov	r8, r2
 8004fd0:	b127      	cbz	r7, 8004fdc <setvbuf+0x1c>
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	b913      	cbnz	r3, 8004fdc <setvbuf+0x1c>
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7ff ff98 	bl	8004f0c <__sinit>
 8004fdc:	f1b8 0f02 	cmp.w	r8, #2
 8004fe0:	d006      	beq.n	8004ff0 <setvbuf+0x30>
 8004fe2:	f1b8 0f01 	cmp.w	r8, #1
 8004fe6:	f200 809a 	bhi.w	800511e <setvbuf+0x15e>
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	f2c0 8097 	blt.w	800511e <setvbuf+0x15e>
 8004ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ff2:	07d9      	lsls	r1, r3, #31
 8004ff4:	d405      	bmi.n	8005002 <setvbuf+0x42>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	059a      	lsls	r2, r3, #22
 8004ffa:	d402      	bmi.n	8005002 <setvbuf+0x42>
 8004ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ffe:	f000 f976 	bl	80052ee <__retarget_lock_acquire_recursive>
 8005002:	4621      	mov	r1, r4
 8005004:	4638      	mov	r0, r7
 8005006:	f003 fa1f 	bl	8008448 <_fflush_r>
 800500a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800500c:	b141      	cbz	r1, 8005020 <setvbuf+0x60>
 800500e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005012:	4299      	cmp	r1, r3
 8005014:	d002      	beq.n	800501c <setvbuf+0x5c>
 8005016:	4638      	mov	r0, r7
 8005018:	f000 ffca 	bl	8005fb0 <_free_r>
 800501c:	2300      	movs	r3, #0
 800501e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005020:	2300      	movs	r3, #0
 8005022:	61a3      	str	r3, [r4, #24]
 8005024:	6063      	str	r3, [r4, #4]
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	d503      	bpl.n	8005034 <setvbuf+0x74>
 800502c:	6921      	ldr	r1, [r4, #16]
 800502e:	4638      	mov	r0, r7
 8005030:	f000 ffbe 	bl	8005fb0 <_free_r>
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	f1b8 0f02 	cmp.w	r8, #2
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	d061      	beq.n	800510a <setvbuf+0x14a>
 8005046:	ab01      	add	r3, sp, #4
 8005048:	466a      	mov	r2, sp
 800504a:	4621      	mov	r1, r4
 800504c:	4638      	mov	r0, r7
 800504e:	f003 fa23 	bl	8008498 <__swhatbuf_r>
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	4318      	orrs	r0, r3
 8005056:	81a0      	strh	r0, [r4, #12]
 8005058:	bb2d      	cbnz	r5, 80050a6 <setvbuf+0xe6>
 800505a:	9d00      	ldr	r5, [sp, #0]
 800505c:	4628      	mov	r0, r5
 800505e:	f000 fff1 	bl	8006044 <malloc>
 8005062:	4606      	mov	r6, r0
 8005064:	2800      	cmp	r0, #0
 8005066:	d152      	bne.n	800510e <setvbuf+0x14e>
 8005068:	f8dd 9000 	ldr.w	r9, [sp]
 800506c:	45a9      	cmp	r9, r5
 800506e:	d140      	bne.n	80050f2 <setvbuf+0x132>
 8005070:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005078:	f043 0202 	orr.w	r2, r3, #2
 800507c:	81a2      	strh	r2, [r4, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	60a2      	str	r2, [r4, #8]
 8005082:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005086:	6022      	str	r2, [r4, #0]
 8005088:	6122      	str	r2, [r4, #16]
 800508a:	2201      	movs	r2, #1
 800508c:	6162      	str	r2, [r4, #20]
 800508e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005090:	07d6      	lsls	r6, r2, #31
 8005092:	d404      	bmi.n	800509e <setvbuf+0xde>
 8005094:	0598      	lsls	r0, r3, #22
 8005096:	d402      	bmi.n	800509e <setvbuf+0xde>
 8005098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800509a:	f000 f929 	bl	80052f0 <__retarget_lock_release_recursive>
 800509e:	4628      	mov	r0, r5
 80050a0:	b003      	add	sp, #12
 80050a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	d0d8      	beq.n	800505c <setvbuf+0x9c>
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	b913      	cbnz	r3, 80050b4 <setvbuf+0xf4>
 80050ae:	4638      	mov	r0, r7
 80050b0:	f7ff ff2c 	bl	8004f0c <__sinit>
 80050b4:	f1b8 0f01 	cmp.w	r8, #1
 80050b8:	bf08      	it	eq
 80050ba:	89a3      	ldrheq	r3, [r4, #12]
 80050bc:	6026      	str	r6, [r4, #0]
 80050be:	bf04      	itt	eq
 80050c0:	f043 0301 	orreq.w	r3, r3, #1
 80050c4:	81a3      	strheq	r3, [r4, #12]
 80050c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ca:	f013 0208 	ands.w	r2, r3, #8
 80050ce:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80050d2:	d01e      	beq.n	8005112 <setvbuf+0x152>
 80050d4:	07d9      	lsls	r1, r3, #31
 80050d6:	bf41      	itttt	mi
 80050d8:	2200      	movmi	r2, #0
 80050da:	426d      	negmi	r5, r5
 80050dc:	60a2      	strmi	r2, [r4, #8]
 80050de:	61a5      	strmi	r5, [r4, #24]
 80050e0:	bf58      	it	pl
 80050e2:	60a5      	strpl	r5, [r4, #8]
 80050e4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050e6:	07d2      	lsls	r2, r2, #31
 80050e8:	d401      	bmi.n	80050ee <setvbuf+0x12e>
 80050ea:	059b      	lsls	r3, r3, #22
 80050ec:	d513      	bpl.n	8005116 <setvbuf+0x156>
 80050ee:	2500      	movs	r5, #0
 80050f0:	e7d5      	b.n	800509e <setvbuf+0xde>
 80050f2:	4648      	mov	r0, r9
 80050f4:	f000 ffa6 	bl	8006044 <malloc>
 80050f8:	4606      	mov	r6, r0
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d0b8      	beq.n	8005070 <setvbuf+0xb0>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005104:	81a3      	strh	r3, [r4, #12]
 8005106:	464d      	mov	r5, r9
 8005108:	e7cf      	b.n	80050aa <setvbuf+0xea>
 800510a:	2500      	movs	r5, #0
 800510c:	e7b2      	b.n	8005074 <setvbuf+0xb4>
 800510e:	46a9      	mov	r9, r5
 8005110:	e7f5      	b.n	80050fe <setvbuf+0x13e>
 8005112:	60a2      	str	r2, [r4, #8]
 8005114:	e7e6      	b.n	80050e4 <setvbuf+0x124>
 8005116:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005118:	f000 f8ea 	bl	80052f0 <__retarget_lock_release_recursive>
 800511c:	e7e7      	b.n	80050ee <setvbuf+0x12e>
 800511e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005122:	e7bc      	b.n	800509e <setvbuf+0xde>
 8005124:	20000018 	.word	0x20000018

08005128 <siprintf>:
 8005128:	b40e      	push	{r1, r2, r3}
 800512a:	b510      	push	{r4, lr}
 800512c:	b09d      	sub	sp, #116	@ 0x74
 800512e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005130:	9002      	str	r0, [sp, #8]
 8005132:	9006      	str	r0, [sp, #24]
 8005134:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005138:	480a      	ldr	r0, [pc, #40]	@ (8005164 <siprintf+0x3c>)
 800513a:	9107      	str	r1, [sp, #28]
 800513c:	9104      	str	r1, [sp, #16]
 800513e:	490a      	ldr	r1, [pc, #40]	@ (8005168 <siprintf+0x40>)
 8005140:	f853 2b04 	ldr.w	r2, [r3], #4
 8005144:	9105      	str	r1, [sp, #20]
 8005146:	2400      	movs	r4, #0
 8005148:	a902      	add	r1, sp, #8
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005150:	f002 fbb8 	bl	80078c4 <_svfiprintf_r>
 8005154:	9b02      	ldr	r3, [sp, #8]
 8005156:	701c      	strb	r4, [r3, #0]
 8005158:	b01d      	add	sp, #116	@ 0x74
 800515a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800515e:	b003      	add	sp, #12
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000018 	.word	0x20000018
 8005168:	ffff0208 	.word	0xffff0208

0800516c <__sread>:
 800516c:	b510      	push	{r4, lr}
 800516e:	460c      	mov	r4, r1
 8005170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005174:	f000 f86c 	bl	8005250 <_read_r>
 8005178:	2800      	cmp	r0, #0
 800517a:	bfab      	itete	ge
 800517c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800517e:	89a3      	ldrhlt	r3, [r4, #12]
 8005180:	181b      	addge	r3, r3, r0
 8005182:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005186:	bfac      	ite	ge
 8005188:	6563      	strge	r3, [r4, #84]	@ 0x54
 800518a:	81a3      	strhlt	r3, [r4, #12]
 800518c:	bd10      	pop	{r4, pc}

0800518e <__swrite>:
 800518e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	461f      	mov	r7, r3
 8005194:	898b      	ldrh	r3, [r1, #12]
 8005196:	05db      	lsls	r3, r3, #23
 8005198:	4605      	mov	r5, r0
 800519a:	460c      	mov	r4, r1
 800519c:	4616      	mov	r6, r2
 800519e:	d505      	bpl.n	80051ac <__swrite+0x1e>
 80051a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a4:	2302      	movs	r3, #2
 80051a6:	2200      	movs	r2, #0
 80051a8:	f000 f840 	bl	800522c <_lseek_r>
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	4632      	mov	r2, r6
 80051ba:	463b      	mov	r3, r7
 80051bc:	4628      	mov	r0, r5
 80051be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c2:	f000 b857 	b.w	8005274 <_write_r>

080051c6 <__sseek>:
 80051c6:	b510      	push	{r4, lr}
 80051c8:	460c      	mov	r4, r1
 80051ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ce:	f000 f82d 	bl	800522c <_lseek_r>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	bf15      	itete	ne
 80051d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051e2:	81a3      	strheq	r3, [r4, #12]
 80051e4:	bf18      	it	ne
 80051e6:	81a3      	strhne	r3, [r4, #12]
 80051e8:	bd10      	pop	{r4, pc}

080051ea <__sclose>:
 80051ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ee:	f000 b80d 	b.w	800520c <_close_r>

080051f2 <memset>:
 80051f2:	4402      	add	r2, r0
 80051f4:	4603      	mov	r3, r0
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d100      	bne.n	80051fc <memset+0xa>
 80051fa:	4770      	bx	lr
 80051fc:	f803 1b01 	strb.w	r1, [r3], #1
 8005200:	e7f9      	b.n	80051f6 <memset+0x4>
	...

08005204 <_localeconv_r>:
 8005204:	4800      	ldr	r0, [pc, #0]	@ (8005208 <_localeconv_r+0x4>)
 8005206:	4770      	bx	lr
 8005208:	20000158 	.word	0x20000158

0800520c <_close_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d06      	ldr	r5, [pc, #24]	@ (8005228 <_close_r+0x1c>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	602b      	str	r3, [r5, #0]
 8005218:	f7fc f888 	bl	800132c <_close>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_close_r+0x1a>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_close_r+0x1a>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	20000408 	.word	0x20000408

0800522c <_lseek_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d07      	ldr	r5, [pc, #28]	@ (800524c <_lseek_r+0x20>)
 8005230:	4604      	mov	r4, r0
 8005232:	4608      	mov	r0, r1
 8005234:	4611      	mov	r1, r2
 8005236:	2200      	movs	r2, #0
 8005238:	602a      	str	r2, [r5, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f7fc f89d 	bl	800137a <_lseek>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_lseek_r+0x1e>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_lseek_r+0x1e>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20000408 	.word	0x20000408

08005250 <_read_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d07      	ldr	r5, [pc, #28]	@ (8005270 <_read_r+0x20>)
 8005254:	4604      	mov	r4, r0
 8005256:	4608      	mov	r0, r1
 8005258:	4611      	mov	r1, r2
 800525a:	2200      	movs	r2, #0
 800525c:	602a      	str	r2, [r5, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	f7fc f82b 	bl	80012ba <_read>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_read_r+0x1e>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_read_r+0x1e>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20000408 	.word	0x20000408

08005274 <_write_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	@ (8005294 <_write_r+0x20>)
 8005278:	4604      	mov	r4, r0
 800527a:	4608      	mov	r0, r1
 800527c:	4611      	mov	r1, r2
 800527e:	2200      	movs	r2, #0
 8005280:	602a      	str	r2, [r5, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	f7fc f836 	bl	80012f4 <_write>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_write_r+0x1e>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_write_r+0x1e>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	20000408 	.word	0x20000408

08005298 <__errno>:
 8005298:	4b01      	ldr	r3, [pc, #4]	@ (80052a0 <__errno+0x8>)
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20000018 	.word	0x20000018

080052a4 <__libc_init_array>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4d0d      	ldr	r5, [pc, #52]	@ (80052dc <__libc_init_array+0x38>)
 80052a8:	4c0d      	ldr	r4, [pc, #52]	@ (80052e0 <__libc_init_array+0x3c>)
 80052aa:	1b64      	subs	r4, r4, r5
 80052ac:	10a4      	asrs	r4, r4, #2
 80052ae:	2600      	movs	r6, #0
 80052b0:	42a6      	cmp	r6, r4
 80052b2:	d109      	bne.n	80052c8 <__libc_init_array+0x24>
 80052b4:	4d0b      	ldr	r5, [pc, #44]	@ (80052e4 <__libc_init_array+0x40>)
 80052b6:	4c0c      	ldr	r4, [pc, #48]	@ (80052e8 <__libc_init_array+0x44>)
 80052b8:	f004 f85e 	bl	8009378 <_init>
 80052bc:	1b64      	subs	r4, r4, r5
 80052be:	10a4      	asrs	r4, r4, #2
 80052c0:	2600      	movs	r6, #0
 80052c2:	42a6      	cmp	r6, r4
 80052c4:	d105      	bne.n	80052d2 <__libc_init_array+0x2e>
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052cc:	4798      	blx	r3
 80052ce:	3601      	adds	r6, #1
 80052d0:	e7ee      	b.n	80052b0 <__libc_init_array+0xc>
 80052d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d6:	4798      	blx	r3
 80052d8:	3601      	adds	r6, #1
 80052da:	e7f2      	b.n	80052c2 <__libc_init_array+0x1e>
 80052dc:	08009854 	.word	0x08009854
 80052e0:	08009854 	.word	0x08009854
 80052e4:	08009854 	.word	0x08009854
 80052e8:	08009858 	.word	0x08009858

080052ec <__retarget_lock_init_recursive>:
 80052ec:	4770      	bx	lr

080052ee <__retarget_lock_acquire_recursive>:
 80052ee:	4770      	bx	lr

080052f0 <__retarget_lock_release_recursive>:
 80052f0:	4770      	bx	lr
	...

080052f4 <nanf>:
 80052f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80052fc <nanf+0x8>
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	7fc00000 	.word	0x7fc00000

08005300 <quorem>:
 8005300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	6903      	ldr	r3, [r0, #16]
 8005306:	690c      	ldr	r4, [r1, #16]
 8005308:	42a3      	cmp	r3, r4
 800530a:	4607      	mov	r7, r0
 800530c:	db7e      	blt.n	800540c <quorem+0x10c>
 800530e:	3c01      	subs	r4, #1
 8005310:	f101 0814 	add.w	r8, r1, #20
 8005314:	00a3      	lsls	r3, r4, #2
 8005316:	f100 0514 	add.w	r5, r0, #20
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005326:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800532a:	3301      	adds	r3, #1
 800532c:	429a      	cmp	r2, r3
 800532e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005332:	fbb2 f6f3 	udiv	r6, r2, r3
 8005336:	d32e      	bcc.n	8005396 <quorem+0x96>
 8005338:	f04f 0a00 	mov.w	sl, #0
 800533c:	46c4      	mov	ip, r8
 800533e:	46ae      	mov	lr, r5
 8005340:	46d3      	mov	fp, sl
 8005342:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005346:	b298      	uxth	r0, r3
 8005348:	fb06 a000 	mla	r0, r6, r0, sl
 800534c:	0c02      	lsrs	r2, r0, #16
 800534e:	0c1b      	lsrs	r3, r3, #16
 8005350:	fb06 2303 	mla	r3, r6, r3, r2
 8005354:	f8de 2000 	ldr.w	r2, [lr]
 8005358:	b280      	uxth	r0, r0
 800535a:	b292      	uxth	r2, r2
 800535c:	1a12      	subs	r2, r2, r0
 800535e:	445a      	add	r2, fp
 8005360:	f8de 0000 	ldr.w	r0, [lr]
 8005364:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005368:	b29b      	uxth	r3, r3
 800536a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800536e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005372:	b292      	uxth	r2, r2
 8005374:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005378:	45e1      	cmp	r9, ip
 800537a:	f84e 2b04 	str.w	r2, [lr], #4
 800537e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005382:	d2de      	bcs.n	8005342 <quorem+0x42>
 8005384:	9b00      	ldr	r3, [sp, #0]
 8005386:	58eb      	ldr	r3, [r5, r3]
 8005388:	b92b      	cbnz	r3, 8005396 <quorem+0x96>
 800538a:	9b01      	ldr	r3, [sp, #4]
 800538c:	3b04      	subs	r3, #4
 800538e:	429d      	cmp	r5, r3
 8005390:	461a      	mov	r2, r3
 8005392:	d32f      	bcc.n	80053f4 <quorem+0xf4>
 8005394:	613c      	str	r4, [r7, #16]
 8005396:	4638      	mov	r0, r7
 8005398:	f001 f9c6 	bl	8006728 <__mcmp>
 800539c:	2800      	cmp	r0, #0
 800539e:	db25      	blt.n	80053ec <quorem+0xec>
 80053a0:	4629      	mov	r1, r5
 80053a2:	2000      	movs	r0, #0
 80053a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80053a8:	f8d1 c000 	ldr.w	ip, [r1]
 80053ac:	fa1f fe82 	uxth.w	lr, r2
 80053b0:	fa1f f38c 	uxth.w	r3, ip
 80053b4:	eba3 030e 	sub.w	r3, r3, lr
 80053b8:	4403      	add	r3, r0
 80053ba:	0c12      	lsrs	r2, r2, #16
 80053bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80053c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053ca:	45c1      	cmp	r9, r8
 80053cc:	f841 3b04 	str.w	r3, [r1], #4
 80053d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053d4:	d2e6      	bcs.n	80053a4 <quorem+0xa4>
 80053d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053de:	b922      	cbnz	r2, 80053ea <quorem+0xea>
 80053e0:	3b04      	subs	r3, #4
 80053e2:	429d      	cmp	r5, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	d30b      	bcc.n	8005400 <quorem+0x100>
 80053e8:	613c      	str	r4, [r7, #16]
 80053ea:	3601      	adds	r6, #1
 80053ec:	4630      	mov	r0, r6
 80053ee:	b003      	add	sp, #12
 80053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	3b04      	subs	r3, #4
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d1cb      	bne.n	8005394 <quorem+0x94>
 80053fc:	3c01      	subs	r4, #1
 80053fe:	e7c6      	b.n	800538e <quorem+0x8e>
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	3b04      	subs	r3, #4
 8005404:	2a00      	cmp	r2, #0
 8005406:	d1ef      	bne.n	80053e8 <quorem+0xe8>
 8005408:	3c01      	subs	r4, #1
 800540a:	e7ea      	b.n	80053e2 <quorem+0xe2>
 800540c:	2000      	movs	r0, #0
 800540e:	e7ee      	b.n	80053ee <quorem+0xee>

08005410 <_dtoa_r>:
 8005410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	69c7      	ldr	r7, [r0, #28]
 8005416:	b097      	sub	sp, #92	@ 0x5c
 8005418:	ed8d 0b04 	vstr	d0, [sp, #16]
 800541c:	ec55 4b10 	vmov	r4, r5, d0
 8005420:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005422:	9107      	str	r1, [sp, #28]
 8005424:	4681      	mov	r9, r0
 8005426:	920c      	str	r2, [sp, #48]	@ 0x30
 8005428:	9311      	str	r3, [sp, #68]	@ 0x44
 800542a:	b97f      	cbnz	r7, 800544c <_dtoa_r+0x3c>
 800542c:	2010      	movs	r0, #16
 800542e:	f000 fe09 	bl	8006044 <malloc>
 8005432:	4602      	mov	r2, r0
 8005434:	f8c9 001c 	str.w	r0, [r9, #28]
 8005438:	b920      	cbnz	r0, 8005444 <_dtoa_r+0x34>
 800543a:	4ba9      	ldr	r3, [pc, #676]	@ (80056e0 <_dtoa_r+0x2d0>)
 800543c:	21ef      	movs	r1, #239	@ 0xef
 800543e:	48a9      	ldr	r0, [pc, #676]	@ (80056e4 <_dtoa_r+0x2d4>)
 8005440:	f003 fb0a 	bl	8008a58 <__assert_func>
 8005444:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005448:	6007      	str	r7, [r0, #0]
 800544a:	60c7      	str	r7, [r0, #12]
 800544c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	b159      	cbz	r1, 800546c <_dtoa_r+0x5c>
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	604a      	str	r2, [r1, #4]
 8005458:	2301      	movs	r3, #1
 800545a:	4093      	lsls	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
 800545e:	4648      	mov	r0, r9
 8005460:	f000 fee6 	bl	8006230 <_Bfree>
 8005464:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	1e2b      	subs	r3, r5, #0
 800546e:	bfb9      	ittee	lt
 8005470:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005474:	9305      	strlt	r3, [sp, #20]
 8005476:	2300      	movge	r3, #0
 8005478:	6033      	strge	r3, [r6, #0]
 800547a:	9f05      	ldr	r7, [sp, #20]
 800547c:	4b9a      	ldr	r3, [pc, #616]	@ (80056e8 <_dtoa_r+0x2d8>)
 800547e:	bfbc      	itt	lt
 8005480:	2201      	movlt	r2, #1
 8005482:	6032      	strlt	r2, [r6, #0]
 8005484:	43bb      	bics	r3, r7
 8005486:	d112      	bne.n	80054ae <_dtoa_r+0x9e>
 8005488:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800548a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005494:	4323      	orrs	r3, r4
 8005496:	f000 855a 	beq.w	8005f4e <_dtoa_r+0xb3e>
 800549a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800549c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80056fc <_dtoa_r+0x2ec>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 855c 	beq.w	8005f5e <_dtoa_r+0xb4e>
 80054a6:	f10a 0303 	add.w	r3, sl, #3
 80054aa:	f000 bd56 	b.w	8005f5a <_dtoa_r+0xb4a>
 80054ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80054b2:	2200      	movs	r2, #0
 80054b4:	ec51 0b17 	vmov	r0, r1, d7
 80054b8:	2300      	movs	r3, #0
 80054ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80054be:	f7fb fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c2:	4680      	mov	r8, r0
 80054c4:	b158      	cbz	r0, 80054de <_dtoa_r+0xce>
 80054c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80054c8:	2301      	movs	r3, #1
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054ce:	b113      	cbz	r3, 80054d6 <_dtoa_r+0xc6>
 80054d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80054d2:	4b86      	ldr	r3, [pc, #536]	@ (80056ec <_dtoa_r+0x2dc>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005700 <_dtoa_r+0x2f0>
 80054da:	f000 bd40 	b.w	8005f5e <_dtoa_r+0xb4e>
 80054de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80054e2:	aa14      	add	r2, sp, #80	@ 0x50
 80054e4:	a915      	add	r1, sp, #84	@ 0x54
 80054e6:	4648      	mov	r0, r9
 80054e8:	f001 fa3e 	bl	8006968 <__d2b>
 80054ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054f0:	9002      	str	r0, [sp, #8]
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d078      	beq.n	80055e8 <_dtoa_r+0x1d8>
 80054f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80054fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005500:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005504:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005508:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800550c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005510:	4619      	mov	r1, r3
 8005512:	2200      	movs	r2, #0
 8005514:	4b76      	ldr	r3, [pc, #472]	@ (80056f0 <_dtoa_r+0x2e0>)
 8005516:	f7fa feb7 	bl	8000288 <__aeabi_dsub>
 800551a:	a36b      	add	r3, pc, #428	@ (adr r3, 80056c8 <_dtoa_r+0x2b8>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fb f86a 	bl	80005f8 <__aeabi_dmul>
 8005524:	a36a      	add	r3, pc, #424	@ (adr r3, 80056d0 <_dtoa_r+0x2c0>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f7fa feaf 	bl	800028c <__adddf3>
 800552e:	4604      	mov	r4, r0
 8005530:	4630      	mov	r0, r6
 8005532:	460d      	mov	r5, r1
 8005534:	f7fa fff6 	bl	8000524 <__aeabi_i2d>
 8005538:	a367      	add	r3, pc, #412	@ (adr r3, 80056d8 <_dtoa_r+0x2c8>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f7fb f85b 	bl	80005f8 <__aeabi_dmul>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4620      	mov	r0, r4
 8005548:	4629      	mov	r1, r5
 800554a:	f7fa fe9f 	bl	800028c <__adddf3>
 800554e:	4604      	mov	r4, r0
 8005550:	460d      	mov	r5, r1
 8005552:	f7fb fb01 	bl	8000b58 <__aeabi_d2iz>
 8005556:	2200      	movs	r2, #0
 8005558:	4607      	mov	r7, r0
 800555a:	2300      	movs	r3, #0
 800555c:	4620      	mov	r0, r4
 800555e:	4629      	mov	r1, r5
 8005560:	f7fb fabc 	bl	8000adc <__aeabi_dcmplt>
 8005564:	b140      	cbz	r0, 8005578 <_dtoa_r+0x168>
 8005566:	4638      	mov	r0, r7
 8005568:	f7fa ffdc 	bl	8000524 <__aeabi_i2d>
 800556c:	4622      	mov	r2, r4
 800556e:	462b      	mov	r3, r5
 8005570:	f7fb faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005574:	b900      	cbnz	r0, 8005578 <_dtoa_r+0x168>
 8005576:	3f01      	subs	r7, #1
 8005578:	2f16      	cmp	r7, #22
 800557a:	d852      	bhi.n	8005622 <_dtoa_r+0x212>
 800557c:	4b5d      	ldr	r3, [pc, #372]	@ (80056f4 <_dtoa_r+0x2e4>)
 800557e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800558a:	f7fb faa7 	bl	8000adc <__aeabi_dcmplt>
 800558e:	2800      	cmp	r0, #0
 8005590:	d049      	beq.n	8005626 <_dtoa_r+0x216>
 8005592:	3f01      	subs	r7, #1
 8005594:	2300      	movs	r3, #0
 8005596:	9310      	str	r3, [sp, #64]	@ 0x40
 8005598:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800559a:	1b9b      	subs	r3, r3, r6
 800559c:	1e5a      	subs	r2, r3, #1
 800559e:	bf45      	ittet	mi
 80055a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80055a4:	9300      	strmi	r3, [sp, #0]
 80055a6:	2300      	movpl	r3, #0
 80055a8:	2300      	movmi	r3, #0
 80055aa:	9206      	str	r2, [sp, #24]
 80055ac:	bf54      	ite	pl
 80055ae:	9300      	strpl	r3, [sp, #0]
 80055b0:	9306      	strmi	r3, [sp, #24]
 80055b2:	2f00      	cmp	r7, #0
 80055b4:	db39      	blt.n	800562a <_dtoa_r+0x21a>
 80055b6:	9b06      	ldr	r3, [sp, #24]
 80055b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80055ba:	443b      	add	r3, r7
 80055bc:	9306      	str	r3, [sp, #24]
 80055be:	2300      	movs	r3, #0
 80055c0:	9308      	str	r3, [sp, #32]
 80055c2:	9b07      	ldr	r3, [sp, #28]
 80055c4:	2b09      	cmp	r3, #9
 80055c6:	d863      	bhi.n	8005690 <_dtoa_r+0x280>
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	bfc4      	itt	gt
 80055cc:	3b04      	subgt	r3, #4
 80055ce:	9307      	strgt	r3, [sp, #28]
 80055d0:	9b07      	ldr	r3, [sp, #28]
 80055d2:	f1a3 0302 	sub.w	r3, r3, #2
 80055d6:	bfcc      	ite	gt
 80055d8:	2400      	movgt	r4, #0
 80055da:	2401      	movle	r4, #1
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d863      	bhi.n	80056a8 <_dtoa_r+0x298>
 80055e0:	e8df f003 	tbb	[pc, r3]
 80055e4:	2b375452 	.word	0x2b375452
 80055e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80055ec:	441e      	add	r6, r3
 80055ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	bfc1      	itttt	gt
 80055f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055fa:	409f      	lslgt	r7, r3
 80055fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005600:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005604:	bfd6      	itet	le
 8005606:	f1c3 0320 	rsble	r3, r3, #32
 800560a:	ea47 0003 	orrgt.w	r0, r7, r3
 800560e:	fa04 f003 	lslle.w	r0, r4, r3
 8005612:	f7fa ff77 	bl	8000504 <__aeabi_ui2d>
 8005616:	2201      	movs	r2, #1
 8005618:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800561c:	3e01      	subs	r6, #1
 800561e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005620:	e776      	b.n	8005510 <_dtoa_r+0x100>
 8005622:	2301      	movs	r3, #1
 8005624:	e7b7      	b.n	8005596 <_dtoa_r+0x186>
 8005626:	9010      	str	r0, [sp, #64]	@ 0x40
 8005628:	e7b6      	b.n	8005598 <_dtoa_r+0x188>
 800562a:	9b00      	ldr	r3, [sp, #0]
 800562c:	1bdb      	subs	r3, r3, r7
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	427b      	negs	r3, r7
 8005632:	9308      	str	r3, [sp, #32]
 8005634:	2300      	movs	r3, #0
 8005636:	930d      	str	r3, [sp, #52]	@ 0x34
 8005638:	e7c3      	b.n	80055c2 <_dtoa_r+0x1b2>
 800563a:	2301      	movs	r3, #1
 800563c:	9309      	str	r3, [sp, #36]	@ 0x24
 800563e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005640:	eb07 0b03 	add.w	fp, r7, r3
 8005644:	f10b 0301 	add.w	r3, fp, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	9303      	str	r3, [sp, #12]
 800564c:	bfb8      	it	lt
 800564e:	2301      	movlt	r3, #1
 8005650:	e006      	b.n	8005660 <_dtoa_r+0x250>
 8005652:	2301      	movs	r3, #1
 8005654:	9309      	str	r3, [sp, #36]	@ 0x24
 8005656:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005658:	2b00      	cmp	r3, #0
 800565a:	dd28      	ble.n	80056ae <_dtoa_r+0x29e>
 800565c:	469b      	mov	fp, r3
 800565e:	9303      	str	r3, [sp, #12]
 8005660:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005664:	2100      	movs	r1, #0
 8005666:	2204      	movs	r2, #4
 8005668:	f102 0514 	add.w	r5, r2, #20
 800566c:	429d      	cmp	r5, r3
 800566e:	d926      	bls.n	80056be <_dtoa_r+0x2ae>
 8005670:	6041      	str	r1, [r0, #4]
 8005672:	4648      	mov	r0, r9
 8005674:	f000 fd9c 	bl	80061b0 <_Balloc>
 8005678:	4682      	mov	sl, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d142      	bne.n	8005704 <_dtoa_r+0x2f4>
 800567e:	4b1e      	ldr	r3, [pc, #120]	@ (80056f8 <_dtoa_r+0x2e8>)
 8005680:	4602      	mov	r2, r0
 8005682:	f240 11af 	movw	r1, #431	@ 0x1af
 8005686:	e6da      	b.n	800543e <_dtoa_r+0x2e>
 8005688:	2300      	movs	r3, #0
 800568a:	e7e3      	b.n	8005654 <_dtoa_r+0x244>
 800568c:	2300      	movs	r3, #0
 800568e:	e7d5      	b.n	800563c <_dtoa_r+0x22c>
 8005690:	2401      	movs	r4, #1
 8005692:	2300      	movs	r3, #0
 8005694:	9307      	str	r3, [sp, #28]
 8005696:	9409      	str	r4, [sp, #36]	@ 0x24
 8005698:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800569c:	2200      	movs	r2, #0
 800569e:	f8cd b00c 	str.w	fp, [sp, #12]
 80056a2:	2312      	movs	r3, #18
 80056a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80056a6:	e7db      	b.n	8005660 <_dtoa_r+0x250>
 80056a8:	2301      	movs	r3, #1
 80056aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ac:	e7f4      	b.n	8005698 <_dtoa_r+0x288>
 80056ae:	f04f 0b01 	mov.w	fp, #1
 80056b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80056b6:	465b      	mov	r3, fp
 80056b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80056bc:	e7d0      	b.n	8005660 <_dtoa_r+0x250>
 80056be:	3101      	adds	r1, #1
 80056c0:	0052      	lsls	r2, r2, #1
 80056c2:	e7d1      	b.n	8005668 <_dtoa_r+0x258>
 80056c4:	f3af 8000 	nop.w
 80056c8:	636f4361 	.word	0x636f4361
 80056cc:	3fd287a7 	.word	0x3fd287a7
 80056d0:	8b60c8b3 	.word	0x8b60c8b3
 80056d4:	3fc68a28 	.word	0x3fc68a28
 80056d8:	509f79fb 	.word	0x509f79fb
 80056dc:	3fd34413 	.word	0x3fd34413
 80056e0:	08009450 	.word	0x08009450
 80056e4:	08009467 	.word	0x08009467
 80056e8:	7ff00000 	.word	0x7ff00000
 80056ec:	08009553 	.word	0x08009553
 80056f0:	3ff80000 	.word	0x3ff80000
 80056f4:	08009630 	.word	0x08009630
 80056f8:	080094bf 	.word	0x080094bf
 80056fc:	0800944c 	.word	0x0800944c
 8005700:	08009552 	.word	0x08009552
 8005704:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005708:	6018      	str	r0, [r3, #0]
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	2b0e      	cmp	r3, #14
 800570e:	f200 80a1 	bhi.w	8005854 <_dtoa_r+0x444>
 8005712:	2c00      	cmp	r4, #0
 8005714:	f000 809e 	beq.w	8005854 <_dtoa_r+0x444>
 8005718:	2f00      	cmp	r7, #0
 800571a:	dd33      	ble.n	8005784 <_dtoa_r+0x374>
 800571c:	4b9c      	ldr	r3, [pc, #624]	@ (8005990 <_dtoa_r+0x580>)
 800571e:	f007 020f 	and.w	r2, r7, #15
 8005722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005726:	ed93 7b00 	vldr	d7, [r3]
 800572a:	05f8      	lsls	r0, r7, #23
 800572c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005730:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005734:	d516      	bpl.n	8005764 <_dtoa_r+0x354>
 8005736:	4b97      	ldr	r3, [pc, #604]	@ (8005994 <_dtoa_r+0x584>)
 8005738:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800573c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005740:	f7fb f884 	bl	800084c <__aeabi_ddiv>
 8005744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005748:	f004 040f 	and.w	r4, r4, #15
 800574c:	2603      	movs	r6, #3
 800574e:	4d91      	ldr	r5, [pc, #580]	@ (8005994 <_dtoa_r+0x584>)
 8005750:	b954      	cbnz	r4, 8005768 <_dtoa_r+0x358>
 8005752:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800575a:	f7fb f877 	bl	800084c <__aeabi_ddiv>
 800575e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005762:	e028      	b.n	80057b6 <_dtoa_r+0x3a6>
 8005764:	2602      	movs	r6, #2
 8005766:	e7f2      	b.n	800574e <_dtoa_r+0x33e>
 8005768:	07e1      	lsls	r1, r4, #31
 800576a:	d508      	bpl.n	800577e <_dtoa_r+0x36e>
 800576c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005770:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005774:	f7fa ff40 	bl	80005f8 <__aeabi_dmul>
 8005778:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800577c:	3601      	adds	r6, #1
 800577e:	1064      	asrs	r4, r4, #1
 8005780:	3508      	adds	r5, #8
 8005782:	e7e5      	b.n	8005750 <_dtoa_r+0x340>
 8005784:	f000 80af 	beq.w	80058e6 <_dtoa_r+0x4d6>
 8005788:	427c      	negs	r4, r7
 800578a:	4b81      	ldr	r3, [pc, #516]	@ (8005990 <_dtoa_r+0x580>)
 800578c:	4d81      	ldr	r5, [pc, #516]	@ (8005994 <_dtoa_r+0x584>)
 800578e:	f004 020f 	and.w	r2, r4, #15
 8005792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800579e:	f7fa ff2b 	bl	80005f8 <__aeabi_dmul>
 80057a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057a6:	1124      	asrs	r4, r4, #4
 80057a8:	2300      	movs	r3, #0
 80057aa:	2602      	movs	r6, #2
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	f040 808f 	bne.w	80058d0 <_dtoa_r+0x4c0>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1d3      	bne.n	800575e <_dtoa_r+0x34e>
 80057b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80057b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8094 	beq.w	80058ea <_dtoa_r+0x4da>
 80057c2:	4b75      	ldr	r3, [pc, #468]	@ (8005998 <_dtoa_r+0x588>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	4620      	mov	r0, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	f7fb f987 	bl	8000adc <__aeabi_dcmplt>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f000 808b 	beq.w	80058ea <_dtoa_r+0x4da>
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 8087 	beq.w	80058ea <_dtoa_r+0x4da>
 80057dc:	f1bb 0f00 	cmp.w	fp, #0
 80057e0:	dd34      	ble.n	800584c <_dtoa_r+0x43c>
 80057e2:	4620      	mov	r0, r4
 80057e4:	4b6d      	ldr	r3, [pc, #436]	@ (800599c <_dtoa_r+0x58c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fa ff05 	bl	80005f8 <__aeabi_dmul>
 80057ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057f2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80057f6:	3601      	adds	r6, #1
 80057f8:	465c      	mov	r4, fp
 80057fa:	4630      	mov	r0, r6
 80057fc:	f7fa fe92 	bl	8000524 <__aeabi_i2d>
 8005800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005804:	f7fa fef8 	bl	80005f8 <__aeabi_dmul>
 8005808:	4b65      	ldr	r3, [pc, #404]	@ (80059a0 <_dtoa_r+0x590>)
 800580a:	2200      	movs	r2, #0
 800580c:	f7fa fd3e 	bl	800028c <__adddf3>
 8005810:	4605      	mov	r5, r0
 8005812:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005816:	2c00      	cmp	r4, #0
 8005818:	d16a      	bne.n	80058f0 <_dtoa_r+0x4e0>
 800581a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800581e:	4b61      	ldr	r3, [pc, #388]	@ (80059a4 <_dtoa_r+0x594>)
 8005820:	2200      	movs	r2, #0
 8005822:	f7fa fd31 	bl	8000288 <__aeabi_dsub>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800582e:	462a      	mov	r2, r5
 8005830:	4633      	mov	r3, r6
 8005832:	f7fb f971 	bl	8000b18 <__aeabi_dcmpgt>
 8005836:	2800      	cmp	r0, #0
 8005838:	f040 8298 	bne.w	8005d6c <_dtoa_r+0x95c>
 800583c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005840:	462a      	mov	r2, r5
 8005842:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005846:	f7fb f949 	bl	8000adc <__aeabi_dcmplt>
 800584a:	bb38      	cbnz	r0, 800589c <_dtoa_r+0x48c>
 800584c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005850:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005854:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005856:	2b00      	cmp	r3, #0
 8005858:	f2c0 8157 	blt.w	8005b0a <_dtoa_r+0x6fa>
 800585c:	2f0e      	cmp	r7, #14
 800585e:	f300 8154 	bgt.w	8005b0a <_dtoa_r+0x6fa>
 8005862:	4b4b      	ldr	r3, [pc, #300]	@ (8005990 <_dtoa_r+0x580>)
 8005864:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005868:	ed93 7b00 	vldr	d7, [r3]
 800586c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800586e:	2b00      	cmp	r3, #0
 8005870:	ed8d 7b00 	vstr	d7, [sp]
 8005874:	f280 80e5 	bge.w	8005a42 <_dtoa_r+0x632>
 8005878:	9b03      	ldr	r3, [sp, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f300 80e1 	bgt.w	8005a42 <_dtoa_r+0x632>
 8005880:	d10c      	bne.n	800589c <_dtoa_r+0x48c>
 8005882:	4b48      	ldr	r3, [pc, #288]	@ (80059a4 <_dtoa_r+0x594>)
 8005884:	2200      	movs	r2, #0
 8005886:	ec51 0b17 	vmov	r0, r1, d7
 800588a:	f7fa feb5 	bl	80005f8 <__aeabi_dmul>
 800588e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005892:	f7fb f937 	bl	8000b04 <__aeabi_dcmpge>
 8005896:	2800      	cmp	r0, #0
 8005898:	f000 8266 	beq.w	8005d68 <_dtoa_r+0x958>
 800589c:	2400      	movs	r4, #0
 800589e:	4625      	mov	r5, r4
 80058a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058a2:	4656      	mov	r6, sl
 80058a4:	ea6f 0803 	mvn.w	r8, r3
 80058a8:	2700      	movs	r7, #0
 80058aa:	4621      	mov	r1, r4
 80058ac:	4648      	mov	r0, r9
 80058ae:	f000 fcbf 	bl	8006230 <_Bfree>
 80058b2:	2d00      	cmp	r5, #0
 80058b4:	f000 80bd 	beq.w	8005a32 <_dtoa_r+0x622>
 80058b8:	b12f      	cbz	r7, 80058c6 <_dtoa_r+0x4b6>
 80058ba:	42af      	cmp	r7, r5
 80058bc:	d003      	beq.n	80058c6 <_dtoa_r+0x4b6>
 80058be:	4639      	mov	r1, r7
 80058c0:	4648      	mov	r0, r9
 80058c2:	f000 fcb5 	bl	8006230 <_Bfree>
 80058c6:	4629      	mov	r1, r5
 80058c8:	4648      	mov	r0, r9
 80058ca:	f000 fcb1 	bl	8006230 <_Bfree>
 80058ce:	e0b0      	b.n	8005a32 <_dtoa_r+0x622>
 80058d0:	07e2      	lsls	r2, r4, #31
 80058d2:	d505      	bpl.n	80058e0 <_dtoa_r+0x4d0>
 80058d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058d8:	f7fa fe8e 	bl	80005f8 <__aeabi_dmul>
 80058dc:	3601      	adds	r6, #1
 80058de:	2301      	movs	r3, #1
 80058e0:	1064      	asrs	r4, r4, #1
 80058e2:	3508      	adds	r5, #8
 80058e4:	e762      	b.n	80057ac <_dtoa_r+0x39c>
 80058e6:	2602      	movs	r6, #2
 80058e8:	e765      	b.n	80057b6 <_dtoa_r+0x3a6>
 80058ea:	9c03      	ldr	r4, [sp, #12]
 80058ec:	46b8      	mov	r8, r7
 80058ee:	e784      	b.n	80057fa <_dtoa_r+0x3ea>
 80058f0:	4b27      	ldr	r3, [pc, #156]	@ (8005990 <_dtoa_r+0x580>)
 80058f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058fc:	4454      	add	r4, sl
 80058fe:	2900      	cmp	r1, #0
 8005900:	d054      	beq.n	80059ac <_dtoa_r+0x59c>
 8005902:	4929      	ldr	r1, [pc, #164]	@ (80059a8 <_dtoa_r+0x598>)
 8005904:	2000      	movs	r0, #0
 8005906:	f7fa ffa1 	bl	800084c <__aeabi_ddiv>
 800590a:	4633      	mov	r3, r6
 800590c:	462a      	mov	r2, r5
 800590e:	f7fa fcbb 	bl	8000288 <__aeabi_dsub>
 8005912:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005916:	4656      	mov	r6, sl
 8005918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591c:	f7fb f91c 	bl	8000b58 <__aeabi_d2iz>
 8005920:	4605      	mov	r5, r0
 8005922:	f7fa fdff 	bl	8000524 <__aeabi_i2d>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800592e:	f7fa fcab 	bl	8000288 <__aeabi_dsub>
 8005932:	3530      	adds	r5, #48	@ 0x30
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800593c:	f806 5b01 	strb.w	r5, [r6], #1
 8005940:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005944:	f7fb f8ca 	bl	8000adc <__aeabi_dcmplt>
 8005948:	2800      	cmp	r0, #0
 800594a:	d172      	bne.n	8005a32 <_dtoa_r+0x622>
 800594c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005950:	4911      	ldr	r1, [pc, #68]	@ (8005998 <_dtoa_r+0x588>)
 8005952:	2000      	movs	r0, #0
 8005954:	f7fa fc98 	bl	8000288 <__aeabi_dsub>
 8005958:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800595c:	f7fb f8be 	bl	8000adc <__aeabi_dcmplt>
 8005960:	2800      	cmp	r0, #0
 8005962:	f040 80b4 	bne.w	8005ace <_dtoa_r+0x6be>
 8005966:	42a6      	cmp	r6, r4
 8005968:	f43f af70 	beq.w	800584c <_dtoa_r+0x43c>
 800596c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005970:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <_dtoa_r+0x58c>)
 8005972:	2200      	movs	r2, #0
 8005974:	f7fa fe40 	bl	80005f8 <__aeabi_dmul>
 8005978:	4b08      	ldr	r3, [pc, #32]	@ (800599c <_dtoa_r+0x58c>)
 800597a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800597e:	2200      	movs	r2, #0
 8005980:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005984:	f7fa fe38 	bl	80005f8 <__aeabi_dmul>
 8005988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800598c:	e7c4      	b.n	8005918 <_dtoa_r+0x508>
 800598e:	bf00      	nop
 8005990:	08009630 	.word	0x08009630
 8005994:	08009608 	.word	0x08009608
 8005998:	3ff00000 	.word	0x3ff00000
 800599c:	40240000 	.word	0x40240000
 80059a0:	401c0000 	.word	0x401c0000
 80059a4:	40140000 	.word	0x40140000
 80059a8:	3fe00000 	.word	0x3fe00000
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	f7fa fe22 	bl	80005f8 <__aeabi_dmul>
 80059b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80059ba:	4656      	mov	r6, sl
 80059bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c0:	f7fb f8ca 	bl	8000b58 <__aeabi_d2iz>
 80059c4:	4605      	mov	r5, r0
 80059c6:	f7fa fdad 	bl	8000524 <__aeabi_i2d>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d2:	f7fa fc59 	bl	8000288 <__aeabi_dsub>
 80059d6:	3530      	adds	r5, #48	@ 0x30
 80059d8:	f806 5b01 	strb.w	r5, [r6], #1
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	d124      	bne.n	8005a36 <_dtoa_r+0x626>
 80059ec:	4baf      	ldr	r3, [pc, #700]	@ (8005cac <_dtoa_r+0x89c>)
 80059ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059f2:	f7fa fc4b 	bl	800028c <__adddf3>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059fe:	f7fb f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d163      	bne.n	8005ace <_dtoa_r+0x6be>
 8005a06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a0a:	49a8      	ldr	r1, [pc, #672]	@ (8005cac <_dtoa_r+0x89c>)
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f7fa fc3b 	bl	8000288 <__aeabi_dsub>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a1a:	f7fb f85f 	bl	8000adc <__aeabi_dcmplt>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f43f af14 	beq.w	800584c <_dtoa_r+0x43c>
 8005a24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a26:	1e73      	subs	r3, r6, #1
 8005a28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a2e:	2b30      	cmp	r3, #48	@ 0x30
 8005a30:	d0f8      	beq.n	8005a24 <_dtoa_r+0x614>
 8005a32:	4647      	mov	r7, r8
 8005a34:	e03b      	b.n	8005aae <_dtoa_r+0x69e>
 8005a36:	4b9e      	ldr	r3, [pc, #632]	@ (8005cb0 <_dtoa_r+0x8a0>)
 8005a38:	f7fa fdde 	bl	80005f8 <__aeabi_dmul>
 8005a3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a40:	e7bc      	b.n	80059bc <_dtoa_r+0x5ac>
 8005a42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a46:	4656      	mov	r6, sl
 8005a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fefc 	bl	800084c <__aeabi_ddiv>
 8005a54:	f7fb f880 	bl	8000b58 <__aeabi_d2iz>
 8005a58:	4680      	mov	r8, r0
 8005a5a:	f7fa fd63 	bl	8000524 <__aeabi_i2d>
 8005a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a62:	f7fa fdc9 	bl	80005f8 <__aeabi_dmul>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a72:	f7fa fc09 	bl	8000288 <__aeabi_dsub>
 8005a76:	f806 4b01 	strb.w	r4, [r6], #1
 8005a7a:	9d03      	ldr	r5, [sp, #12]
 8005a7c:	eba6 040a 	sub.w	r4, r6, sl
 8005a80:	42a5      	cmp	r5, r4
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	d133      	bne.n	8005af0 <_dtoa_r+0x6e0>
 8005a88:	f7fa fc00 	bl	800028c <__adddf3>
 8005a8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a90:	4604      	mov	r4, r0
 8005a92:	460d      	mov	r5, r1
 8005a94:	f7fb f840 	bl	8000b18 <__aeabi_dcmpgt>
 8005a98:	b9c0      	cbnz	r0, 8005acc <_dtoa_r+0x6bc>
 8005a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7fb f811 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aa6:	b110      	cbz	r0, 8005aae <_dtoa_r+0x69e>
 8005aa8:	f018 0f01 	tst.w	r8, #1
 8005aac:	d10e      	bne.n	8005acc <_dtoa_r+0x6bc>
 8005aae:	9902      	ldr	r1, [sp, #8]
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f000 fbbd 	bl	8006230 <_Bfree>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	7033      	strb	r3, [r6, #0]
 8005aba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005abc:	3701      	adds	r7, #1
 8005abe:	601f      	str	r7, [r3, #0]
 8005ac0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 824b 	beq.w	8005f5e <_dtoa_r+0xb4e>
 8005ac8:	601e      	str	r6, [r3, #0]
 8005aca:	e248      	b.n	8005f5e <_dtoa_r+0xb4e>
 8005acc:	46b8      	mov	r8, r7
 8005ace:	4633      	mov	r3, r6
 8005ad0:	461e      	mov	r6, r3
 8005ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ad6:	2a39      	cmp	r2, #57	@ 0x39
 8005ad8:	d106      	bne.n	8005ae8 <_dtoa_r+0x6d8>
 8005ada:	459a      	cmp	sl, r3
 8005adc:	d1f8      	bne.n	8005ad0 <_dtoa_r+0x6c0>
 8005ade:	2230      	movs	r2, #48	@ 0x30
 8005ae0:	f108 0801 	add.w	r8, r8, #1
 8005ae4:	f88a 2000 	strb.w	r2, [sl]
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	3201      	adds	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e7a0      	b.n	8005a32 <_dtoa_r+0x622>
 8005af0:	4b6f      	ldr	r3, [pc, #444]	@ (8005cb0 <_dtoa_r+0x8a0>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	f7fa fd80 	bl	80005f8 <__aeabi_dmul>
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	4604      	mov	r4, r0
 8005afe:	460d      	mov	r5, r1
 8005b00:	f7fa ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d09f      	beq.n	8005a48 <_dtoa_r+0x638>
 8005b08:	e7d1      	b.n	8005aae <_dtoa_r+0x69e>
 8005b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	f000 80ea 	beq.w	8005ce6 <_dtoa_r+0x8d6>
 8005b12:	9a07      	ldr	r2, [sp, #28]
 8005b14:	2a01      	cmp	r2, #1
 8005b16:	f300 80cd 	bgt.w	8005cb4 <_dtoa_r+0x8a4>
 8005b1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	f000 80c1 	beq.w	8005ca4 <_dtoa_r+0x894>
 8005b22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b26:	9c08      	ldr	r4, [sp, #32]
 8005b28:	9e00      	ldr	r6, [sp, #0]
 8005b2a:	9a00      	ldr	r2, [sp, #0]
 8005b2c:	441a      	add	r2, r3
 8005b2e:	9200      	str	r2, [sp, #0]
 8005b30:	9a06      	ldr	r2, [sp, #24]
 8005b32:	2101      	movs	r1, #1
 8005b34:	441a      	add	r2, r3
 8005b36:	4648      	mov	r0, r9
 8005b38:	9206      	str	r2, [sp, #24]
 8005b3a:	f000 fc77 	bl	800642c <__i2b>
 8005b3e:	4605      	mov	r5, r0
 8005b40:	b166      	cbz	r6, 8005b5c <_dtoa_r+0x74c>
 8005b42:	9b06      	ldr	r3, [sp, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	dd09      	ble.n	8005b5c <_dtoa_r+0x74c>
 8005b48:	42b3      	cmp	r3, r6
 8005b4a:	9a00      	ldr	r2, [sp, #0]
 8005b4c:	bfa8      	it	ge
 8005b4e:	4633      	movge	r3, r6
 8005b50:	1ad2      	subs	r2, r2, r3
 8005b52:	9200      	str	r2, [sp, #0]
 8005b54:	9a06      	ldr	r2, [sp, #24]
 8005b56:	1af6      	subs	r6, r6, r3
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	9306      	str	r3, [sp, #24]
 8005b5c:	9b08      	ldr	r3, [sp, #32]
 8005b5e:	b30b      	cbz	r3, 8005ba4 <_dtoa_r+0x794>
 8005b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80c6 	beq.w	8005cf4 <_dtoa_r+0x8e4>
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	f000 80c0 	beq.w	8005cee <_dtoa_r+0x8de>
 8005b6e:	4629      	mov	r1, r5
 8005b70:	4622      	mov	r2, r4
 8005b72:	4648      	mov	r0, r9
 8005b74:	f000 fd12 	bl	800659c <__pow5mult>
 8005b78:	9a02      	ldr	r2, [sp, #8]
 8005b7a:	4601      	mov	r1, r0
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	4648      	mov	r0, r9
 8005b80:	f000 fc6a 	bl	8006458 <__multiply>
 8005b84:	9902      	ldr	r1, [sp, #8]
 8005b86:	4680      	mov	r8, r0
 8005b88:	4648      	mov	r0, r9
 8005b8a:	f000 fb51 	bl	8006230 <_Bfree>
 8005b8e:	9b08      	ldr	r3, [sp, #32]
 8005b90:	1b1b      	subs	r3, r3, r4
 8005b92:	9308      	str	r3, [sp, #32]
 8005b94:	f000 80b1 	beq.w	8005cfa <_dtoa_r+0x8ea>
 8005b98:	9a08      	ldr	r2, [sp, #32]
 8005b9a:	4641      	mov	r1, r8
 8005b9c:	4648      	mov	r0, r9
 8005b9e:	f000 fcfd 	bl	800659c <__pow5mult>
 8005ba2:	9002      	str	r0, [sp, #8]
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4648      	mov	r0, r9
 8005ba8:	f000 fc40 	bl	800642c <__i2b>
 8005bac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bae:	4604      	mov	r4, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 81d8 	beq.w	8005f66 <_dtoa_r+0xb56>
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4601      	mov	r1, r0
 8005bba:	4648      	mov	r0, r9
 8005bbc:	f000 fcee 	bl	800659c <__pow5mult>
 8005bc0:	9b07      	ldr	r3, [sp, #28]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	f300 809f 	bgt.w	8005d08 <_dtoa_r+0x8f8>
 8005bca:	9b04      	ldr	r3, [sp, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f040 8097 	bne.w	8005d00 <_dtoa_r+0x8f0>
 8005bd2:	9b05      	ldr	r3, [sp, #20]
 8005bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f040 8093 	bne.w	8005d04 <_dtoa_r+0x8f4>
 8005bde:	9b05      	ldr	r3, [sp, #20]
 8005be0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005be4:	0d1b      	lsrs	r3, r3, #20
 8005be6:	051b      	lsls	r3, r3, #20
 8005be8:	b133      	cbz	r3, 8005bf8 <_dtoa_r+0x7e8>
 8005bea:	9b00      	ldr	r3, [sp, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	9b06      	ldr	r3, [sp, #24]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	9306      	str	r3, [sp, #24]
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	9308      	str	r3, [sp, #32]
 8005bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 81b8 	beq.w	8005f72 <_dtoa_r+0xb62>
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c08:	6918      	ldr	r0, [r3, #16]
 8005c0a:	f000 fbc3 	bl	8006394 <__hi0bits>
 8005c0e:	f1c0 0020 	rsb	r0, r0, #32
 8005c12:	9b06      	ldr	r3, [sp, #24]
 8005c14:	4418      	add	r0, r3
 8005c16:	f010 001f 	ands.w	r0, r0, #31
 8005c1a:	f000 8082 	beq.w	8005d22 <_dtoa_r+0x912>
 8005c1e:	f1c0 0320 	rsb	r3, r0, #32
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	dd73      	ble.n	8005d0e <_dtoa_r+0x8fe>
 8005c26:	9b00      	ldr	r3, [sp, #0]
 8005c28:	f1c0 001c 	rsb	r0, r0, #28
 8005c2c:	4403      	add	r3, r0
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	4403      	add	r3, r0
 8005c34:	4406      	add	r6, r0
 8005c36:	9306      	str	r3, [sp, #24]
 8005c38:	9b00      	ldr	r3, [sp, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	dd05      	ble.n	8005c4a <_dtoa_r+0x83a>
 8005c3e:	9902      	ldr	r1, [sp, #8]
 8005c40:	461a      	mov	r2, r3
 8005c42:	4648      	mov	r0, r9
 8005c44:	f000 fd04 	bl	8006650 <__lshift>
 8005c48:	9002      	str	r0, [sp, #8]
 8005c4a:	9b06      	ldr	r3, [sp, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	dd05      	ble.n	8005c5c <_dtoa_r+0x84c>
 8005c50:	4621      	mov	r1, r4
 8005c52:	461a      	mov	r2, r3
 8005c54:	4648      	mov	r0, r9
 8005c56:	f000 fcfb 	bl	8006650 <__lshift>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d061      	beq.n	8005d26 <_dtoa_r+0x916>
 8005c62:	9802      	ldr	r0, [sp, #8]
 8005c64:	4621      	mov	r1, r4
 8005c66:	f000 fd5f 	bl	8006728 <__mcmp>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	da5b      	bge.n	8005d26 <_dtoa_r+0x916>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9902      	ldr	r1, [sp, #8]
 8005c72:	220a      	movs	r2, #10
 8005c74:	4648      	mov	r0, r9
 8005c76:	f000 fafd 	bl	8006274 <__multadd>
 8005c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c7c:	9002      	str	r0, [sp, #8]
 8005c7e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8177 	beq.w	8005f76 <_dtoa_r+0xb66>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	4648      	mov	r0, r9
 8005c90:	f000 faf0 	bl	8006274 <__multadd>
 8005c94:	f1bb 0f00 	cmp.w	fp, #0
 8005c98:	4605      	mov	r5, r0
 8005c9a:	dc6f      	bgt.n	8005d7c <_dtoa_r+0x96c>
 8005c9c:	9b07      	ldr	r3, [sp, #28]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	dc49      	bgt.n	8005d36 <_dtoa_r+0x926>
 8005ca2:	e06b      	b.n	8005d7c <_dtoa_r+0x96c>
 8005ca4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ca6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005caa:	e73c      	b.n	8005b26 <_dtoa_r+0x716>
 8005cac:	3fe00000 	.word	0x3fe00000
 8005cb0:	40240000 	.word	0x40240000
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	1e5c      	subs	r4, r3, #1
 8005cb8:	9b08      	ldr	r3, [sp, #32]
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	db09      	blt.n	8005cd2 <_dtoa_r+0x8c2>
 8005cbe:	1b1c      	subs	r4, r3, r4
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f6bf af30 	bge.w	8005b28 <_dtoa_r+0x718>
 8005cc8:	9b00      	ldr	r3, [sp, #0]
 8005cca:	9a03      	ldr	r2, [sp, #12]
 8005ccc:	1a9e      	subs	r6, r3, r2
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e72b      	b.n	8005b2a <_dtoa_r+0x71a>
 8005cd2:	9b08      	ldr	r3, [sp, #32]
 8005cd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005cd6:	9408      	str	r4, [sp, #32]
 8005cd8:	1ae3      	subs	r3, r4, r3
 8005cda:	441a      	add	r2, r3
 8005cdc:	9e00      	ldr	r6, [sp, #0]
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005ce2:	2400      	movs	r4, #0
 8005ce4:	e721      	b.n	8005b2a <_dtoa_r+0x71a>
 8005ce6:	9c08      	ldr	r4, [sp, #32]
 8005ce8:	9e00      	ldr	r6, [sp, #0]
 8005cea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005cec:	e728      	b.n	8005b40 <_dtoa_r+0x730>
 8005cee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005cf2:	e751      	b.n	8005b98 <_dtoa_r+0x788>
 8005cf4:	9a08      	ldr	r2, [sp, #32]
 8005cf6:	9902      	ldr	r1, [sp, #8]
 8005cf8:	e750      	b.n	8005b9c <_dtoa_r+0x78c>
 8005cfa:	f8cd 8008 	str.w	r8, [sp, #8]
 8005cfe:	e751      	b.n	8005ba4 <_dtoa_r+0x794>
 8005d00:	2300      	movs	r3, #0
 8005d02:	e779      	b.n	8005bf8 <_dtoa_r+0x7e8>
 8005d04:	9b04      	ldr	r3, [sp, #16]
 8005d06:	e777      	b.n	8005bf8 <_dtoa_r+0x7e8>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9308      	str	r3, [sp, #32]
 8005d0c:	e779      	b.n	8005c02 <_dtoa_r+0x7f2>
 8005d0e:	d093      	beq.n	8005c38 <_dtoa_r+0x828>
 8005d10:	9a00      	ldr	r2, [sp, #0]
 8005d12:	331c      	adds	r3, #28
 8005d14:	441a      	add	r2, r3
 8005d16:	9200      	str	r2, [sp, #0]
 8005d18:	9a06      	ldr	r2, [sp, #24]
 8005d1a:	441a      	add	r2, r3
 8005d1c:	441e      	add	r6, r3
 8005d1e:	9206      	str	r2, [sp, #24]
 8005d20:	e78a      	b.n	8005c38 <_dtoa_r+0x828>
 8005d22:	4603      	mov	r3, r0
 8005d24:	e7f4      	b.n	8005d10 <_dtoa_r+0x900>
 8005d26:	9b03      	ldr	r3, [sp, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	46b8      	mov	r8, r7
 8005d2c:	dc20      	bgt.n	8005d70 <_dtoa_r+0x960>
 8005d2e:	469b      	mov	fp, r3
 8005d30:	9b07      	ldr	r3, [sp, #28]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	dd1e      	ble.n	8005d74 <_dtoa_r+0x964>
 8005d36:	f1bb 0f00 	cmp.w	fp, #0
 8005d3a:	f47f adb1 	bne.w	80058a0 <_dtoa_r+0x490>
 8005d3e:	4621      	mov	r1, r4
 8005d40:	465b      	mov	r3, fp
 8005d42:	2205      	movs	r2, #5
 8005d44:	4648      	mov	r0, r9
 8005d46:	f000 fa95 	bl	8006274 <__multadd>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	9802      	ldr	r0, [sp, #8]
 8005d50:	f000 fcea 	bl	8006728 <__mcmp>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f77f ada3 	ble.w	80058a0 <_dtoa_r+0x490>
 8005d5a:	4656      	mov	r6, sl
 8005d5c:	2331      	movs	r3, #49	@ 0x31
 8005d5e:	f806 3b01 	strb.w	r3, [r6], #1
 8005d62:	f108 0801 	add.w	r8, r8, #1
 8005d66:	e59f      	b.n	80058a8 <_dtoa_r+0x498>
 8005d68:	9c03      	ldr	r4, [sp, #12]
 8005d6a:	46b8      	mov	r8, r7
 8005d6c:	4625      	mov	r5, r4
 8005d6e:	e7f4      	b.n	8005d5a <_dtoa_r+0x94a>
 8005d70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8101 	beq.w	8005f7e <_dtoa_r+0xb6e>
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	dd05      	ble.n	8005d8c <_dtoa_r+0x97c>
 8005d80:	4629      	mov	r1, r5
 8005d82:	4632      	mov	r2, r6
 8005d84:	4648      	mov	r0, r9
 8005d86:	f000 fc63 	bl	8006650 <__lshift>
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	9b08      	ldr	r3, [sp, #32]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d05c      	beq.n	8005e4c <_dtoa_r+0xa3c>
 8005d92:	6869      	ldr	r1, [r5, #4]
 8005d94:	4648      	mov	r0, r9
 8005d96:	f000 fa0b 	bl	80061b0 <_Balloc>
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	b928      	cbnz	r0, 8005daa <_dtoa_r+0x99a>
 8005d9e:	4b82      	ldr	r3, [pc, #520]	@ (8005fa8 <_dtoa_r+0xb98>)
 8005da0:	4602      	mov	r2, r0
 8005da2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005da6:	f7ff bb4a 	b.w	800543e <_dtoa_r+0x2e>
 8005daa:	692a      	ldr	r2, [r5, #16]
 8005dac:	3202      	adds	r2, #2
 8005dae:	0092      	lsls	r2, r2, #2
 8005db0:	f105 010c 	add.w	r1, r5, #12
 8005db4:	300c      	adds	r0, #12
 8005db6:	f002 fe37 	bl	8008a28 <memcpy>
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4648      	mov	r0, r9
 8005dc0:	f000 fc46 	bl	8006650 <__lshift>
 8005dc4:	f10a 0301 	add.w	r3, sl, #1
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	eb0a 030b 	add.w	r3, sl, fp
 8005dce:	9308      	str	r3, [sp, #32]
 8005dd0:	9b04      	ldr	r3, [sp, #16]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	462f      	mov	r7, r5
 8005dd8:	9306      	str	r3, [sp, #24]
 8005dda:	4605      	mov	r5, r0
 8005ddc:	9b00      	ldr	r3, [sp, #0]
 8005dde:	9802      	ldr	r0, [sp, #8]
 8005de0:	4621      	mov	r1, r4
 8005de2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005de6:	f7ff fa8b 	bl	8005300 <quorem>
 8005dea:	4603      	mov	r3, r0
 8005dec:	3330      	adds	r3, #48	@ 0x30
 8005dee:	9003      	str	r0, [sp, #12]
 8005df0:	4639      	mov	r1, r7
 8005df2:	9802      	ldr	r0, [sp, #8]
 8005df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df6:	f000 fc97 	bl	8006728 <__mcmp>
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	9004      	str	r0, [sp, #16]
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4648      	mov	r0, r9
 8005e02:	f000 fcad 	bl	8006760 <__mdiff>
 8005e06:	68c2      	ldr	r2, [r0, #12]
 8005e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	bb02      	cbnz	r2, 8005e50 <_dtoa_r+0xa40>
 8005e0e:	4601      	mov	r1, r0
 8005e10:	9802      	ldr	r0, [sp, #8]
 8005e12:	f000 fc89 	bl	8006728 <__mcmp>
 8005e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4648      	mov	r0, r9
 8005e1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e22:	f000 fa05 	bl	8006230 <_Bfree>
 8005e26:	9b07      	ldr	r3, [sp, #28]
 8005e28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e2a:	9e00      	ldr	r6, [sp, #0]
 8005e2c:	ea42 0103 	orr.w	r1, r2, r3
 8005e30:	9b06      	ldr	r3, [sp, #24]
 8005e32:	4319      	orrs	r1, r3
 8005e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e36:	d10d      	bne.n	8005e54 <_dtoa_r+0xa44>
 8005e38:	2b39      	cmp	r3, #57	@ 0x39
 8005e3a:	d027      	beq.n	8005e8c <_dtoa_r+0xa7c>
 8005e3c:	9a04      	ldr	r2, [sp, #16]
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	dd01      	ble.n	8005e46 <_dtoa_r+0xa36>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	3331      	adds	r3, #49	@ 0x31
 8005e46:	f88b 3000 	strb.w	r3, [fp]
 8005e4a:	e52e      	b.n	80058aa <_dtoa_r+0x49a>
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	e7b9      	b.n	8005dc4 <_dtoa_r+0x9b4>
 8005e50:	2201      	movs	r2, #1
 8005e52:	e7e2      	b.n	8005e1a <_dtoa_r+0xa0a>
 8005e54:	9904      	ldr	r1, [sp, #16]
 8005e56:	2900      	cmp	r1, #0
 8005e58:	db04      	blt.n	8005e64 <_dtoa_r+0xa54>
 8005e5a:	9807      	ldr	r0, [sp, #28]
 8005e5c:	4301      	orrs	r1, r0
 8005e5e:	9806      	ldr	r0, [sp, #24]
 8005e60:	4301      	orrs	r1, r0
 8005e62:	d120      	bne.n	8005ea6 <_dtoa_r+0xa96>
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	ddee      	ble.n	8005e46 <_dtoa_r+0xa36>
 8005e68:	9902      	ldr	r1, [sp, #8]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4648      	mov	r0, r9
 8005e70:	f000 fbee 	bl	8006650 <__lshift>
 8005e74:	4621      	mov	r1, r4
 8005e76:	9002      	str	r0, [sp, #8]
 8005e78:	f000 fc56 	bl	8006728 <__mcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	9b00      	ldr	r3, [sp, #0]
 8005e80:	dc02      	bgt.n	8005e88 <_dtoa_r+0xa78>
 8005e82:	d1e0      	bne.n	8005e46 <_dtoa_r+0xa36>
 8005e84:	07da      	lsls	r2, r3, #31
 8005e86:	d5de      	bpl.n	8005e46 <_dtoa_r+0xa36>
 8005e88:	2b39      	cmp	r3, #57	@ 0x39
 8005e8a:	d1da      	bne.n	8005e42 <_dtoa_r+0xa32>
 8005e8c:	2339      	movs	r3, #57	@ 0x39
 8005e8e:	f88b 3000 	strb.w	r3, [fp]
 8005e92:	4633      	mov	r3, r6
 8005e94:	461e      	mov	r6, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e9c:	2a39      	cmp	r2, #57	@ 0x39
 8005e9e:	d04e      	beq.n	8005f3e <_dtoa_r+0xb2e>
 8005ea0:	3201      	adds	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e501      	b.n	80058aa <_dtoa_r+0x49a>
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	dd03      	ble.n	8005eb2 <_dtoa_r+0xaa2>
 8005eaa:	2b39      	cmp	r3, #57	@ 0x39
 8005eac:	d0ee      	beq.n	8005e8c <_dtoa_r+0xa7c>
 8005eae:	3301      	adds	r3, #1
 8005eb0:	e7c9      	b.n	8005e46 <_dtoa_r+0xa36>
 8005eb2:	9a00      	ldr	r2, [sp, #0]
 8005eb4:	9908      	ldr	r1, [sp, #32]
 8005eb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005eba:	428a      	cmp	r2, r1
 8005ebc:	d028      	beq.n	8005f10 <_dtoa_r+0xb00>
 8005ebe:	9902      	ldr	r1, [sp, #8]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	4648      	mov	r0, r9
 8005ec6:	f000 f9d5 	bl	8006274 <__multadd>
 8005eca:	42af      	cmp	r7, r5
 8005ecc:	9002      	str	r0, [sp, #8]
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	f04f 020a 	mov.w	r2, #10
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	4648      	mov	r0, r9
 8005eda:	d107      	bne.n	8005eec <_dtoa_r+0xadc>
 8005edc:	f000 f9ca 	bl	8006274 <__multadd>
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	e777      	b.n	8005ddc <_dtoa_r+0x9cc>
 8005eec:	f000 f9c2 	bl	8006274 <__multadd>
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4648      	mov	r0, r9
 8005efa:	f000 f9bb 	bl	8006274 <__multadd>
 8005efe:	4605      	mov	r5, r0
 8005f00:	e7f0      	b.n	8005ee4 <_dtoa_r+0xad4>
 8005f02:	f1bb 0f00 	cmp.w	fp, #0
 8005f06:	bfcc      	ite	gt
 8005f08:	465e      	movgt	r6, fp
 8005f0a:	2601      	movle	r6, #1
 8005f0c:	4456      	add	r6, sl
 8005f0e:	2700      	movs	r7, #0
 8005f10:	9902      	ldr	r1, [sp, #8]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	2201      	movs	r2, #1
 8005f16:	4648      	mov	r0, r9
 8005f18:	f000 fb9a 	bl	8006650 <__lshift>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	9002      	str	r0, [sp, #8]
 8005f20:	f000 fc02 	bl	8006728 <__mcmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	dcb4      	bgt.n	8005e92 <_dtoa_r+0xa82>
 8005f28:	d102      	bne.n	8005f30 <_dtoa_r+0xb20>
 8005f2a:	9b00      	ldr	r3, [sp, #0]
 8005f2c:	07db      	lsls	r3, r3, #31
 8005f2e:	d4b0      	bmi.n	8005e92 <_dtoa_r+0xa82>
 8005f30:	4633      	mov	r3, r6
 8005f32:	461e      	mov	r6, r3
 8005f34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f38:	2a30      	cmp	r2, #48	@ 0x30
 8005f3a:	d0fa      	beq.n	8005f32 <_dtoa_r+0xb22>
 8005f3c:	e4b5      	b.n	80058aa <_dtoa_r+0x49a>
 8005f3e:	459a      	cmp	sl, r3
 8005f40:	d1a8      	bne.n	8005e94 <_dtoa_r+0xa84>
 8005f42:	2331      	movs	r3, #49	@ 0x31
 8005f44:	f108 0801 	add.w	r8, r8, #1
 8005f48:	f88a 3000 	strb.w	r3, [sl]
 8005f4c:	e4ad      	b.n	80058aa <_dtoa_r+0x49a>
 8005f4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005fac <_dtoa_r+0xb9c>
 8005f54:	b11b      	cbz	r3, 8005f5e <_dtoa_r+0xb4e>
 8005f56:	f10a 0308 	add.w	r3, sl, #8
 8005f5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	4650      	mov	r0, sl
 8005f60:	b017      	add	sp, #92	@ 0x5c
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	f77f ae2e 	ble.w	8005bca <_dtoa_r+0x7ba>
 8005f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f70:	9308      	str	r3, [sp, #32]
 8005f72:	2001      	movs	r0, #1
 8005f74:	e64d      	b.n	8005c12 <_dtoa_r+0x802>
 8005f76:	f1bb 0f00 	cmp.w	fp, #0
 8005f7a:	f77f aed9 	ble.w	8005d30 <_dtoa_r+0x920>
 8005f7e:	4656      	mov	r6, sl
 8005f80:	9802      	ldr	r0, [sp, #8]
 8005f82:	4621      	mov	r1, r4
 8005f84:	f7ff f9bc 	bl	8005300 <quorem>
 8005f88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f8c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f90:	eba6 020a 	sub.w	r2, r6, sl
 8005f94:	4593      	cmp	fp, r2
 8005f96:	ddb4      	ble.n	8005f02 <_dtoa_r+0xaf2>
 8005f98:	9902      	ldr	r1, [sp, #8]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	220a      	movs	r2, #10
 8005f9e:	4648      	mov	r0, r9
 8005fa0:	f000 f968 	bl	8006274 <__multadd>
 8005fa4:	9002      	str	r0, [sp, #8]
 8005fa6:	e7eb      	b.n	8005f80 <_dtoa_r+0xb70>
 8005fa8:	080094bf 	.word	0x080094bf
 8005fac:	08009443 	.word	0x08009443

08005fb0 <_free_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	d041      	beq.n	800603c <_free_r+0x8c>
 8005fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fbc:	1f0c      	subs	r4, r1, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfb8      	it	lt
 8005fc2:	18e4      	addlt	r4, r4, r3
 8005fc4:	f000 f8e8 	bl	8006198 <__malloc_lock>
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006040 <_free_r+0x90>)
 8005fca:	6813      	ldr	r3, [r2, #0]
 8005fcc:	b933      	cbnz	r3, 8005fdc <_free_r+0x2c>
 8005fce:	6063      	str	r3, [r4, #4]
 8005fd0:	6014      	str	r4, [r2, #0]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd8:	f000 b8e4 	b.w	80061a4 <__malloc_unlock>
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d908      	bls.n	8005ff2 <_free_r+0x42>
 8005fe0:	6820      	ldr	r0, [r4, #0]
 8005fe2:	1821      	adds	r1, r4, r0
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	bf01      	itttt	eq
 8005fe8:	6819      	ldreq	r1, [r3, #0]
 8005fea:	685b      	ldreq	r3, [r3, #4]
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	e7ed      	b.n	8005fce <_free_r+0x1e>
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	b10b      	cbz	r3, 8005ffc <_free_r+0x4c>
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	d9fa      	bls.n	8005ff2 <_free_r+0x42>
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	1850      	adds	r0, r2, r1
 8006000:	42a0      	cmp	r0, r4
 8006002:	d10b      	bne.n	800601c <_free_r+0x6c>
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	4401      	add	r1, r0
 8006008:	1850      	adds	r0, r2, r1
 800600a:	4283      	cmp	r3, r0
 800600c:	6011      	str	r1, [r2, #0]
 800600e:	d1e0      	bne.n	8005fd2 <_free_r+0x22>
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	6053      	str	r3, [r2, #4]
 8006016:	4408      	add	r0, r1
 8006018:	6010      	str	r0, [r2, #0]
 800601a:	e7da      	b.n	8005fd2 <_free_r+0x22>
 800601c:	d902      	bls.n	8006024 <_free_r+0x74>
 800601e:	230c      	movs	r3, #12
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	e7d6      	b.n	8005fd2 <_free_r+0x22>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	1821      	adds	r1, r4, r0
 8006028:	428b      	cmp	r3, r1
 800602a:	bf04      	itt	eq
 800602c:	6819      	ldreq	r1, [r3, #0]
 800602e:	685b      	ldreq	r3, [r3, #4]
 8006030:	6063      	str	r3, [r4, #4]
 8006032:	bf04      	itt	eq
 8006034:	1809      	addeq	r1, r1, r0
 8006036:	6021      	streq	r1, [r4, #0]
 8006038:	6054      	str	r4, [r2, #4]
 800603a:	e7ca      	b.n	8005fd2 <_free_r+0x22>
 800603c:	bd38      	pop	{r3, r4, r5, pc}
 800603e:	bf00      	nop
 8006040:	20000414 	.word	0x20000414

08006044 <malloc>:
 8006044:	4b02      	ldr	r3, [pc, #8]	@ (8006050 <malloc+0xc>)
 8006046:	4601      	mov	r1, r0
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	f000 b825 	b.w	8006098 <_malloc_r>
 800604e:	bf00      	nop
 8006050:	20000018 	.word	0x20000018

08006054 <sbrk_aligned>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	4e0f      	ldr	r6, [pc, #60]	@ (8006094 <sbrk_aligned+0x40>)
 8006058:	460c      	mov	r4, r1
 800605a:	6831      	ldr	r1, [r6, #0]
 800605c:	4605      	mov	r5, r0
 800605e:	b911      	cbnz	r1, 8006066 <sbrk_aligned+0x12>
 8006060:	f002 fcd2 	bl	8008a08 <_sbrk_r>
 8006064:	6030      	str	r0, [r6, #0]
 8006066:	4621      	mov	r1, r4
 8006068:	4628      	mov	r0, r5
 800606a:	f002 fccd 	bl	8008a08 <_sbrk_r>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	d103      	bne.n	800607a <sbrk_aligned+0x26>
 8006072:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006076:	4620      	mov	r0, r4
 8006078:	bd70      	pop	{r4, r5, r6, pc}
 800607a:	1cc4      	adds	r4, r0, #3
 800607c:	f024 0403 	bic.w	r4, r4, #3
 8006080:	42a0      	cmp	r0, r4
 8006082:	d0f8      	beq.n	8006076 <sbrk_aligned+0x22>
 8006084:	1a21      	subs	r1, r4, r0
 8006086:	4628      	mov	r0, r5
 8006088:	f002 fcbe 	bl	8008a08 <_sbrk_r>
 800608c:	3001      	adds	r0, #1
 800608e:	d1f2      	bne.n	8006076 <sbrk_aligned+0x22>
 8006090:	e7ef      	b.n	8006072 <sbrk_aligned+0x1e>
 8006092:	bf00      	nop
 8006094:	20000410 	.word	0x20000410

08006098 <_malloc_r>:
 8006098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800609c:	1ccd      	adds	r5, r1, #3
 800609e:	f025 0503 	bic.w	r5, r5, #3
 80060a2:	3508      	adds	r5, #8
 80060a4:	2d0c      	cmp	r5, #12
 80060a6:	bf38      	it	cc
 80060a8:	250c      	movcc	r5, #12
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	4606      	mov	r6, r0
 80060ae:	db01      	blt.n	80060b4 <_malloc_r+0x1c>
 80060b0:	42a9      	cmp	r1, r5
 80060b2:	d904      	bls.n	80060be <_malloc_r+0x26>
 80060b4:	230c      	movs	r3, #12
 80060b6:	6033      	str	r3, [r6, #0]
 80060b8:	2000      	movs	r0, #0
 80060ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006194 <_malloc_r+0xfc>
 80060c2:	f000 f869 	bl	8006198 <__malloc_lock>
 80060c6:	f8d8 3000 	ldr.w	r3, [r8]
 80060ca:	461c      	mov	r4, r3
 80060cc:	bb44      	cbnz	r4, 8006120 <_malloc_r+0x88>
 80060ce:	4629      	mov	r1, r5
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7ff ffbf 	bl	8006054 <sbrk_aligned>
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	4604      	mov	r4, r0
 80060da:	d158      	bne.n	800618e <_malloc_r+0xf6>
 80060dc:	f8d8 4000 	ldr.w	r4, [r8]
 80060e0:	4627      	mov	r7, r4
 80060e2:	2f00      	cmp	r7, #0
 80060e4:	d143      	bne.n	800616e <_malloc_r+0xd6>
 80060e6:	2c00      	cmp	r4, #0
 80060e8:	d04b      	beq.n	8006182 <_malloc_r+0xea>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	4639      	mov	r1, r7
 80060ee:	4630      	mov	r0, r6
 80060f0:	eb04 0903 	add.w	r9, r4, r3
 80060f4:	f002 fc88 	bl	8008a08 <_sbrk_r>
 80060f8:	4581      	cmp	r9, r0
 80060fa:	d142      	bne.n	8006182 <_malloc_r+0xea>
 80060fc:	6821      	ldr	r1, [r4, #0]
 80060fe:	1a6d      	subs	r5, r5, r1
 8006100:	4629      	mov	r1, r5
 8006102:	4630      	mov	r0, r6
 8006104:	f7ff ffa6 	bl	8006054 <sbrk_aligned>
 8006108:	3001      	adds	r0, #1
 800610a:	d03a      	beq.n	8006182 <_malloc_r+0xea>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	442b      	add	r3, r5
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	f8d8 3000 	ldr.w	r3, [r8]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	bb62      	cbnz	r2, 8006174 <_malloc_r+0xdc>
 800611a:	f8c8 7000 	str.w	r7, [r8]
 800611e:	e00f      	b.n	8006140 <_malloc_r+0xa8>
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	1b52      	subs	r2, r2, r5
 8006124:	d420      	bmi.n	8006168 <_malloc_r+0xd0>
 8006126:	2a0b      	cmp	r2, #11
 8006128:	d917      	bls.n	800615a <_malloc_r+0xc2>
 800612a:	1961      	adds	r1, r4, r5
 800612c:	42a3      	cmp	r3, r4
 800612e:	6025      	str	r5, [r4, #0]
 8006130:	bf18      	it	ne
 8006132:	6059      	strne	r1, [r3, #4]
 8006134:	6863      	ldr	r3, [r4, #4]
 8006136:	bf08      	it	eq
 8006138:	f8c8 1000 	streq.w	r1, [r8]
 800613c:	5162      	str	r2, [r4, r5]
 800613e:	604b      	str	r3, [r1, #4]
 8006140:	4630      	mov	r0, r6
 8006142:	f000 f82f 	bl	80061a4 <__malloc_unlock>
 8006146:	f104 000b 	add.w	r0, r4, #11
 800614a:	1d23      	adds	r3, r4, #4
 800614c:	f020 0007 	bic.w	r0, r0, #7
 8006150:	1ac2      	subs	r2, r0, r3
 8006152:	bf1c      	itt	ne
 8006154:	1a1b      	subne	r3, r3, r0
 8006156:	50a3      	strne	r3, [r4, r2]
 8006158:	e7af      	b.n	80060ba <_malloc_r+0x22>
 800615a:	6862      	ldr	r2, [r4, #4]
 800615c:	42a3      	cmp	r3, r4
 800615e:	bf0c      	ite	eq
 8006160:	f8c8 2000 	streq.w	r2, [r8]
 8006164:	605a      	strne	r2, [r3, #4]
 8006166:	e7eb      	b.n	8006140 <_malloc_r+0xa8>
 8006168:	4623      	mov	r3, r4
 800616a:	6864      	ldr	r4, [r4, #4]
 800616c:	e7ae      	b.n	80060cc <_malloc_r+0x34>
 800616e:	463c      	mov	r4, r7
 8006170:	687f      	ldr	r7, [r7, #4]
 8006172:	e7b6      	b.n	80060e2 <_malloc_r+0x4a>
 8006174:	461a      	mov	r2, r3
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	42a3      	cmp	r3, r4
 800617a:	d1fb      	bne.n	8006174 <_malloc_r+0xdc>
 800617c:	2300      	movs	r3, #0
 800617e:	6053      	str	r3, [r2, #4]
 8006180:	e7de      	b.n	8006140 <_malloc_r+0xa8>
 8006182:	230c      	movs	r3, #12
 8006184:	6033      	str	r3, [r6, #0]
 8006186:	4630      	mov	r0, r6
 8006188:	f000 f80c 	bl	80061a4 <__malloc_unlock>
 800618c:	e794      	b.n	80060b8 <_malloc_r+0x20>
 800618e:	6005      	str	r5, [r0, #0]
 8006190:	e7d6      	b.n	8006140 <_malloc_r+0xa8>
 8006192:	bf00      	nop
 8006194:	20000414 	.word	0x20000414

08006198 <__malloc_lock>:
 8006198:	4801      	ldr	r0, [pc, #4]	@ (80061a0 <__malloc_lock+0x8>)
 800619a:	f7ff b8a8 	b.w	80052ee <__retarget_lock_acquire_recursive>
 800619e:	bf00      	nop
 80061a0:	2000040c 	.word	0x2000040c

080061a4 <__malloc_unlock>:
 80061a4:	4801      	ldr	r0, [pc, #4]	@ (80061ac <__malloc_unlock+0x8>)
 80061a6:	f7ff b8a3 	b.w	80052f0 <__retarget_lock_release_recursive>
 80061aa:	bf00      	nop
 80061ac:	2000040c 	.word	0x2000040c

080061b0 <_Balloc>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	69c6      	ldr	r6, [r0, #28]
 80061b4:	4604      	mov	r4, r0
 80061b6:	460d      	mov	r5, r1
 80061b8:	b976      	cbnz	r6, 80061d8 <_Balloc+0x28>
 80061ba:	2010      	movs	r0, #16
 80061bc:	f7ff ff42 	bl	8006044 <malloc>
 80061c0:	4602      	mov	r2, r0
 80061c2:	61e0      	str	r0, [r4, #28]
 80061c4:	b920      	cbnz	r0, 80061d0 <_Balloc+0x20>
 80061c6:	4b18      	ldr	r3, [pc, #96]	@ (8006228 <_Balloc+0x78>)
 80061c8:	4818      	ldr	r0, [pc, #96]	@ (800622c <_Balloc+0x7c>)
 80061ca:	216b      	movs	r1, #107	@ 0x6b
 80061cc:	f002 fc44 	bl	8008a58 <__assert_func>
 80061d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061d4:	6006      	str	r6, [r0, #0]
 80061d6:	60c6      	str	r6, [r0, #12]
 80061d8:	69e6      	ldr	r6, [r4, #28]
 80061da:	68f3      	ldr	r3, [r6, #12]
 80061dc:	b183      	cbz	r3, 8006200 <_Balloc+0x50>
 80061de:	69e3      	ldr	r3, [r4, #28]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061e6:	b9b8      	cbnz	r0, 8006218 <_Balloc+0x68>
 80061e8:	2101      	movs	r1, #1
 80061ea:	fa01 f605 	lsl.w	r6, r1, r5
 80061ee:	1d72      	adds	r2, r6, #5
 80061f0:	0092      	lsls	r2, r2, #2
 80061f2:	4620      	mov	r0, r4
 80061f4:	f002 fc4e 	bl	8008a94 <_calloc_r>
 80061f8:	b160      	cbz	r0, 8006214 <_Balloc+0x64>
 80061fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061fe:	e00e      	b.n	800621e <_Balloc+0x6e>
 8006200:	2221      	movs	r2, #33	@ 0x21
 8006202:	2104      	movs	r1, #4
 8006204:	4620      	mov	r0, r4
 8006206:	f002 fc45 	bl	8008a94 <_calloc_r>
 800620a:	69e3      	ldr	r3, [r4, #28]
 800620c:	60f0      	str	r0, [r6, #12]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e4      	bne.n	80061de <_Balloc+0x2e>
 8006214:	2000      	movs	r0, #0
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	6802      	ldr	r2, [r0, #0]
 800621a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800621e:	2300      	movs	r3, #0
 8006220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006224:	e7f7      	b.n	8006216 <_Balloc+0x66>
 8006226:	bf00      	nop
 8006228:	08009450 	.word	0x08009450
 800622c:	080094d0 	.word	0x080094d0

08006230 <_Bfree>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	69c6      	ldr	r6, [r0, #28]
 8006234:	4605      	mov	r5, r0
 8006236:	460c      	mov	r4, r1
 8006238:	b976      	cbnz	r6, 8006258 <_Bfree+0x28>
 800623a:	2010      	movs	r0, #16
 800623c:	f7ff ff02 	bl	8006044 <malloc>
 8006240:	4602      	mov	r2, r0
 8006242:	61e8      	str	r0, [r5, #28]
 8006244:	b920      	cbnz	r0, 8006250 <_Bfree+0x20>
 8006246:	4b09      	ldr	r3, [pc, #36]	@ (800626c <_Bfree+0x3c>)
 8006248:	4809      	ldr	r0, [pc, #36]	@ (8006270 <_Bfree+0x40>)
 800624a:	218f      	movs	r1, #143	@ 0x8f
 800624c:	f002 fc04 	bl	8008a58 <__assert_func>
 8006250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006254:	6006      	str	r6, [r0, #0]
 8006256:	60c6      	str	r6, [r0, #12]
 8006258:	b13c      	cbz	r4, 800626a <_Bfree+0x3a>
 800625a:	69eb      	ldr	r3, [r5, #28]
 800625c:	6862      	ldr	r2, [r4, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006264:	6021      	str	r1, [r4, #0]
 8006266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	08009450 	.word	0x08009450
 8006270:	080094d0 	.word	0x080094d0

08006274 <__multadd>:
 8006274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006278:	690d      	ldr	r5, [r1, #16]
 800627a:	4607      	mov	r7, r0
 800627c:	460c      	mov	r4, r1
 800627e:	461e      	mov	r6, r3
 8006280:	f101 0c14 	add.w	ip, r1, #20
 8006284:	2000      	movs	r0, #0
 8006286:	f8dc 3000 	ldr.w	r3, [ip]
 800628a:	b299      	uxth	r1, r3
 800628c:	fb02 6101 	mla	r1, r2, r1, r6
 8006290:	0c1e      	lsrs	r6, r3, #16
 8006292:	0c0b      	lsrs	r3, r1, #16
 8006294:	fb02 3306 	mla	r3, r2, r6, r3
 8006298:	b289      	uxth	r1, r1
 800629a:	3001      	adds	r0, #1
 800629c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062a0:	4285      	cmp	r5, r0
 80062a2:	f84c 1b04 	str.w	r1, [ip], #4
 80062a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062aa:	dcec      	bgt.n	8006286 <__multadd+0x12>
 80062ac:	b30e      	cbz	r6, 80062f2 <__multadd+0x7e>
 80062ae:	68a3      	ldr	r3, [r4, #8]
 80062b0:	42ab      	cmp	r3, r5
 80062b2:	dc19      	bgt.n	80062e8 <__multadd+0x74>
 80062b4:	6861      	ldr	r1, [r4, #4]
 80062b6:	4638      	mov	r0, r7
 80062b8:	3101      	adds	r1, #1
 80062ba:	f7ff ff79 	bl	80061b0 <_Balloc>
 80062be:	4680      	mov	r8, r0
 80062c0:	b928      	cbnz	r0, 80062ce <__multadd+0x5a>
 80062c2:	4602      	mov	r2, r0
 80062c4:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <__multadd+0x84>)
 80062c6:	480d      	ldr	r0, [pc, #52]	@ (80062fc <__multadd+0x88>)
 80062c8:	21ba      	movs	r1, #186	@ 0xba
 80062ca:	f002 fbc5 	bl	8008a58 <__assert_func>
 80062ce:	6922      	ldr	r2, [r4, #16]
 80062d0:	3202      	adds	r2, #2
 80062d2:	f104 010c 	add.w	r1, r4, #12
 80062d6:	0092      	lsls	r2, r2, #2
 80062d8:	300c      	adds	r0, #12
 80062da:	f002 fba5 	bl	8008a28 <memcpy>
 80062de:	4621      	mov	r1, r4
 80062e0:	4638      	mov	r0, r7
 80062e2:	f7ff ffa5 	bl	8006230 <_Bfree>
 80062e6:	4644      	mov	r4, r8
 80062e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062ec:	3501      	adds	r5, #1
 80062ee:	615e      	str	r6, [r3, #20]
 80062f0:	6125      	str	r5, [r4, #16]
 80062f2:	4620      	mov	r0, r4
 80062f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f8:	080094bf 	.word	0x080094bf
 80062fc:	080094d0 	.word	0x080094d0

08006300 <__s2b>:
 8006300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006304:	460c      	mov	r4, r1
 8006306:	4615      	mov	r5, r2
 8006308:	461f      	mov	r7, r3
 800630a:	2209      	movs	r2, #9
 800630c:	3308      	adds	r3, #8
 800630e:	4606      	mov	r6, r0
 8006310:	fb93 f3f2 	sdiv	r3, r3, r2
 8006314:	2100      	movs	r1, #0
 8006316:	2201      	movs	r2, #1
 8006318:	429a      	cmp	r2, r3
 800631a:	db09      	blt.n	8006330 <__s2b+0x30>
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff ff47 	bl	80061b0 <_Balloc>
 8006322:	b940      	cbnz	r0, 8006336 <__s2b+0x36>
 8006324:	4602      	mov	r2, r0
 8006326:	4b19      	ldr	r3, [pc, #100]	@ (800638c <__s2b+0x8c>)
 8006328:	4819      	ldr	r0, [pc, #100]	@ (8006390 <__s2b+0x90>)
 800632a:	21d3      	movs	r1, #211	@ 0xd3
 800632c:	f002 fb94 	bl	8008a58 <__assert_func>
 8006330:	0052      	lsls	r2, r2, #1
 8006332:	3101      	adds	r1, #1
 8006334:	e7f0      	b.n	8006318 <__s2b+0x18>
 8006336:	9b08      	ldr	r3, [sp, #32]
 8006338:	6143      	str	r3, [r0, #20]
 800633a:	2d09      	cmp	r5, #9
 800633c:	f04f 0301 	mov.w	r3, #1
 8006340:	6103      	str	r3, [r0, #16]
 8006342:	dd16      	ble.n	8006372 <__s2b+0x72>
 8006344:	f104 0909 	add.w	r9, r4, #9
 8006348:	46c8      	mov	r8, r9
 800634a:	442c      	add	r4, r5
 800634c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006350:	4601      	mov	r1, r0
 8006352:	3b30      	subs	r3, #48	@ 0x30
 8006354:	220a      	movs	r2, #10
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff ff8c 	bl	8006274 <__multadd>
 800635c:	45a0      	cmp	r8, r4
 800635e:	d1f5      	bne.n	800634c <__s2b+0x4c>
 8006360:	f1a5 0408 	sub.w	r4, r5, #8
 8006364:	444c      	add	r4, r9
 8006366:	1b2d      	subs	r5, r5, r4
 8006368:	1963      	adds	r3, r4, r5
 800636a:	42bb      	cmp	r3, r7
 800636c:	db04      	blt.n	8006378 <__s2b+0x78>
 800636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006372:	340a      	adds	r4, #10
 8006374:	2509      	movs	r5, #9
 8006376:	e7f6      	b.n	8006366 <__s2b+0x66>
 8006378:	f814 3b01 	ldrb.w	r3, [r4], #1
 800637c:	4601      	mov	r1, r0
 800637e:	3b30      	subs	r3, #48	@ 0x30
 8006380:	220a      	movs	r2, #10
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff ff76 	bl	8006274 <__multadd>
 8006388:	e7ee      	b.n	8006368 <__s2b+0x68>
 800638a:	bf00      	nop
 800638c:	080094bf 	.word	0x080094bf
 8006390:	080094d0 	.word	0x080094d0

08006394 <__hi0bits>:
 8006394:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006398:	4603      	mov	r3, r0
 800639a:	bf36      	itet	cc
 800639c:	0403      	lslcc	r3, r0, #16
 800639e:	2000      	movcs	r0, #0
 80063a0:	2010      	movcc	r0, #16
 80063a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063a6:	bf3c      	itt	cc
 80063a8:	021b      	lslcc	r3, r3, #8
 80063aa:	3008      	addcc	r0, #8
 80063ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063b0:	bf3c      	itt	cc
 80063b2:	011b      	lslcc	r3, r3, #4
 80063b4:	3004      	addcc	r0, #4
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	bf3c      	itt	cc
 80063bc:	009b      	lslcc	r3, r3, #2
 80063be:	3002      	addcc	r0, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db05      	blt.n	80063d0 <__hi0bits+0x3c>
 80063c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80063c8:	f100 0001 	add.w	r0, r0, #1
 80063cc:	bf08      	it	eq
 80063ce:	2020      	moveq	r0, #32
 80063d0:	4770      	bx	lr

080063d2 <__lo0bits>:
 80063d2:	6803      	ldr	r3, [r0, #0]
 80063d4:	4602      	mov	r2, r0
 80063d6:	f013 0007 	ands.w	r0, r3, #7
 80063da:	d00b      	beq.n	80063f4 <__lo0bits+0x22>
 80063dc:	07d9      	lsls	r1, r3, #31
 80063de:	d421      	bmi.n	8006424 <__lo0bits+0x52>
 80063e0:	0798      	lsls	r0, r3, #30
 80063e2:	bf49      	itett	mi
 80063e4:	085b      	lsrmi	r3, r3, #1
 80063e6:	089b      	lsrpl	r3, r3, #2
 80063e8:	2001      	movmi	r0, #1
 80063ea:	6013      	strmi	r3, [r2, #0]
 80063ec:	bf5c      	itt	pl
 80063ee:	6013      	strpl	r3, [r2, #0]
 80063f0:	2002      	movpl	r0, #2
 80063f2:	4770      	bx	lr
 80063f4:	b299      	uxth	r1, r3
 80063f6:	b909      	cbnz	r1, 80063fc <__lo0bits+0x2a>
 80063f8:	0c1b      	lsrs	r3, r3, #16
 80063fa:	2010      	movs	r0, #16
 80063fc:	b2d9      	uxtb	r1, r3
 80063fe:	b909      	cbnz	r1, 8006404 <__lo0bits+0x32>
 8006400:	3008      	adds	r0, #8
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	0719      	lsls	r1, r3, #28
 8006406:	bf04      	itt	eq
 8006408:	091b      	lsreq	r3, r3, #4
 800640a:	3004      	addeq	r0, #4
 800640c:	0799      	lsls	r1, r3, #30
 800640e:	bf04      	itt	eq
 8006410:	089b      	lsreq	r3, r3, #2
 8006412:	3002      	addeq	r0, #2
 8006414:	07d9      	lsls	r1, r3, #31
 8006416:	d403      	bmi.n	8006420 <__lo0bits+0x4e>
 8006418:	085b      	lsrs	r3, r3, #1
 800641a:	f100 0001 	add.w	r0, r0, #1
 800641e:	d003      	beq.n	8006428 <__lo0bits+0x56>
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	4770      	bx	lr
 8006424:	2000      	movs	r0, #0
 8006426:	4770      	bx	lr
 8006428:	2020      	movs	r0, #32
 800642a:	4770      	bx	lr

0800642c <__i2b>:
 800642c:	b510      	push	{r4, lr}
 800642e:	460c      	mov	r4, r1
 8006430:	2101      	movs	r1, #1
 8006432:	f7ff febd 	bl	80061b0 <_Balloc>
 8006436:	4602      	mov	r2, r0
 8006438:	b928      	cbnz	r0, 8006446 <__i2b+0x1a>
 800643a:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <__i2b+0x24>)
 800643c:	4805      	ldr	r0, [pc, #20]	@ (8006454 <__i2b+0x28>)
 800643e:	f240 1145 	movw	r1, #325	@ 0x145
 8006442:	f002 fb09 	bl	8008a58 <__assert_func>
 8006446:	2301      	movs	r3, #1
 8006448:	6144      	str	r4, [r0, #20]
 800644a:	6103      	str	r3, [r0, #16]
 800644c:	bd10      	pop	{r4, pc}
 800644e:	bf00      	nop
 8006450:	080094bf 	.word	0x080094bf
 8006454:	080094d0 	.word	0x080094d0

08006458 <__multiply>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	4617      	mov	r7, r2
 800645e:	690a      	ldr	r2, [r1, #16]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	429a      	cmp	r2, r3
 8006464:	bfa8      	it	ge
 8006466:	463b      	movge	r3, r7
 8006468:	4689      	mov	r9, r1
 800646a:	bfa4      	itt	ge
 800646c:	460f      	movge	r7, r1
 800646e:	4699      	movge	r9, r3
 8006470:	693d      	ldr	r5, [r7, #16]
 8006472:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	eb05 060a 	add.w	r6, r5, sl
 800647e:	42b3      	cmp	r3, r6
 8006480:	b085      	sub	sp, #20
 8006482:	bfb8      	it	lt
 8006484:	3101      	addlt	r1, #1
 8006486:	f7ff fe93 	bl	80061b0 <_Balloc>
 800648a:	b930      	cbnz	r0, 800649a <__multiply+0x42>
 800648c:	4602      	mov	r2, r0
 800648e:	4b41      	ldr	r3, [pc, #260]	@ (8006594 <__multiply+0x13c>)
 8006490:	4841      	ldr	r0, [pc, #260]	@ (8006598 <__multiply+0x140>)
 8006492:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006496:	f002 fadf 	bl	8008a58 <__assert_func>
 800649a:	f100 0414 	add.w	r4, r0, #20
 800649e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80064a2:	4623      	mov	r3, r4
 80064a4:	2200      	movs	r2, #0
 80064a6:	4573      	cmp	r3, lr
 80064a8:	d320      	bcc.n	80064ec <__multiply+0x94>
 80064aa:	f107 0814 	add.w	r8, r7, #20
 80064ae:	f109 0114 	add.w	r1, r9, #20
 80064b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80064b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80064ba:	9302      	str	r3, [sp, #8]
 80064bc:	1beb      	subs	r3, r5, r7
 80064be:	3b15      	subs	r3, #21
 80064c0:	f023 0303 	bic.w	r3, r3, #3
 80064c4:	3304      	adds	r3, #4
 80064c6:	3715      	adds	r7, #21
 80064c8:	42bd      	cmp	r5, r7
 80064ca:	bf38      	it	cc
 80064cc:	2304      	movcc	r3, #4
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	9103      	str	r1, [sp, #12]
 80064d4:	428b      	cmp	r3, r1
 80064d6:	d80c      	bhi.n	80064f2 <__multiply+0x9a>
 80064d8:	2e00      	cmp	r6, #0
 80064da:	dd03      	ble.n	80064e4 <__multiply+0x8c>
 80064dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d055      	beq.n	8006590 <__multiply+0x138>
 80064e4:	6106      	str	r6, [r0, #16]
 80064e6:	b005      	add	sp, #20
 80064e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	f843 2b04 	str.w	r2, [r3], #4
 80064f0:	e7d9      	b.n	80064a6 <__multiply+0x4e>
 80064f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80064f6:	f1ba 0f00 	cmp.w	sl, #0
 80064fa:	d01f      	beq.n	800653c <__multiply+0xe4>
 80064fc:	46c4      	mov	ip, r8
 80064fe:	46a1      	mov	r9, r4
 8006500:	2700      	movs	r7, #0
 8006502:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006506:	f8d9 3000 	ldr.w	r3, [r9]
 800650a:	fa1f fb82 	uxth.w	fp, r2
 800650e:	b29b      	uxth	r3, r3
 8006510:	fb0a 330b 	mla	r3, sl, fp, r3
 8006514:	443b      	add	r3, r7
 8006516:	f8d9 7000 	ldr.w	r7, [r9]
 800651a:	0c12      	lsrs	r2, r2, #16
 800651c:	0c3f      	lsrs	r7, r7, #16
 800651e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006522:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652c:	4565      	cmp	r5, ip
 800652e:	f849 3b04 	str.w	r3, [r9], #4
 8006532:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006536:	d8e4      	bhi.n	8006502 <__multiply+0xaa>
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	50e7      	str	r7, [r4, r3]
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006542:	3104      	adds	r1, #4
 8006544:	f1b9 0f00 	cmp.w	r9, #0
 8006548:	d020      	beq.n	800658c <__multiply+0x134>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	4647      	mov	r7, r8
 800654e:	46a4      	mov	ip, r4
 8006550:	f04f 0a00 	mov.w	sl, #0
 8006554:	f8b7 b000 	ldrh.w	fp, [r7]
 8006558:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800655c:	fb09 220b 	mla	r2, r9, fp, r2
 8006560:	4452      	add	r2, sl
 8006562:	b29b      	uxth	r3, r3
 8006564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006568:	f84c 3b04 	str.w	r3, [ip], #4
 800656c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006570:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006574:	f8bc 3000 	ldrh.w	r3, [ip]
 8006578:	fb09 330a 	mla	r3, r9, sl, r3
 800657c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006580:	42bd      	cmp	r5, r7
 8006582:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006586:	d8e5      	bhi.n	8006554 <__multiply+0xfc>
 8006588:	9a01      	ldr	r2, [sp, #4]
 800658a:	50a3      	str	r3, [r4, r2]
 800658c:	3404      	adds	r4, #4
 800658e:	e79f      	b.n	80064d0 <__multiply+0x78>
 8006590:	3e01      	subs	r6, #1
 8006592:	e7a1      	b.n	80064d8 <__multiply+0x80>
 8006594:	080094bf 	.word	0x080094bf
 8006598:	080094d0 	.word	0x080094d0

0800659c <__pow5mult>:
 800659c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a0:	4615      	mov	r5, r2
 80065a2:	f012 0203 	ands.w	r2, r2, #3
 80065a6:	4607      	mov	r7, r0
 80065a8:	460e      	mov	r6, r1
 80065aa:	d007      	beq.n	80065bc <__pow5mult+0x20>
 80065ac:	4c25      	ldr	r4, [pc, #148]	@ (8006644 <__pow5mult+0xa8>)
 80065ae:	3a01      	subs	r2, #1
 80065b0:	2300      	movs	r3, #0
 80065b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065b6:	f7ff fe5d 	bl	8006274 <__multadd>
 80065ba:	4606      	mov	r6, r0
 80065bc:	10ad      	asrs	r5, r5, #2
 80065be:	d03d      	beq.n	800663c <__pow5mult+0xa0>
 80065c0:	69fc      	ldr	r4, [r7, #28]
 80065c2:	b97c      	cbnz	r4, 80065e4 <__pow5mult+0x48>
 80065c4:	2010      	movs	r0, #16
 80065c6:	f7ff fd3d 	bl	8006044 <malloc>
 80065ca:	4602      	mov	r2, r0
 80065cc:	61f8      	str	r0, [r7, #28]
 80065ce:	b928      	cbnz	r0, 80065dc <__pow5mult+0x40>
 80065d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <__pow5mult+0xac>)
 80065d2:	481e      	ldr	r0, [pc, #120]	@ (800664c <__pow5mult+0xb0>)
 80065d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80065d8:	f002 fa3e 	bl	8008a58 <__assert_func>
 80065dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065e0:	6004      	str	r4, [r0, #0]
 80065e2:	60c4      	str	r4, [r0, #12]
 80065e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80065e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065ec:	b94c      	cbnz	r4, 8006602 <__pow5mult+0x66>
 80065ee:	f240 2171 	movw	r1, #625	@ 0x271
 80065f2:	4638      	mov	r0, r7
 80065f4:	f7ff ff1a 	bl	800642c <__i2b>
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80065fe:	4604      	mov	r4, r0
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	f04f 0900 	mov.w	r9, #0
 8006606:	07eb      	lsls	r3, r5, #31
 8006608:	d50a      	bpl.n	8006620 <__pow5mult+0x84>
 800660a:	4631      	mov	r1, r6
 800660c:	4622      	mov	r2, r4
 800660e:	4638      	mov	r0, r7
 8006610:	f7ff ff22 	bl	8006458 <__multiply>
 8006614:	4631      	mov	r1, r6
 8006616:	4680      	mov	r8, r0
 8006618:	4638      	mov	r0, r7
 800661a:	f7ff fe09 	bl	8006230 <_Bfree>
 800661e:	4646      	mov	r6, r8
 8006620:	106d      	asrs	r5, r5, #1
 8006622:	d00b      	beq.n	800663c <__pow5mult+0xa0>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	b938      	cbnz	r0, 8006638 <__pow5mult+0x9c>
 8006628:	4622      	mov	r2, r4
 800662a:	4621      	mov	r1, r4
 800662c:	4638      	mov	r0, r7
 800662e:	f7ff ff13 	bl	8006458 <__multiply>
 8006632:	6020      	str	r0, [r4, #0]
 8006634:	f8c0 9000 	str.w	r9, [r0]
 8006638:	4604      	mov	r4, r0
 800663a:	e7e4      	b.n	8006606 <__pow5mult+0x6a>
 800663c:	4630      	mov	r0, r6
 800663e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006642:	bf00      	nop
 8006644:	080095fc 	.word	0x080095fc
 8006648:	08009450 	.word	0x08009450
 800664c:	080094d0 	.word	0x080094d0

08006650 <__lshift>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	460c      	mov	r4, r1
 8006656:	6849      	ldr	r1, [r1, #4]
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800665e:	68a3      	ldr	r3, [r4, #8]
 8006660:	4607      	mov	r7, r0
 8006662:	4691      	mov	r9, r2
 8006664:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006668:	f108 0601 	add.w	r6, r8, #1
 800666c:	42b3      	cmp	r3, r6
 800666e:	db0b      	blt.n	8006688 <__lshift+0x38>
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff fd9d 	bl	80061b0 <_Balloc>
 8006676:	4605      	mov	r5, r0
 8006678:	b948      	cbnz	r0, 800668e <__lshift+0x3e>
 800667a:	4602      	mov	r2, r0
 800667c:	4b28      	ldr	r3, [pc, #160]	@ (8006720 <__lshift+0xd0>)
 800667e:	4829      	ldr	r0, [pc, #164]	@ (8006724 <__lshift+0xd4>)
 8006680:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006684:	f002 f9e8 	bl	8008a58 <__assert_func>
 8006688:	3101      	adds	r1, #1
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	e7ee      	b.n	800666c <__lshift+0x1c>
 800668e:	2300      	movs	r3, #0
 8006690:	f100 0114 	add.w	r1, r0, #20
 8006694:	f100 0210 	add.w	r2, r0, #16
 8006698:	4618      	mov	r0, r3
 800669a:	4553      	cmp	r3, sl
 800669c:	db33      	blt.n	8006706 <__lshift+0xb6>
 800669e:	6920      	ldr	r0, [r4, #16]
 80066a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066a4:	f104 0314 	add.w	r3, r4, #20
 80066a8:	f019 091f 	ands.w	r9, r9, #31
 80066ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066b4:	d02b      	beq.n	800670e <__lshift+0xbe>
 80066b6:	f1c9 0e20 	rsb	lr, r9, #32
 80066ba:	468a      	mov	sl, r1
 80066bc:	2200      	movs	r2, #0
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	fa00 f009 	lsl.w	r0, r0, r9
 80066c4:	4310      	orrs	r0, r2
 80066c6:	f84a 0b04 	str.w	r0, [sl], #4
 80066ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ce:	459c      	cmp	ip, r3
 80066d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80066d4:	d8f3      	bhi.n	80066be <__lshift+0x6e>
 80066d6:	ebac 0304 	sub.w	r3, ip, r4
 80066da:	3b15      	subs	r3, #21
 80066dc:	f023 0303 	bic.w	r3, r3, #3
 80066e0:	3304      	adds	r3, #4
 80066e2:	f104 0015 	add.w	r0, r4, #21
 80066e6:	4560      	cmp	r0, ip
 80066e8:	bf88      	it	hi
 80066ea:	2304      	movhi	r3, #4
 80066ec:	50ca      	str	r2, [r1, r3]
 80066ee:	b10a      	cbz	r2, 80066f4 <__lshift+0xa4>
 80066f0:	f108 0602 	add.w	r6, r8, #2
 80066f4:	3e01      	subs	r6, #1
 80066f6:	4638      	mov	r0, r7
 80066f8:	612e      	str	r6, [r5, #16]
 80066fa:	4621      	mov	r1, r4
 80066fc:	f7ff fd98 	bl	8006230 <_Bfree>
 8006700:	4628      	mov	r0, r5
 8006702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006706:	f842 0f04 	str.w	r0, [r2, #4]!
 800670a:	3301      	adds	r3, #1
 800670c:	e7c5      	b.n	800669a <__lshift+0x4a>
 800670e:	3904      	subs	r1, #4
 8006710:	f853 2b04 	ldr.w	r2, [r3], #4
 8006714:	f841 2f04 	str.w	r2, [r1, #4]!
 8006718:	459c      	cmp	ip, r3
 800671a:	d8f9      	bhi.n	8006710 <__lshift+0xc0>
 800671c:	e7ea      	b.n	80066f4 <__lshift+0xa4>
 800671e:	bf00      	nop
 8006720:	080094bf 	.word	0x080094bf
 8006724:	080094d0 	.word	0x080094d0

08006728 <__mcmp>:
 8006728:	690a      	ldr	r2, [r1, #16]
 800672a:	4603      	mov	r3, r0
 800672c:	6900      	ldr	r0, [r0, #16]
 800672e:	1a80      	subs	r0, r0, r2
 8006730:	b530      	push	{r4, r5, lr}
 8006732:	d10e      	bne.n	8006752 <__mcmp+0x2a>
 8006734:	3314      	adds	r3, #20
 8006736:	3114      	adds	r1, #20
 8006738:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800673c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006740:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006744:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006748:	4295      	cmp	r5, r2
 800674a:	d003      	beq.n	8006754 <__mcmp+0x2c>
 800674c:	d205      	bcs.n	800675a <__mcmp+0x32>
 800674e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006752:	bd30      	pop	{r4, r5, pc}
 8006754:	42a3      	cmp	r3, r4
 8006756:	d3f3      	bcc.n	8006740 <__mcmp+0x18>
 8006758:	e7fb      	b.n	8006752 <__mcmp+0x2a>
 800675a:	2001      	movs	r0, #1
 800675c:	e7f9      	b.n	8006752 <__mcmp+0x2a>
	...

08006760 <__mdiff>:
 8006760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	4689      	mov	r9, r1
 8006766:	4606      	mov	r6, r0
 8006768:	4611      	mov	r1, r2
 800676a:	4648      	mov	r0, r9
 800676c:	4614      	mov	r4, r2
 800676e:	f7ff ffdb 	bl	8006728 <__mcmp>
 8006772:	1e05      	subs	r5, r0, #0
 8006774:	d112      	bne.n	800679c <__mdiff+0x3c>
 8006776:	4629      	mov	r1, r5
 8006778:	4630      	mov	r0, r6
 800677a:	f7ff fd19 	bl	80061b0 <_Balloc>
 800677e:	4602      	mov	r2, r0
 8006780:	b928      	cbnz	r0, 800678e <__mdiff+0x2e>
 8006782:	4b3f      	ldr	r3, [pc, #252]	@ (8006880 <__mdiff+0x120>)
 8006784:	f240 2137 	movw	r1, #567	@ 0x237
 8006788:	483e      	ldr	r0, [pc, #248]	@ (8006884 <__mdiff+0x124>)
 800678a:	f002 f965 	bl	8008a58 <__assert_func>
 800678e:	2301      	movs	r3, #1
 8006790:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006794:	4610      	mov	r0, r2
 8006796:	b003      	add	sp, #12
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	bfbc      	itt	lt
 800679e:	464b      	movlt	r3, r9
 80067a0:	46a1      	movlt	r9, r4
 80067a2:	4630      	mov	r0, r6
 80067a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067a8:	bfba      	itte	lt
 80067aa:	461c      	movlt	r4, r3
 80067ac:	2501      	movlt	r5, #1
 80067ae:	2500      	movge	r5, #0
 80067b0:	f7ff fcfe 	bl	80061b0 <_Balloc>
 80067b4:	4602      	mov	r2, r0
 80067b6:	b918      	cbnz	r0, 80067c0 <__mdiff+0x60>
 80067b8:	4b31      	ldr	r3, [pc, #196]	@ (8006880 <__mdiff+0x120>)
 80067ba:	f240 2145 	movw	r1, #581	@ 0x245
 80067be:	e7e3      	b.n	8006788 <__mdiff+0x28>
 80067c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80067c4:	6926      	ldr	r6, [r4, #16]
 80067c6:	60c5      	str	r5, [r0, #12]
 80067c8:	f109 0310 	add.w	r3, r9, #16
 80067cc:	f109 0514 	add.w	r5, r9, #20
 80067d0:	f104 0e14 	add.w	lr, r4, #20
 80067d4:	f100 0b14 	add.w	fp, r0, #20
 80067d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80067dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	46d9      	mov	r9, fp
 80067e4:	f04f 0c00 	mov.w	ip, #0
 80067e8:	9b01      	ldr	r3, [sp, #4]
 80067ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80067ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	fa1f f38a 	uxth.w	r3, sl
 80067f8:	4619      	mov	r1, r3
 80067fa:	b283      	uxth	r3, r0
 80067fc:	1acb      	subs	r3, r1, r3
 80067fe:	0c00      	lsrs	r0, r0, #16
 8006800:	4463      	add	r3, ip
 8006802:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006806:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800680a:	b29b      	uxth	r3, r3
 800680c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006810:	4576      	cmp	r6, lr
 8006812:	f849 3b04 	str.w	r3, [r9], #4
 8006816:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800681a:	d8e5      	bhi.n	80067e8 <__mdiff+0x88>
 800681c:	1b33      	subs	r3, r6, r4
 800681e:	3b15      	subs	r3, #21
 8006820:	f023 0303 	bic.w	r3, r3, #3
 8006824:	3415      	adds	r4, #21
 8006826:	3304      	adds	r3, #4
 8006828:	42a6      	cmp	r6, r4
 800682a:	bf38      	it	cc
 800682c:	2304      	movcc	r3, #4
 800682e:	441d      	add	r5, r3
 8006830:	445b      	add	r3, fp
 8006832:	461e      	mov	r6, r3
 8006834:	462c      	mov	r4, r5
 8006836:	4544      	cmp	r4, r8
 8006838:	d30e      	bcc.n	8006858 <__mdiff+0xf8>
 800683a:	f108 0103 	add.w	r1, r8, #3
 800683e:	1b49      	subs	r1, r1, r5
 8006840:	f021 0103 	bic.w	r1, r1, #3
 8006844:	3d03      	subs	r5, #3
 8006846:	45a8      	cmp	r8, r5
 8006848:	bf38      	it	cc
 800684a:	2100      	movcc	r1, #0
 800684c:	440b      	add	r3, r1
 800684e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006852:	b191      	cbz	r1, 800687a <__mdiff+0x11a>
 8006854:	6117      	str	r7, [r2, #16]
 8006856:	e79d      	b.n	8006794 <__mdiff+0x34>
 8006858:	f854 1b04 	ldr.w	r1, [r4], #4
 800685c:	46e6      	mov	lr, ip
 800685e:	0c08      	lsrs	r0, r1, #16
 8006860:	fa1c fc81 	uxtah	ip, ip, r1
 8006864:	4471      	add	r1, lr
 8006866:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800686a:	b289      	uxth	r1, r1
 800686c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006870:	f846 1b04 	str.w	r1, [r6], #4
 8006874:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006878:	e7dd      	b.n	8006836 <__mdiff+0xd6>
 800687a:	3f01      	subs	r7, #1
 800687c:	e7e7      	b.n	800684e <__mdiff+0xee>
 800687e:	bf00      	nop
 8006880:	080094bf 	.word	0x080094bf
 8006884:	080094d0 	.word	0x080094d0

08006888 <__ulp>:
 8006888:	b082      	sub	sp, #8
 800688a:	ed8d 0b00 	vstr	d0, [sp]
 800688e:	9a01      	ldr	r2, [sp, #4]
 8006890:	4b0f      	ldr	r3, [pc, #60]	@ (80068d0 <__ulp+0x48>)
 8006892:	4013      	ands	r3, r2
 8006894:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc08      	bgt.n	80068ae <__ulp+0x26>
 800689c:	425b      	negs	r3, r3
 800689e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80068a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80068a6:	da04      	bge.n	80068b2 <__ulp+0x2a>
 80068a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80068ac:	4113      	asrs	r3, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	e008      	b.n	80068c4 <__ulp+0x3c>
 80068b2:	f1a2 0314 	sub.w	r3, r2, #20
 80068b6:	2b1e      	cmp	r3, #30
 80068b8:	bfda      	itte	le
 80068ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80068be:	40da      	lsrle	r2, r3
 80068c0:	2201      	movgt	r2, #1
 80068c2:	2300      	movs	r3, #0
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	ec41 0b10 	vmov	d0, r0, r1
 80068cc:	b002      	add	sp, #8
 80068ce:	4770      	bx	lr
 80068d0:	7ff00000 	.word	0x7ff00000

080068d4 <__b2d>:
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	6906      	ldr	r6, [r0, #16]
 80068da:	f100 0814 	add.w	r8, r0, #20
 80068de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80068e2:	1f37      	subs	r7, r6, #4
 80068e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7ff fd53 	bl	8006394 <__hi0bits>
 80068ee:	f1c0 0320 	rsb	r3, r0, #32
 80068f2:	280a      	cmp	r0, #10
 80068f4:	600b      	str	r3, [r1, #0]
 80068f6:	491b      	ldr	r1, [pc, #108]	@ (8006964 <__b2d+0x90>)
 80068f8:	dc15      	bgt.n	8006926 <__b2d+0x52>
 80068fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80068fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8006902:	45b8      	cmp	r8, r7
 8006904:	ea43 0501 	orr.w	r5, r3, r1
 8006908:	bf34      	ite	cc
 800690a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800690e:	2300      	movcs	r3, #0
 8006910:	3015      	adds	r0, #21
 8006912:	fa02 f000 	lsl.w	r0, r2, r0
 8006916:	fa23 f30c 	lsr.w	r3, r3, ip
 800691a:	4303      	orrs	r3, r0
 800691c:	461c      	mov	r4, r3
 800691e:	ec45 4b10 	vmov	d0, r4, r5
 8006922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006926:	45b8      	cmp	r8, r7
 8006928:	bf3a      	itte	cc
 800692a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800692e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006932:	2300      	movcs	r3, #0
 8006934:	380b      	subs	r0, #11
 8006936:	d012      	beq.n	800695e <__b2d+0x8a>
 8006938:	f1c0 0120 	rsb	r1, r0, #32
 800693c:	fa23 f401 	lsr.w	r4, r3, r1
 8006940:	4082      	lsls	r2, r0
 8006942:	4322      	orrs	r2, r4
 8006944:	4547      	cmp	r7, r8
 8006946:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800694a:	bf8c      	ite	hi
 800694c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006950:	2200      	movls	r2, #0
 8006952:	4083      	lsls	r3, r0
 8006954:	40ca      	lsrs	r2, r1
 8006956:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800695a:	4313      	orrs	r3, r2
 800695c:	e7de      	b.n	800691c <__b2d+0x48>
 800695e:	ea42 0501 	orr.w	r5, r2, r1
 8006962:	e7db      	b.n	800691c <__b2d+0x48>
 8006964:	3ff00000 	.word	0x3ff00000

08006968 <__d2b>:
 8006968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800696c:	460f      	mov	r7, r1
 800696e:	2101      	movs	r1, #1
 8006970:	ec59 8b10 	vmov	r8, r9, d0
 8006974:	4616      	mov	r6, r2
 8006976:	f7ff fc1b 	bl	80061b0 <_Balloc>
 800697a:	4604      	mov	r4, r0
 800697c:	b930      	cbnz	r0, 800698c <__d2b+0x24>
 800697e:	4602      	mov	r2, r0
 8006980:	4b23      	ldr	r3, [pc, #140]	@ (8006a10 <__d2b+0xa8>)
 8006982:	4824      	ldr	r0, [pc, #144]	@ (8006a14 <__d2b+0xac>)
 8006984:	f240 310f 	movw	r1, #783	@ 0x30f
 8006988:	f002 f866 	bl	8008a58 <__assert_func>
 800698c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006994:	b10d      	cbz	r5, 800699a <__d2b+0x32>
 8006996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	f1b8 0300 	subs.w	r3, r8, #0
 80069a0:	d023      	beq.n	80069ea <__d2b+0x82>
 80069a2:	4668      	mov	r0, sp
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	f7ff fd14 	bl	80063d2 <__lo0bits>
 80069aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069ae:	b1d0      	cbz	r0, 80069e6 <__d2b+0x7e>
 80069b0:	f1c0 0320 	rsb	r3, r0, #32
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	430b      	orrs	r3, r1
 80069ba:	40c2      	lsrs	r2, r0
 80069bc:	6163      	str	r3, [r4, #20]
 80069be:	9201      	str	r2, [sp, #4]
 80069c0:	9b01      	ldr	r3, [sp, #4]
 80069c2:	61a3      	str	r3, [r4, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bf0c      	ite	eq
 80069c8:	2201      	moveq	r2, #1
 80069ca:	2202      	movne	r2, #2
 80069cc:	6122      	str	r2, [r4, #16]
 80069ce:	b1a5      	cbz	r5, 80069fa <__d2b+0x92>
 80069d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80069d4:	4405      	add	r5, r0
 80069d6:	603d      	str	r5, [r7, #0]
 80069d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80069dc:	6030      	str	r0, [r6, #0]
 80069de:	4620      	mov	r0, r4
 80069e0:	b003      	add	sp, #12
 80069e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069e6:	6161      	str	r1, [r4, #20]
 80069e8:	e7ea      	b.n	80069c0 <__d2b+0x58>
 80069ea:	a801      	add	r0, sp, #4
 80069ec:	f7ff fcf1 	bl	80063d2 <__lo0bits>
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	6163      	str	r3, [r4, #20]
 80069f4:	3020      	adds	r0, #32
 80069f6:	2201      	movs	r2, #1
 80069f8:	e7e8      	b.n	80069cc <__d2b+0x64>
 80069fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a02:	6038      	str	r0, [r7, #0]
 8006a04:	6918      	ldr	r0, [r3, #16]
 8006a06:	f7ff fcc5 	bl	8006394 <__hi0bits>
 8006a0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a0e:	e7e5      	b.n	80069dc <__d2b+0x74>
 8006a10:	080094bf 	.word	0x080094bf
 8006a14:	080094d0 	.word	0x080094d0

08006a18 <__ratio>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	b085      	sub	sp, #20
 8006a1e:	e9cd 1000 	strd	r1, r0, [sp]
 8006a22:	a902      	add	r1, sp, #8
 8006a24:	f7ff ff56 	bl	80068d4 <__b2d>
 8006a28:	9800      	ldr	r0, [sp, #0]
 8006a2a:	a903      	add	r1, sp, #12
 8006a2c:	ec55 4b10 	vmov	r4, r5, d0
 8006a30:	f7ff ff50 	bl	80068d4 <__b2d>
 8006a34:	9b01      	ldr	r3, [sp, #4]
 8006a36:	6919      	ldr	r1, [r3, #16]
 8006a38:	9b00      	ldr	r3, [sp, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	1ac9      	subs	r1, r1, r3
 8006a3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006a42:	1a9b      	subs	r3, r3, r2
 8006a44:	ec5b ab10 	vmov	sl, fp, d0
 8006a48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bfce      	itee	gt
 8006a50:	462a      	movgt	r2, r5
 8006a52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a56:	465a      	movle	r2, fp
 8006a58:	462f      	mov	r7, r5
 8006a5a:	46d9      	mov	r9, fp
 8006a5c:	bfcc      	ite	gt
 8006a5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006a62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006a66:	464b      	mov	r3, r9
 8006a68:	4652      	mov	r2, sl
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	4639      	mov	r1, r7
 8006a6e:	f7f9 feed 	bl	800084c <__aeabi_ddiv>
 8006a72:	ec41 0b10 	vmov	d0, r0, r1
 8006a76:	b005      	add	sp, #20
 8006a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a7c <__copybits>:
 8006a7c:	3901      	subs	r1, #1
 8006a7e:	b570      	push	{r4, r5, r6, lr}
 8006a80:	1149      	asrs	r1, r1, #5
 8006a82:	6914      	ldr	r4, [r2, #16]
 8006a84:	3101      	adds	r1, #1
 8006a86:	f102 0314 	add.w	r3, r2, #20
 8006a8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a92:	1f05      	subs	r5, r0, #4
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d30c      	bcc.n	8006ab2 <__copybits+0x36>
 8006a98:	1aa3      	subs	r3, r4, r2
 8006a9a:	3b11      	subs	r3, #17
 8006a9c:	f023 0303 	bic.w	r3, r3, #3
 8006aa0:	3211      	adds	r2, #17
 8006aa2:	42a2      	cmp	r2, r4
 8006aa4:	bf88      	it	hi
 8006aa6:	2300      	movhi	r3, #0
 8006aa8:	4418      	add	r0, r3
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4288      	cmp	r0, r1
 8006aae:	d305      	bcc.n	8006abc <__copybits+0x40>
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ab6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006aba:	e7eb      	b.n	8006a94 <__copybits+0x18>
 8006abc:	f840 3b04 	str.w	r3, [r0], #4
 8006ac0:	e7f4      	b.n	8006aac <__copybits+0x30>

08006ac2 <__any_on>:
 8006ac2:	f100 0214 	add.w	r2, r0, #20
 8006ac6:	6900      	ldr	r0, [r0, #16]
 8006ac8:	114b      	asrs	r3, r1, #5
 8006aca:	4298      	cmp	r0, r3
 8006acc:	b510      	push	{r4, lr}
 8006ace:	db11      	blt.n	8006af4 <__any_on+0x32>
 8006ad0:	dd0a      	ble.n	8006ae8 <__any_on+0x26>
 8006ad2:	f011 011f 	ands.w	r1, r1, #31
 8006ad6:	d007      	beq.n	8006ae8 <__any_on+0x26>
 8006ad8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006adc:	fa24 f001 	lsr.w	r0, r4, r1
 8006ae0:	fa00 f101 	lsl.w	r1, r0, r1
 8006ae4:	428c      	cmp	r4, r1
 8006ae6:	d10b      	bne.n	8006b00 <__any_on+0x3e>
 8006ae8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d803      	bhi.n	8006af8 <__any_on+0x36>
 8006af0:	2000      	movs	r0, #0
 8006af2:	bd10      	pop	{r4, pc}
 8006af4:	4603      	mov	r3, r0
 8006af6:	e7f7      	b.n	8006ae8 <__any_on+0x26>
 8006af8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006afc:	2900      	cmp	r1, #0
 8006afe:	d0f5      	beq.n	8006aec <__any_on+0x2a>
 8006b00:	2001      	movs	r0, #1
 8006b02:	e7f6      	b.n	8006af2 <__any_on+0x30>

08006b04 <sulp>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	4604      	mov	r4, r0
 8006b08:	460d      	mov	r5, r1
 8006b0a:	ec45 4b10 	vmov	d0, r4, r5
 8006b0e:	4616      	mov	r6, r2
 8006b10:	f7ff feba 	bl	8006888 <__ulp>
 8006b14:	ec51 0b10 	vmov	r0, r1, d0
 8006b18:	b17e      	cbz	r6, 8006b3a <sulp+0x36>
 8006b1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dd09      	ble.n	8006b3a <sulp+0x36>
 8006b26:	051b      	lsls	r3, r3, #20
 8006b28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006b2c:	2400      	movs	r4, #0
 8006b2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006b32:	4622      	mov	r2, r4
 8006b34:	462b      	mov	r3, r5
 8006b36:	f7f9 fd5f 	bl	80005f8 <__aeabi_dmul>
 8006b3a:	ec41 0b10 	vmov	d0, r0, r1
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}

08006b40 <_strtod_l>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	b09f      	sub	sp, #124	@ 0x7c
 8006b46:	460c      	mov	r4, r1
 8006b48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b4e:	9005      	str	r0, [sp, #20]
 8006b50:	f04f 0a00 	mov.w	sl, #0
 8006b54:	f04f 0b00 	mov.w	fp, #0
 8006b58:	460a      	mov	r2, r1
 8006b5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b5c:	7811      	ldrb	r1, [r2, #0]
 8006b5e:	292b      	cmp	r1, #43	@ 0x2b
 8006b60:	d04a      	beq.n	8006bf8 <_strtod_l+0xb8>
 8006b62:	d838      	bhi.n	8006bd6 <_strtod_l+0x96>
 8006b64:	290d      	cmp	r1, #13
 8006b66:	d832      	bhi.n	8006bce <_strtod_l+0x8e>
 8006b68:	2908      	cmp	r1, #8
 8006b6a:	d832      	bhi.n	8006bd2 <_strtod_l+0x92>
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d03b      	beq.n	8006be8 <_strtod_l+0xa8>
 8006b70:	2200      	movs	r2, #0
 8006b72:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b76:	782a      	ldrb	r2, [r5, #0]
 8006b78:	2a30      	cmp	r2, #48	@ 0x30
 8006b7a:	f040 80b2 	bne.w	8006ce2 <_strtod_l+0x1a2>
 8006b7e:	786a      	ldrb	r2, [r5, #1]
 8006b80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b84:	2a58      	cmp	r2, #88	@ 0x58
 8006b86:	d16e      	bne.n	8006c66 <_strtod_l+0x126>
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	4a8f      	ldr	r2, [pc, #572]	@ (8006dd0 <_strtod_l+0x290>)
 8006b94:	9805      	ldr	r0, [sp, #20]
 8006b96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b98:	a919      	add	r1, sp, #100	@ 0x64
 8006b9a:	f001 fff7 	bl	8008b8c <__gethex>
 8006b9e:	f010 060f 	ands.w	r6, r0, #15
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	d005      	beq.n	8006bb2 <_strtod_l+0x72>
 8006ba6:	2e06      	cmp	r6, #6
 8006ba8:	d128      	bne.n	8006bfc <_strtod_l+0xbc>
 8006baa:	3501      	adds	r5, #1
 8006bac:	2300      	movs	r3, #0
 8006bae:	9519      	str	r5, [sp, #100]	@ 0x64
 8006bb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006bb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 858e 	bne.w	80076d6 <_strtod_l+0xb96>
 8006bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bbc:	b1cb      	cbz	r3, 8006bf2 <_strtod_l+0xb2>
 8006bbe:	4652      	mov	r2, sl
 8006bc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006bc4:	ec43 2b10 	vmov	d0, r2, r3
 8006bc8:	b01f      	add	sp, #124	@ 0x7c
 8006bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bce:	2920      	cmp	r1, #32
 8006bd0:	d1ce      	bne.n	8006b70 <_strtod_l+0x30>
 8006bd2:	3201      	adds	r2, #1
 8006bd4:	e7c1      	b.n	8006b5a <_strtod_l+0x1a>
 8006bd6:	292d      	cmp	r1, #45	@ 0x2d
 8006bd8:	d1ca      	bne.n	8006b70 <_strtod_l+0x30>
 8006bda:	2101      	movs	r1, #1
 8006bdc:	910e      	str	r1, [sp, #56]	@ 0x38
 8006bde:	1c51      	adds	r1, r2, #1
 8006be0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006be2:	7852      	ldrb	r2, [r2, #1]
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	d1c5      	bne.n	8006b74 <_strtod_l+0x34>
 8006be8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bea:	9419      	str	r4, [sp, #100]	@ 0x64
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 8570 	bne.w	80076d2 <_strtod_l+0xb92>
 8006bf2:	4652      	mov	r2, sl
 8006bf4:	465b      	mov	r3, fp
 8006bf6:	e7e5      	b.n	8006bc4 <_strtod_l+0x84>
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	e7ef      	b.n	8006bdc <_strtod_l+0x9c>
 8006bfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006bfe:	b13a      	cbz	r2, 8006c10 <_strtod_l+0xd0>
 8006c00:	2135      	movs	r1, #53	@ 0x35
 8006c02:	a81c      	add	r0, sp, #112	@ 0x70
 8006c04:	f7ff ff3a 	bl	8006a7c <__copybits>
 8006c08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c0a:	9805      	ldr	r0, [sp, #20]
 8006c0c:	f7ff fb10 	bl	8006230 <_Bfree>
 8006c10:	3e01      	subs	r6, #1
 8006c12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c14:	2e04      	cmp	r6, #4
 8006c16:	d806      	bhi.n	8006c26 <_strtod_l+0xe6>
 8006c18:	e8df f006 	tbb	[pc, r6]
 8006c1c:	201d0314 	.word	0x201d0314
 8006c20:	14          	.byte	0x14
 8006c21:	00          	.byte	0x00
 8006c22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006c26:	05e1      	lsls	r1, r4, #23
 8006c28:	bf48      	it	mi
 8006c2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006c2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c32:	0d1b      	lsrs	r3, r3, #20
 8006c34:	051b      	lsls	r3, r3, #20
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1bb      	bne.n	8006bb2 <_strtod_l+0x72>
 8006c3a:	f7fe fb2d 	bl	8005298 <__errno>
 8006c3e:	2322      	movs	r3, #34	@ 0x22
 8006c40:	6003      	str	r3, [r0, #0]
 8006c42:	e7b6      	b.n	8006bb2 <_strtod_l+0x72>
 8006c44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c54:	e7e7      	b.n	8006c26 <_strtod_l+0xe6>
 8006c56:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006dd8 <_strtod_l+0x298>
 8006c5a:	e7e4      	b.n	8006c26 <_strtod_l+0xe6>
 8006c5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c60:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006c64:	e7df      	b.n	8006c26 <_strtod_l+0xe6>
 8006c66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b30      	cmp	r3, #48	@ 0x30
 8006c70:	d0f9      	beq.n	8006c66 <_strtod_l+0x126>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d09d      	beq.n	8006bb2 <_strtod_l+0x72>
 8006c76:	2301      	movs	r3, #1
 8006c78:	2700      	movs	r7, #0
 8006c7a:	9308      	str	r3, [sp, #32]
 8006c7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c80:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006c82:	46b9      	mov	r9, r7
 8006c84:	220a      	movs	r2, #10
 8006c86:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c88:	7805      	ldrb	r5, [r0, #0]
 8006c8a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c8e:	b2d9      	uxtb	r1, r3
 8006c90:	2909      	cmp	r1, #9
 8006c92:	d928      	bls.n	8006ce6 <_strtod_l+0x1a6>
 8006c94:	494f      	ldr	r1, [pc, #316]	@ (8006dd4 <_strtod_l+0x294>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	f001 fe82 	bl	80089a0 <strncmp>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d032      	beq.n	8006d06 <_strtod_l+0x1c6>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ca6:	464d      	mov	r5, r9
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2a65      	cmp	r2, #101	@ 0x65
 8006cac:	d001      	beq.n	8006cb2 <_strtod_l+0x172>
 8006cae:	2a45      	cmp	r2, #69	@ 0x45
 8006cb0:	d114      	bne.n	8006cdc <_strtod_l+0x19c>
 8006cb2:	b91d      	cbnz	r5, 8006cbc <_strtod_l+0x17c>
 8006cb4:	9a08      	ldr	r2, [sp, #32]
 8006cb6:	4302      	orrs	r2, r0
 8006cb8:	d096      	beq.n	8006be8 <_strtod_l+0xa8>
 8006cba:	2500      	movs	r5, #0
 8006cbc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006cbe:	1c62      	adds	r2, r4, #1
 8006cc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cc2:	7862      	ldrb	r2, [r4, #1]
 8006cc4:	2a2b      	cmp	r2, #43	@ 0x2b
 8006cc6:	d07a      	beq.n	8006dbe <_strtod_l+0x27e>
 8006cc8:	2a2d      	cmp	r2, #45	@ 0x2d
 8006cca:	d07e      	beq.n	8006dca <_strtod_l+0x28a>
 8006ccc:	f04f 0c00 	mov.w	ip, #0
 8006cd0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006cd4:	2909      	cmp	r1, #9
 8006cd6:	f240 8085 	bls.w	8006de4 <_strtod_l+0x2a4>
 8006cda:	9419      	str	r4, [sp, #100]	@ 0x64
 8006cdc:	f04f 0800 	mov.w	r8, #0
 8006ce0:	e0a5      	b.n	8006e2e <_strtod_l+0x2ee>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e7c8      	b.n	8006c78 <_strtod_l+0x138>
 8006ce6:	f1b9 0f08 	cmp.w	r9, #8
 8006cea:	bfd8      	it	le
 8006cec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006cee:	f100 0001 	add.w	r0, r0, #1
 8006cf2:	bfda      	itte	le
 8006cf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006cf8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006cfa:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006cfe:	f109 0901 	add.w	r9, r9, #1
 8006d02:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d04:	e7bf      	b.n	8006c86 <_strtod_l+0x146>
 8006d06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d0c:	785a      	ldrb	r2, [r3, #1]
 8006d0e:	f1b9 0f00 	cmp.w	r9, #0
 8006d12:	d03b      	beq.n	8006d8c <_strtod_l+0x24c>
 8006d14:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d16:	464d      	mov	r5, r9
 8006d18:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	d912      	bls.n	8006d46 <_strtod_l+0x206>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7c2      	b.n	8006caa <_strtod_l+0x16a>
 8006d24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d2a:	785a      	ldrb	r2, [r3, #1]
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	2a30      	cmp	r2, #48	@ 0x30
 8006d30:	d0f8      	beq.n	8006d24 <_strtod_l+0x1e4>
 8006d32:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	f200 84d2 	bhi.w	80076e0 <_strtod_l+0xba0>
 8006d3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d3e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d40:	2000      	movs	r0, #0
 8006d42:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d44:	4605      	mov	r5, r0
 8006d46:	3a30      	subs	r2, #48	@ 0x30
 8006d48:	f100 0301 	add.w	r3, r0, #1
 8006d4c:	d018      	beq.n	8006d80 <_strtod_l+0x240>
 8006d4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d50:	4419      	add	r1, r3
 8006d52:	910a      	str	r1, [sp, #40]	@ 0x28
 8006d54:	462e      	mov	r6, r5
 8006d56:	f04f 0e0a 	mov.w	lr, #10
 8006d5a:	1c71      	adds	r1, r6, #1
 8006d5c:	eba1 0c05 	sub.w	ip, r1, r5
 8006d60:	4563      	cmp	r3, ip
 8006d62:	dc15      	bgt.n	8006d90 <_strtod_l+0x250>
 8006d64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006d68:	182b      	adds	r3, r5, r0
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	f105 0501 	add.w	r5, r5, #1
 8006d70:	4405      	add	r5, r0
 8006d72:	dc1a      	bgt.n	8006daa <_strtod_l+0x26a>
 8006d74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d76:	230a      	movs	r3, #10
 8006d78:	fb03 2301 	mla	r3, r3, r1, r2
 8006d7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d82:	1c51      	adds	r1, r2, #1
 8006d84:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d86:	7852      	ldrb	r2, [r2, #1]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	e7c5      	b.n	8006d18 <_strtod_l+0x1d8>
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	e7ce      	b.n	8006d2e <_strtod_l+0x1ee>
 8006d90:	2e08      	cmp	r6, #8
 8006d92:	dc05      	bgt.n	8006da0 <_strtod_l+0x260>
 8006d94:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006d96:	fb0e f606 	mul.w	r6, lr, r6
 8006d9a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006d9c:	460e      	mov	r6, r1
 8006d9e:	e7dc      	b.n	8006d5a <_strtod_l+0x21a>
 8006da0:	2910      	cmp	r1, #16
 8006da2:	bfd8      	it	le
 8006da4:	fb0e f707 	mulle.w	r7, lr, r7
 8006da8:	e7f8      	b.n	8006d9c <_strtod_l+0x25c>
 8006daa:	2b0f      	cmp	r3, #15
 8006dac:	bfdc      	itt	le
 8006dae:	230a      	movle	r3, #10
 8006db0:	fb03 2707 	mlale	r7, r3, r7, r2
 8006db4:	e7e3      	b.n	8006d7e <_strtod_l+0x23e>
 8006db6:	2300      	movs	r3, #0
 8006db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e77a      	b.n	8006cb4 <_strtod_l+0x174>
 8006dbe:	f04f 0c00 	mov.w	ip, #0
 8006dc2:	1ca2      	adds	r2, r4, #2
 8006dc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dc6:	78a2      	ldrb	r2, [r4, #2]
 8006dc8:	e782      	b.n	8006cd0 <_strtod_l+0x190>
 8006dca:	f04f 0c01 	mov.w	ip, #1
 8006dce:	e7f8      	b.n	8006dc2 <_strtod_l+0x282>
 8006dd0:	0800970c 	.word	0x0800970c
 8006dd4:	08009529 	.word	0x08009529
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dde:	1c51      	adds	r1, r2, #1
 8006de0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006de2:	7852      	ldrb	r2, [r2, #1]
 8006de4:	2a30      	cmp	r2, #48	@ 0x30
 8006de6:	d0f9      	beq.n	8006ddc <_strtod_l+0x29c>
 8006de8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006dec:	2908      	cmp	r1, #8
 8006dee:	f63f af75 	bhi.w	8006cdc <_strtod_l+0x19c>
 8006df2:	3a30      	subs	r2, #48	@ 0x30
 8006df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006df8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006dfa:	f04f 080a 	mov.w	r8, #10
 8006dfe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e00:	1c56      	adds	r6, r2, #1
 8006e02:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e04:	7852      	ldrb	r2, [r2, #1]
 8006e06:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e0a:	f1be 0f09 	cmp.w	lr, #9
 8006e0e:	d939      	bls.n	8006e84 <_strtod_l+0x344>
 8006e10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e12:	1a76      	subs	r6, r6, r1
 8006e14:	2e08      	cmp	r6, #8
 8006e16:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006e1a:	dc03      	bgt.n	8006e24 <_strtod_l+0x2e4>
 8006e1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e1e:	4588      	cmp	r8, r1
 8006e20:	bfa8      	it	ge
 8006e22:	4688      	movge	r8, r1
 8006e24:	f1bc 0f00 	cmp.w	ip, #0
 8006e28:	d001      	beq.n	8006e2e <_strtod_l+0x2ee>
 8006e2a:	f1c8 0800 	rsb	r8, r8, #0
 8006e2e:	2d00      	cmp	r5, #0
 8006e30:	d14e      	bne.n	8006ed0 <_strtod_l+0x390>
 8006e32:	9908      	ldr	r1, [sp, #32]
 8006e34:	4308      	orrs	r0, r1
 8006e36:	f47f aebc 	bne.w	8006bb2 <_strtod_l+0x72>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f47f aed4 	bne.w	8006be8 <_strtod_l+0xa8>
 8006e40:	2a69      	cmp	r2, #105	@ 0x69
 8006e42:	d028      	beq.n	8006e96 <_strtod_l+0x356>
 8006e44:	dc25      	bgt.n	8006e92 <_strtod_l+0x352>
 8006e46:	2a49      	cmp	r2, #73	@ 0x49
 8006e48:	d025      	beq.n	8006e96 <_strtod_l+0x356>
 8006e4a:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e4c:	f47f aecc 	bne.w	8006be8 <_strtod_l+0xa8>
 8006e50:	499a      	ldr	r1, [pc, #616]	@ (80070bc <_strtod_l+0x57c>)
 8006e52:	a819      	add	r0, sp, #100	@ 0x64
 8006e54:	f002 f8bc 	bl	8008fd0 <__match>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	f43f aec5 	beq.w	8006be8 <_strtod_l+0xa8>
 8006e5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b28      	cmp	r3, #40	@ 0x28
 8006e64:	d12e      	bne.n	8006ec4 <_strtod_l+0x384>
 8006e66:	4996      	ldr	r1, [pc, #600]	@ (80070c0 <_strtod_l+0x580>)
 8006e68:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e6a:	a819      	add	r0, sp, #100	@ 0x64
 8006e6c:	f002 f8c4 	bl	8008ff8 <__hexnan>
 8006e70:	2805      	cmp	r0, #5
 8006e72:	d127      	bne.n	8006ec4 <_strtod_l+0x384>
 8006e74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e76:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e7a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e7e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e82:	e696      	b.n	8006bb2 <_strtod_l+0x72>
 8006e84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e86:	fb08 2101 	mla	r1, r8, r1, r2
 8006e8a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e90:	e7b5      	b.n	8006dfe <_strtod_l+0x2be>
 8006e92:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e94:	e7da      	b.n	8006e4c <_strtod_l+0x30c>
 8006e96:	498b      	ldr	r1, [pc, #556]	@ (80070c4 <_strtod_l+0x584>)
 8006e98:	a819      	add	r0, sp, #100	@ 0x64
 8006e9a:	f002 f899 	bl	8008fd0 <__match>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f43f aea2 	beq.w	8006be8 <_strtod_l+0xa8>
 8006ea4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ea6:	4988      	ldr	r1, [pc, #544]	@ (80070c8 <_strtod_l+0x588>)
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	a819      	add	r0, sp, #100	@ 0x64
 8006eac:	9319      	str	r3, [sp, #100]	@ 0x64
 8006eae:	f002 f88f 	bl	8008fd0 <__match>
 8006eb2:	b910      	cbnz	r0, 8006eba <_strtod_l+0x37a>
 8006eb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006eba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80070d8 <_strtod_l+0x598>
 8006ebe:	f04f 0a00 	mov.w	sl, #0
 8006ec2:	e676      	b.n	8006bb2 <_strtod_l+0x72>
 8006ec4:	4881      	ldr	r0, [pc, #516]	@ (80070cc <_strtod_l+0x58c>)
 8006ec6:	f001 fdbf 	bl	8008a48 <nan>
 8006eca:	ec5b ab10 	vmov	sl, fp, d0
 8006ece:	e670      	b.n	8006bb2 <_strtod_l+0x72>
 8006ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006ed4:	eba8 0303 	sub.w	r3, r8, r3
 8006ed8:	f1b9 0f00 	cmp.w	r9, #0
 8006edc:	bf08      	it	eq
 8006ede:	46a9      	moveq	r9, r5
 8006ee0:	2d10      	cmp	r5, #16
 8006ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ee4:	462c      	mov	r4, r5
 8006ee6:	bfa8      	it	ge
 8006ee8:	2410      	movge	r4, #16
 8006eea:	f7f9 fb0b 	bl	8000504 <__aeabi_ui2d>
 8006eee:	2d09      	cmp	r5, #9
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	468b      	mov	fp, r1
 8006ef4:	dc13      	bgt.n	8006f1e <_strtod_l+0x3de>
 8006ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f43f ae5a 	beq.w	8006bb2 <_strtod_l+0x72>
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	dd78      	ble.n	8006ff4 <_strtod_l+0x4b4>
 8006f02:	2b16      	cmp	r3, #22
 8006f04:	dc5f      	bgt.n	8006fc6 <_strtod_l+0x486>
 8006f06:	4972      	ldr	r1, [pc, #456]	@ (80070d0 <_strtod_l+0x590>)
 8006f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f10:	4652      	mov	r2, sl
 8006f12:	465b      	mov	r3, fp
 8006f14:	f7f9 fb70 	bl	80005f8 <__aeabi_dmul>
 8006f18:	4682      	mov	sl, r0
 8006f1a:	468b      	mov	fp, r1
 8006f1c:	e649      	b.n	8006bb2 <_strtod_l+0x72>
 8006f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80070d0 <_strtod_l+0x590>)
 8006f20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006f28:	f7f9 fb66 	bl	80005f8 <__aeabi_dmul>
 8006f2c:	4682      	mov	sl, r0
 8006f2e:	4638      	mov	r0, r7
 8006f30:	468b      	mov	fp, r1
 8006f32:	f7f9 fae7 	bl	8000504 <__aeabi_ui2d>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	f7f9 f9a5 	bl	800028c <__adddf3>
 8006f42:	2d0f      	cmp	r5, #15
 8006f44:	4682      	mov	sl, r0
 8006f46:	468b      	mov	fp, r1
 8006f48:	ddd5      	ble.n	8006ef6 <_strtod_l+0x3b6>
 8006f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4c:	1b2c      	subs	r4, r5, r4
 8006f4e:	441c      	add	r4, r3
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	f340 8093 	ble.w	800707c <_strtod_l+0x53c>
 8006f56:	f014 030f 	ands.w	r3, r4, #15
 8006f5a:	d00a      	beq.n	8006f72 <_strtod_l+0x432>
 8006f5c:	495c      	ldr	r1, [pc, #368]	@ (80070d0 <_strtod_l+0x590>)
 8006f5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f62:	4652      	mov	r2, sl
 8006f64:	465b      	mov	r3, fp
 8006f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f6a:	f7f9 fb45 	bl	80005f8 <__aeabi_dmul>
 8006f6e:	4682      	mov	sl, r0
 8006f70:	468b      	mov	fp, r1
 8006f72:	f034 040f 	bics.w	r4, r4, #15
 8006f76:	d073      	beq.n	8007060 <_strtod_l+0x520>
 8006f78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f7c:	dd49      	ble.n	8007012 <_strtod_l+0x4d2>
 8006f7e:	2400      	movs	r4, #0
 8006f80:	46a0      	mov	r8, r4
 8006f82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f84:	46a1      	mov	r9, r4
 8006f86:	9a05      	ldr	r2, [sp, #20]
 8006f88:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80070d8 <_strtod_l+0x598>
 8006f8c:	2322      	movs	r3, #34	@ 0x22
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	f04f 0a00 	mov.w	sl, #0
 8006f94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f43f ae0b 	beq.w	8006bb2 <_strtod_l+0x72>
 8006f9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f9e:	9805      	ldr	r0, [sp, #20]
 8006fa0:	f7ff f946 	bl	8006230 <_Bfree>
 8006fa4:	9805      	ldr	r0, [sp, #20]
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7ff f942 	bl	8006230 <_Bfree>
 8006fac:	9805      	ldr	r0, [sp, #20]
 8006fae:	4641      	mov	r1, r8
 8006fb0:	f7ff f93e 	bl	8006230 <_Bfree>
 8006fb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fb6:	9805      	ldr	r0, [sp, #20]
 8006fb8:	f7ff f93a 	bl	8006230 <_Bfree>
 8006fbc:	9805      	ldr	r0, [sp, #20]
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	f7ff f936 	bl	8006230 <_Bfree>
 8006fc4:	e5f5      	b.n	8006bb2 <_strtod_l+0x72>
 8006fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	dbbc      	blt.n	8006f4a <_strtod_l+0x40a>
 8006fd0:	4c3f      	ldr	r4, [pc, #252]	@ (80070d0 <_strtod_l+0x590>)
 8006fd2:	f1c5 050f 	rsb	r5, r5, #15
 8006fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe2:	f7f9 fb09 	bl	80005f8 <__aeabi_dmul>
 8006fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe8:	1b5d      	subs	r5, r3, r5
 8006fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ff2:	e78f      	b.n	8006f14 <_strtod_l+0x3d4>
 8006ff4:	3316      	adds	r3, #22
 8006ff6:	dba8      	blt.n	8006f4a <_strtod_l+0x40a>
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ffa:	eba3 0808 	sub.w	r8, r3, r8
 8006ffe:	4b34      	ldr	r3, [pc, #208]	@ (80070d0 <_strtod_l+0x590>)
 8007000:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007004:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007008:	4650      	mov	r0, sl
 800700a:	4659      	mov	r1, fp
 800700c:	f7f9 fc1e 	bl	800084c <__aeabi_ddiv>
 8007010:	e782      	b.n	8006f18 <_strtod_l+0x3d8>
 8007012:	2300      	movs	r3, #0
 8007014:	4f2f      	ldr	r7, [pc, #188]	@ (80070d4 <_strtod_l+0x594>)
 8007016:	1124      	asrs	r4, r4, #4
 8007018:	4650      	mov	r0, sl
 800701a:	4659      	mov	r1, fp
 800701c:	461e      	mov	r6, r3
 800701e:	2c01      	cmp	r4, #1
 8007020:	dc21      	bgt.n	8007066 <_strtod_l+0x526>
 8007022:	b10b      	cbz	r3, 8007028 <_strtod_l+0x4e8>
 8007024:	4682      	mov	sl, r0
 8007026:	468b      	mov	fp, r1
 8007028:	492a      	ldr	r1, [pc, #168]	@ (80070d4 <_strtod_l+0x594>)
 800702a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800702e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007032:	4652      	mov	r2, sl
 8007034:	465b      	mov	r3, fp
 8007036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703a:	f7f9 fadd 	bl	80005f8 <__aeabi_dmul>
 800703e:	4b26      	ldr	r3, [pc, #152]	@ (80070d8 <_strtod_l+0x598>)
 8007040:	460a      	mov	r2, r1
 8007042:	400b      	ands	r3, r1
 8007044:	4925      	ldr	r1, [pc, #148]	@ (80070dc <_strtod_l+0x59c>)
 8007046:	428b      	cmp	r3, r1
 8007048:	4682      	mov	sl, r0
 800704a:	d898      	bhi.n	8006f7e <_strtod_l+0x43e>
 800704c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007050:	428b      	cmp	r3, r1
 8007052:	bf86      	itte	hi
 8007054:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80070e0 <_strtod_l+0x5a0>
 8007058:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800705c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007060:	2300      	movs	r3, #0
 8007062:	9308      	str	r3, [sp, #32]
 8007064:	e076      	b.n	8007154 <_strtod_l+0x614>
 8007066:	07e2      	lsls	r2, r4, #31
 8007068:	d504      	bpl.n	8007074 <_strtod_l+0x534>
 800706a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800706e:	f7f9 fac3 	bl	80005f8 <__aeabi_dmul>
 8007072:	2301      	movs	r3, #1
 8007074:	3601      	adds	r6, #1
 8007076:	1064      	asrs	r4, r4, #1
 8007078:	3708      	adds	r7, #8
 800707a:	e7d0      	b.n	800701e <_strtod_l+0x4de>
 800707c:	d0f0      	beq.n	8007060 <_strtod_l+0x520>
 800707e:	4264      	negs	r4, r4
 8007080:	f014 020f 	ands.w	r2, r4, #15
 8007084:	d00a      	beq.n	800709c <_strtod_l+0x55c>
 8007086:	4b12      	ldr	r3, [pc, #72]	@ (80070d0 <_strtod_l+0x590>)
 8007088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800708c:	4650      	mov	r0, sl
 800708e:	4659      	mov	r1, fp
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	f7f9 fbda 	bl	800084c <__aeabi_ddiv>
 8007098:	4682      	mov	sl, r0
 800709a:	468b      	mov	fp, r1
 800709c:	1124      	asrs	r4, r4, #4
 800709e:	d0df      	beq.n	8007060 <_strtod_l+0x520>
 80070a0:	2c1f      	cmp	r4, #31
 80070a2:	dd1f      	ble.n	80070e4 <_strtod_l+0x5a4>
 80070a4:	2400      	movs	r4, #0
 80070a6:	46a0      	mov	r8, r4
 80070a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070aa:	46a1      	mov	r9, r4
 80070ac:	9a05      	ldr	r2, [sp, #20]
 80070ae:	2322      	movs	r3, #34	@ 0x22
 80070b0:	f04f 0a00 	mov.w	sl, #0
 80070b4:	f04f 0b00 	mov.w	fp, #0
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	e76b      	b.n	8006f94 <_strtod_l+0x454>
 80070bc:	08009419 	.word	0x08009419
 80070c0:	080096f8 	.word	0x080096f8
 80070c4:	08009411 	.word	0x08009411
 80070c8:	08009446 	.word	0x08009446
 80070cc:	0800959a 	.word	0x0800959a
 80070d0:	08009630 	.word	0x08009630
 80070d4:	08009608 	.word	0x08009608
 80070d8:	7ff00000 	.word	0x7ff00000
 80070dc:	7ca00000 	.word	0x7ca00000
 80070e0:	7fefffff 	.word	0x7fefffff
 80070e4:	f014 0310 	ands.w	r3, r4, #16
 80070e8:	bf18      	it	ne
 80070ea:	236a      	movne	r3, #106	@ 0x6a
 80070ec:	4ea9      	ldr	r6, [pc, #676]	@ (8007394 <_strtod_l+0x854>)
 80070ee:	9308      	str	r3, [sp, #32]
 80070f0:	4650      	mov	r0, sl
 80070f2:	4659      	mov	r1, fp
 80070f4:	2300      	movs	r3, #0
 80070f6:	07e7      	lsls	r7, r4, #31
 80070f8:	d504      	bpl.n	8007104 <_strtod_l+0x5c4>
 80070fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070fe:	f7f9 fa7b 	bl	80005f8 <__aeabi_dmul>
 8007102:	2301      	movs	r3, #1
 8007104:	1064      	asrs	r4, r4, #1
 8007106:	f106 0608 	add.w	r6, r6, #8
 800710a:	d1f4      	bne.n	80070f6 <_strtod_l+0x5b6>
 800710c:	b10b      	cbz	r3, 8007112 <_strtod_l+0x5d2>
 800710e:	4682      	mov	sl, r0
 8007110:	468b      	mov	fp, r1
 8007112:	9b08      	ldr	r3, [sp, #32]
 8007114:	b1b3      	cbz	r3, 8007144 <_strtod_l+0x604>
 8007116:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800711a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800711e:	2b00      	cmp	r3, #0
 8007120:	4659      	mov	r1, fp
 8007122:	dd0f      	ble.n	8007144 <_strtod_l+0x604>
 8007124:	2b1f      	cmp	r3, #31
 8007126:	dd56      	ble.n	80071d6 <_strtod_l+0x696>
 8007128:	2b34      	cmp	r3, #52	@ 0x34
 800712a:	bfde      	ittt	le
 800712c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007130:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007134:	4093      	lslle	r3, r2
 8007136:	f04f 0a00 	mov.w	sl, #0
 800713a:	bfcc      	ite	gt
 800713c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007140:	ea03 0b01 	andle.w	fp, r3, r1
 8007144:	2200      	movs	r2, #0
 8007146:	2300      	movs	r3, #0
 8007148:	4650      	mov	r0, sl
 800714a:	4659      	mov	r1, fp
 800714c:	f7f9 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007150:	2800      	cmp	r0, #0
 8007152:	d1a7      	bne.n	80070a4 <_strtod_l+0x564>
 8007154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800715a:	9805      	ldr	r0, [sp, #20]
 800715c:	462b      	mov	r3, r5
 800715e:	464a      	mov	r2, r9
 8007160:	f7ff f8ce 	bl	8006300 <__s2b>
 8007164:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007166:	2800      	cmp	r0, #0
 8007168:	f43f af09 	beq.w	8006f7e <_strtod_l+0x43e>
 800716c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800716e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007170:	2a00      	cmp	r2, #0
 8007172:	eba3 0308 	sub.w	r3, r3, r8
 8007176:	bfa8      	it	ge
 8007178:	2300      	movge	r3, #0
 800717a:	9312      	str	r3, [sp, #72]	@ 0x48
 800717c:	2400      	movs	r4, #0
 800717e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007182:	9316      	str	r3, [sp, #88]	@ 0x58
 8007184:	46a0      	mov	r8, r4
 8007186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007188:	9805      	ldr	r0, [sp, #20]
 800718a:	6859      	ldr	r1, [r3, #4]
 800718c:	f7ff f810 	bl	80061b0 <_Balloc>
 8007190:	4681      	mov	r9, r0
 8007192:	2800      	cmp	r0, #0
 8007194:	f43f aef7 	beq.w	8006f86 <_strtod_l+0x446>
 8007198:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	3202      	adds	r2, #2
 800719e:	f103 010c 	add.w	r1, r3, #12
 80071a2:	0092      	lsls	r2, r2, #2
 80071a4:	300c      	adds	r0, #12
 80071a6:	f001 fc3f 	bl	8008a28 <memcpy>
 80071aa:	ec4b ab10 	vmov	d0, sl, fp
 80071ae:	9805      	ldr	r0, [sp, #20]
 80071b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80071b2:	a91b      	add	r1, sp, #108	@ 0x6c
 80071b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80071b8:	f7ff fbd6 	bl	8006968 <__d2b>
 80071bc:	901a      	str	r0, [sp, #104]	@ 0x68
 80071be:	2800      	cmp	r0, #0
 80071c0:	f43f aee1 	beq.w	8006f86 <_strtod_l+0x446>
 80071c4:	9805      	ldr	r0, [sp, #20]
 80071c6:	2101      	movs	r1, #1
 80071c8:	f7ff f930 	bl	800642c <__i2b>
 80071cc:	4680      	mov	r8, r0
 80071ce:	b948      	cbnz	r0, 80071e4 <_strtod_l+0x6a4>
 80071d0:	f04f 0800 	mov.w	r8, #0
 80071d4:	e6d7      	b.n	8006f86 <_strtod_l+0x446>
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	ea03 0a0a 	and.w	sl, r3, sl
 80071e2:	e7af      	b.n	8007144 <_strtod_l+0x604>
 80071e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80071e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	bfab      	itete	ge
 80071ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80071ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80071f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80071f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80071f4:	bfac      	ite	ge
 80071f6:	18ef      	addge	r7, r5, r3
 80071f8:	1b5e      	sublt	r6, r3, r5
 80071fa:	9b08      	ldr	r3, [sp, #32]
 80071fc:	1aed      	subs	r5, r5, r3
 80071fe:	4415      	add	r5, r2
 8007200:	4b65      	ldr	r3, [pc, #404]	@ (8007398 <_strtod_l+0x858>)
 8007202:	3d01      	subs	r5, #1
 8007204:	429d      	cmp	r5, r3
 8007206:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800720a:	da50      	bge.n	80072ae <_strtod_l+0x76e>
 800720c:	1b5b      	subs	r3, r3, r5
 800720e:	2b1f      	cmp	r3, #31
 8007210:	eba2 0203 	sub.w	r2, r2, r3
 8007214:	f04f 0101 	mov.w	r1, #1
 8007218:	dc3d      	bgt.n	8007296 <_strtod_l+0x756>
 800721a:	fa01 f303 	lsl.w	r3, r1, r3
 800721e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007220:	2300      	movs	r3, #0
 8007222:	9310      	str	r3, [sp, #64]	@ 0x40
 8007224:	18bd      	adds	r5, r7, r2
 8007226:	9b08      	ldr	r3, [sp, #32]
 8007228:	42af      	cmp	r7, r5
 800722a:	4416      	add	r6, r2
 800722c:	441e      	add	r6, r3
 800722e:	463b      	mov	r3, r7
 8007230:	bfa8      	it	ge
 8007232:	462b      	movge	r3, r5
 8007234:	42b3      	cmp	r3, r6
 8007236:	bfa8      	it	ge
 8007238:	4633      	movge	r3, r6
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfc2      	ittt	gt
 800723e:	1aed      	subgt	r5, r5, r3
 8007240:	1af6      	subgt	r6, r6, r3
 8007242:	1aff      	subgt	r7, r7, r3
 8007244:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007246:	2b00      	cmp	r3, #0
 8007248:	dd16      	ble.n	8007278 <_strtod_l+0x738>
 800724a:	4641      	mov	r1, r8
 800724c:	9805      	ldr	r0, [sp, #20]
 800724e:	461a      	mov	r2, r3
 8007250:	f7ff f9a4 	bl	800659c <__pow5mult>
 8007254:	4680      	mov	r8, r0
 8007256:	2800      	cmp	r0, #0
 8007258:	d0ba      	beq.n	80071d0 <_strtod_l+0x690>
 800725a:	4601      	mov	r1, r0
 800725c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800725e:	9805      	ldr	r0, [sp, #20]
 8007260:	f7ff f8fa 	bl	8006458 <__multiply>
 8007264:	900a      	str	r0, [sp, #40]	@ 0x28
 8007266:	2800      	cmp	r0, #0
 8007268:	f43f ae8d 	beq.w	8006f86 <_strtod_l+0x446>
 800726c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800726e:	9805      	ldr	r0, [sp, #20]
 8007270:	f7fe ffde 	bl	8006230 <_Bfree>
 8007274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007276:	931a      	str	r3, [sp, #104]	@ 0x68
 8007278:	2d00      	cmp	r5, #0
 800727a:	dc1d      	bgt.n	80072b8 <_strtod_l+0x778>
 800727c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	dd23      	ble.n	80072ca <_strtod_l+0x78a>
 8007282:	4649      	mov	r1, r9
 8007284:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007286:	9805      	ldr	r0, [sp, #20]
 8007288:	f7ff f988 	bl	800659c <__pow5mult>
 800728c:	4681      	mov	r9, r0
 800728e:	b9e0      	cbnz	r0, 80072ca <_strtod_l+0x78a>
 8007290:	f04f 0900 	mov.w	r9, #0
 8007294:	e677      	b.n	8006f86 <_strtod_l+0x446>
 8007296:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800729a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800729e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80072a2:	35e2      	adds	r5, #226	@ 0xe2
 80072a4:	fa01 f305 	lsl.w	r3, r1, r5
 80072a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80072aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80072ac:	e7ba      	b.n	8007224 <_strtod_l+0x6e4>
 80072ae:	2300      	movs	r3, #0
 80072b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80072b2:	2301      	movs	r3, #1
 80072b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072b6:	e7b5      	b.n	8007224 <_strtod_l+0x6e4>
 80072b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072ba:	9805      	ldr	r0, [sp, #20]
 80072bc:	462a      	mov	r2, r5
 80072be:	f7ff f9c7 	bl	8006650 <__lshift>
 80072c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d1d9      	bne.n	800727c <_strtod_l+0x73c>
 80072c8:	e65d      	b.n	8006f86 <_strtod_l+0x446>
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	dd07      	ble.n	80072de <_strtod_l+0x79e>
 80072ce:	4649      	mov	r1, r9
 80072d0:	9805      	ldr	r0, [sp, #20]
 80072d2:	4632      	mov	r2, r6
 80072d4:	f7ff f9bc 	bl	8006650 <__lshift>
 80072d8:	4681      	mov	r9, r0
 80072da:	2800      	cmp	r0, #0
 80072dc:	d0d8      	beq.n	8007290 <_strtod_l+0x750>
 80072de:	2f00      	cmp	r7, #0
 80072e0:	dd08      	ble.n	80072f4 <_strtod_l+0x7b4>
 80072e2:	4641      	mov	r1, r8
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	463a      	mov	r2, r7
 80072e8:	f7ff f9b2 	bl	8006650 <__lshift>
 80072ec:	4680      	mov	r8, r0
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f43f ae49 	beq.w	8006f86 <_strtod_l+0x446>
 80072f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072f6:	9805      	ldr	r0, [sp, #20]
 80072f8:	464a      	mov	r2, r9
 80072fa:	f7ff fa31 	bl	8006760 <__mdiff>
 80072fe:	4604      	mov	r4, r0
 8007300:	2800      	cmp	r0, #0
 8007302:	f43f ae40 	beq.w	8006f86 <_strtod_l+0x446>
 8007306:	68c3      	ldr	r3, [r0, #12]
 8007308:	930f      	str	r3, [sp, #60]	@ 0x3c
 800730a:	2300      	movs	r3, #0
 800730c:	60c3      	str	r3, [r0, #12]
 800730e:	4641      	mov	r1, r8
 8007310:	f7ff fa0a 	bl	8006728 <__mcmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	da45      	bge.n	80073a4 <_strtod_l+0x864>
 8007318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800731a:	ea53 030a 	orrs.w	r3, r3, sl
 800731e:	d16b      	bne.n	80073f8 <_strtod_l+0x8b8>
 8007320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007324:	2b00      	cmp	r3, #0
 8007326:	d167      	bne.n	80073f8 <_strtod_l+0x8b8>
 8007328:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800732c:	0d1b      	lsrs	r3, r3, #20
 800732e:	051b      	lsls	r3, r3, #20
 8007330:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007334:	d960      	bls.n	80073f8 <_strtod_l+0x8b8>
 8007336:	6963      	ldr	r3, [r4, #20]
 8007338:	b913      	cbnz	r3, 8007340 <_strtod_l+0x800>
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	2b01      	cmp	r3, #1
 800733e:	dd5b      	ble.n	80073f8 <_strtod_l+0x8b8>
 8007340:	4621      	mov	r1, r4
 8007342:	2201      	movs	r2, #1
 8007344:	9805      	ldr	r0, [sp, #20]
 8007346:	f7ff f983 	bl	8006650 <__lshift>
 800734a:	4641      	mov	r1, r8
 800734c:	4604      	mov	r4, r0
 800734e:	f7ff f9eb 	bl	8006728 <__mcmp>
 8007352:	2800      	cmp	r0, #0
 8007354:	dd50      	ble.n	80073f8 <_strtod_l+0x8b8>
 8007356:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800735a:	9a08      	ldr	r2, [sp, #32]
 800735c:	0d1b      	lsrs	r3, r3, #20
 800735e:	051b      	lsls	r3, r3, #20
 8007360:	2a00      	cmp	r2, #0
 8007362:	d06a      	beq.n	800743a <_strtod_l+0x8fa>
 8007364:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007368:	d867      	bhi.n	800743a <_strtod_l+0x8fa>
 800736a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800736e:	f67f ae9d 	bls.w	80070ac <_strtod_l+0x56c>
 8007372:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <_strtod_l+0x85c>)
 8007374:	4650      	mov	r0, sl
 8007376:	4659      	mov	r1, fp
 8007378:	2200      	movs	r2, #0
 800737a:	f7f9 f93d 	bl	80005f8 <__aeabi_dmul>
 800737e:	4b08      	ldr	r3, [pc, #32]	@ (80073a0 <_strtod_l+0x860>)
 8007380:	400b      	ands	r3, r1
 8007382:	4682      	mov	sl, r0
 8007384:	468b      	mov	fp, r1
 8007386:	2b00      	cmp	r3, #0
 8007388:	f47f ae08 	bne.w	8006f9c <_strtod_l+0x45c>
 800738c:	9a05      	ldr	r2, [sp, #20]
 800738e:	2322      	movs	r3, #34	@ 0x22
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	e603      	b.n	8006f9c <_strtod_l+0x45c>
 8007394:	08009720 	.word	0x08009720
 8007398:	fffffc02 	.word	0xfffffc02
 800739c:	39500000 	.word	0x39500000
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80073a8:	d165      	bne.n	8007476 <_strtod_l+0x936>
 80073aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073b0:	b35a      	cbz	r2, 800740a <_strtod_l+0x8ca>
 80073b2:	4a9f      	ldr	r2, [pc, #636]	@ (8007630 <_strtod_l+0xaf0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d12b      	bne.n	8007410 <_strtod_l+0x8d0>
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	4651      	mov	r1, sl
 80073bc:	b303      	cbz	r3, 8007400 <_strtod_l+0x8c0>
 80073be:	4b9d      	ldr	r3, [pc, #628]	@ (8007634 <_strtod_l+0xaf4>)
 80073c0:	465a      	mov	r2, fp
 80073c2:	4013      	ands	r3, r2
 80073c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80073c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073cc:	d81b      	bhi.n	8007406 <_strtod_l+0x8c6>
 80073ce:	0d1b      	lsrs	r3, r3, #20
 80073d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80073d4:	fa02 f303 	lsl.w	r3, r2, r3
 80073d8:	4299      	cmp	r1, r3
 80073da:	d119      	bne.n	8007410 <_strtod_l+0x8d0>
 80073dc:	4b96      	ldr	r3, [pc, #600]	@ (8007638 <_strtod_l+0xaf8>)
 80073de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d102      	bne.n	80073ea <_strtod_l+0x8aa>
 80073e4:	3101      	adds	r1, #1
 80073e6:	f43f adce 	beq.w	8006f86 <_strtod_l+0x446>
 80073ea:	4b92      	ldr	r3, [pc, #584]	@ (8007634 <_strtod_l+0xaf4>)
 80073ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073ee:	401a      	ands	r2, r3
 80073f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80073f4:	f04f 0a00 	mov.w	sl, #0
 80073f8:	9b08      	ldr	r3, [sp, #32]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1b9      	bne.n	8007372 <_strtod_l+0x832>
 80073fe:	e5cd      	b.n	8006f9c <_strtod_l+0x45c>
 8007400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007404:	e7e8      	b.n	80073d8 <_strtod_l+0x898>
 8007406:	4613      	mov	r3, r2
 8007408:	e7e6      	b.n	80073d8 <_strtod_l+0x898>
 800740a:	ea53 030a 	orrs.w	r3, r3, sl
 800740e:	d0a2      	beq.n	8007356 <_strtod_l+0x816>
 8007410:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007412:	b1db      	cbz	r3, 800744c <_strtod_l+0x90c>
 8007414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007416:	4213      	tst	r3, r2
 8007418:	d0ee      	beq.n	80073f8 <_strtod_l+0x8b8>
 800741a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800741c:	9a08      	ldr	r2, [sp, #32]
 800741e:	4650      	mov	r0, sl
 8007420:	4659      	mov	r1, fp
 8007422:	b1bb      	cbz	r3, 8007454 <_strtod_l+0x914>
 8007424:	f7ff fb6e 	bl	8006b04 <sulp>
 8007428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800742c:	ec53 2b10 	vmov	r2, r3, d0
 8007430:	f7f8 ff2c 	bl	800028c <__adddf3>
 8007434:	4682      	mov	sl, r0
 8007436:	468b      	mov	fp, r1
 8007438:	e7de      	b.n	80073f8 <_strtod_l+0x8b8>
 800743a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800743e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007442:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007446:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800744a:	e7d5      	b.n	80073f8 <_strtod_l+0x8b8>
 800744c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800744e:	ea13 0f0a 	tst.w	r3, sl
 8007452:	e7e1      	b.n	8007418 <_strtod_l+0x8d8>
 8007454:	f7ff fb56 	bl	8006b04 <sulp>
 8007458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800745c:	ec53 2b10 	vmov	r2, r3, d0
 8007460:	f7f8 ff12 	bl	8000288 <__aeabi_dsub>
 8007464:	2200      	movs	r2, #0
 8007466:	2300      	movs	r3, #0
 8007468:	4682      	mov	sl, r0
 800746a:	468b      	mov	fp, r1
 800746c:	f7f9 fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007470:	2800      	cmp	r0, #0
 8007472:	d0c1      	beq.n	80073f8 <_strtod_l+0x8b8>
 8007474:	e61a      	b.n	80070ac <_strtod_l+0x56c>
 8007476:	4641      	mov	r1, r8
 8007478:	4620      	mov	r0, r4
 800747a:	f7ff facd 	bl	8006a18 <__ratio>
 800747e:	ec57 6b10 	vmov	r6, r7, d0
 8007482:	2200      	movs	r2, #0
 8007484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f9 fb30 	bl	8000af0 <__aeabi_dcmple>
 8007490:	2800      	cmp	r0, #0
 8007492:	d06f      	beq.n	8007574 <_strtod_l+0xa34>
 8007494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d17a      	bne.n	8007590 <_strtod_l+0xa50>
 800749a:	f1ba 0f00 	cmp.w	sl, #0
 800749e:	d158      	bne.n	8007552 <_strtod_l+0xa12>
 80074a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d15a      	bne.n	8007560 <_strtod_l+0xa20>
 80074aa:	4b64      	ldr	r3, [pc, #400]	@ (800763c <_strtod_l+0xafc>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	4630      	mov	r0, r6
 80074b0:	4639      	mov	r1, r7
 80074b2:	f7f9 fb13 	bl	8000adc <__aeabi_dcmplt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d159      	bne.n	800756e <_strtod_l+0xa2e>
 80074ba:	4630      	mov	r0, r6
 80074bc:	4639      	mov	r1, r7
 80074be:	4b60      	ldr	r3, [pc, #384]	@ (8007640 <_strtod_l+0xb00>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	f7f9 f899 	bl	80005f8 <__aeabi_dmul>
 80074c6:	4606      	mov	r6, r0
 80074c8:	460f      	mov	r7, r1
 80074ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80074ce:	9606      	str	r6, [sp, #24]
 80074d0:	9307      	str	r3, [sp, #28]
 80074d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074d6:	4d57      	ldr	r5, [pc, #348]	@ (8007634 <_strtod_l+0xaf4>)
 80074d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80074dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074de:	401d      	ands	r5, r3
 80074e0:	4b58      	ldr	r3, [pc, #352]	@ (8007644 <_strtod_l+0xb04>)
 80074e2:	429d      	cmp	r5, r3
 80074e4:	f040 80b2 	bne.w	800764c <_strtod_l+0xb0c>
 80074e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80074ee:	ec4b ab10 	vmov	d0, sl, fp
 80074f2:	f7ff f9c9 	bl	8006888 <__ulp>
 80074f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074fa:	ec51 0b10 	vmov	r0, r1, d0
 80074fe:	f7f9 f87b 	bl	80005f8 <__aeabi_dmul>
 8007502:	4652      	mov	r2, sl
 8007504:	465b      	mov	r3, fp
 8007506:	f7f8 fec1 	bl	800028c <__adddf3>
 800750a:	460b      	mov	r3, r1
 800750c:	4949      	ldr	r1, [pc, #292]	@ (8007634 <_strtod_l+0xaf4>)
 800750e:	4a4e      	ldr	r2, [pc, #312]	@ (8007648 <_strtod_l+0xb08>)
 8007510:	4019      	ands	r1, r3
 8007512:	4291      	cmp	r1, r2
 8007514:	4682      	mov	sl, r0
 8007516:	d942      	bls.n	800759e <_strtod_l+0xa5e>
 8007518:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800751a:	4b47      	ldr	r3, [pc, #284]	@ (8007638 <_strtod_l+0xaf8>)
 800751c:	429a      	cmp	r2, r3
 800751e:	d103      	bne.n	8007528 <_strtod_l+0x9e8>
 8007520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007522:	3301      	adds	r3, #1
 8007524:	f43f ad2f 	beq.w	8006f86 <_strtod_l+0x446>
 8007528:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007638 <_strtod_l+0xaf8>
 800752c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007530:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007532:	9805      	ldr	r0, [sp, #20]
 8007534:	f7fe fe7c 	bl	8006230 <_Bfree>
 8007538:	9805      	ldr	r0, [sp, #20]
 800753a:	4649      	mov	r1, r9
 800753c:	f7fe fe78 	bl	8006230 <_Bfree>
 8007540:	9805      	ldr	r0, [sp, #20]
 8007542:	4641      	mov	r1, r8
 8007544:	f7fe fe74 	bl	8006230 <_Bfree>
 8007548:	9805      	ldr	r0, [sp, #20]
 800754a:	4621      	mov	r1, r4
 800754c:	f7fe fe70 	bl	8006230 <_Bfree>
 8007550:	e619      	b.n	8007186 <_strtod_l+0x646>
 8007552:	f1ba 0f01 	cmp.w	sl, #1
 8007556:	d103      	bne.n	8007560 <_strtod_l+0xa20>
 8007558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755a:	2b00      	cmp	r3, #0
 800755c:	f43f ada6 	beq.w	80070ac <_strtod_l+0x56c>
 8007560:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007610 <_strtod_l+0xad0>
 8007564:	4f35      	ldr	r7, [pc, #212]	@ (800763c <_strtod_l+0xafc>)
 8007566:	ed8d 7b06 	vstr	d7, [sp, #24]
 800756a:	2600      	movs	r6, #0
 800756c:	e7b1      	b.n	80074d2 <_strtod_l+0x992>
 800756e:	4f34      	ldr	r7, [pc, #208]	@ (8007640 <_strtod_l+0xb00>)
 8007570:	2600      	movs	r6, #0
 8007572:	e7aa      	b.n	80074ca <_strtod_l+0x98a>
 8007574:	4b32      	ldr	r3, [pc, #200]	@ (8007640 <_strtod_l+0xb00>)
 8007576:	4630      	mov	r0, r6
 8007578:	4639      	mov	r1, r7
 800757a:	2200      	movs	r2, #0
 800757c:	f7f9 f83c 	bl	80005f8 <__aeabi_dmul>
 8007580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007582:	4606      	mov	r6, r0
 8007584:	460f      	mov	r7, r1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d09f      	beq.n	80074ca <_strtod_l+0x98a>
 800758a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800758e:	e7a0      	b.n	80074d2 <_strtod_l+0x992>
 8007590:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007618 <_strtod_l+0xad8>
 8007594:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007598:	ec57 6b17 	vmov	r6, r7, d7
 800759c:	e799      	b.n	80074d2 <_strtod_l+0x992>
 800759e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1c1      	bne.n	8007530 <_strtod_l+0x9f0>
 80075ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075b0:	0d1b      	lsrs	r3, r3, #20
 80075b2:	051b      	lsls	r3, r3, #20
 80075b4:	429d      	cmp	r5, r3
 80075b6:	d1bb      	bne.n	8007530 <_strtod_l+0x9f0>
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f9 fb64 	bl	8000c88 <__aeabi_d2lz>
 80075c0:	f7f8 ffec 	bl	800059c <__aeabi_l2d>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4630      	mov	r0, r6
 80075ca:	4639      	mov	r1, r7
 80075cc:	f7f8 fe5c 	bl	8000288 <__aeabi_dsub>
 80075d0:	460b      	mov	r3, r1
 80075d2:	4602      	mov	r2, r0
 80075d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80075d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80075dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075de:	ea46 060a 	orr.w	r6, r6, sl
 80075e2:	431e      	orrs	r6, r3
 80075e4:	d06f      	beq.n	80076c6 <_strtod_l+0xb86>
 80075e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007620 <_strtod_l+0xae0>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f9 fa76 	bl	8000adc <__aeabi_dcmplt>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f47f acd3 	bne.w	8006f9c <_strtod_l+0x45c>
 80075f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007628 <_strtod_l+0xae8>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007600:	f7f9 fa8a 	bl	8000b18 <__aeabi_dcmpgt>
 8007604:	2800      	cmp	r0, #0
 8007606:	d093      	beq.n	8007530 <_strtod_l+0x9f0>
 8007608:	e4c8      	b.n	8006f9c <_strtod_l+0x45c>
 800760a:	bf00      	nop
 800760c:	f3af 8000 	nop.w
 8007610:	00000000 	.word	0x00000000
 8007614:	bff00000 	.word	0xbff00000
 8007618:	00000000 	.word	0x00000000
 800761c:	3ff00000 	.word	0x3ff00000
 8007620:	94a03595 	.word	0x94a03595
 8007624:	3fdfffff 	.word	0x3fdfffff
 8007628:	35afe535 	.word	0x35afe535
 800762c:	3fe00000 	.word	0x3fe00000
 8007630:	000fffff 	.word	0x000fffff
 8007634:	7ff00000 	.word	0x7ff00000
 8007638:	7fefffff 	.word	0x7fefffff
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	3fe00000 	.word	0x3fe00000
 8007644:	7fe00000 	.word	0x7fe00000
 8007648:	7c9fffff 	.word	0x7c9fffff
 800764c:	9b08      	ldr	r3, [sp, #32]
 800764e:	b323      	cbz	r3, 800769a <_strtod_l+0xb5a>
 8007650:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007654:	d821      	bhi.n	800769a <_strtod_l+0xb5a>
 8007656:	a328      	add	r3, pc, #160	@ (adr r3, 80076f8 <_strtod_l+0xbb8>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f9 fa46 	bl	8000af0 <__aeabi_dcmple>
 8007664:	b1a0      	cbz	r0, 8007690 <_strtod_l+0xb50>
 8007666:	4639      	mov	r1, r7
 8007668:	4630      	mov	r0, r6
 800766a:	f7f9 fa9d 	bl	8000ba8 <__aeabi_d2uiz>
 800766e:	2801      	cmp	r0, #1
 8007670:	bf38      	it	cc
 8007672:	2001      	movcc	r0, #1
 8007674:	f7f8 ff46 	bl	8000504 <__aeabi_ui2d>
 8007678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800767a:	4606      	mov	r6, r0
 800767c:	460f      	mov	r7, r1
 800767e:	b9fb      	cbnz	r3, 80076c0 <_strtod_l+0xb80>
 8007680:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007684:	9014      	str	r0, [sp, #80]	@ 0x50
 8007686:	9315      	str	r3, [sp, #84]	@ 0x54
 8007688:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800768c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007690:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007692:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007696:	1b5b      	subs	r3, r3, r5
 8007698:	9311      	str	r3, [sp, #68]	@ 0x44
 800769a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800769e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80076a2:	f7ff f8f1 	bl	8006888 <__ulp>
 80076a6:	4650      	mov	r0, sl
 80076a8:	ec53 2b10 	vmov	r2, r3, d0
 80076ac:	4659      	mov	r1, fp
 80076ae:	f7f8 ffa3 	bl	80005f8 <__aeabi_dmul>
 80076b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80076b6:	f7f8 fde9 	bl	800028c <__adddf3>
 80076ba:	4682      	mov	sl, r0
 80076bc:	468b      	mov	fp, r1
 80076be:	e770      	b.n	80075a2 <_strtod_l+0xa62>
 80076c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80076c4:	e7e0      	b.n	8007688 <_strtod_l+0xb48>
 80076c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007700 <_strtod_l+0xbc0>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f7f9 fa06 	bl	8000adc <__aeabi_dcmplt>
 80076d0:	e798      	b.n	8007604 <_strtod_l+0xac4>
 80076d2:	2300      	movs	r3, #0
 80076d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80076d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80076d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	f7ff ba6d 	b.w	8006bba <_strtod_l+0x7a>
 80076e0:	2a65      	cmp	r2, #101	@ 0x65
 80076e2:	f43f ab68 	beq.w	8006db6 <_strtod_l+0x276>
 80076e6:	2a45      	cmp	r2, #69	@ 0x45
 80076e8:	f43f ab65 	beq.w	8006db6 <_strtod_l+0x276>
 80076ec:	2301      	movs	r3, #1
 80076ee:	f7ff bba0 	b.w	8006e32 <_strtod_l+0x2f2>
 80076f2:	bf00      	nop
 80076f4:	f3af 8000 	nop.w
 80076f8:	ffc00000 	.word	0xffc00000
 80076fc:	41dfffff 	.word	0x41dfffff
 8007700:	94a03595 	.word	0x94a03595
 8007704:	3fcfffff 	.word	0x3fcfffff

08007708 <_strtod_r>:
 8007708:	4b01      	ldr	r3, [pc, #4]	@ (8007710 <_strtod_r+0x8>)
 800770a:	f7ff ba19 	b.w	8006b40 <_strtod_l>
 800770e:	bf00      	nop
 8007710:	20000068 	.word	0x20000068

08007714 <_strtol_l.isra.0>:
 8007714:	2b24      	cmp	r3, #36	@ 0x24
 8007716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771a:	4686      	mov	lr, r0
 800771c:	4690      	mov	r8, r2
 800771e:	d801      	bhi.n	8007724 <_strtol_l.isra.0+0x10>
 8007720:	2b01      	cmp	r3, #1
 8007722:	d106      	bne.n	8007732 <_strtol_l.isra.0+0x1e>
 8007724:	f7fd fdb8 	bl	8005298 <__errno>
 8007728:	2316      	movs	r3, #22
 800772a:	6003      	str	r3, [r0, #0]
 800772c:	2000      	movs	r0, #0
 800772e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007732:	4834      	ldr	r0, [pc, #208]	@ (8007804 <_strtol_l.isra.0+0xf0>)
 8007734:	460d      	mov	r5, r1
 8007736:	462a      	mov	r2, r5
 8007738:	f815 4b01 	ldrb.w	r4, [r5], #1
 800773c:	5d06      	ldrb	r6, [r0, r4]
 800773e:	f016 0608 	ands.w	r6, r6, #8
 8007742:	d1f8      	bne.n	8007736 <_strtol_l.isra.0+0x22>
 8007744:	2c2d      	cmp	r4, #45	@ 0x2d
 8007746:	d110      	bne.n	800776a <_strtol_l.isra.0+0x56>
 8007748:	782c      	ldrb	r4, [r5, #0]
 800774a:	2601      	movs	r6, #1
 800774c:	1c95      	adds	r5, r2, #2
 800774e:	f033 0210 	bics.w	r2, r3, #16
 8007752:	d115      	bne.n	8007780 <_strtol_l.isra.0+0x6c>
 8007754:	2c30      	cmp	r4, #48	@ 0x30
 8007756:	d10d      	bne.n	8007774 <_strtol_l.isra.0+0x60>
 8007758:	782a      	ldrb	r2, [r5, #0]
 800775a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800775e:	2a58      	cmp	r2, #88	@ 0x58
 8007760:	d108      	bne.n	8007774 <_strtol_l.isra.0+0x60>
 8007762:	786c      	ldrb	r4, [r5, #1]
 8007764:	3502      	adds	r5, #2
 8007766:	2310      	movs	r3, #16
 8007768:	e00a      	b.n	8007780 <_strtol_l.isra.0+0x6c>
 800776a:	2c2b      	cmp	r4, #43	@ 0x2b
 800776c:	bf04      	itt	eq
 800776e:	782c      	ldrbeq	r4, [r5, #0]
 8007770:	1c95      	addeq	r5, r2, #2
 8007772:	e7ec      	b.n	800774e <_strtol_l.isra.0+0x3a>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f6      	bne.n	8007766 <_strtol_l.isra.0+0x52>
 8007778:	2c30      	cmp	r4, #48	@ 0x30
 800777a:	bf14      	ite	ne
 800777c:	230a      	movne	r3, #10
 800777e:	2308      	moveq	r3, #8
 8007780:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007784:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007788:	2200      	movs	r2, #0
 800778a:	fbbc f9f3 	udiv	r9, ip, r3
 800778e:	4610      	mov	r0, r2
 8007790:	fb03 ca19 	mls	sl, r3, r9, ip
 8007794:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007798:	2f09      	cmp	r7, #9
 800779a:	d80f      	bhi.n	80077bc <_strtol_l.isra.0+0xa8>
 800779c:	463c      	mov	r4, r7
 800779e:	42a3      	cmp	r3, r4
 80077a0:	dd1b      	ble.n	80077da <_strtol_l.isra.0+0xc6>
 80077a2:	1c57      	adds	r7, r2, #1
 80077a4:	d007      	beq.n	80077b6 <_strtol_l.isra.0+0xa2>
 80077a6:	4581      	cmp	r9, r0
 80077a8:	d314      	bcc.n	80077d4 <_strtol_l.isra.0+0xc0>
 80077aa:	d101      	bne.n	80077b0 <_strtol_l.isra.0+0x9c>
 80077ac:	45a2      	cmp	sl, r4
 80077ae:	db11      	blt.n	80077d4 <_strtol_l.isra.0+0xc0>
 80077b0:	fb00 4003 	mla	r0, r0, r3, r4
 80077b4:	2201      	movs	r2, #1
 80077b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077ba:	e7eb      	b.n	8007794 <_strtol_l.isra.0+0x80>
 80077bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80077c0:	2f19      	cmp	r7, #25
 80077c2:	d801      	bhi.n	80077c8 <_strtol_l.isra.0+0xb4>
 80077c4:	3c37      	subs	r4, #55	@ 0x37
 80077c6:	e7ea      	b.n	800779e <_strtol_l.isra.0+0x8a>
 80077c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80077cc:	2f19      	cmp	r7, #25
 80077ce:	d804      	bhi.n	80077da <_strtol_l.isra.0+0xc6>
 80077d0:	3c57      	subs	r4, #87	@ 0x57
 80077d2:	e7e4      	b.n	800779e <_strtol_l.isra.0+0x8a>
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077d8:	e7ed      	b.n	80077b6 <_strtol_l.isra.0+0xa2>
 80077da:	1c53      	adds	r3, r2, #1
 80077dc:	d108      	bne.n	80077f0 <_strtol_l.isra.0+0xdc>
 80077de:	2322      	movs	r3, #34	@ 0x22
 80077e0:	f8ce 3000 	str.w	r3, [lr]
 80077e4:	4660      	mov	r0, ip
 80077e6:	f1b8 0f00 	cmp.w	r8, #0
 80077ea:	d0a0      	beq.n	800772e <_strtol_l.isra.0+0x1a>
 80077ec:	1e69      	subs	r1, r5, #1
 80077ee:	e006      	b.n	80077fe <_strtol_l.isra.0+0xea>
 80077f0:	b106      	cbz	r6, 80077f4 <_strtol_l.isra.0+0xe0>
 80077f2:	4240      	negs	r0, r0
 80077f4:	f1b8 0f00 	cmp.w	r8, #0
 80077f8:	d099      	beq.n	800772e <_strtol_l.isra.0+0x1a>
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	d1f6      	bne.n	80077ec <_strtol_l.isra.0+0xd8>
 80077fe:	f8c8 1000 	str.w	r1, [r8]
 8007802:	e794      	b.n	800772e <_strtol_l.isra.0+0x1a>
 8007804:	08009749 	.word	0x08009749

08007808 <_strtol_r>:
 8007808:	f7ff bf84 	b.w	8007714 <_strtol_l.isra.0>

0800780c <__ssputs_r>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	688e      	ldr	r6, [r1, #8]
 8007812:	461f      	mov	r7, r3
 8007814:	42be      	cmp	r6, r7
 8007816:	680b      	ldr	r3, [r1, #0]
 8007818:	4682      	mov	sl, r0
 800781a:	460c      	mov	r4, r1
 800781c:	4690      	mov	r8, r2
 800781e:	d82d      	bhi.n	800787c <__ssputs_r+0x70>
 8007820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007824:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007828:	d026      	beq.n	8007878 <__ssputs_r+0x6c>
 800782a:	6965      	ldr	r5, [r4, #20]
 800782c:	6909      	ldr	r1, [r1, #16]
 800782e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007832:	eba3 0901 	sub.w	r9, r3, r1
 8007836:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800783a:	1c7b      	adds	r3, r7, #1
 800783c:	444b      	add	r3, r9
 800783e:	106d      	asrs	r5, r5, #1
 8007840:	429d      	cmp	r5, r3
 8007842:	bf38      	it	cc
 8007844:	461d      	movcc	r5, r3
 8007846:	0553      	lsls	r3, r2, #21
 8007848:	d527      	bpl.n	800789a <__ssputs_r+0x8e>
 800784a:	4629      	mov	r1, r5
 800784c:	f7fe fc24 	bl	8006098 <_malloc_r>
 8007850:	4606      	mov	r6, r0
 8007852:	b360      	cbz	r0, 80078ae <__ssputs_r+0xa2>
 8007854:	6921      	ldr	r1, [r4, #16]
 8007856:	464a      	mov	r2, r9
 8007858:	f001 f8e6 	bl	8008a28 <memcpy>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007866:	81a3      	strh	r3, [r4, #12]
 8007868:	6126      	str	r6, [r4, #16]
 800786a:	6165      	str	r5, [r4, #20]
 800786c:	444e      	add	r6, r9
 800786e:	eba5 0509 	sub.w	r5, r5, r9
 8007872:	6026      	str	r6, [r4, #0]
 8007874:	60a5      	str	r5, [r4, #8]
 8007876:	463e      	mov	r6, r7
 8007878:	42be      	cmp	r6, r7
 800787a:	d900      	bls.n	800787e <__ssputs_r+0x72>
 800787c:	463e      	mov	r6, r7
 800787e:	6820      	ldr	r0, [r4, #0]
 8007880:	4632      	mov	r2, r6
 8007882:	4641      	mov	r1, r8
 8007884:	f001 f872 	bl	800896c <memmove>
 8007888:	68a3      	ldr	r3, [r4, #8]
 800788a:	1b9b      	subs	r3, r3, r6
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	4433      	add	r3, r6
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	2000      	movs	r0, #0
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	462a      	mov	r2, r5
 800789c:	f001 fc59 	bl	8009152 <_realloc_r>
 80078a0:	4606      	mov	r6, r0
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d1e0      	bne.n	8007868 <__ssputs_r+0x5c>
 80078a6:	6921      	ldr	r1, [r4, #16]
 80078a8:	4650      	mov	r0, sl
 80078aa:	f7fe fb81 	bl	8005fb0 <_free_r>
 80078ae:	230c      	movs	r3, #12
 80078b0:	f8ca 3000 	str.w	r3, [sl]
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078c0:	e7e9      	b.n	8007896 <__ssputs_r+0x8a>
	...

080078c4 <_svfiprintf_r>:
 80078c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	4698      	mov	r8, r3
 80078ca:	898b      	ldrh	r3, [r1, #12]
 80078cc:	061b      	lsls	r3, r3, #24
 80078ce:	b09d      	sub	sp, #116	@ 0x74
 80078d0:	4607      	mov	r7, r0
 80078d2:	460d      	mov	r5, r1
 80078d4:	4614      	mov	r4, r2
 80078d6:	d510      	bpl.n	80078fa <_svfiprintf_r+0x36>
 80078d8:	690b      	ldr	r3, [r1, #16]
 80078da:	b973      	cbnz	r3, 80078fa <_svfiprintf_r+0x36>
 80078dc:	2140      	movs	r1, #64	@ 0x40
 80078de:	f7fe fbdb 	bl	8006098 <_malloc_r>
 80078e2:	6028      	str	r0, [r5, #0]
 80078e4:	6128      	str	r0, [r5, #16]
 80078e6:	b930      	cbnz	r0, 80078f6 <_svfiprintf_r+0x32>
 80078e8:	230c      	movs	r3, #12
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078f0:	b01d      	add	sp, #116	@ 0x74
 80078f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f6:	2340      	movs	r3, #64	@ 0x40
 80078f8:	616b      	str	r3, [r5, #20]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078fe:	2320      	movs	r3, #32
 8007900:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007904:	f8cd 800c 	str.w	r8, [sp, #12]
 8007908:	2330      	movs	r3, #48	@ 0x30
 800790a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007aa8 <_svfiprintf_r+0x1e4>
 800790e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007912:	f04f 0901 	mov.w	r9, #1
 8007916:	4623      	mov	r3, r4
 8007918:	469a      	mov	sl, r3
 800791a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800791e:	b10a      	cbz	r2, 8007924 <_svfiprintf_r+0x60>
 8007920:	2a25      	cmp	r2, #37	@ 0x25
 8007922:	d1f9      	bne.n	8007918 <_svfiprintf_r+0x54>
 8007924:	ebba 0b04 	subs.w	fp, sl, r4
 8007928:	d00b      	beq.n	8007942 <_svfiprintf_r+0x7e>
 800792a:	465b      	mov	r3, fp
 800792c:	4622      	mov	r2, r4
 800792e:	4629      	mov	r1, r5
 8007930:	4638      	mov	r0, r7
 8007932:	f7ff ff6b 	bl	800780c <__ssputs_r>
 8007936:	3001      	adds	r0, #1
 8007938:	f000 80a7 	beq.w	8007a8a <_svfiprintf_r+0x1c6>
 800793c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800793e:	445a      	add	r2, fp
 8007940:	9209      	str	r2, [sp, #36]	@ 0x24
 8007942:	f89a 3000 	ldrb.w	r3, [sl]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 809f 	beq.w	8007a8a <_svfiprintf_r+0x1c6>
 800794c:	2300      	movs	r3, #0
 800794e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007956:	f10a 0a01 	add.w	sl, sl, #1
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	9307      	str	r3, [sp, #28]
 800795e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007962:	931a      	str	r3, [sp, #104]	@ 0x68
 8007964:	4654      	mov	r4, sl
 8007966:	2205      	movs	r2, #5
 8007968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796c:	484e      	ldr	r0, [pc, #312]	@ (8007aa8 <_svfiprintf_r+0x1e4>)
 800796e:	f7f8 fc2f 	bl	80001d0 <memchr>
 8007972:	9a04      	ldr	r2, [sp, #16]
 8007974:	b9d8      	cbnz	r0, 80079ae <_svfiprintf_r+0xea>
 8007976:	06d0      	lsls	r0, r2, #27
 8007978:	bf44      	itt	mi
 800797a:	2320      	movmi	r3, #32
 800797c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007980:	0711      	lsls	r1, r2, #28
 8007982:	bf44      	itt	mi
 8007984:	232b      	movmi	r3, #43	@ 0x2b
 8007986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800798a:	f89a 3000 	ldrb.w	r3, [sl]
 800798e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007990:	d015      	beq.n	80079be <_svfiprintf_r+0xfa>
 8007992:	9a07      	ldr	r2, [sp, #28]
 8007994:	4654      	mov	r4, sl
 8007996:	2000      	movs	r0, #0
 8007998:	f04f 0c0a 	mov.w	ip, #10
 800799c:	4621      	mov	r1, r4
 800799e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079a2:	3b30      	subs	r3, #48	@ 0x30
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	d94b      	bls.n	8007a40 <_svfiprintf_r+0x17c>
 80079a8:	b1b0      	cbz	r0, 80079d8 <_svfiprintf_r+0x114>
 80079aa:	9207      	str	r2, [sp, #28]
 80079ac:	e014      	b.n	80079d8 <_svfiprintf_r+0x114>
 80079ae:	eba0 0308 	sub.w	r3, r0, r8
 80079b2:	fa09 f303 	lsl.w	r3, r9, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	9304      	str	r3, [sp, #16]
 80079ba:	46a2      	mov	sl, r4
 80079bc:	e7d2      	b.n	8007964 <_svfiprintf_r+0xa0>
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	1d19      	adds	r1, r3, #4
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	9103      	str	r1, [sp, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bfbb      	ittet	lt
 80079ca:	425b      	neglt	r3, r3
 80079cc:	f042 0202 	orrlt.w	r2, r2, #2
 80079d0:	9307      	strge	r3, [sp, #28]
 80079d2:	9307      	strlt	r3, [sp, #28]
 80079d4:	bfb8      	it	lt
 80079d6:	9204      	strlt	r2, [sp, #16]
 80079d8:	7823      	ldrb	r3, [r4, #0]
 80079da:	2b2e      	cmp	r3, #46	@ 0x2e
 80079dc:	d10a      	bne.n	80079f4 <_svfiprintf_r+0x130>
 80079de:	7863      	ldrb	r3, [r4, #1]
 80079e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80079e2:	d132      	bne.n	8007a4a <_svfiprintf_r+0x186>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	1d1a      	adds	r2, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	9203      	str	r2, [sp, #12]
 80079ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079f0:	3402      	adds	r4, #2
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ab8 <_svfiprintf_r+0x1f4>
 80079f8:	7821      	ldrb	r1, [r4, #0]
 80079fa:	2203      	movs	r2, #3
 80079fc:	4650      	mov	r0, sl
 80079fe:	f7f8 fbe7 	bl	80001d0 <memchr>
 8007a02:	b138      	cbz	r0, 8007a14 <_svfiprintf_r+0x150>
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	eba0 000a 	sub.w	r0, r0, sl
 8007a0a:	2240      	movs	r2, #64	@ 0x40
 8007a0c:	4082      	lsls	r2, r0
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	3401      	adds	r4, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a18:	4824      	ldr	r0, [pc, #144]	@ (8007aac <_svfiprintf_r+0x1e8>)
 8007a1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a1e:	2206      	movs	r2, #6
 8007a20:	f7f8 fbd6 	bl	80001d0 <memchr>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d036      	beq.n	8007a96 <_svfiprintf_r+0x1d2>
 8007a28:	4b21      	ldr	r3, [pc, #132]	@ (8007ab0 <_svfiprintf_r+0x1ec>)
 8007a2a:	bb1b      	cbnz	r3, 8007a74 <_svfiprintf_r+0x1b0>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	3307      	adds	r3, #7
 8007a30:	f023 0307 	bic.w	r3, r3, #7
 8007a34:	3308      	adds	r3, #8
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3a:	4433      	add	r3, r6
 8007a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3e:	e76a      	b.n	8007916 <_svfiprintf_r+0x52>
 8007a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a44:	460c      	mov	r4, r1
 8007a46:	2001      	movs	r0, #1
 8007a48:	e7a8      	b.n	800799c <_svfiprintf_r+0xd8>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	3401      	adds	r4, #1
 8007a4e:	9305      	str	r3, [sp, #20]
 8007a50:	4619      	mov	r1, r3
 8007a52:	f04f 0c0a 	mov.w	ip, #10
 8007a56:	4620      	mov	r0, r4
 8007a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a5c:	3a30      	subs	r2, #48	@ 0x30
 8007a5e:	2a09      	cmp	r2, #9
 8007a60:	d903      	bls.n	8007a6a <_svfiprintf_r+0x1a6>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0c6      	beq.n	80079f4 <_svfiprintf_r+0x130>
 8007a66:	9105      	str	r1, [sp, #20]
 8007a68:	e7c4      	b.n	80079f4 <_svfiprintf_r+0x130>
 8007a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a6e:	4604      	mov	r4, r0
 8007a70:	2301      	movs	r3, #1
 8007a72:	e7f0      	b.n	8007a56 <_svfiprintf_r+0x192>
 8007a74:	ab03      	add	r3, sp, #12
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	462a      	mov	r2, r5
 8007a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab4 <_svfiprintf_r+0x1f0>)
 8007a7c:	a904      	add	r1, sp, #16
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7fc fbf4 	bl	800426c <_printf_float>
 8007a84:	1c42      	adds	r2, r0, #1
 8007a86:	4606      	mov	r6, r0
 8007a88:	d1d6      	bne.n	8007a38 <_svfiprintf_r+0x174>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	065b      	lsls	r3, r3, #25
 8007a8e:	f53f af2d 	bmi.w	80078ec <_svfiprintf_r+0x28>
 8007a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a94:	e72c      	b.n	80078f0 <_svfiprintf_r+0x2c>
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <_svfiprintf_r+0x1f0>)
 8007a9e:	a904      	add	r1, sp, #16
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7fc fe7b 	bl	800479c <_printf_i>
 8007aa6:	e7ed      	b.n	8007a84 <_svfiprintf_r+0x1c0>
 8007aa8:	0800952b 	.word	0x0800952b
 8007aac:	08009535 	.word	0x08009535
 8007ab0:	0800426d 	.word	0x0800426d
 8007ab4:	0800780d 	.word	0x0800780d
 8007ab8:	08009531 	.word	0x08009531

08007abc <__sfputc_r>:
 8007abc:	6893      	ldr	r3, [r2, #8]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	b410      	push	{r4}
 8007ac4:	6093      	str	r3, [r2, #8]
 8007ac6:	da08      	bge.n	8007ada <__sfputc_r+0x1e>
 8007ac8:	6994      	ldr	r4, [r2, #24]
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	db01      	blt.n	8007ad2 <__sfputc_r+0x16>
 8007ace:	290a      	cmp	r1, #10
 8007ad0:	d103      	bne.n	8007ada <__sfputc_r+0x1e>
 8007ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ad6:	f000 beb5 	b.w	8008844 <__swbuf_r>
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	1c58      	adds	r0, r3, #1
 8007ade:	6010      	str	r0, [r2, #0]
 8007ae0:	7019      	strb	r1, [r3, #0]
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <__sfputs_r>:
 8007aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aec:	4606      	mov	r6, r0
 8007aee:	460f      	mov	r7, r1
 8007af0:	4614      	mov	r4, r2
 8007af2:	18d5      	adds	r5, r2, r3
 8007af4:	42ac      	cmp	r4, r5
 8007af6:	d101      	bne.n	8007afc <__sfputs_r+0x12>
 8007af8:	2000      	movs	r0, #0
 8007afa:	e007      	b.n	8007b0c <__sfputs_r+0x22>
 8007afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b00:	463a      	mov	r2, r7
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff ffda 	bl	8007abc <__sfputc_r>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d1f3      	bne.n	8007af4 <__sfputs_r+0xa>
 8007b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b10 <_vfiprintf_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	460d      	mov	r5, r1
 8007b16:	b09d      	sub	sp, #116	@ 0x74
 8007b18:	4614      	mov	r4, r2
 8007b1a:	4698      	mov	r8, r3
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	b118      	cbz	r0, 8007b28 <_vfiprintf_r+0x18>
 8007b20:	6a03      	ldr	r3, [r0, #32]
 8007b22:	b90b      	cbnz	r3, 8007b28 <_vfiprintf_r+0x18>
 8007b24:	f7fd f9f2 	bl	8004f0c <__sinit>
 8007b28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b2a:	07d9      	lsls	r1, r3, #31
 8007b2c:	d405      	bmi.n	8007b3a <_vfiprintf_r+0x2a>
 8007b2e:	89ab      	ldrh	r3, [r5, #12]
 8007b30:	059a      	lsls	r2, r3, #22
 8007b32:	d402      	bmi.n	8007b3a <_vfiprintf_r+0x2a>
 8007b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b36:	f7fd fbda 	bl	80052ee <__retarget_lock_acquire_recursive>
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	071b      	lsls	r3, r3, #28
 8007b3e:	d501      	bpl.n	8007b44 <_vfiprintf_r+0x34>
 8007b40:	692b      	ldr	r3, [r5, #16]
 8007b42:	b99b      	cbnz	r3, 8007b6c <_vfiprintf_r+0x5c>
 8007b44:	4629      	mov	r1, r5
 8007b46:	4630      	mov	r0, r6
 8007b48:	f000 feba 	bl	80088c0 <__swsetup_r>
 8007b4c:	b170      	cbz	r0, 8007b6c <_vfiprintf_r+0x5c>
 8007b4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b50:	07dc      	lsls	r4, r3, #31
 8007b52:	d504      	bpl.n	8007b5e <_vfiprintf_r+0x4e>
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b58:	b01d      	add	sp, #116	@ 0x74
 8007b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	89ab      	ldrh	r3, [r5, #12]
 8007b60:	0598      	lsls	r0, r3, #22
 8007b62:	d4f7      	bmi.n	8007b54 <_vfiprintf_r+0x44>
 8007b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b66:	f7fd fbc3 	bl	80052f0 <__retarget_lock_release_recursive>
 8007b6a:	e7f3      	b.n	8007b54 <_vfiprintf_r+0x44>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b70:	2320      	movs	r3, #32
 8007b72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b7a:	2330      	movs	r3, #48	@ 0x30
 8007b7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d2c <_vfiprintf_r+0x21c>
 8007b80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b84:	f04f 0901 	mov.w	r9, #1
 8007b88:	4623      	mov	r3, r4
 8007b8a:	469a      	mov	sl, r3
 8007b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b90:	b10a      	cbz	r2, 8007b96 <_vfiprintf_r+0x86>
 8007b92:	2a25      	cmp	r2, #37	@ 0x25
 8007b94:	d1f9      	bne.n	8007b8a <_vfiprintf_r+0x7a>
 8007b96:	ebba 0b04 	subs.w	fp, sl, r4
 8007b9a:	d00b      	beq.n	8007bb4 <_vfiprintf_r+0xa4>
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f7ff ffa1 	bl	8007aea <__sfputs_r>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f000 80a7 	beq.w	8007cfc <_vfiprintf_r+0x1ec>
 8007bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bb0:	445a      	add	r2, fp
 8007bb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 809f 	beq.w	8007cfc <_vfiprintf_r+0x1ec>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc8:	f10a 0a01 	add.w	sl, sl, #1
 8007bcc:	9304      	str	r3, [sp, #16]
 8007bce:	9307      	str	r3, [sp, #28]
 8007bd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bd6:	4654      	mov	r4, sl
 8007bd8:	2205      	movs	r2, #5
 8007bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bde:	4853      	ldr	r0, [pc, #332]	@ (8007d2c <_vfiprintf_r+0x21c>)
 8007be0:	f7f8 faf6 	bl	80001d0 <memchr>
 8007be4:	9a04      	ldr	r2, [sp, #16]
 8007be6:	b9d8      	cbnz	r0, 8007c20 <_vfiprintf_r+0x110>
 8007be8:	06d1      	lsls	r1, r2, #27
 8007bea:	bf44      	itt	mi
 8007bec:	2320      	movmi	r3, #32
 8007bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bf2:	0713      	lsls	r3, r2, #28
 8007bf4:	bf44      	itt	mi
 8007bf6:	232b      	movmi	r3, #43	@ 0x2b
 8007bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c02:	d015      	beq.n	8007c30 <_vfiprintf_r+0x120>
 8007c04:	9a07      	ldr	r2, [sp, #28]
 8007c06:	4654      	mov	r4, sl
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f04f 0c0a 	mov.w	ip, #10
 8007c0e:	4621      	mov	r1, r4
 8007c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c14:	3b30      	subs	r3, #48	@ 0x30
 8007c16:	2b09      	cmp	r3, #9
 8007c18:	d94b      	bls.n	8007cb2 <_vfiprintf_r+0x1a2>
 8007c1a:	b1b0      	cbz	r0, 8007c4a <_vfiprintf_r+0x13a>
 8007c1c:	9207      	str	r2, [sp, #28]
 8007c1e:	e014      	b.n	8007c4a <_vfiprintf_r+0x13a>
 8007c20:	eba0 0308 	sub.w	r3, r0, r8
 8007c24:	fa09 f303 	lsl.w	r3, r9, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	9304      	str	r3, [sp, #16]
 8007c2c:	46a2      	mov	sl, r4
 8007c2e:	e7d2      	b.n	8007bd6 <_vfiprintf_r+0xc6>
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	1d19      	adds	r1, r3, #4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	9103      	str	r1, [sp, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bfbb      	ittet	lt
 8007c3c:	425b      	neglt	r3, r3
 8007c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007c42:	9307      	strge	r3, [sp, #28]
 8007c44:	9307      	strlt	r3, [sp, #28]
 8007c46:	bfb8      	it	lt
 8007c48:	9204      	strlt	r2, [sp, #16]
 8007c4a:	7823      	ldrb	r3, [r4, #0]
 8007c4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c4e:	d10a      	bne.n	8007c66 <_vfiprintf_r+0x156>
 8007c50:	7863      	ldrb	r3, [r4, #1]
 8007c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c54:	d132      	bne.n	8007cbc <_vfiprintf_r+0x1ac>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	1d1a      	adds	r2, r3, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	9203      	str	r2, [sp, #12]
 8007c5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c62:	3402      	adds	r4, #2
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d3c <_vfiprintf_r+0x22c>
 8007c6a:	7821      	ldrb	r1, [r4, #0]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	4650      	mov	r0, sl
 8007c70:	f7f8 faae 	bl	80001d0 <memchr>
 8007c74:	b138      	cbz	r0, 8007c86 <_vfiprintf_r+0x176>
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	eba0 000a 	sub.w	r0, r0, sl
 8007c7c:	2240      	movs	r2, #64	@ 0x40
 8007c7e:	4082      	lsls	r2, r0
 8007c80:	4313      	orrs	r3, r2
 8007c82:	3401      	adds	r4, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	4829      	ldr	r0, [pc, #164]	@ (8007d30 <_vfiprintf_r+0x220>)
 8007c8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c90:	2206      	movs	r2, #6
 8007c92:	f7f8 fa9d 	bl	80001d0 <memchr>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d03f      	beq.n	8007d1a <_vfiprintf_r+0x20a>
 8007c9a:	4b26      	ldr	r3, [pc, #152]	@ (8007d34 <_vfiprintf_r+0x224>)
 8007c9c:	bb1b      	cbnz	r3, 8007ce6 <_vfiprintf_r+0x1d6>
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	3307      	adds	r3, #7
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cac:	443b      	add	r3, r7
 8007cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb0:	e76a      	b.n	8007b88 <_vfiprintf_r+0x78>
 8007cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	2001      	movs	r0, #1
 8007cba:	e7a8      	b.n	8007c0e <_vfiprintf_r+0xfe>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	3401      	adds	r4, #1
 8007cc0:	9305      	str	r3, [sp, #20]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f04f 0c0a 	mov.w	ip, #10
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cce:	3a30      	subs	r2, #48	@ 0x30
 8007cd0:	2a09      	cmp	r2, #9
 8007cd2:	d903      	bls.n	8007cdc <_vfiprintf_r+0x1cc>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0c6      	beq.n	8007c66 <_vfiprintf_r+0x156>
 8007cd8:	9105      	str	r1, [sp, #20]
 8007cda:	e7c4      	b.n	8007c66 <_vfiprintf_r+0x156>
 8007cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e7f0      	b.n	8007cc8 <_vfiprintf_r+0x1b8>
 8007ce6:	ab03      	add	r3, sp, #12
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	462a      	mov	r2, r5
 8007cec:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <_vfiprintf_r+0x228>)
 8007cee:	a904      	add	r1, sp, #16
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7fc fabb 	bl	800426c <_printf_float>
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	1c78      	adds	r0, r7, #1
 8007cfa:	d1d6      	bne.n	8007caa <_vfiprintf_r+0x19a>
 8007cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cfe:	07d9      	lsls	r1, r3, #31
 8007d00:	d405      	bmi.n	8007d0e <_vfiprintf_r+0x1fe>
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	059a      	lsls	r2, r3, #22
 8007d06:	d402      	bmi.n	8007d0e <_vfiprintf_r+0x1fe>
 8007d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d0a:	f7fd faf1 	bl	80052f0 <__retarget_lock_release_recursive>
 8007d0e:	89ab      	ldrh	r3, [r5, #12]
 8007d10:	065b      	lsls	r3, r3, #25
 8007d12:	f53f af1f 	bmi.w	8007b54 <_vfiprintf_r+0x44>
 8007d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d18:	e71e      	b.n	8007b58 <_vfiprintf_r+0x48>
 8007d1a:	ab03      	add	r3, sp, #12
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	462a      	mov	r2, r5
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <_vfiprintf_r+0x228>)
 8007d22:	a904      	add	r1, sp, #16
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7fc fd39 	bl	800479c <_printf_i>
 8007d2a:	e7e4      	b.n	8007cf6 <_vfiprintf_r+0x1e6>
 8007d2c:	0800952b 	.word	0x0800952b
 8007d30:	08009535 	.word	0x08009535
 8007d34:	0800426d 	.word	0x0800426d
 8007d38:	08007aeb 	.word	0x08007aeb
 8007d3c:	08009531 	.word	0x08009531

08007d40 <__svfiscanf_r>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	461d      	mov	r5, r3
 8007d46:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007d48:	07df      	lsls	r7, r3, #31
 8007d4a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8007d4e:	4606      	mov	r6, r0
 8007d50:	460c      	mov	r4, r1
 8007d52:	4692      	mov	sl, r2
 8007d54:	d405      	bmi.n	8007d62 <__svfiscanf_r+0x22>
 8007d56:	898b      	ldrh	r3, [r1, #12]
 8007d58:	0598      	lsls	r0, r3, #22
 8007d5a:	d402      	bmi.n	8007d62 <__svfiscanf_r+0x22>
 8007d5c:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8007d5e:	f7fd fac6 	bl	80052ee <__retarget_lock_acquire_recursive>
 8007d62:	2300      	movs	r3, #0
 8007d64:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8007d68:	4ba8      	ldr	r3, [pc, #672]	@ (800800c <__svfiscanf_r+0x2cc>)
 8007d6a:	93a0      	str	r3, [sp, #640]	@ 0x280
 8007d6c:	f10d 0804 	add.w	r8, sp, #4
 8007d70:	4ba7      	ldr	r3, [pc, #668]	@ (8008010 <__svfiscanf_r+0x2d0>)
 8007d72:	4fa8      	ldr	r7, [pc, #672]	@ (8008014 <__svfiscanf_r+0x2d4>)
 8007d74:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007d78:	93a1      	str	r3, [sp, #644]	@ 0x284
 8007d7a:	9500      	str	r5, [sp, #0]
 8007d7c:	f89a 9000 	ldrb.w	r9, [sl]
 8007d80:	f1b9 0f00 	cmp.w	r9, #0
 8007d84:	f000 816d 	beq.w	8008062 <__svfiscanf_r+0x322>
 8007d88:	f817 3009 	ldrb.w	r3, [r7, r9]
 8007d8c:	f013 0308 	ands.w	r3, r3, #8
 8007d90:	f10a 0501 	add.w	r5, sl, #1
 8007d94:	d019      	beq.n	8007dca <__svfiscanf_r+0x8a>
 8007d96:	6863      	ldr	r3, [r4, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dd0f      	ble.n	8007dbc <__svfiscanf_r+0x7c>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	781a      	ldrb	r2, [r3, #0]
 8007da0:	5cba      	ldrb	r2, [r7, r2]
 8007da2:	0711      	lsls	r1, r2, #28
 8007da4:	d401      	bmi.n	8007daa <__svfiscanf_r+0x6a>
 8007da6:	46aa      	mov	sl, r5
 8007da8:	e7e8      	b.n	8007d7c <__svfiscanf_r+0x3c>
 8007daa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007dac:	3201      	adds	r2, #1
 8007dae:	9245      	str	r2, [sp, #276]	@ 0x114
 8007db0:	6862      	ldr	r2, [r4, #4]
 8007db2:	3301      	adds	r3, #1
 8007db4:	3a01      	subs	r2, #1
 8007db6:	6062      	str	r2, [r4, #4]
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	e7ec      	b.n	8007d96 <__svfiscanf_r+0x56>
 8007dbc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	4798      	blx	r3
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d0e9      	beq.n	8007d9c <__svfiscanf_r+0x5c>
 8007dc8:	e7ed      	b.n	8007da6 <__svfiscanf_r+0x66>
 8007dca:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8007dce:	f040 8088 	bne.w	8007ee2 <__svfiscanf_r+0x1a2>
 8007dd2:	9341      	str	r3, [sp, #260]	@ 0x104
 8007dd4:	9343      	str	r3, [sp, #268]	@ 0x10c
 8007dd6:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ddc:	bf02      	ittt	eq
 8007dde:	2310      	moveq	r3, #16
 8007de0:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007de2:	f10a 0502 	addeq.w	r5, sl, #2
 8007de6:	220a      	movs	r2, #10
 8007de8:	46aa      	mov	sl, r5
 8007dea:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007dee:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007df2:	2b09      	cmp	r3, #9
 8007df4:	d91f      	bls.n	8007e36 <__svfiscanf_r+0xf6>
 8007df6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008018 <__svfiscanf_r+0x2d8>
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	4658      	mov	r0, fp
 8007dfe:	f7f8 f9e7 	bl	80001d0 <memchr>
 8007e02:	b138      	cbz	r0, 8007e14 <__svfiscanf_r+0xd4>
 8007e04:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007e06:	eba0 000b 	sub.w	r0, r0, fp
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4083      	lsls	r3, r0
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	9341      	str	r3, [sp, #260]	@ 0x104
 8007e12:	4655      	mov	r5, sl
 8007e14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e18:	2b78      	cmp	r3, #120	@ 0x78
 8007e1a:	d807      	bhi.n	8007e2c <__svfiscanf_r+0xec>
 8007e1c:	2b57      	cmp	r3, #87	@ 0x57
 8007e1e:	d811      	bhi.n	8007e44 <__svfiscanf_r+0x104>
 8007e20:	2b25      	cmp	r3, #37	@ 0x25
 8007e22:	d05e      	beq.n	8007ee2 <__svfiscanf_r+0x1a2>
 8007e24:	d858      	bhi.n	8007ed8 <__svfiscanf_r+0x198>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80d2 	beq.w	8007fd0 <__svfiscanf_r+0x290>
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007e30:	230a      	movs	r3, #10
 8007e32:	9342      	str	r3, [sp, #264]	@ 0x108
 8007e34:	e08f      	b.n	8007f56 <__svfiscanf_r+0x216>
 8007e36:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007e38:	fb02 1103 	mla	r1, r2, r3, r1
 8007e3c:	3930      	subs	r1, #48	@ 0x30
 8007e3e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007e40:	4655      	mov	r5, sl
 8007e42:	e7d1      	b.n	8007de8 <__svfiscanf_r+0xa8>
 8007e44:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007e48:	2a20      	cmp	r2, #32
 8007e4a:	d8ef      	bhi.n	8007e2c <__svfiscanf_r+0xec>
 8007e4c:	a101      	add	r1, pc, #4	@ (adr r1, 8007e54 <__svfiscanf_r+0x114>)
 8007e4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007f35 	.word	0x08007f35
 8007e58:	08007e2d 	.word	0x08007e2d
 8007e5c:	08007e2d 	.word	0x08007e2d
 8007e60:	08007f8f 	.word	0x08007f8f
 8007e64:	08007e2d 	.word	0x08007e2d
 8007e68:	08007e2d 	.word	0x08007e2d
 8007e6c:	08007e2d 	.word	0x08007e2d
 8007e70:	08007e2d 	.word	0x08007e2d
 8007e74:	08007e2d 	.word	0x08007e2d
 8007e78:	08007e2d 	.word	0x08007e2d
 8007e7c:	08007e2d 	.word	0x08007e2d
 8007e80:	08007fa5 	.word	0x08007fa5
 8007e84:	08007f8b 	.word	0x08007f8b
 8007e88:	08007edf 	.word	0x08007edf
 8007e8c:	08007edf 	.word	0x08007edf
 8007e90:	08007edf 	.word	0x08007edf
 8007e94:	08007e2d 	.word	0x08007e2d
 8007e98:	08007f47 	.word	0x08007f47
 8007e9c:	08007e2d 	.word	0x08007e2d
 8007ea0:	08007e2d 	.word	0x08007e2d
 8007ea4:	08007e2d 	.word	0x08007e2d
 8007ea8:	08007e2d 	.word	0x08007e2d
 8007eac:	08007fb5 	.word	0x08007fb5
 8007eb0:	08007f4f 	.word	0x08007f4f
 8007eb4:	08007f2d 	.word	0x08007f2d
 8007eb8:	08007e2d 	.word	0x08007e2d
 8007ebc:	08007e2d 	.word	0x08007e2d
 8007ec0:	08007fb1 	.word	0x08007fb1
 8007ec4:	08007e2d 	.word	0x08007e2d
 8007ec8:	08007f8b 	.word	0x08007f8b
 8007ecc:	08007e2d 	.word	0x08007e2d
 8007ed0:	08007e2d 	.word	0x08007e2d
 8007ed4:	08007f35 	.word	0x08007f35
 8007ed8:	3b45      	subs	r3, #69	@ 0x45
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d8a6      	bhi.n	8007e2c <__svfiscanf_r+0xec>
 8007ede:	2305      	movs	r3, #5
 8007ee0:	e038      	b.n	8007f54 <__svfiscanf_r+0x214>
 8007ee2:	6863      	ldr	r3, [r4, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dd0d      	ble.n	8007f04 <__svfiscanf_r+0x1c4>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	781a      	ldrb	r2, [r3, #0]
 8007eec:	454a      	cmp	r2, r9
 8007eee:	f040 80b8 	bne.w	8008062 <__svfiscanf_r+0x322>
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	6862      	ldr	r2, [r4, #4]
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007efa:	3a01      	subs	r2, #1
 8007efc:	3301      	adds	r3, #1
 8007efe:	6062      	str	r2, [r4, #4]
 8007f00:	9345      	str	r3, [sp, #276]	@ 0x114
 8007f02:	e750      	b.n	8007da6 <__svfiscanf_r+0x66>
 8007f04:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007f06:	4621      	mov	r1, r4
 8007f08:	4630      	mov	r0, r6
 8007f0a:	4798      	blx	r3
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d0eb      	beq.n	8007ee8 <__svfiscanf_r+0x1a8>
 8007f10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f12:	07da      	lsls	r2, r3, #31
 8007f14:	f140 809d 	bpl.w	8008052 <__svfiscanf_r+0x312>
 8007f18:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d061      	beq.n	8007fe2 <__svfiscanf_r+0x2a2>
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	0659      	lsls	r1, r3, #25
 8007f22:	d45e      	bmi.n	8007fe2 <__svfiscanf_r+0x2a2>
 8007f24:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007f2e:	f042 0220 	orr.w	r2, r2, #32
 8007f32:	9241      	str	r2, [sp, #260]	@ 0x104
 8007f34:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f3a:	9241      	str	r2, [sp, #260]	@ 0x104
 8007f3c:	2210      	movs	r2, #16
 8007f3e:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f40:	9242      	str	r2, [sp, #264]	@ 0x108
 8007f42:	d902      	bls.n	8007f4a <__svfiscanf_r+0x20a>
 8007f44:	e005      	b.n	8007f52 <__svfiscanf_r+0x212>
 8007f46:	2300      	movs	r3, #0
 8007f48:	9342      	str	r3, [sp, #264]	@ 0x108
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e002      	b.n	8007f54 <__svfiscanf_r+0x214>
 8007f4e:	2308      	movs	r3, #8
 8007f50:	9342      	str	r3, [sp, #264]	@ 0x108
 8007f52:	2304      	movs	r3, #4
 8007f54:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007f56:	6863      	ldr	r3, [r4, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dd45      	ble.n	8007fe8 <__svfiscanf_r+0x2a8>
 8007f5c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007f5e:	0659      	lsls	r1, r3, #25
 8007f60:	d404      	bmi.n	8007f6c <__svfiscanf_r+0x22c>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	781a      	ldrb	r2, [r3, #0]
 8007f66:	5cba      	ldrb	r2, [r7, r2]
 8007f68:	0712      	lsls	r2, r2, #28
 8007f6a:	d444      	bmi.n	8007ff6 <__svfiscanf_r+0x2b6>
 8007f6c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	dc5b      	bgt.n	800802a <__svfiscanf_r+0x2ea>
 8007f72:	466b      	mov	r3, sp
 8007f74:	4622      	mov	r2, r4
 8007f76:	a941      	add	r1, sp, #260	@ 0x104
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f893 	bl	80080a4 <_scanf_chars>
 8007f7e:	2801      	cmp	r0, #1
 8007f80:	d06f      	beq.n	8008062 <__svfiscanf_r+0x322>
 8007f82:	2802      	cmp	r0, #2
 8007f84:	f47f af0f 	bne.w	8007da6 <__svfiscanf_r+0x66>
 8007f88:	e7c2      	b.n	8007f10 <__svfiscanf_r+0x1d0>
 8007f8a:	220a      	movs	r2, #10
 8007f8c:	e7d7      	b.n	8007f3e <__svfiscanf_r+0x1fe>
 8007f8e:	4629      	mov	r1, r5
 8007f90:	4640      	mov	r0, r8
 8007f92:	f000 fb65 	bl	8008660 <__sccl>
 8007f96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f9c:	9341      	str	r3, [sp, #260]	@ 0x104
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e7d7      	b.n	8007f54 <__svfiscanf_r+0x214>
 8007fa4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007faa:	9341      	str	r3, [sp, #260]	@ 0x104
 8007fac:	2300      	movs	r3, #0
 8007fae:	e7d1      	b.n	8007f54 <__svfiscanf_r+0x214>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e7cf      	b.n	8007f54 <__svfiscanf_r+0x214>
 8007fb4:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007fb6:	06c3      	lsls	r3, r0, #27
 8007fb8:	f53f aef5 	bmi.w	8007da6 <__svfiscanf_r+0x66>
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007fc0:	1d19      	adds	r1, r3, #4
 8007fc2:	9100      	str	r1, [sp, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	07c0      	lsls	r0, r0, #31
 8007fc8:	bf4c      	ite	mi
 8007fca:	801a      	strhmi	r2, [r3, #0]
 8007fcc:	601a      	strpl	r2, [r3, #0]
 8007fce:	e6ea      	b.n	8007da6 <__svfiscanf_r+0x66>
 8007fd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fd2:	07de      	lsls	r6, r3, #31
 8007fd4:	d405      	bmi.n	8007fe2 <__svfiscanf_r+0x2a2>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	059d      	lsls	r5, r3, #22
 8007fda:	d402      	bmi.n	8007fe2 <__svfiscanf_r+0x2a2>
 8007fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fde:	f7fd f987 	bl	80052f0 <__retarget_lock_release_recursive>
 8007fe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fe6:	e79d      	b.n	8007f24 <__svfiscanf_r+0x1e4>
 8007fe8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007fea:	4621      	mov	r1, r4
 8007fec:	4630      	mov	r0, r6
 8007fee:	4798      	blx	r3
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0b3      	beq.n	8007f5c <__svfiscanf_r+0x21c>
 8007ff4:	e78c      	b.n	8007f10 <__svfiscanf_r+0x1d0>
 8007ff6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007ff8:	3201      	adds	r2, #1
 8007ffa:	9245      	str	r2, [sp, #276]	@ 0x114
 8007ffc:	6862      	ldr	r2, [r4, #4]
 8007ffe:	3a01      	subs	r2, #1
 8008000:	2a00      	cmp	r2, #0
 8008002:	6062      	str	r2, [r4, #4]
 8008004:	dd0a      	ble.n	800801c <__svfiscanf_r+0x2dc>
 8008006:	3301      	adds	r3, #1
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	e7aa      	b.n	8007f62 <__svfiscanf_r+0x222>
 800800c:	08008747 	.word	0x08008747
 8008010:	08008579 	.word	0x08008579
 8008014:	08009749 	.word	0x08009749
 8008018:	08009531 	.word	0x08009531
 800801c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800801e:	4621      	mov	r1, r4
 8008020:	4630      	mov	r0, r6
 8008022:	4798      	blx	r3
 8008024:	2800      	cmp	r0, #0
 8008026:	d09c      	beq.n	8007f62 <__svfiscanf_r+0x222>
 8008028:	e772      	b.n	8007f10 <__svfiscanf_r+0x1d0>
 800802a:	2b04      	cmp	r3, #4
 800802c:	dc06      	bgt.n	800803c <__svfiscanf_r+0x2fc>
 800802e:	466b      	mov	r3, sp
 8008030:	4622      	mov	r2, r4
 8008032:	a941      	add	r1, sp, #260	@ 0x104
 8008034:	4630      	mov	r0, r6
 8008036:	f000 f88f 	bl	8008158 <_scanf_i>
 800803a:	e7a0      	b.n	8007f7e <__svfiscanf_r+0x23e>
 800803c:	4b0e      	ldr	r3, [pc, #56]	@ (8008078 <__svfiscanf_r+0x338>)
 800803e:	2b00      	cmp	r3, #0
 8008040:	f43f aeb1 	beq.w	8007da6 <__svfiscanf_r+0x66>
 8008044:	466b      	mov	r3, sp
 8008046:	4622      	mov	r2, r4
 8008048:	a941      	add	r1, sp, #260	@ 0x104
 800804a:	4630      	mov	r0, r6
 800804c:	f7fc fcc4 	bl	80049d8 <_scanf_float>
 8008050:	e795      	b.n	8007f7e <__svfiscanf_r+0x23e>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	0598      	lsls	r0, r3, #22
 8008056:	f53f af5f 	bmi.w	8007f18 <__svfiscanf_r+0x1d8>
 800805a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800805c:	f7fd f948 	bl	80052f0 <__retarget_lock_release_recursive>
 8008060:	e75a      	b.n	8007f18 <__svfiscanf_r+0x1d8>
 8008062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008064:	07da      	lsls	r2, r3, #31
 8008066:	d405      	bmi.n	8008074 <__svfiscanf_r+0x334>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	059b      	lsls	r3, r3, #22
 800806c:	d402      	bmi.n	8008074 <__svfiscanf_r+0x334>
 800806e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008070:	f7fd f93e 	bl	80052f0 <__retarget_lock_release_recursive>
 8008074:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008076:	e755      	b.n	8007f24 <__svfiscanf_r+0x1e4>
 8008078:	080049d9 	.word	0x080049d9

0800807c <_vfiscanf_r>:
 800807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008080:	460d      	mov	r5, r1
 8008082:	4616      	mov	r6, r2
 8008084:	461f      	mov	r7, r3
 8008086:	4604      	mov	r4, r0
 8008088:	b118      	cbz	r0, 8008092 <_vfiscanf_r+0x16>
 800808a:	6a03      	ldr	r3, [r0, #32]
 800808c:	b90b      	cbnz	r3, 8008092 <_vfiscanf_r+0x16>
 800808e:	f7fc ff3d 	bl	8004f0c <__sinit>
 8008092:	463b      	mov	r3, r7
 8008094:	4632      	mov	r2, r6
 8008096:	4629      	mov	r1, r5
 8008098:	4620      	mov	r0, r4
 800809a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800809e:	f7ff be4f 	b.w	8007d40 <__svfiscanf_r>
	...

080080a4 <_scanf_chars>:
 80080a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	4615      	mov	r5, r2
 80080aa:	688a      	ldr	r2, [r1, #8]
 80080ac:	4680      	mov	r8, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b932      	cbnz	r2, 80080c0 <_scanf_chars+0x1c>
 80080b2:	698a      	ldr	r2, [r1, #24]
 80080b4:	2a00      	cmp	r2, #0
 80080b6:	bf14      	ite	ne
 80080b8:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80080bc:	2201      	moveq	r2, #1
 80080be:	608a      	str	r2, [r1, #8]
 80080c0:	6822      	ldr	r2, [r4, #0]
 80080c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008154 <_scanf_chars+0xb0>
 80080c6:	06d1      	lsls	r1, r2, #27
 80080c8:	bf5f      	itttt	pl
 80080ca:	681a      	ldrpl	r2, [r3, #0]
 80080cc:	1d11      	addpl	r1, r2, #4
 80080ce:	6019      	strpl	r1, [r3, #0]
 80080d0:	6816      	ldrpl	r6, [r2, #0]
 80080d2:	2700      	movs	r7, #0
 80080d4:	69a0      	ldr	r0, [r4, #24]
 80080d6:	b188      	cbz	r0, 80080fc <_scanf_chars+0x58>
 80080d8:	2801      	cmp	r0, #1
 80080da:	d107      	bne.n	80080ec <_scanf_chars+0x48>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	6963      	ldr	r3, [r4, #20]
 80080e2:	5c9b      	ldrb	r3, [r3, r2]
 80080e4:	b953      	cbnz	r3, 80080fc <_scanf_chars+0x58>
 80080e6:	2f00      	cmp	r7, #0
 80080e8:	d031      	beq.n	800814e <_scanf_chars+0xaa>
 80080ea:	e022      	b.n	8008132 <_scanf_chars+0x8e>
 80080ec:	2802      	cmp	r0, #2
 80080ee:	d120      	bne.n	8008132 <_scanf_chars+0x8e>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80080f8:	071b      	lsls	r3, r3, #28
 80080fa:	d41a      	bmi.n	8008132 <_scanf_chars+0x8e>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	06da      	lsls	r2, r3, #27
 8008100:	bf5e      	ittt	pl
 8008102:	682b      	ldrpl	r3, [r5, #0]
 8008104:	781b      	ldrbpl	r3, [r3, #0]
 8008106:	f806 3b01 	strbpl.w	r3, [r6], #1
 800810a:	682a      	ldr	r2, [r5, #0]
 800810c:	686b      	ldr	r3, [r5, #4]
 800810e:	3201      	adds	r2, #1
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	68a2      	ldr	r2, [r4, #8]
 8008114:	3b01      	subs	r3, #1
 8008116:	3a01      	subs	r2, #1
 8008118:	606b      	str	r3, [r5, #4]
 800811a:	3701      	adds	r7, #1
 800811c:	60a2      	str	r2, [r4, #8]
 800811e:	b142      	cbz	r2, 8008132 <_scanf_chars+0x8e>
 8008120:	2b00      	cmp	r3, #0
 8008122:	dcd7      	bgt.n	80080d4 <_scanf_chars+0x30>
 8008124:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008128:	4629      	mov	r1, r5
 800812a:	4640      	mov	r0, r8
 800812c:	4798      	blx	r3
 800812e:	2800      	cmp	r0, #0
 8008130:	d0d0      	beq.n	80080d4 <_scanf_chars+0x30>
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	f013 0310 	ands.w	r3, r3, #16
 8008138:	d105      	bne.n	8008146 <_scanf_chars+0xa2>
 800813a:	68e2      	ldr	r2, [r4, #12]
 800813c:	3201      	adds	r2, #1
 800813e:	60e2      	str	r2, [r4, #12]
 8008140:	69a2      	ldr	r2, [r4, #24]
 8008142:	b102      	cbz	r2, 8008146 <_scanf_chars+0xa2>
 8008144:	7033      	strb	r3, [r6, #0]
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	443b      	add	r3, r7
 800814a:	6123      	str	r3, [r4, #16]
 800814c:	2000      	movs	r0, #0
 800814e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008152:	bf00      	nop
 8008154:	08009749 	.word	0x08009749

08008158 <_scanf_i>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	4698      	mov	r8, r3
 800815e:	4b74      	ldr	r3, [pc, #464]	@ (8008330 <_scanf_i+0x1d8>)
 8008160:	460c      	mov	r4, r1
 8008162:	4682      	mov	sl, r0
 8008164:	4616      	mov	r6, r2
 8008166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800816a:	b087      	sub	sp, #28
 800816c:	ab03      	add	r3, sp, #12
 800816e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008172:	4b70      	ldr	r3, [pc, #448]	@ (8008334 <_scanf_i+0x1dc>)
 8008174:	69a1      	ldr	r1, [r4, #24]
 8008176:	4a70      	ldr	r2, [pc, #448]	@ (8008338 <_scanf_i+0x1e0>)
 8008178:	2903      	cmp	r1, #3
 800817a:	bf08      	it	eq
 800817c:	461a      	moveq	r2, r3
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	9201      	str	r2, [sp, #4]
 8008182:	1e5a      	subs	r2, r3, #1
 8008184:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008188:	bf88      	it	hi
 800818a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800818e:	4627      	mov	r7, r4
 8008190:	bf82      	ittt	hi
 8008192:	eb03 0905 	addhi.w	r9, r3, r5
 8008196:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800819a:	60a3      	strhi	r3, [r4, #8]
 800819c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80081a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80081a4:	bf98      	it	ls
 80081a6:	f04f 0900 	movls.w	r9, #0
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	463d      	mov	r5, r7
 80081ae:	f04f 0b00 	mov.w	fp, #0
 80081b2:	6831      	ldr	r1, [r6, #0]
 80081b4:	ab03      	add	r3, sp, #12
 80081b6:	7809      	ldrb	r1, [r1, #0]
 80081b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80081bc:	2202      	movs	r2, #2
 80081be:	f7f8 f807 	bl	80001d0 <memchr>
 80081c2:	b328      	cbz	r0, 8008210 <_scanf_i+0xb8>
 80081c4:	f1bb 0f01 	cmp.w	fp, #1
 80081c8:	d159      	bne.n	800827e <_scanf_i+0x126>
 80081ca:	6862      	ldr	r2, [r4, #4]
 80081cc:	b92a      	cbnz	r2, 80081da <_scanf_i+0x82>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	2108      	movs	r1, #8
 80081d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081d6:	6061      	str	r1, [r4, #4]
 80081d8:	6022      	str	r2, [r4, #0]
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80081e0:	6022      	str	r2, [r4, #0]
 80081e2:	68a2      	ldr	r2, [r4, #8]
 80081e4:	1e51      	subs	r1, r2, #1
 80081e6:	60a1      	str	r1, [r4, #8]
 80081e8:	b192      	cbz	r2, 8008210 <_scanf_i+0xb8>
 80081ea:	6832      	ldr	r2, [r6, #0]
 80081ec:	1c51      	adds	r1, r2, #1
 80081ee:	6031      	str	r1, [r6, #0]
 80081f0:	7812      	ldrb	r2, [r2, #0]
 80081f2:	f805 2b01 	strb.w	r2, [r5], #1
 80081f6:	6872      	ldr	r2, [r6, #4]
 80081f8:	3a01      	subs	r2, #1
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	6072      	str	r2, [r6, #4]
 80081fe:	dc07      	bgt.n	8008210 <_scanf_i+0xb8>
 8008200:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008204:	4631      	mov	r1, r6
 8008206:	4650      	mov	r0, sl
 8008208:	4790      	blx	r2
 800820a:	2800      	cmp	r0, #0
 800820c:	f040 8085 	bne.w	800831a <_scanf_i+0x1c2>
 8008210:	f10b 0b01 	add.w	fp, fp, #1
 8008214:	f1bb 0f03 	cmp.w	fp, #3
 8008218:	d1cb      	bne.n	80081b2 <_scanf_i+0x5a>
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	b90b      	cbnz	r3, 8008222 <_scanf_i+0xca>
 800821e:	230a      	movs	r3, #10
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	6863      	ldr	r3, [r4, #4]
 8008224:	4945      	ldr	r1, [pc, #276]	@ (800833c <_scanf_i+0x1e4>)
 8008226:	6960      	ldr	r0, [r4, #20]
 8008228:	1ac9      	subs	r1, r1, r3
 800822a:	f000 fa19 	bl	8008660 <__sccl>
 800822e:	f04f 0b00 	mov.w	fp, #0
 8008232:	68a3      	ldr	r3, [r4, #8]
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d03d      	beq.n	80082b6 <_scanf_i+0x15e>
 800823a:	6831      	ldr	r1, [r6, #0]
 800823c:	6960      	ldr	r0, [r4, #20]
 800823e:	f891 c000 	ldrb.w	ip, [r1]
 8008242:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008246:	2800      	cmp	r0, #0
 8008248:	d035      	beq.n	80082b6 <_scanf_i+0x15e>
 800824a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800824e:	d124      	bne.n	800829a <_scanf_i+0x142>
 8008250:	0510      	lsls	r0, r2, #20
 8008252:	d522      	bpl.n	800829a <_scanf_i+0x142>
 8008254:	f10b 0b01 	add.w	fp, fp, #1
 8008258:	f1b9 0f00 	cmp.w	r9, #0
 800825c:	d003      	beq.n	8008266 <_scanf_i+0x10e>
 800825e:	3301      	adds	r3, #1
 8008260:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008264:	60a3      	str	r3, [r4, #8]
 8008266:	6873      	ldr	r3, [r6, #4]
 8008268:	3b01      	subs	r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	6073      	str	r3, [r6, #4]
 800826e:	dd1b      	ble.n	80082a8 <_scanf_i+0x150>
 8008270:	6833      	ldr	r3, [r6, #0]
 8008272:	3301      	adds	r3, #1
 8008274:	6033      	str	r3, [r6, #0]
 8008276:	68a3      	ldr	r3, [r4, #8]
 8008278:	3b01      	subs	r3, #1
 800827a:	60a3      	str	r3, [r4, #8]
 800827c:	e7d9      	b.n	8008232 <_scanf_i+0xda>
 800827e:	f1bb 0f02 	cmp.w	fp, #2
 8008282:	d1ae      	bne.n	80081e2 <_scanf_i+0x8a>
 8008284:	6822      	ldr	r2, [r4, #0]
 8008286:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800828a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800828e:	d1c4      	bne.n	800821a <_scanf_i+0xc2>
 8008290:	2110      	movs	r1, #16
 8008292:	6061      	str	r1, [r4, #4]
 8008294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008298:	e7a2      	b.n	80081e0 <_scanf_i+0x88>
 800829a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800829e:	6022      	str	r2, [r4, #0]
 80082a0:	780b      	ldrb	r3, [r1, #0]
 80082a2:	f805 3b01 	strb.w	r3, [r5], #1
 80082a6:	e7de      	b.n	8008266 <_scanf_i+0x10e>
 80082a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80082ac:	4631      	mov	r1, r6
 80082ae:	4650      	mov	r0, sl
 80082b0:	4798      	blx	r3
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d0df      	beq.n	8008276 <_scanf_i+0x11e>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	05d9      	lsls	r1, r3, #23
 80082ba:	d50d      	bpl.n	80082d8 <_scanf_i+0x180>
 80082bc:	42bd      	cmp	r5, r7
 80082be:	d909      	bls.n	80082d4 <_scanf_i+0x17c>
 80082c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80082c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082c8:	4632      	mov	r2, r6
 80082ca:	4650      	mov	r0, sl
 80082cc:	4798      	blx	r3
 80082ce:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80082d2:	464d      	mov	r5, r9
 80082d4:	42bd      	cmp	r5, r7
 80082d6:	d028      	beq.n	800832a <_scanf_i+0x1d2>
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	f012 0210 	ands.w	r2, r2, #16
 80082de:	d113      	bne.n	8008308 <_scanf_i+0x1b0>
 80082e0:	702a      	strb	r2, [r5, #0]
 80082e2:	6863      	ldr	r3, [r4, #4]
 80082e4:	9e01      	ldr	r6, [sp, #4]
 80082e6:	4639      	mov	r1, r7
 80082e8:	4650      	mov	r0, sl
 80082ea:	47b0      	blx	r6
 80082ec:	f8d8 3000 	ldr.w	r3, [r8]
 80082f0:	6821      	ldr	r1, [r4, #0]
 80082f2:	1d1a      	adds	r2, r3, #4
 80082f4:	f8c8 2000 	str.w	r2, [r8]
 80082f8:	f011 0f20 	tst.w	r1, #32
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	d00f      	beq.n	8008320 <_scanf_i+0x1c8>
 8008300:	6018      	str	r0, [r3, #0]
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60e3      	str	r3, [r4, #12]
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	1bed      	subs	r5, r5, r7
 800830c:	445d      	add	r5, fp
 800830e:	442b      	add	r3, r5
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	2000      	movs	r0, #0
 8008314:	b007      	add	sp, #28
 8008316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831a:	f04f 0b00 	mov.w	fp, #0
 800831e:	e7ca      	b.n	80082b6 <_scanf_i+0x15e>
 8008320:	07ca      	lsls	r2, r1, #31
 8008322:	bf4c      	ite	mi
 8008324:	8018      	strhmi	r0, [r3, #0]
 8008326:	6018      	strpl	r0, [r3, #0]
 8008328:	e7eb      	b.n	8008302 <_scanf_i+0x1aa>
 800832a:	2001      	movs	r0, #1
 800832c:	e7f2      	b.n	8008314 <_scanf_i+0x1bc>
 800832e:	bf00      	nop
 8008330:	080093c8 	.word	0x080093c8
 8008334:	08007809 	.word	0x08007809
 8008338:	0800928d 	.word	0x0800928d
 800833c:	0800954c 	.word	0x0800954c

08008340 <__sflush_r>:
 8008340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008348:	0716      	lsls	r6, r2, #28
 800834a:	4605      	mov	r5, r0
 800834c:	460c      	mov	r4, r1
 800834e:	d454      	bmi.n	80083fa <__sflush_r+0xba>
 8008350:	684b      	ldr	r3, [r1, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dc02      	bgt.n	800835c <__sflush_r+0x1c>
 8008356:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008358:	2b00      	cmp	r3, #0
 800835a:	dd48      	ble.n	80083ee <__sflush_r+0xae>
 800835c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800835e:	2e00      	cmp	r6, #0
 8008360:	d045      	beq.n	80083ee <__sflush_r+0xae>
 8008362:	2300      	movs	r3, #0
 8008364:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008368:	682f      	ldr	r7, [r5, #0]
 800836a:	6a21      	ldr	r1, [r4, #32]
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	d030      	beq.n	80083d2 <__sflush_r+0x92>
 8008370:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	0759      	lsls	r1, r3, #29
 8008376:	d505      	bpl.n	8008384 <__sflush_r+0x44>
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	1ad2      	subs	r2, r2, r3
 800837c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800837e:	b10b      	cbz	r3, 8008384 <__sflush_r+0x44>
 8008380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008382:	1ad2      	subs	r2, r2, r3
 8008384:	2300      	movs	r3, #0
 8008386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008388:	6a21      	ldr	r1, [r4, #32]
 800838a:	4628      	mov	r0, r5
 800838c:	47b0      	blx	r6
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	d106      	bne.n	80083a2 <__sflush_r+0x62>
 8008394:	6829      	ldr	r1, [r5, #0]
 8008396:	291d      	cmp	r1, #29
 8008398:	d82b      	bhi.n	80083f2 <__sflush_r+0xb2>
 800839a:	4a2a      	ldr	r2, [pc, #168]	@ (8008444 <__sflush_r+0x104>)
 800839c:	40ca      	lsrs	r2, r1
 800839e:	07d6      	lsls	r6, r2, #31
 80083a0:	d527      	bpl.n	80083f2 <__sflush_r+0xb2>
 80083a2:	2200      	movs	r2, #0
 80083a4:	6062      	str	r2, [r4, #4]
 80083a6:	04d9      	lsls	r1, r3, #19
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	d504      	bpl.n	80083b8 <__sflush_r+0x78>
 80083ae:	1c42      	adds	r2, r0, #1
 80083b0:	d101      	bne.n	80083b6 <__sflush_r+0x76>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	b903      	cbnz	r3, 80083b8 <__sflush_r+0x78>
 80083b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80083b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083ba:	602f      	str	r7, [r5, #0]
 80083bc:	b1b9      	cbz	r1, 80083ee <__sflush_r+0xae>
 80083be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083c2:	4299      	cmp	r1, r3
 80083c4:	d002      	beq.n	80083cc <__sflush_r+0x8c>
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7fd fdf2 	bl	8005fb0 <_free_r>
 80083cc:	2300      	movs	r3, #0
 80083ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80083d0:	e00d      	b.n	80083ee <__sflush_r+0xae>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b0      	blx	r6
 80083d8:	4602      	mov	r2, r0
 80083da:	1c50      	adds	r0, r2, #1
 80083dc:	d1c9      	bne.n	8008372 <__sflush_r+0x32>
 80083de:	682b      	ldr	r3, [r5, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0c6      	beq.n	8008372 <__sflush_r+0x32>
 80083e4:	2b1d      	cmp	r3, #29
 80083e6:	d001      	beq.n	80083ec <__sflush_r+0xac>
 80083e8:	2b16      	cmp	r3, #22
 80083ea:	d11e      	bne.n	800842a <__sflush_r+0xea>
 80083ec:	602f      	str	r7, [r5, #0]
 80083ee:	2000      	movs	r0, #0
 80083f0:	e022      	b.n	8008438 <__sflush_r+0xf8>
 80083f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f6:	b21b      	sxth	r3, r3
 80083f8:	e01b      	b.n	8008432 <__sflush_r+0xf2>
 80083fa:	690f      	ldr	r7, [r1, #16]
 80083fc:	2f00      	cmp	r7, #0
 80083fe:	d0f6      	beq.n	80083ee <__sflush_r+0xae>
 8008400:	0793      	lsls	r3, r2, #30
 8008402:	680e      	ldr	r6, [r1, #0]
 8008404:	bf08      	it	eq
 8008406:	694b      	ldreq	r3, [r1, #20]
 8008408:	600f      	str	r7, [r1, #0]
 800840a:	bf18      	it	ne
 800840c:	2300      	movne	r3, #0
 800840e:	eba6 0807 	sub.w	r8, r6, r7
 8008412:	608b      	str	r3, [r1, #8]
 8008414:	f1b8 0f00 	cmp.w	r8, #0
 8008418:	dde9      	ble.n	80083ee <__sflush_r+0xae>
 800841a:	6a21      	ldr	r1, [r4, #32]
 800841c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800841e:	4643      	mov	r3, r8
 8008420:	463a      	mov	r2, r7
 8008422:	4628      	mov	r0, r5
 8008424:	47b0      	blx	r6
 8008426:	2800      	cmp	r0, #0
 8008428:	dc08      	bgt.n	800843c <__sflush_r+0xfc>
 800842a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843c:	4407      	add	r7, r0
 800843e:	eba8 0800 	sub.w	r8, r8, r0
 8008442:	e7e7      	b.n	8008414 <__sflush_r+0xd4>
 8008444:	20400001 	.word	0x20400001

08008448 <_fflush_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	690b      	ldr	r3, [r1, #16]
 800844c:	4605      	mov	r5, r0
 800844e:	460c      	mov	r4, r1
 8008450:	b913      	cbnz	r3, 8008458 <_fflush_r+0x10>
 8008452:	2500      	movs	r5, #0
 8008454:	4628      	mov	r0, r5
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	b118      	cbz	r0, 8008462 <_fflush_r+0x1a>
 800845a:	6a03      	ldr	r3, [r0, #32]
 800845c:	b90b      	cbnz	r3, 8008462 <_fflush_r+0x1a>
 800845e:	f7fc fd55 	bl	8004f0c <__sinit>
 8008462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f3      	beq.n	8008452 <_fflush_r+0xa>
 800846a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800846c:	07d0      	lsls	r0, r2, #31
 800846e:	d404      	bmi.n	800847a <_fflush_r+0x32>
 8008470:	0599      	lsls	r1, r3, #22
 8008472:	d402      	bmi.n	800847a <_fflush_r+0x32>
 8008474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008476:	f7fc ff3a 	bl	80052ee <__retarget_lock_acquire_recursive>
 800847a:	4628      	mov	r0, r5
 800847c:	4621      	mov	r1, r4
 800847e:	f7ff ff5f 	bl	8008340 <__sflush_r>
 8008482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008484:	07da      	lsls	r2, r3, #31
 8008486:	4605      	mov	r5, r0
 8008488:	d4e4      	bmi.n	8008454 <_fflush_r+0xc>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	059b      	lsls	r3, r3, #22
 800848e:	d4e1      	bmi.n	8008454 <_fflush_r+0xc>
 8008490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008492:	f7fc ff2d 	bl	80052f0 <__retarget_lock_release_recursive>
 8008496:	e7dd      	b.n	8008454 <_fflush_r+0xc>

08008498 <__swhatbuf_r>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	2900      	cmp	r1, #0
 80084a2:	b096      	sub	sp, #88	@ 0x58
 80084a4:	4615      	mov	r5, r2
 80084a6:	461e      	mov	r6, r3
 80084a8:	da0d      	bge.n	80084c6 <__swhatbuf_r+0x2e>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084b0:	f04f 0100 	mov.w	r1, #0
 80084b4:	bf14      	ite	ne
 80084b6:	2340      	movne	r3, #64	@ 0x40
 80084b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084bc:	2000      	movs	r0, #0
 80084be:	6031      	str	r1, [r6, #0]
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	b016      	add	sp, #88	@ 0x58
 80084c4:	bd70      	pop	{r4, r5, r6, pc}
 80084c6:	466a      	mov	r2, sp
 80084c8:	f000 fa7c 	bl	80089c4 <_fstat_r>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	dbec      	blt.n	80084aa <__swhatbuf_r+0x12>
 80084d0:	9901      	ldr	r1, [sp, #4]
 80084d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084da:	4259      	negs	r1, r3
 80084dc:	4159      	adcs	r1, r3
 80084de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084e2:	e7eb      	b.n	80084bc <__swhatbuf_r+0x24>

080084e4 <__smakebuf_r>:
 80084e4:	898b      	ldrh	r3, [r1, #12]
 80084e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e8:	079d      	lsls	r5, r3, #30
 80084ea:	4606      	mov	r6, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	d507      	bpl.n	8008500 <__smakebuf_r+0x1c>
 80084f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	2301      	movs	r3, #1
 80084fa:	6163      	str	r3, [r4, #20]
 80084fc:	b003      	add	sp, #12
 80084fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008500:	ab01      	add	r3, sp, #4
 8008502:	466a      	mov	r2, sp
 8008504:	f7ff ffc8 	bl	8008498 <__swhatbuf_r>
 8008508:	9f00      	ldr	r7, [sp, #0]
 800850a:	4605      	mov	r5, r0
 800850c:	4639      	mov	r1, r7
 800850e:	4630      	mov	r0, r6
 8008510:	f7fd fdc2 	bl	8006098 <_malloc_r>
 8008514:	b948      	cbnz	r0, 800852a <__smakebuf_r+0x46>
 8008516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851a:	059a      	lsls	r2, r3, #22
 800851c:	d4ee      	bmi.n	80084fc <__smakebuf_r+0x18>
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	f043 0302 	orr.w	r3, r3, #2
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	e7e2      	b.n	80084f0 <__smakebuf_r+0xc>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	6020      	str	r0, [r4, #0]
 800852e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800853a:	b15b      	cbz	r3, 8008554 <__smakebuf_r+0x70>
 800853c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008540:	4630      	mov	r0, r6
 8008542:	f000 fa51 	bl	80089e8 <_isatty_r>
 8008546:	b128      	cbz	r0, 8008554 <__smakebuf_r+0x70>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	431d      	orrs	r5, r3
 8008558:	81a5      	strh	r5, [r4, #12]
 800855a:	e7cf      	b.n	80084fc <__smakebuf_r+0x18>

0800855c <lflush>:
 800855c:	898b      	ldrh	r3, [r1, #12]
 800855e:	f003 0309 	and.w	r3, r3, #9
 8008562:	2b09      	cmp	r3, #9
 8008564:	d103      	bne.n	800856e <lflush+0x12>
 8008566:	4b03      	ldr	r3, [pc, #12]	@ (8008574 <lflush+0x18>)
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	f7ff bf6d 	b.w	8008448 <_fflush_r>
 800856e:	2000      	movs	r0, #0
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000018 	.word	0x20000018

08008578 <__srefill_r>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	460c      	mov	r4, r1
 800857c:	4605      	mov	r5, r0
 800857e:	b118      	cbz	r0, 8008588 <__srefill_r+0x10>
 8008580:	6a03      	ldr	r3, [r0, #32]
 8008582:	b90b      	cbnz	r3, 8008588 <__srefill_r+0x10>
 8008584:	f7fc fcc2 	bl	8004f0c <__sinit>
 8008588:	2300      	movs	r3, #0
 800858a:	6063      	str	r3, [r4, #4]
 800858c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008590:	069e      	lsls	r6, r3, #26
 8008592:	d408      	bmi.n	80085a6 <__srefill_r+0x2e>
 8008594:	0758      	lsls	r0, r3, #29
 8008596:	d445      	bmi.n	8008624 <__srefill_r+0xac>
 8008598:	06d9      	lsls	r1, r3, #27
 800859a:	d407      	bmi.n	80085ac <__srefill_r+0x34>
 800859c:	2209      	movs	r2, #9
 800859e:	602a      	str	r2, [r5, #0]
 80085a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	071a      	lsls	r2, r3, #28
 80085ae:	d50b      	bpl.n	80085c8 <__srefill_r+0x50>
 80085b0:	4621      	mov	r1, r4
 80085b2:	4628      	mov	r0, r5
 80085b4:	f7ff ff48 	bl	8008448 <_fflush_r>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d1f4      	bne.n	80085a6 <__srefill_r+0x2e>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	60a0      	str	r0, [r4, #8]
 80085c0:	f023 0308 	bic.w	r3, r3, #8
 80085c4:	81a3      	strh	r3, [r4, #12]
 80085c6:	61a0      	str	r0, [r4, #24]
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f043 0304 	orr.w	r3, r3, #4
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	b91b      	cbnz	r3, 80085dc <__srefill_r+0x64>
 80085d4:	4621      	mov	r1, r4
 80085d6:	4628      	mov	r0, r5
 80085d8:	f7ff ff84 	bl	80084e4 <__smakebuf_r>
 80085dc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80085e0:	07b3      	lsls	r3, r6, #30
 80085e2:	d00f      	beq.n	8008604 <__srefill_r+0x8c>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008654 <__srefill_r+0xdc>)
 80085e8:	491b      	ldr	r1, [pc, #108]	@ (8008658 <__srefill_r+0xe0>)
 80085ea:	481c      	ldr	r0, [pc, #112]	@ (800865c <__srefill_r+0xe4>)
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	f7fc fca5 	bl	8004f3c <_fwalk_sglue>
 80085f2:	81a6      	strh	r6, [r4, #12]
 80085f4:	f006 0609 	and.w	r6, r6, #9
 80085f8:	2e09      	cmp	r6, #9
 80085fa:	d103      	bne.n	8008604 <__srefill_r+0x8c>
 80085fc:	4621      	mov	r1, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	f7ff fe9e 	bl	8008340 <__sflush_r>
 8008604:	6922      	ldr	r2, [r4, #16]
 8008606:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8008608:	6963      	ldr	r3, [r4, #20]
 800860a:	6a21      	ldr	r1, [r4, #32]
 800860c:	6022      	str	r2, [r4, #0]
 800860e:	4628      	mov	r0, r5
 8008610:	47b0      	blx	r6
 8008612:	2800      	cmp	r0, #0
 8008614:	6060      	str	r0, [r4, #4]
 8008616:	dc17      	bgt.n	8008648 <__srefill_r+0xd0>
 8008618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861c:	d116      	bne.n	800864c <__srefill_r+0xd4>
 800861e:	f043 0320 	orr.w	r3, r3, #32
 8008622:	e7bf      	b.n	80085a4 <__srefill_r+0x2c>
 8008624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008626:	2900      	cmp	r1, #0
 8008628:	d0d2      	beq.n	80085d0 <__srefill_r+0x58>
 800862a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800862e:	4299      	cmp	r1, r3
 8008630:	d002      	beq.n	8008638 <__srefill_r+0xc0>
 8008632:	4628      	mov	r0, r5
 8008634:	f7fd fcbc 	bl	8005fb0 <_free_r>
 8008638:	2300      	movs	r3, #0
 800863a:	6363      	str	r3, [r4, #52]	@ 0x34
 800863c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800863e:	6063      	str	r3, [r4, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d0c5      	beq.n	80085d0 <__srefill_r+0x58>
 8008644:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	2000      	movs	r0, #0
 800864a:	e7ae      	b.n	80085aa <__srefill_r+0x32>
 800864c:	2200      	movs	r2, #0
 800864e:	6062      	str	r2, [r4, #4]
 8008650:	e7a6      	b.n	80085a0 <__srefill_r+0x28>
 8008652:	bf00      	nop
 8008654:	2000000c 	.word	0x2000000c
 8008658:	0800855d 	.word	0x0800855d
 800865c:	2000001c 	.word	0x2000001c

08008660 <__sccl>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	780b      	ldrb	r3, [r1, #0]
 8008664:	4604      	mov	r4, r0
 8008666:	2b5e      	cmp	r3, #94	@ 0x5e
 8008668:	bf0b      	itete	eq
 800866a:	784b      	ldrbeq	r3, [r1, #1]
 800866c:	1c4a      	addne	r2, r1, #1
 800866e:	1c8a      	addeq	r2, r1, #2
 8008670:	2100      	movne	r1, #0
 8008672:	bf08      	it	eq
 8008674:	2101      	moveq	r1, #1
 8008676:	3801      	subs	r0, #1
 8008678:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800867c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008680:	42a8      	cmp	r0, r5
 8008682:	d1fb      	bne.n	800867c <__sccl+0x1c>
 8008684:	b90b      	cbnz	r3, 800868a <__sccl+0x2a>
 8008686:	1e50      	subs	r0, r2, #1
 8008688:	bd70      	pop	{r4, r5, r6, pc}
 800868a:	f081 0101 	eor.w	r1, r1, #1
 800868e:	54e1      	strb	r1, [r4, r3]
 8008690:	4610      	mov	r0, r2
 8008692:	4602      	mov	r2, r0
 8008694:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008698:	2d2d      	cmp	r5, #45	@ 0x2d
 800869a:	d005      	beq.n	80086a8 <__sccl+0x48>
 800869c:	2d5d      	cmp	r5, #93	@ 0x5d
 800869e:	d016      	beq.n	80086ce <__sccl+0x6e>
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	d0f1      	beq.n	8008688 <__sccl+0x28>
 80086a4:	462b      	mov	r3, r5
 80086a6:	e7f2      	b.n	800868e <__sccl+0x2e>
 80086a8:	7846      	ldrb	r6, [r0, #1]
 80086aa:	2e5d      	cmp	r6, #93	@ 0x5d
 80086ac:	d0fa      	beq.n	80086a4 <__sccl+0x44>
 80086ae:	42b3      	cmp	r3, r6
 80086b0:	dcf8      	bgt.n	80086a4 <__sccl+0x44>
 80086b2:	3002      	adds	r0, #2
 80086b4:	461a      	mov	r2, r3
 80086b6:	3201      	adds	r2, #1
 80086b8:	4296      	cmp	r6, r2
 80086ba:	54a1      	strb	r1, [r4, r2]
 80086bc:	dcfb      	bgt.n	80086b6 <__sccl+0x56>
 80086be:	1af2      	subs	r2, r6, r3
 80086c0:	3a01      	subs	r2, #1
 80086c2:	1c5d      	adds	r5, r3, #1
 80086c4:	42b3      	cmp	r3, r6
 80086c6:	bfa8      	it	ge
 80086c8:	2200      	movge	r2, #0
 80086ca:	18ab      	adds	r3, r5, r2
 80086cc:	e7e1      	b.n	8008692 <__sccl+0x32>
 80086ce:	4610      	mov	r0, r2
 80086d0:	e7da      	b.n	8008688 <__sccl+0x28>

080086d2 <__submore>:
 80086d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d6:	460c      	mov	r4, r1
 80086d8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80086da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086de:	4299      	cmp	r1, r3
 80086e0:	d11d      	bne.n	800871e <__submore+0x4c>
 80086e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80086e6:	f7fd fcd7 	bl	8006098 <_malloc_r>
 80086ea:	b918      	cbnz	r0, 80086f4 <__submore+0x22>
 80086ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80086fa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80086fe:	6360      	str	r0, [r4, #52]	@ 0x34
 8008700:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008704:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008708:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800870c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008710:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008714:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008718:	6020      	str	r0, [r4, #0]
 800871a:	2000      	movs	r0, #0
 800871c:	e7e8      	b.n	80086f0 <__submore+0x1e>
 800871e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008720:	0077      	lsls	r7, r6, #1
 8008722:	463a      	mov	r2, r7
 8008724:	f000 fd15 	bl	8009152 <_realloc_r>
 8008728:	4605      	mov	r5, r0
 800872a:	2800      	cmp	r0, #0
 800872c:	d0de      	beq.n	80086ec <__submore+0x1a>
 800872e:	eb00 0806 	add.w	r8, r0, r6
 8008732:	4601      	mov	r1, r0
 8008734:	4632      	mov	r2, r6
 8008736:	4640      	mov	r0, r8
 8008738:	f000 f976 	bl	8008a28 <memcpy>
 800873c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008740:	f8c4 8000 	str.w	r8, [r4]
 8008744:	e7e9      	b.n	800871a <__submore+0x48>

08008746 <_ungetc_r>:
 8008746:	b570      	push	{r4, r5, r6, lr}
 8008748:	460d      	mov	r5, r1
 800874a:	1c69      	adds	r1, r5, #1
 800874c:	4606      	mov	r6, r0
 800874e:	4614      	mov	r4, r2
 8008750:	d01e      	beq.n	8008790 <_ungetc_r+0x4a>
 8008752:	b118      	cbz	r0, 800875c <_ungetc_r+0x16>
 8008754:	6a03      	ldr	r3, [r0, #32]
 8008756:	b90b      	cbnz	r3, 800875c <_ungetc_r+0x16>
 8008758:	f7fc fbd8 	bl	8004f0c <__sinit>
 800875c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800875e:	07da      	lsls	r2, r3, #31
 8008760:	d405      	bmi.n	800876e <_ungetc_r+0x28>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	059b      	lsls	r3, r3, #22
 8008766:	d402      	bmi.n	800876e <_ungetc_r+0x28>
 8008768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800876a:	f7fc fdc0 	bl	80052ee <__retarget_lock_acquire_recursive>
 800876e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008772:	f023 0220 	bic.w	r2, r3, #32
 8008776:	0758      	lsls	r0, r3, #29
 8008778:	81a2      	strh	r2, [r4, #12]
 800877a:	d422      	bmi.n	80087c2 <_ungetc_r+0x7c>
 800877c:	06d9      	lsls	r1, r3, #27
 800877e:	d40a      	bmi.n	8008796 <_ungetc_r+0x50>
 8008780:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008782:	07d2      	lsls	r2, r2, #31
 8008784:	d404      	bmi.n	8008790 <_ungetc_r+0x4a>
 8008786:	0599      	lsls	r1, r3, #22
 8008788:	d402      	bmi.n	8008790 <_ungetc_r+0x4a>
 800878a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878c:	f7fc fdb0 	bl	80052f0 <__retarget_lock_release_recursive>
 8008790:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008794:	e046      	b.n	8008824 <_ungetc_r+0xde>
 8008796:	071b      	lsls	r3, r3, #28
 8008798:	d50f      	bpl.n	80087ba <_ungetc_r+0x74>
 800879a:	4621      	mov	r1, r4
 800879c:	4630      	mov	r0, r6
 800879e:	f7ff fe53 	bl	8008448 <_fflush_r>
 80087a2:	b120      	cbz	r0, 80087ae <_ungetc_r+0x68>
 80087a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087a6:	07d8      	lsls	r0, r3, #31
 80087a8:	d4f2      	bmi.n	8008790 <_ungetc_r+0x4a>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	e7eb      	b.n	8008786 <_ungetc_r+0x40>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	60a0      	str	r0, [r4, #8]
 80087b2:	f023 0308 	bic.w	r3, r3, #8
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	61a0      	str	r0, [r4, #24]
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f043 0304 	orr.w	r3, r3, #4
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087c4:	6862      	ldr	r2, [r4, #4]
 80087c6:	b2ed      	uxtb	r5, r5
 80087c8:	b1d3      	cbz	r3, 8008800 <_ungetc_r+0xba>
 80087ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087cc:	4293      	cmp	r3, r2
 80087ce:	dc05      	bgt.n	80087dc <_ungetc_r+0x96>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7ff ff7d 	bl	80086d2 <__submore>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1e3      	bne.n	80087a4 <_ungetc_r+0x5e>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	1e5a      	subs	r2, r3, #1
 80087e0:	6022      	str	r2, [r4, #0]
 80087e2:	f803 5c01 	strb.w	r5, [r3, #-1]
 80087e6:	6863      	ldr	r3, [r4, #4]
 80087e8:	3301      	adds	r3, #1
 80087ea:	6063      	str	r3, [r4, #4]
 80087ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087ee:	07da      	lsls	r2, r3, #31
 80087f0:	d418      	bmi.n	8008824 <_ungetc_r+0xde>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	059b      	lsls	r3, r3, #22
 80087f6:	d415      	bmi.n	8008824 <_ungetc_r+0xde>
 80087f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087fa:	f7fc fd79 	bl	80052f0 <__retarget_lock_release_recursive>
 80087fe:	e011      	b.n	8008824 <_ungetc_r+0xde>
 8008800:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8008802:	6920      	ldr	r0, [r4, #16]
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	f001 0101 	and.w	r1, r1, #1
 800880a:	b168      	cbz	r0, 8008828 <_ungetc_r+0xe2>
 800880c:	4298      	cmp	r0, r3
 800880e:	d20b      	bcs.n	8008828 <_ungetc_r+0xe2>
 8008810:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8008814:	42a8      	cmp	r0, r5
 8008816:	d107      	bne.n	8008828 <_ungetc_r+0xe2>
 8008818:	3b01      	subs	r3, #1
 800881a:	3201      	adds	r2, #1
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	6062      	str	r2, [r4, #4]
 8008820:	2900      	cmp	r1, #0
 8008822:	d0e6      	beq.n	80087f2 <_ungetc_r+0xac>
 8008824:	4628      	mov	r0, r5
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800882c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008830:	6363      	str	r3, [r4, #52]	@ 0x34
 8008832:	2303      	movs	r3, #3
 8008834:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008836:	4623      	mov	r3, r4
 8008838:	f803 5f46 	strb.w	r5, [r3, #70]!
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	2301      	movs	r3, #1
 8008840:	6063      	str	r3, [r4, #4]
 8008842:	e7ed      	b.n	8008820 <_ungetc_r+0xda>

08008844 <__swbuf_r>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	460e      	mov	r6, r1
 8008848:	4614      	mov	r4, r2
 800884a:	4605      	mov	r5, r0
 800884c:	b118      	cbz	r0, 8008856 <__swbuf_r+0x12>
 800884e:	6a03      	ldr	r3, [r0, #32]
 8008850:	b90b      	cbnz	r3, 8008856 <__swbuf_r+0x12>
 8008852:	f7fc fb5b 	bl	8004f0c <__sinit>
 8008856:	69a3      	ldr	r3, [r4, #24]
 8008858:	60a3      	str	r3, [r4, #8]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	071a      	lsls	r2, r3, #28
 800885e:	d501      	bpl.n	8008864 <__swbuf_r+0x20>
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	b943      	cbnz	r3, 8008876 <__swbuf_r+0x32>
 8008864:	4621      	mov	r1, r4
 8008866:	4628      	mov	r0, r5
 8008868:	f000 f82a 	bl	80088c0 <__swsetup_r>
 800886c:	b118      	cbz	r0, 8008876 <__swbuf_r+0x32>
 800886e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008872:	4638      	mov	r0, r7
 8008874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	1a98      	subs	r0, r3, r2
 800887c:	6963      	ldr	r3, [r4, #20]
 800887e:	b2f6      	uxtb	r6, r6
 8008880:	4283      	cmp	r3, r0
 8008882:	4637      	mov	r7, r6
 8008884:	dc05      	bgt.n	8008892 <__swbuf_r+0x4e>
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	f7ff fddd 	bl	8008448 <_fflush_r>
 800888e:	2800      	cmp	r0, #0
 8008890:	d1ed      	bne.n	800886e <__swbuf_r+0x2a>
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	3b01      	subs	r3, #1
 8008896:	60a3      	str	r3, [r4, #8]
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	6022      	str	r2, [r4, #0]
 800889e:	701e      	strb	r6, [r3, #0]
 80088a0:	6962      	ldr	r2, [r4, #20]
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d004      	beq.n	80088b2 <__swbuf_r+0x6e>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	07db      	lsls	r3, r3, #31
 80088ac:	d5e1      	bpl.n	8008872 <__swbuf_r+0x2e>
 80088ae:	2e0a      	cmp	r6, #10
 80088b0:	d1df      	bne.n	8008872 <__swbuf_r+0x2e>
 80088b2:	4621      	mov	r1, r4
 80088b4:	4628      	mov	r0, r5
 80088b6:	f7ff fdc7 	bl	8008448 <_fflush_r>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d0d9      	beq.n	8008872 <__swbuf_r+0x2e>
 80088be:	e7d6      	b.n	800886e <__swbuf_r+0x2a>

080088c0 <__swsetup_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4b29      	ldr	r3, [pc, #164]	@ (8008968 <__swsetup_r+0xa8>)
 80088c4:	4605      	mov	r5, r0
 80088c6:	6818      	ldr	r0, [r3, #0]
 80088c8:	460c      	mov	r4, r1
 80088ca:	b118      	cbz	r0, 80088d4 <__swsetup_r+0x14>
 80088cc:	6a03      	ldr	r3, [r0, #32]
 80088ce:	b90b      	cbnz	r3, 80088d4 <__swsetup_r+0x14>
 80088d0:	f7fc fb1c 	bl	8004f0c <__sinit>
 80088d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d8:	0719      	lsls	r1, r3, #28
 80088da:	d422      	bmi.n	8008922 <__swsetup_r+0x62>
 80088dc:	06da      	lsls	r2, r3, #27
 80088de:	d407      	bmi.n	80088f0 <__swsetup_r+0x30>
 80088e0:	2209      	movs	r2, #9
 80088e2:	602a      	str	r2, [r5, #0]
 80088e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088ee:	e033      	b.n	8008958 <__swsetup_r+0x98>
 80088f0:	0758      	lsls	r0, r3, #29
 80088f2:	d512      	bpl.n	800891a <__swsetup_r+0x5a>
 80088f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088f6:	b141      	cbz	r1, 800890a <__swsetup_r+0x4a>
 80088f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088fc:	4299      	cmp	r1, r3
 80088fe:	d002      	beq.n	8008906 <__swsetup_r+0x46>
 8008900:	4628      	mov	r0, r5
 8008902:	f7fd fb55 	bl	8005fb0 <_free_r>
 8008906:	2300      	movs	r3, #0
 8008908:	6363      	str	r3, [r4, #52]	@ 0x34
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	2300      	movs	r3, #0
 8008914:	6063      	str	r3, [r4, #4]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f043 0308 	orr.w	r3, r3, #8
 8008920:	81a3      	strh	r3, [r4, #12]
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	b94b      	cbnz	r3, 800893a <__swsetup_r+0x7a>
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800892c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008930:	d003      	beq.n	800893a <__swsetup_r+0x7a>
 8008932:	4621      	mov	r1, r4
 8008934:	4628      	mov	r0, r5
 8008936:	f7ff fdd5 	bl	80084e4 <__smakebuf_r>
 800893a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893e:	f013 0201 	ands.w	r2, r3, #1
 8008942:	d00a      	beq.n	800895a <__swsetup_r+0x9a>
 8008944:	2200      	movs	r2, #0
 8008946:	60a2      	str	r2, [r4, #8]
 8008948:	6962      	ldr	r2, [r4, #20]
 800894a:	4252      	negs	r2, r2
 800894c:	61a2      	str	r2, [r4, #24]
 800894e:	6922      	ldr	r2, [r4, #16]
 8008950:	b942      	cbnz	r2, 8008964 <__swsetup_r+0xa4>
 8008952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008956:	d1c5      	bne.n	80088e4 <__swsetup_r+0x24>
 8008958:	bd38      	pop	{r3, r4, r5, pc}
 800895a:	0799      	lsls	r1, r3, #30
 800895c:	bf58      	it	pl
 800895e:	6962      	ldrpl	r2, [r4, #20]
 8008960:	60a2      	str	r2, [r4, #8]
 8008962:	e7f4      	b.n	800894e <__swsetup_r+0x8e>
 8008964:	2000      	movs	r0, #0
 8008966:	e7f7      	b.n	8008958 <__swsetup_r+0x98>
 8008968:	20000018 	.word	0x20000018

0800896c <memmove>:
 800896c:	4288      	cmp	r0, r1
 800896e:	b510      	push	{r4, lr}
 8008970:	eb01 0402 	add.w	r4, r1, r2
 8008974:	d902      	bls.n	800897c <memmove+0x10>
 8008976:	4284      	cmp	r4, r0
 8008978:	4623      	mov	r3, r4
 800897a:	d807      	bhi.n	800898c <memmove+0x20>
 800897c:	1e43      	subs	r3, r0, #1
 800897e:	42a1      	cmp	r1, r4
 8008980:	d008      	beq.n	8008994 <memmove+0x28>
 8008982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800898a:	e7f8      	b.n	800897e <memmove+0x12>
 800898c:	4402      	add	r2, r0
 800898e:	4601      	mov	r1, r0
 8008990:	428a      	cmp	r2, r1
 8008992:	d100      	bne.n	8008996 <memmove+0x2a>
 8008994:	bd10      	pop	{r4, pc}
 8008996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800899a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800899e:	e7f7      	b.n	8008990 <memmove+0x24>

080089a0 <strncmp>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	b16a      	cbz	r2, 80089c0 <strncmp+0x20>
 80089a4:	3901      	subs	r1, #1
 80089a6:	1884      	adds	r4, r0, r2
 80089a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d103      	bne.n	80089bc <strncmp+0x1c>
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d001      	beq.n	80089bc <strncmp+0x1c>
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d1f5      	bne.n	80089a8 <strncmp+0x8>
 80089bc:	1ad0      	subs	r0, r2, r3
 80089be:	bd10      	pop	{r4, pc}
 80089c0:	4610      	mov	r0, r2
 80089c2:	e7fc      	b.n	80089be <strncmp+0x1e>

080089c4 <_fstat_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	@ (80089e4 <_fstat_r+0x20>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	4611      	mov	r1, r2
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	f7f8 fcb7 	bl	8001344 <_fstat>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	d102      	bne.n	80089e0 <_fstat_r+0x1c>
 80089da:	682b      	ldr	r3, [r5, #0]
 80089dc:	b103      	cbz	r3, 80089e0 <_fstat_r+0x1c>
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	bd38      	pop	{r3, r4, r5, pc}
 80089e2:	bf00      	nop
 80089e4:	20000408 	.word	0x20000408

080089e8 <_isatty_r>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	4d06      	ldr	r5, [pc, #24]	@ (8008a04 <_isatty_r+0x1c>)
 80089ec:	2300      	movs	r3, #0
 80089ee:	4604      	mov	r4, r0
 80089f0:	4608      	mov	r0, r1
 80089f2:	602b      	str	r3, [r5, #0]
 80089f4:	f7f8 fcb6 	bl	8001364 <_isatty>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_isatty_r+0x1a>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_isatty_r+0x1a>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	20000408 	.word	0x20000408

08008a08 <_sbrk_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d06      	ldr	r5, [pc, #24]	@ (8008a24 <_sbrk_r+0x1c>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f8 fcbe 	bl	8001394 <_sbrk>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_sbrk_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_sbrk_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20000408 	.word	0x20000408

08008a28 <memcpy>:
 8008a28:	440a      	add	r2, r1
 8008a2a:	4291      	cmp	r1, r2
 8008a2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008a30:	d100      	bne.n	8008a34 <memcpy+0xc>
 8008a32:	4770      	bx	lr
 8008a34:	b510      	push	{r4, lr}
 8008a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3e:	4291      	cmp	r1, r2
 8008a40:	d1f9      	bne.n	8008a36 <memcpy+0xe>
 8008a42:	bd10      	pop	{r4, pc}
 8008a44:	0000      	movs	r0, r0
	...

08008a48 <nan>:
 8008a48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a50 <nan+0x8>
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	00000000 	.word	0x00000000
 8008a54:	7ff80000 	.word	0x7ff80000

08008a58 <__assert_func>:
 8008a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a5a:	4614      	mov	r4, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4b09      	ldr	r3, [pc, #36]	@ (8008a84 <__assert_func+0x2c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4605      	mov	r5, r0
 8008a64:	68d8      	ldr	r0, [r3, #12]
 8008a66:	b14c      	cbz	r4, 8008a7c <__assert_func+0x24>
 8008a68:	4b07      	ldr	r3, [pc, #28]	@ (8008a88 <__assert_func+0x30>)
 8008a6a:	9100      	str	r1, [sp, #0]
 8008a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a70:	4906      	ldr	r1, [pc, #24]	@ (8008a8c <__assert_func+0x34>)
 8008a72:	462b      	mov	r3, r5
 8008a74:	f000 fc1a 	bl	80092ac <fiprintf>
 8008a78:	f000 fc2a 	bl	80092d0 <abort>
 8008a7c:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <__assert_func+0x38>)
 8008a7e:	461c      	mov	r4, r3
 8008a80:	e7f3      	b.n	8008a6a <__assert_func+0x12>
 8008a82:	bf00      	nop
 8008a84:	20000018 	.word	0x20000018
 8008a88:	0800955f 	.word	0x0800955f
 8008a8c:	0800956c 	.word	0x0800956c
 8008a90:	0800959a 	.word	0x0800959a

08008a94 <_calloc_r>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	fba1 5402 	umull	r5, r4, r1, r2
 8008a9a:	b934      	cbnz	r4, 8008aaa <_calloc_r+0x16>
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f7fd fafb 	bl	8006098 <_malloc_r>
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	b928      	cbnz	r0, 8008ab2 <_calloc_r+0x1e>
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	bd70      	pop	{r4, r5, r6, pc}
 8008aaa:	220c      	movs	r2, #12
 8008aac:	6002      	str	r2, [r0, #0]
 8008aae:	2600      	movs	r6, #0
 8008ab0:	e7f9      	b.n	8008aa6 <_calloc_r+0x12>
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f7fc fb9c 	bl	80051f2 <memset>
 8008aba:	e7f4      	b.n	8008aa6 <_calloc_r+0x12>

08008abc <rshift>:
 8008abc:	6903      	ldr	r3, [r0, #16]
 8008abe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ac6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008aca:	f100 0414 	add.w	r4, r0, #20
 8008ace:	dd45      	ble.n	8008b5c <rshift+0xa0>
 8008ad0:	f011 011f 	ands.w	r1, r1, #31
 8008ad4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ad8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008adc:	d10c      	bne.n	8008af8 <rshift+0x3c>
 8008ade:	f100 0710 	add.w	r7, r0, #16
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	42b1      	cmp	r1, r6
 8008ae6:	d334      	bcc.n	8008b52 <rshift+0x96>
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	1eea      	subs	r2, r5, #3
 8008aee:	4296      	cmp	r6, r2
 8008af0:	bf38      	it	cc
 8008af2:	2300      	movcc	r3, #0
 8008af4:	4423      	add	r3, r4
 8008af6:	e015      	b.n	8008b24 <rshift+0x68>
 8008af8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008afc:	f1c1 0820 	rsb	r8, r1, #32
 8008b00:	40cf      	lsrs	r7, r1
 8008b02:	f105 0e04 	add.w	lr, r5, #4
 8008b06:	46a1      	mov	r9, r4
 8008b08:	4576      	cmp	r6, lr
 8008b0a:	46f4      	mov	ip, lr
 8008b0c:	d815      	bhi.n	8008b3a <rshift+0x7e>
 8008b0e:	1a9a      	subs	r2, r3, r2
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	3a04      	subs	r2, #4
 8008b14:	3501      	adds	r5, #1
 8008b16:	42ae      	cmp	r6, r5
 8008b18:	bf38      	it	cc
 8008b1a:	2200      	movcc	r2, #0
 8008b1c:	18a3      	adds	r3, r4, r2
 8008b1e:	50a7      	str	r7, [r4, r2]
 8008b20:	b107      	cbz	r7, 8008b24 <rshift+0x68>
 8008b22:	3304      	adds	r3, #4
 8008b24:	1b1a      	subs	r2, r3, r4
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b2c:	bf08      	it	eq
 8008b2e:	2300      	moveq	r3, #0
 8008b30:	6102      	str	r2, [r0, #16]
 8008b32:	bf08      	it	eq
 8008b34:	6143      	streq	r3, [r0, #20]
 8008b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b3a:	f8dc c000 	ldr.w	ip, [ip]
 8008b3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b42:	ea4c 0707 	orr.w	r7, ip, r7
 8008b46:	f849 7b04 	str.w	r7, [r9], #4
 8008b4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b4e:	40cf      	lsrs	r7, r1
 8008b50:	e7da      	b.n	8008b08 <rshift+0x4c>
 8008b52:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b56:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b5a:	e7c3      	b.n	8008ae4 <rshift+0x28>
 8008b5c:	4623      	mov	r3, r4
 8008b5e:	e7e1      	b.n	8008b24 <rshift+0x68>

08008b60 <__hexdig_fun>:
 8008b60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b64:	2b09      	cmp	r3, #9
 8008b66:	d802      	bhi.n	8008b6e <__hexdig_fun+0xe>
 8008b68:	3820      	subs	r0, #32
 8008b6a:	b2c0      	uxtb	r0, r0
 8008b6c:	4770      	bx	lr
 8008b6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b72:	2b05      	cmp	r3, #5
 8008b74:	d801      	bhi.n	8008b7a <__hexdig_fun+0x1a>
 8008b76:	3847      	subs	r0, #71	@ 0x47
 8008b78:	e7f7      	b.n	8008b6a <__hexdig_fun+0xa>
 8008b7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b7e:	2b05      	cmp	r3, #5
 8008b80:	d801      	bhi.n	8008b86 <__hexdig_fun+0x26>
 8008b82:	3827      	subs	r0, #39	@ 0x27
 8008b84:	e7f1      	b.n	8008b6a <__hexdig_fun+0xa>
 8008b86:	2000      	movs	r0, #0
 8008b88:	4770      	bx	lr
	...

08008b8c <__gethex>:
 8008b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	b085      	sub	sp, #20
 8008b92:	468a      	mov	sl, r1
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	680b      	ldr	r3, [r1, #0]
 8008b98:	9001      	str	r0, [sp, #4]
 8008b9a:	4690      	mov	r8, r2
 8008b9c:	1c9c      	adds	r4, r3, #2
 8008b9e:	46a1      	mov	r9, r4
 8008ba0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ba4:	2830      	cmp	r0, #48	@ 0x30
 8008ba6:	d0fa      	beq.n	8008b9e <__gethex+0x12>
 8008ba8:	eba9 0303 	sub.w	r3, r9, r3
 8008bac:	f1a3 0b02 	sub.w	fp, r3, #2
 8008bb0:	f7ff ffd6 	bl	8008b60 <__hexdig_fun>
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d168      	bne.n	8008c8c <__gethex+0x100>
 8008bba:	49a0      	ldr	r1, [pc, #640]	@ (8008e3c <__gethex+0x2b0>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	f7ff feee 	bl	80089a0 <strncmp>
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d167      	bne.n	8008c9a <__gethex+0x10e>
 8008bca:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008bce:	4626      	mov	r6, r4
 8008bd0:	f7ff ffc6 	bl	8008b60 <__hexdig_fun>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d062      	beq.n	8008c9e <__gethex+0x112>
 8008bd8:	4623      	mov	r3, r4
 8008bda:	7818      	ldrb	r0, [r3, #0]
 8008bdc:	2830      	cmp	r0, #48	@ 0x30
 8008bde:	4699      	mov	r9, r3
 8008be0:	f103 0301 	add.w	r3, r3, #1
 8008be4:	d0f9      	beq.n	8008bda <__gethex+0x4e>
 8008be6:	f7ff ffbb 	bl	8008b60 <__hexdig_fun>
 8008bea:	fab0 f580 	clz	r5, r0
 8008bee:	096d      	lsrs	r5, r5, #5
 8008bf0:	f04f 0b01 	mov.w	fp, #1
 8008bf4:	464a      	mov	r2, r9
 8008bf6:	4616      	mov	r6, r2
 8008bf8:	3201      	adds	r2, #1
 8008bfa:	7830      	ldrb	r0, [r6, #0]
 8008bfc:	f7ff ffb0 	bl	8008b60 <__hexdig_fun>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d1f8      	bne.n	8008bf6 <__gethex+0x6a>
 8008c04:	498d      	ldr	r1, [pc, #564]	@ (8008e3c <__gethex+0x2b0>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f7ff fec9 	bl	80089a0 <strncmp>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d13f      	bne.n	8008c92 <__gethex+0x106>
 8008c12:	b944      	cbnz	r4, 8008c26 <__gethex+0x9a>
 8008c14:	1c74      	adds	r4, r6, #1
 8008c16:	4622      	mov	r2, r4
 8008c18:	4616      	mov	r6, r2
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	7830      	ldrb	r0, [r6, #0]
 8008c1e:	f7ff ff9f 	bl	8008b60 <__hexdig_fun>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d1f8      	bne.n	8008c18 <__gethex+0x8c>
 8008c26:	1ba4      	subs	r4, r4, r6
 8008c28:	00a7      	lsls	r7, r4, #2
 8008c2a:	7833      	ldrb	r3, [r6, #0]
 8008c2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008c30:	2b50      	cmp	r3, #80	@ 0x50
 8008c32:	d13e      	bne.n	8008cb2 <__gethex+0x126>
 8008c34:	7873      	ldrb	r3, [r6, #1]
 8008c36:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c38:	d033      	beq.n	8008ca2 <__gethex+0x116>
 8008c3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c3c:	d034      	beq.n	8008ca8 <__gethex+0x11c>
 8008c3e:	1c71      	adds	r1, r6, #1
 8008c40:	2400      	movs	r4, #0
 8008c42:	7808      	ldrb	r0, [r1, #0]
 8008c44:	f7ff ff8c 	bl	8008b60 <__hexdig_fun>
 8008c48:	1e43      	subs	r3, r0, #1
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b18      	cmp	r3, #24
 8008c4e:	d830      	bhi.n	8008cb2 <__gethex+0x126>
 8008c50:	f1a0 0210 	sub.w	r2, r0, #16
 8008c54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c58:	f7ff ff82 	bl	8008b60 <__hexdig_fun>
 8008c5c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008c60:	fa5f fc8c 	uxtb.w	ip, ip
 8008c64:	f1bc 0f18 	cmp.w	ip, #24
 8008c68:	f04f 030a 	mov.w	r3, #10
 8008c6c:	d91e      	bls.n	8008cac <__gethex+0x120>
 8008c6e:	b104      	cbz	r4, 8008c72 <__gethex+0xe6>
 8008c70:	4252      	negs	r2, r2
 8008c72:	4417      	add	r7, r2
 8008c74:	f8ca 1000 	str.w	r1, [sl]
 8008c78:	b1ed      	cbz	r5, 8008cb6 <__gethex+0x12a>
 8008c7a:	f1bb 0f00 	cmp.w	fp, #0
 8008c7e:	bf0c      	ite	eq
 8008c80:	2506      	moveq	r5, #6
 8008c82:	2500      	movne	r5, #0
 8008c84:	4628      	mov	r0, r5
 8008c86:	b005      	add	sp, #20
 8008c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	462c      	mov	r4, r5
 8008c90:	e7b0      	b.n	8008bf4 <__gethex+0x68>
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	d1c7      	bne.n	8008c26 <__gethex+0x9a>
 8008c96:	4627      	mov	r7, r4
 8008c98:	e7c7      	b.n	8008c2a <__gethex+0x9e>
 8008c9a:	464e      	mov	r6, r9
 8008c9c:	462f      	mov	r7, r5
 8008c9e:	2501      	movs	r5, #1
 8008ca0:	e7c3      	b.n	8008c2a <__gethex+0x9e>
 8008ca2:	2400      	movs	r4, #0
 8008ca4:	1cb1      	adds	r1, r6, #2
 8008ca6:	e7cc      	b.n	8008c42 <__gethex+0xb6>
 8008ca8:	2401      	movs	r4, #1
 8008caa:	e7fb      	b.n	8008ca4 <__gethex+0x118>
 8008cac:	fb03 0002 	mla	r0, r3, r2, r0
 8008cb0:	e7ce      	b.n	8008c50 <__gethex+0xc4>
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	e7de      	b.n	8008c74 <__gethex+0xe8>
 8008cb6:	eba6 0309 	sub.w	r3, r6, r9
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	2b07      	cmp	r3, #7
 8008cc0:	dc0a      	bgt.n	8008cd8 <__gethex+0x14c>
 8008cc2:	9801      	ldr	r0, [sp, #4]
 8008cc4:	f7fd fa74 	bl	80061b0 <_Balloc>
 8008cc8:	4604      	mov	r4, r0
 8008cca:	b940      	cbnz	r0, 8008cde <__gethex+0x152>
 8008ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e40 <__gethex+0x2b4>)
 8008cce:	4602      	mov	r2, r0
 8008cd0:	21e4      	movs	r1, #228	@ 0xe4
 8008cd2:	485c      	ldr	r0, [pc, #368]	@ (8008e44 <__gethex+0x2b8>)
 8008cd4:	f7ff fec0 	bl	8008a58 <__assert_func>
 8008cd8:	3101      	adds	r1, #1
 8008cda:	105b      	asrs	r3, r3, #1
 8008cdc:	e7ef      	b.n	8008cbe <__gethex+0x132>
 8008cde:	f100 0a14 	add.w	sl, r0, #20
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	4655      	mov	r5, sl
 8008ce6:	469b      	mov	fp, r3
 8008ce8:	45b1      	cmp	r9, r6
 8008cea:	d337      	bcc.n	8008d5c <__gethex+0x1d0>
 8008cec:	f845 bb04 	str.w	fp, [r5], #4
 8008cf0:	eba5 050a 	sub.w	r5, r5, sl
 8008cf4:	10ad      	asrs	r5, r5, #2
 8008cf6:	6125      	str	r5, [r4, #16]
 8008cf8:	4658      	mov	r0, fp
 8008cfa:	f7fd fb4b 	bl	8006394 <__hi0bits>
 8008cfe:	016d      	lsls	r5, r5, #5
 8008d00:	f8d8 6000 	ldr.w	r6, [r8]
 8008d04:	1a2d      	subs	r5, r5, r0
 8008d06:	42b5      	cmp	r5, r6
 8008d08:	dd54      	ble.n	8008db4 <__gethex+0x228>
 8008d0a:	1bad      	subs	r5, r5, r6
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7fd fed7 	bl	8006ac2 <__any_on>
 8008d14:	4681      	mov	r9, r0
 8008d16:	b178      	cbz	r0, 8008d38 <__gethex+0x1ac>
 8008d18:	1e6b      	subs	r3, r5, #1
 8008d1a:	1159      	asrs	r1, r3, #5
 8008d1c:	f003 021f 	and.w	r2, r3, #31
 8008d20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d24:	f04f 0901 	mov.w	r9, #1
 8008d28:	fa09 f202 	lsl.w	r2, r9, r2
 8008d2c:	420a      	tst	r2, r1
 8008d2e:	d003      	beq.n	8008d38 <__gethex+0x1ac>
 8008d30:	454b      	cmp	r3, r9
 8008d32:	dc36      	bgt.n	8008da2 <__gethex+0x216>
 8008d34:	f04f 0902 	mov.w	r9, #2
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7ff febe 	bl	8008abc <rshift>
 8008d40:	442f      	add	r7, r5
 8008d42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d46:	42bb      	cmp	r3, r7
 8008d48:	da42      	bge.n	8008dd0 <__gethex+0x244>
 8008d4a:	9801      	ldr	r0, [sp, #4]
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f7fd fa6f 	bl	8006230 <_Bfree>
 8008d52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d54:	2300      	movs	r3, #0
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	25a3      	movs	r5, #163	@ 0xa3
 8008d5a:	e793      	b.n	8008c84 <__gethex+0xf8>
 8008d5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d60:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d62:	d012      	beq.n	8008d8a <__gethex+0x1fe>
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d104      	bne.n	8008d72 <__gethex+0x1e6>
 8008d68:	f845 bb04 	str.w	fp, [r5], #4
 8008d6c:	f04f 0b00 	mov.w	fp, #0
 8008d70:	465b      	mov	r3, fp
 8008d72:	7830      	ldrb	r0, [r6, #0]
 8008d74:	9303      	str	r3, [sp, #12]
 8008d76:	f7ff fef3 	bl	8008b60 <__hexdig_fun>
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	f000 000f 	and.w	r0, r0, #15
 8008d80:	4098      	lsls	r0, r3
 8008d82:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d86:	3304      	adds	r3, #4
 8008d88:	e7ae      	b.n	8008ce8 <__gethex+0x15c>
 8008d8a:	45b1      	cmp	r9, r6
 8008d8c:	d8ea      	bhi.n	8008d64 <__gethex+0x1d8>
 8008d8e:	492b      	ldr	r1, [pc, #172]	@ (8008e3c <__gethex+0x2b0>)
 8008d90:	9303      	str	r3, [sp, #12]
 8008d92:	2201      	movs	r2, #1
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff fe03 	bl	80089a0 <strncmp>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1e1      	bne.n	8008d64 <__gethex+0x1d8>
 8008da0:	e7a2      	b.n	8008ce8 <__gethex+0x15c>
 8008da2:	1ea9      	subs	r1, r5, #2
 8008da4:	4620      	mov	r0, r4
 8008da6:	f7fd fe8c 	bl	8006ac2 <__any_on>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d0c2      	beq.n	8008d34 <__gethex+0x1a8>
 8008dae:	f04f 0903 	mov.w	r9, #3
 8008db2:	e7c1      	b.n	8008d38 <__gethex+0x1ac>
 8008db4:	da09      	bge.n	8008dca <__gethex+0x23e>
 8008db6:	1b75      	subs	r5, r6, r5
 8008db8:	4621      	mov	r1, r4
 8008dba:	9801      	ldr	r0, [sp, #4]
 8008dbc:	462a      	mov	r2, r5
 8008dbe:	f7fd fc47 	bl	8006650 <__lshift>
 8008dc2:	1b7f      	subs	r7, r7, r5
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	f100 0a14 	add.w	sl, r0, #20
 8008dca:	f04f 0900 	mov.w	r9, #0
 8008dce:	e7b8      	b.n	8008d42 <__gethex+0x1b6>
 8008dd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008dd4:	42bd      	cmp	r5, r7
 8008dd6:	dd6f      	ble.n	8008eb8 <__gethex+0x32c>
 8008dd8:	1bed      	subs	r5, r5, r7
 8008dda:	42ae      	cmp	r6, r5
 8008ddc:	dc34      	bgt.n	8008e48 <__gethex+0x2bc>
 8008dde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d022      	beq.n	8008e2c <__gethex+0x2a0>
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d024      	beq.n	8008e34 <__gethex+0x2a8>
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d115      	bne.n	8008e1a <__gethex+0x28e>
 8008dee:	42ae      	cmp	r6, r5
 8008df0:	d113      	bne.n	8008e1a <__gethex+0x28e>
 8008df2:	2e01      	cmp	r6, #1
 8008df4:	d10b      	bne.n	8008e0e <__gethex+0x282>
 8008df6:	9a02      	ldr	r2, [sp, #8]
 8008df8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	6123      	str	r3, [r4, #16]
 8008e02:	f8ca 3000 	str.w	r3, [sl]
 8008e06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e08:	2562      	movs	r5, #98	@ 0x62
 8008e0a:	601c      	str	r4, [r3, #0]
 8008e0c:	e73a      	b.n	8008c84 <__gethex+0xf8>
 8008e0e:	1e71      	subs	r1, r6, #1
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7fd fe56 	bl	8006ac2 <__any_on>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d1ed      	bne.n	8008df6 <__gethex+0x26a>
 8008e1a:	9801      	ldr	r0, [sp, #4]
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	f7fd fa07 	bl	8006230 <_Bfree>
 8008e22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e24:	2300      	movs	r3, #0
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	2550      	movs	r5, #80	@ 0x50
 8008e2a:	e72b      	b.n	8008c84 <__gethex+0xf8>
 8008e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f3      	bne.n	8008e1a <__gethex+0x28e>
 8008e32:	e7e0      	b.n	8008df6 <__gethex+0x26a>
 8008e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1dd      	bne.n	8008df6 <__gethex+0x26a>
 8008e3a:	e7ee      	b.n	8008e1a <__gethex+0x28e>
 8008e3c:	08009529 	.word	0x08009529
 8008e40:	080094bf 	.word	0x080094bf
 8008e44:	0800959b 	.word	0x0800959b
 8008e48:	1e6f      	subs	r7, r5, #1
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	d130      	bne.n	8008eb2 <__gethex+0x326>
 8008e50:	b127      	cbz	r7, 8008e5c <__gethex+0x2d0>
 8008e52:	4639      	mov	r1, r7
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7fd fe34 	bl	8006ac2 <__any_on>
 8008e5a:	4681      	mov	r9, r0
 8008e5c:	117a      	asrs	r2, r7, #5
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e64:	f007 071f 	and.w	r7, r7, #31
 8008e68:	40bb      	lsls	r3, r7
 8008e6a:	4213      	tst	r3, r2
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4620      	mov	r0, r4
 8008e70:	bf18      	it	ne
 8008e72:	f049 0902 	orrne.w	r9, r9, #2
 8008e76:	f7ff fe21 	bl	8008abc <rshift>
 8008e7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e7e:	1b76      	subs	r6, r6, r5
 8008e80:	2502      	movs	r5, #2
 8008e82:	f1b9 0f00 	cmp.w	r9, #0
 8008e86:	d047      	beq.n	8008f18 <__gethex+0x38c>
 8008e88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d015      	beq.n	8008ebc <__gethex+0x330>
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d017      	beq.n	8008ec4 <__gethex+0x338>
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d109      	bne.n	8008eac <__gethex+0x320>
 8008e98:	f019 0f02 	tst.w	r9, #2
 8008e9c:	d006      	beq.n	8008eac <__gethex+0x320>
 8008e9e:	f8da 3000 	ldr.w	r3, [sl]
 8008ea2:	ea49 0903 	orr.w	r9, r9, r3
 8008ea6:	f019 0f01 	tst.w	r9, #1
 8008eaa:	d10e      	bne.n	8008eca <__gethex+0x33e>
 8008eac:	f045 0510 	orr.w	r5, r5, #16
 8008eb0:	e032      	b.n	8008f18 <__gethex+0x38c>
 8008eb2:	f04f 0901 	mov.w	r9, #1
 8008eb6:	e7d1      	b.n	8008e5c <__gethex+0x2d0>
 8008eb8:	2501      	movs	r5, #1
 8008eba:	e7e2      	b.n	8008e82 <__gethex+0x2f6>
 8008ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ebe:	f1c3 0301 	rsb	r3, r3, #1
 8008ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f0      	beq.n	8008eac <__gethex+0x320>
 8008eca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ece:	f104 0314 	add.w	r3, r4, #20
 8008ed2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ed6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008eda:	f04f 0c00 	mov.w	ip, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008ee8:	d01b      	beq.n	8008f22 <__gethex+0x396>
 8008eea:	3201      	adds	r2, #1
 8008eec:	6002      	str	r2, [r0, #0]
 8008eee:	2d02      	cmp	r5, #2
 8008ef0:	f104 0314 	add.w	r3, r4, #20
 8008ef4:	d13c      	bne.n	8008f70 <__gethex+0x3e4>
 8008ef6:	f8d8 2000 	ldr.w	r2, [r8]
 8008efa:	3a01      	subs	r2, #1
 8008efc:	42b2      	cmp	r2, r6
 8008efe:	d109      	bne.n	8008f14 <__gethex+0x388>
 8008f00:	1171      	asrs	r1, r6, #5
 8008f02:	2201      	movs	r2, #1
 8008f04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f08:	f006 061f 	and.w	r6, r6, #31
 8008f0c:	fa02 f606 	lsl.w	r6, r2, r6
 8008f10:	421e      	tst	r6, r3
 8008f12:	d13a      	bne.n	8008f8a <__gethex+0x3fe>
 8008f14:	f045 0520 	orr.w	r5, r5, #32
 8008f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f1a:	601c      	str	r4, [r3, #0]
 8008f1c:	9b02      	ldr	r3, [sp, #8]
 8008f1e:	601f      	str	r7, [r3, #0]
 8008f20:	e6b0      	b.n	8008c84 <__gethex+0xf8>
 8008f22:	4299      	cmp	r1, r3
 8008f24:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f28:	d8d9      	bhi.n	8008ede <__gethex+0x352>
 8008f2a:	68a3      	ldr	r3, [r4, #8]
 8008f2c:	459b      	cmp	fp, r3
 8008f2e:	db17      	blt.n	8008f60 <__gethex+0x3d4>
 8008f30:	6861      	ldr	r1, [r4, #4]
 8008f32:	9801      	ldr	r0, [sp, #4]
 8008f34:	3101      	adds	r1, #1
 8008f36:	f7fd f93b 	bl	80061b0 <_Balloc>
 8008f3a:	4681      	mov	r9, r0
 8008f3c:	b918      	cbnz	r0, 8008f46 <__gethex+0x3ba>
 8008f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa8 <__gethex+0x41c>)
 8008f40:	4602      	mov	r2, r0
 8008f42:	2184      	movs	r1, #132	@ 0x84
 8008f44:	e6c5      	b.n	8008cd2 <__gethex+0x146>
 8008f46:	6922      	ldr	r2, [r4, #16]
 8008f48:	3202      	adds	r2, #2
 8008f4a:	f104 010c 	add.w	r1, r4, #12
 8008f4e:	0092      	lsls	r2, r2, #2
 8008f50:	300c      	adds	r0, #12
 8008f52:	f7ff fd69 	bl	8008a28 <memcpy>
 8008f56:	4621      	mov	r1, r4
 8008f58:	9801      	ldr	r0, [sp, #4]
 8008f5a:	f7fd f969 	bl	8006230 <_Bfree>
 8008f5e:	464c      	mov	r4, r9
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f68:	6122      	str	r2, [r4, #16]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	615a      	str	r2, [r3, #20]
 8008f6e:	e7be      	b.n	8008eee <__gethex+0x362>
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	455a      	cmp	r2, fp
 8008f74:	dd0b      	ble.n	8008f8e <__gethex+0x402>
 8008f76:	2101      	movs	r1, #1
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f7ff fd9f 	bl	8008abc <rshift>
 8008f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f82:	3701      	adds	r7, #1
 8008f84:	42bb      	cmp	r3, r7
 8008f86:	f6ff aee0 	blt.w	8008d4a <__gethex+0x1be>
 8008f8a:	2501      	movs	r5, #1
 8008f8c:	e7c2      	b.n	8008f14 <__gethex+0x388>
 8008f8e:	f016 061f 	ands.w	r6, r6, #31
 8008f92:	d0fa      	beq.n	8008f8a <__gethex+0x3fe>
 8008f94:	4453      	add	r3, sl
 8008f96:	f1c6 0620 	rsb	r6, r6, #32
 8008f9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f9e:	f7fd f9f9 	bl	8006394 <__hi0bits>
 8008fa2:	42b0      	cmp	r0, r6
 8008fa4:	dbe7      	blt.n	8008f76 <__gethex+0x3ea>
 8008fa6:	e7f0      	b.n	8008f8a <__gethex+0x3fe>
 8008fa8:	080094bf 	.word	0x080094bf

08008fac <L_shift>:
 8008fac:	f1c2 0208 	rsb	r2, r2, #8
 8008fb0:	0092      	lsls	r2, r2, #2
 8008fb2:	b570      	push	{r4, r5, r6, lr}
 8008fb4:	f1c2 0620 	rsb	r6, r2, #32
 8008fb8:	6843      	ldr	r3, [r0, #4]
 8008fba:	6804      	ldr	r4, [r0, #0]
 8008fbc:	fa03 f506 	lsl.w	r5, r3, r6
 8008fc0:	432c      	orrs	r4, r5
 8008fc2:	40d3      	lsrs	r3, r2
 8008fc4:	6004      	str	r4, [r0, #0]
 8008fc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fca:	4288      	cmp	r0, r1
 8008fcc:	d3f4      	bcc.n	8008fb8 <L_shift+0xc>
 8008fce:	bd70      	pop	{r4, r5, r6, pc}

08008fd0 <__match>:
 8008fd0:	b530      	push	{r4, r5, lr}
 8008fd2:	6803      	ldr	r3, [r0, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fda:	b914      	cbnz	r4, 8008fe2 <__match+0x12>
 8008fdc:	6003      	str	r3, [r0, #0]
 8008fde:	2001      	movs	r0, #1
 8008fe0:	bd30      	pop	{r4, r5, pc}
 8008fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008fea:	2d19      	cmp	r5, #25
 8008fec:	bf98      	it	ls
 8008fee:	3220      	addls	r2, #32
 8008ff0:	42a2      	cmp	r2, r4
 8008ff2:	d0f0      	beq.n	8008fd6 <__match+0x6>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7f3      	b.n	8008fe0 <__match+0x10>

08008ff8 <__hexnan>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	680b      	ldr	r3, [r1, #0]
 8008ffe:	6801      	ldr	r1, [r0, #0]
 8009000:	115e      	asrs	r6, r3, #5
 8009002:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009006:	f013 031f 	ands.w	r3, r3, #31
 800900a:	b087      	sub	sp, #28
 800900c:	bf18      	it	ne
 800900e:	3604      	addne	r6, #4
 8009010:	2500      	movs	r5, #0
 8009012:	1f37      	subs	r7, r6, #4
 8009014:	4682      	mov	sl, r0
 8009016:	4690      	mov	r8, r2
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	f846 5c04 	str.w	r5, [r6, #-4]
 800901e:	46b9      	mov	r9, r7
 8009020:	463c      	mov	r4, r7
 8009022:	9502      	str	r5, [sp, #8]
 8009024:	46ab      	mov	fp, r5
 8009026:	784a      	ldrb	r2, [r1, #1]
 8009028:	1c4b      	adds	r3, r1, #1
 800902a:	9303      	str	r3, [sp, #12]
 800902c:	b342      	cbz	r2, 8009080 <__hexnan+0x88>
 800902e:	4610      	mov	r0, r2
 8009030:	9105      	str	r1, [sp, #20]
 8009032:	9204      	str	r2, [sp, #16]
 8009034:	f7ff fd94 	bl	8008b60 <__hexdig_fun>
 8009038:	2800      	cmp	r0, #0
 800903a:	d151      	bne.n	80090e0 <__hexnan+0xe8>
 800903c:	9a04      	ldr	r2, [sp, #16]
 800903e:	9905      	ldr	r1, [sp, #20]
 8009040:	2a20      	cmp	r2, #32
 8009042:	d818      	bhi.n	8009076 <__hexnan+0x7e>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	459b      	cmp	fp, r3
 8009048:	dd13      	ble.n	8009072 <__hexnan+0x7a>
 800904a:	454c      	cmp	r4, r9
 800904c:	d206      	bcs.n	800905c <__hexnan+0x64>
 800904e:	2d07      	cmp	r5, #7
 8009050:	dc04      	bgt.n	800905c <__hexnan+0x64>
 8009052:	462a      	mov	r2, r5
 8009054:	4649      	mov	r1, r9
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff ffa8 	bl	8008fac <L_shift>
 800905c:	4544      	cmp	r4, r8
 800905e:	d952      	bls.n	8009106 <__hexnan+0x10e>
 8009060:	2300      	movs	r3, #0
 8009062:	f1a4 0904 	sub.w	r9, r4, #4
 8009066:	f844 3c04 	str.w	r3, [r4, #-4]
 800906a:	f8cd b008 	str.w	fp, [sp, #8]
 800906e:	464c      	mov	r4, r9
 8009070:	461d      	mov	r5, r3
 8009072:	9903      	ldr	r1, [sp, #12]
 8009074:	e7d7      	b.n	8009026 <__hexnan+0x2e>
 8009076:	2a29      	cmp	r2, #41	@ 0x29
 8009078:	d157      	bne.n	800912a <__hexnan+0x132>
 800907a:	3102      	adds	r1, #2
 800907c:	f8ca 1000 	str.w	r1, [sl]
 8009080:	f1bb 0f00 	cmp.w	fp, #0
 8009084:	d051      	beq.n	800912a <__hexnan+0x132>
 8009086:	454c      	cmp	r4, r9
 8009088:	d206      	bcs.n	8009098 <__hexnan+0xa0>
 800908a:	2d07      	cmp	r5, #7
 800908c:	dc04      	bgt.n	8009098 <__hexnan+0xa0>
 800908e:	462a      	mov	r2, r5
 8009090:	4649      	mov	r1, r9
 8009092:	4620      	mov	r0, r4
 8009094:	f7ff ff8a 	bl	8008fac <L_shift>
 8009098:	4544      	cmp	r4, r8
 800909a:	d936      	bls.n	800910a <__hexnan+0x112>
 800909c:	f1a8 0204 	sub.w	r2, r8, #4
 80090a0:	4623      	mov	r3, r4
 80090a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80090a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80090aa:	429f      	cmp	r7, r3
 80090ac:	d2f9      	bcs.n	80090a2 <__hexnan+0xaa>
 80090ae:	1b3b      	subs	r3, r7, r4
 80090b0:	f023 0303 	bic.w	r3, r3, #3
 80090b4:	3304      	adds	r3, #4
 80090b6:	3401      	adds	r4, #1
 80090b8:	3e03      	subs	r6, #3
 80090ba:	42b4      	cmp	r4, r6
 80090bc:	bf88      	it	hi
 80090be:	2304      	movhi	r3, #4
 80090c0:	4443      	add	r3, r8
 80090c2:	2200      	movs	r2, #0
 80090c4:	f843 2b04 	str.w	r2, [r3], #4
 80090c8:	429f      	cmp	r7, r3
 80090ca:	d2fb      	bcs.n	80090c4 <__hexnan+0xcc>
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	b91b      	cbnz	r3, 80090d8 <__hexnan+0xe0>
 80090d0:	4547      	cmp	r7, r8
 80090d2:	d128      	bne.n	8009126 <__hexnan+0x12e>
 80090d4:	2301      	movs	r3, #1
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	2005      	movs	r0, #5
 80090da:	b007      	add	sp, #28
 80090dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e0:	3501      	adds	r5, #1
 80090e2:	2d08      	cmp	r5, #8
 80090e4:	f10b 0b01 	add.w	fp, fp, #1
 80090e8:	dd06      	ble.n	80090f8 <__hexnan+0x100>
 80090ea:	4544      	cmp	r4, r8
 80090ec:	d9c1      	bls.n	8009072 <__hexnan+0x7a>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80090f4:	2501      	movs	r5, #1
 80090f6:	3c04      	subs	r4, #4
 80090f8:	6822      	ldr	r2, [r4, #0]
 80090fa:	f000 000f 	and.w	r0, r0, #15
 80090fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009102:	6020      	str	r0, [r4, #0]
 8009104:	e7b5      	b.n	8009072 <__hexnan+0x7a>
 8009106:	2508      	movs	r5, #8
 8009108:	e7b3      	b.n	8009072 <__hexnan+0x7a>
 800910a:	9b01      	ldr	r3, [sp, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0dd      	beq.n	80090cc <__hexnan+0xd4>
 8009110:	f1c3 0320 	rsb	r3, r3, #32
 8009114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009118:	40da      	lsrs	r2, r3
 800911a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800911e:	4013      	ands	r3, r2
 8009120:	f846 3c04 	str.w	r3, [r6, #-4]
 8009124:	e7d2      	b.n	80090cc <__hexnan+0xd4>
 8009126:	3f04      	subs	r7, #4
 8009128:	e7d0      	b.n	80090cc <__hexnan+0xd4>
 800912a:	2004      	movs	r0, #4
 800912c:	e7d5      	b.n	80090da <__hexnan+0xe2>

0800912e <__ascii_mbtowc>:
 800912e:	b082      	sub	sp, #8
 8009130:	b901      	cbnz	r1, 8009134 <__ascii_mbtowc+0x6>
 8009132:	a901      	add	r1, sp, #4
 8009134:	b142      	cbz	r2, 8009148 <__ascii_mbtowc+0x1a>
 8009136:	b14b      	cbz	r3, 800914c <__ascii_mbtowc+0x1e>
 8009138:	7813      	ldrb	r3, [r2, #0]
 800913a:	600b      	str	r3, [r1, #0]
 800913c:	7812      	ldrb	r2, [r2, #0]
 800913e:	1e10      	subs	r0, r2, #0
 8009140:	bf18      	it	ne
 8009142:	2001      	movne	r0, #1
 8009144:	b002      	add	sp, #8
 8009146:	4770      	bx	lr
 8009148:	4610      	mov	r0, r2
 800914a:	e7fb      	b.n	8009144 <__ascii_mbtowc+0x16>
 800914c:	f06f 0001 	mvn.w	r0, #1
 8009150:	e7f8      	b.n	8009144 <__ascii_mbtowc+0x16>

08009152 <_realloc_r>:
 8009152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009156:	4607      	mov	r7, r0
 8009158:	4614      	mov	r4, r2
 800915a:	460d      	mov	r5, r1
 800915c:	b921      	cbnz	r1, 8009168 <_realloc_r+0x16>
 800915e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009162:	4611      	mov	r1, r2
 8009164:	f7fc bf98 	b.w	8006098 <_malloc_r>
 8009168:	b92a      	cbnz	r2, 8009176 <_realloc_r+0x24>
 800916a:	f7fc ff21 	bl	8005fb0 <_free_r>
 800916e:	4625      	mov	r5, r4
 8009170:	4628      	mov	r0, r5
 8009172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009176:	f000 f8b2 	bl	80092de <_malloc_usable_size_r>
 800917a:	4284      	cmp	r4, r0
 800917c:	4606      	mov	r6, r0
 800917e:	d802      	bhi.n	8009186 <_realloc_r+0x34>
 8009180:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009184:	d8f4      	bhi.n	8009170 <_realloc_r+0x1e>
 8009186:	4621      	mov	r1, r4
 8009188:	4638      	mov	r0, r7
 800918a:	f7fc ff85 	bl	8006098 <_malloc_r>
 800918e:	4680      	mov	r8, r0
 8009190:	b908      	cbnz	r0, 8009196 <_realloc_r+0x44>
 8009192:	4645      	mov	r5, r8
 8009194:	e7ec      	b.n	8009170 <_realloc_r+0x1e>
 8009196:	42b4      	cmp	r4, r6
 8009198:	4622      	mov	r2, r4
 800919a:	4629      	mov	r1, r5
 800919c:	bf28      	it	cs
 800919e:	4632      	movcs	r2, r6
 80091a0:	f7ff fc42 	bl	8008a28 <memcpy>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7fc ff02 	bl	8005fb0 <_free_r>
 80091ac:	e7f1      	b.n	8009192 <_realloc_r+0x40>
	...

080091b0 <_strtoul_l.isra.0>:
 80091b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091b4:	4e34      	ldr	r6, [pc, #208]	@ (8009288 <_strtoul_l.isra.0+0xd8>)
 80091b6:	4686      	mov	lr, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	4628      	mov	r0, r5
 80091bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091c0:	5d37      	ldrb	r7, [r6, r4]
 80091c2:	f017 0708 	ands.w	r7, r7, #8
 80091c6:	d1f8      	bne.n	80091ba <_strtoul_l.isra.0+0xa>
 80091c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80091ca:	d110      	bne.n	80091ee <_strtoul_l.isra.0+0x3e>
 80091cc:	782c      	ldrb	r4, [r5, #0]
 80091ce:	2701      	movs	r7, #1
 80091d0:	1c85      	adds	r5, r0, #2
 80091d2:	f033 0010 	bics.w	r0, r3, #16
 80091d6:	d115      	bne.n	8009204 <_strtoul_l.isra.0+0x54>
 80091d8:	2c30      	cmp	r4, #48	@ 0x30
 80091da:	d10d      	bne.n	80091f8 <_strtoul_l.isra.0+0x48>
 80091dc:	7828      	ldrb	r0, [r5, #0]
 80091de:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80091e2:	2858      	cmp	r0, #88	@ 0x58
 80091e4:	d108      	bne.n	80091f8 <_strtoul_l.isra.0+0x48>
 80091e6:	786c      	ldrb	r4, [r5, #1]
 80091e8:	3502      	adds	r5, #2
 80091ea:	2310      	movs	r3, #16
 80091ec:	e00a      	b.n	8009204 <_strtoul_l.isra.0+0x54>
 80091ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80091f0:	bf04      	itt	eq
 80091f2:	782c      	ldrbeq	r4, [r5, #0]
 80091f4:	1c85      	addeq	r5, r0, #2
 80091f6:	e7ec      	b.n	80091d2 <_strtoul_l.isra.0+0x22>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1f6      	bne.n	80091ea <_strtoul_l.isra.0+0x3a>
 80091fc:	2c30      	cmp	r4, #48	@ 0x30
 80091fe:	bf14      	ite	ne
 8009200:	230a      	movne	r3, #10
 8009202:	2308      	moveq	r3, #8
 8009204:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009208:	2600      	movs	r6, #0
 800920a:	fbb8 f8f3 	udiv	r8, r8, r3
 800920e:	fb03 f908 	mul.w	r9, r3, r8
 8009212:	ea6f 0909 	mvn.w	r9, r9
 8009216:	4630      	mov	r0, r6
 8009218:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800921c:	f1bc 0f09 	cmp.w	ip, #9
 8009220:	d810      	bhi.n	8009244 <_strtoul_l.isra.0+0x94>
 8009222:	4664      	mov	r4, ip
 8009224:	42a3      	cmp	r3, r4
 8009226:	dd1e      	ble.n	8009266 <_strtoul_l.isra.0+0xb6>
 8009228:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800922c:	d007      	beq.n	800923e <_strtoul_l.isra.0+0x8e>
 800922e:	4580      	cmp	r8, r0
 8009230:	d316      	bcc.n	8009260 <_strtoul_l.isra.0+0xb0>
 8009232:	d101      	bne.n	8009238 <_strtoul_l.isra.0+0x88>
 8009234:	45a1      	cmp	r9, r4
 8009236:	db13      	blt.n	8009260 <_strtoul_l.isra.0+0xb0>
 8009238:	fb00 4003 	mla	r0, r0, r3, r4
 800923c:	2601      	movs	r6, #1
 800923e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009242:	e7e9      	b.n	8009218 <_strtoul_l.isra.0+0x68>
 8009244:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009248:	f1bc 0f19 	cmp.w	ip, #25
 800924c:	d801      	bhi.n	8009252 <_strtoul_l.isra.0+0xa2>
 800924e:	3c37      	subs	r4, #55	@ 0x37
 8009250:	e7e8      	b.n	8009224 <_strtoul_l.isra.0+0x74>
 8009252:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009256:	f1bc 0f19 	cmp.w	ip, #25
 800925a:	d804      	bhi.n	8009266 <_strtoul_l.isra.0+0xb6>
 800925c:	3c57      	subs	r4, #87	@ 0x57
 800925e:	e7e1      	b.n	8009224 <_strtoul_l.isra.0+0x74>
 8009260:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009264:	e7eb      	b.n	800923e <_strtoul_l.isra.0+0x8e>
 8009266:	1c73      	adds	r3, r6, #1
 8009268:	d106      	bne.n	8009278 <_strtoul_l.isra.0+0xc8>
 800926a:	2322      	movs	r3, #34	@ 0x22
 800926c:	f8ce 3000 	str.w	r3, [lr]
 8009270:	4630      	mov	r0, r6
 8009272:	b932      	cbnz	r2, 8009282 <_strtoul_l.isra.0+0xd2>
 8009274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009278:	b107      	cbz	r7, 800927c <_strtoul_l.isra.0+0xcc>
 800927a:	4240      	negs	r0, r0
 800927c:	2a00      	cmp	r2, #0
 800927e:	d0f9      	beq.n	8009274 <_strtoul_l.isra.0+0xc4>
 8009280:	b106      	cbz	r6, 8009284 <_strtoul_l.isra.0+0xd4>
 8009282:	1e69      	subs	r1, r5, #1
 8009284:	6011      	str	r1, [r2, #0]
 8009286:	e7f5      	b.n	8009274 <_strtoul_l.isra.0+0xc4>
 8009288:	08009749 	.word	0x08009749

0800928c <_strtoul_r>:
 800928c:	f7ff bf90 	b.w	80091b0 <_strtoul_l.isra.0>

08009290 <__ascii_wctomb>:
 8009290:	4603      	mov	r3, r0
 8009292:	4608      	mov	r0, r1
 8009294:	b141      	cbz	r1, 80092a8 <__ascii_wctomb+0x18>
 8009296:	2aff      	cmp	r2, #255	@ 0xff
 8009298:	d904      	bls.n	80092a4 <__ascii_wctomb+0x14>
 800929a:	228a      	movs	r2, #138	@ 0x8a
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092a2:	4770      	bx	lr
 80092a4:	700a      	strb	r2, [r1, #0]
 80092a6:	2001      	movs	r0, #1
 80092a8:	4770      	bx	lr
	...

080092ac <fiprintf>:
 80092ac:	b40e      	push	{r1, r2, r3}
 80092ae:	b503      	push	{r0, r1, lr}
 80092b0:	4601      	mov	r1, r0
 80092b2:	ab03      	add	r3, sp, #12
 80092b4:	4805      	ldr	r0, [pc, #20]	@ (80092cc <fiprintf+0x20>)
 80092b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ba:	6800      	ldr	r0, [r0, #0]
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	f7fe fc27 	bl	8007b10 <_vfiprintf_r>
 80092c2:	b002      	add	sp, #8
 80092c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092c8:	b003      	add	sp, #12
 80092ca:	4770      	bx	lr
 80092cc:	20000018 	.word	0x20000018

080092d0 <abort>:
 80092d0:	b508      	push	{r3, lr}
 80092d2:	2006      	movs	r0, #6
 80092d4:	f000 f834 	bl	8009340 <raise>
 80092d8:	2001      	movs	r0, #1
 80092da:	f7f7 ffe3 	bl	80012a4 <_exit>

080092de <_malloc_usable_size_r>:
 80092de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e2:	1f18      	subs	r0, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfbc      	itt	lt
 80092e8:	580b      	ldrlt	r3, [r1, r0]
 80092ea:	18c0      	addlt	r0, r0, r3
 80092ec:	4770      	bx	lr

080092ee <_raise_r>:
 80092ee:	291f      	cmp	r1, #31
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4605      	mov	r5, r0
 80092f4:	460c      	mov	r4, r1
 80092f6:	d904      	bls.n	8009302 <_raise_r+0x14>
 80092f8:	2316      	movs	r3, #22
 80092fa:	6003      	str	r3, [r0, #0]
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009300:	bd38      	pop	{r3, r4, r5, pc}
 8009302:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009304:	b112      	cbz	r2, 800930c <_raise_r+0x1e>
 8009306:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800930a:	b94b      	cbnz	r3, 8009320 <_raise_r+0x32>
 800930c:	4628      	mov	r0, r5
 800930e:	f000 f831 	bl	8009374 <_getpid_r>
 8009312:	4622      	mov	r2, r4
 8009314:	4601      	mov	r1, r0
 8009316:	4628      	mov	r0, r5
 8009318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931c:	f000 b818 	b.w	8009350 <_kill_r>
 8009320:	2b01      	cmp	r3, #1
 8009322:	d00a      	beq.n	800933a <_raise_r+0x4c>
 8009324:	1c59      	adds	r1, r3, #1
 8009326:	d103      	bne.n	8009330 <_raise_r+0x42>
 8009328:	2316      	movs	r3, #22
 800932a:	6003      	str	r3, [r0, #0]
 800932c:	2001      	movs	r0, #1
 800932e:	e7e7      	b.n	8009300 <_raise_r+0x12>
 8009330:	2100      	movs	r1, #0
 8009332:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009336:	4620      	mov	r0, r4
 8009338:	4798      	blx	r3
 800933a:	2000      	movs	r0, #0
 800933c:	e7e0      	b.n	8009300 <_raise_r+0x12>
	...

08009340 <raise>:
 8009340:	4b02      	ldr	r3, [pc, #8]	@ (800934c <raise+0xc>)
 8009342:	4601      	mov	r1, r0
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	f7ff bfd2 	b.w	80092ee <_raise_r>
 800934a:	bf00      	nop
 800934c:	20000018 	.word	0x20000018

08009350 <_kill_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	@ (8009370 <_kill_r+0x20>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	f7f7 ff91 	bl	8001284 <_kill>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d102      	bne.n	800936c <_kill_r+0x1c>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b103      	cbz	r3, 800936c <_kill_r+0x1c>
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	bd38      	pop	{r3, r4, r5, pc}
 800936e:	bf00      	nop
 8009370:	20000408 	.word	0x20000408

08009374 <_getpid_r>:
 8009374:	f7f7 bf7e 	b.w	8001274 <_getpid>

08009378 <_init>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

08009384 <_fini>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr
