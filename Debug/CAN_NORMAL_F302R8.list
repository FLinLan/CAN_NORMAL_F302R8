
CAN_NORMAL_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009860  08009860  0000a860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d74  08009d74  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d74  08009d74  0000ad74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d7c  08009d7c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d7c  08009d7c  0000ad7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d80  08009d80  0000ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009d84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200001d4  08009f58  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08009f58  0000b440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b240  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001903  00000000  00000000  00016444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00017d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000652  00000000  00000000  00018598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf09  00000000  00000000  00018bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ca7  00000000  00000000  00034af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d23  00000000  00000000  0003e79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df4bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000399c  00000000  00000000  000df500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e2e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009848 	.word	0x08009848

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009848 	.word	0x08009848

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cfc:	1d39      	adds	r1, r7, #4
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d02:	2201      	movs	r2, #1
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <__io_putchar+0x20>)
 8000d06:	f002 ffd7 	bl	8003cb8 <HAL_UART_Transmit>
  return ch;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000218 	.word	0x20000218

08000d18 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <__io_getchar+0x38>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2208      	movs	r2, #8
 8000d28:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d2a:	1df9      	adds	r1, r7, #7
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d30:	2201      	movs	r2, #1
 8000d32:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <__io_getchar+0x38>)
 8000d34:	f003 f849 	bl	8003dca <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d38:	1df9      	adds	r1, r7, #7
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <__io_getchar+0x38>)
 8000d42:	f002 ffb9 	bl	8003cb8 <HAL_UART_Transmit>
  return ch;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000218 	.word	0x20000218

08000d54 <floatToUpperBytes>:
uint8_t TxData[8] = {0x00, 0x00, 0x00, 0x00, // IEEE 754 float: vel : 2 rev/s: UPPER BYTES
					 0x00, 0x00, 0x00, 0x00}; // IEEE 754 float: torque : 0: LOWER BYTES
uint8_t RxData[8];
uint32_t TxMailbox;

void floatToUpperBytes(float val, uint8_t* byteArr) {
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d5e:	6038      	str	r0, [r7, #0]
  union {
    float var;
    uint8_t buf[sizeof(float)];
  } u;
  u.var = val;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	60fb      	str	r3, [r7, #12]
  memcpy(byteArr, u.buf, sizeof(float)); // Write to bytes 0–3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b090      	sub	sp, #64	@ 0x40
 8000d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f000 fbcf 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f8af 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f000 f959 	bl	800103c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d8a:	f000 f927 	bl	8000fdc <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000d8e:	f000 f8ef 	bl	8000f70 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000d92:	4848      	ldr	r0, [pc, #288]	@ (8000eb4 <main+0x13c>)
 8000d94:	f000 fdef 	bl	8001976 <HAL_CAN_Start>

  setvbuf(stdin, NULL, _IONBF, 0); // for scanf setup, avoiding errors in syscalls.c
 8000d98:	4b47      	ldr	r3, [pc, #284]	@ (8000eb8 <main+0x140>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6858      	ldr	r0, [r3, #4]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2202      	movs	r2, #2
 8000da2:	2100      	movs	r1, #0
 8000da4:	f004 fb74 	bl	8005490 <setvbuf>

  // CAN filter configuration
  CAN_FilterTypeDef canFilter;
  canFilter.FilterBank = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  canFilter.FilterIdHigh = 0x0000;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  canFilter.FilterIdLow = 0x0000;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  canFilter.FilterMaskIdHigh = 0x0000;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  canFilter.FilterMaskIdLow = 0x0000;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  canFilter.FilterActivation = ENABLE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_CAN_ConfigFilter(&hcan, &canFilter);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4838      	ldr	r0, [pc, #224]	@ (8000eb4 <main+0x13c>)
 8000dd4:	f000 fd05 	bl	80017e2 <HAL_CAN_ConfigFilter>

  // Set CAN interrupt to lower priority BEFORE enabling it
  HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 5, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2105      	movs	r1, #5
 8000ddc:	2013      	movs	r0, #19
 8000dde:	f001 fb3c 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2105      	movs	r1, #5
 8000de6:	2014      	movs	r0, #20
 8000de8:	f001 fb37 	bl	800245a <HAL_NVIC_SetPriority>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Check for CAN messages without interrupt
        if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0)
 8000dec:	2100      	movs	r1, #0
 8000dee:	4831      	ldr	r0, [pc, #196]	@ (8000eb4 <main+0x13c>)
 8000df0:	f000 fff7 	bl	8001de2 <HAL_CAN_GetRxFifoFillLevel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d020      	beq.n	8000e3c <main+0xc4>
        {
            HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000dfa:	4b30      	ldr	r3, [pc, #192]	@ (8000ebc <main+0x144>)
 8000dfc:	4a30      	ldr	r2, [pc, #192]	@ (8000ec0 <main+0x148>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	482c      	ldr	r0, [pc, #176]	@ (8000eb4 <main+0x13c>)
 8000e02:	f000 fecc 	bl	8001b9e <HAL_CAN_GetRxMessage>

            // Only print every 50th message to reduce spam
            static uint32_t msg_count = 0;
            msg_count++;
 8000e06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <main+0x14c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec4 <main+0x14c>)
 8000e0e:	6013      	str	r3, [r2, #0]
            if (msg_count % 10 == 0) {
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <main+0x14c>)
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <main+0x150>)
 8000e16:	fba3 2301 	umull	r2, r3, r3, r1
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	1aca      	subs	r2, r1, r3
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d108      	bne.n	8000e3c <main+0xc4>
                printf("CAN RX - ID: 0x%03lX, DLC: %lu (count: %lu)\r\n", RxHeader.StdId, RxHeader.DLC, msg_count);
 8000e2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <main+0x148>)
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ec0 <main+0x148>)
 8000e30:	691a      	ldr	r2, [r3, #16]
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <main+0x14c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4825      	ldr	r0, [pc, #148]	@ (8000ecc <main+0x154>)
 8000e38:	f004 fb06 	bl	8005448 <iprintf>
            }
        }

		if (scanf("%x %d %f", &cmd_id, &dlc, &value) == 3)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	f107 0208 	add.w	r2, r7, #8
 8000e42:	f107 010c 	add.w	r1, r7, #12
 8000e46:	4822      	ldr	r0, [pc, #136]	@ (8000ed0 <main+0x158>)
 8000e48:	f004 fb10 	bl	800546c <iscanf>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d1cc      	bne.n	8000dec <main+0x74>
		{
			printf("packet sent: CMD:0x%x, DLC:%d, VAL: %f \r\n", cmd_id, dlc, value);
 8000e52:	68fc      	ldr	r4, [r7, #12]
 8000e54:	68bd      	ldr	r5, [r7, #8]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb75 	bl	8000548 <__aeabi_f2d>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	e9cd 2300 	strd	r2, r3, [sp]
 8000e66:	462a      	mov	r2, r5
 8000e68:	4621      	mov	r1, r4
 8000e6a:	481a      	ldr	r0, [pc, #104]	@ (8000ed4 <main+0x15c>)
 8000e6c:	f004 faec 	bl	8005448 <iprintf>
			memset(TxData, 0, sizeof(TxData));
 8000e70:	2208      	movs	r2, #8
 8000e72:	2100      	movs	r1, #0
 8000e74:	4818      	ldr	r0, [pc, #96]	@ (8000ed8 <main+0x160>)
 8000e76:	f004 fc24 	bl	80056c2 <memset>

			TxHeader.StdId = (NODE_ID << 5) | cmd_id;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <main+0x164>)
 8000e80:	601a      	str	r2, [r3, #0]
			TxHeader.IDE = CAN_ID_STD;
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <main+0x164>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
			TxHeader.RTR = CAN_RTR_DATA;
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <main+0x164>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
			TxHeader.DLC = dlc;
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <main+0x164>)
 8000e94:	611a      	str	r2, [r3, #16]

			// Put value as bytes directly into TxData
			// example usage: "0x0D 8 2.0" VELOCITY_MODE with DLC = 8 and spinning at INPUT_VEL 2 rev/s.
			floatToUpperBytes(value, TxData);
 8000e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e9a:	480f      	ldr	r0, [pc, #60]	@ (8000ed8 <main+0x160>)
 8000e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea0:	f7ff ff58 	bl	8000d54 <floatToUpperBytes>
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <main+0x168>)
 8000ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed8 <main+0x160>)
 8000ea8:	490c      	ldr	r1, [pc, #48]	@ (8000edc <main+0x164>)
 8000eaa:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <main+0x13c>)
 8000eac:	f000 fda7 	bl	80019fe <HAL_CAN_AddTxMessage>
        if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0)
 8000eb0:	e79c      	b.n	8000dec <main+0x74>
 8000eb2:	bf00      	nop
 8000eb4:	200001f0 	.word	0x200001f0
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	200002dc 	.word	0x200002dc
 8000ec0:	200002b8 	.word	0x200002b8
 8000ec4:	200002e8 	.word	0x200002e8
 8000ec8:	cccccccd 	.word	0xcccccccd
 8000ecc:	08009884 	.word	0x08009884
 8000ed0:	080098b4 	.word	0x080098b4
 8000ed4:	080098c0 	.word	0x080098c0
 8000ed8:	200002d4 	.word	0x200002d4
 8000edc:	200002a0 	.word	0x200002a0
 8000ee0:	200002e4 	.word	0x200002e4

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b090      	sub	sp, #64	@ 0x40
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 0318 	add.w	r3, r7, #24
 8000eee:	2228      	movs	r2, #40	@ 0x28
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fbe5 	bl	80056c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f22:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fc55 	bl	80027dc <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f38:	f000 f8fe 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2302      	movs	r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2102      	movs	r1, #2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fc4e 	bl	80037f8 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f62:	f000 f8e9 	bl	8001138 <Error_Handler>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3740      	adds	r7, #64	@ 0x40
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000f76:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <MX_CAN_Init+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000f8e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f92:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000f96:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000f9a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_CAN_Init+0x64>)
 8000fc2:	f000 fb13 	bl	80015ec <HAL_CAN_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fcc:	f000 f8b4 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001f0 	.word	0x200001f0
 8000fd8:	40006400 	.word	0x40006400

08000fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000fe2:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <MX_USART2_UART_Init+0x5c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_USART2_UART_Init+0x58>)
 8001020:	f002 fdfc 	bl	8003c1c <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102a:	f000 f885 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000218 	.word	0x20000218
 8001038:	40004400 	.word	0x40004400

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b36      	ldr	r3, [pc, #216]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a35      	ldr	r2, [pc, #212]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b33      	ldr	r3, [pc, #204]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	4b30      	ldr	r3, [pc, #192]	@ (800112c <MX_GPIO_Init+0xf0>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a2f      	ldr	r2, [pc, #188]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001070:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a29      	ldr	r2, [pc, #164]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <MX_GPIO_Init+0xf0>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a23      	ldr	r2, [pc, #140]	@ (800112c <MX_GPIO_Init+0xf0>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_GPIO_Init+0xf0>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ba:	f001 fb77 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c4:	481a      	ldr	r0, [pc, #104]	@ (8001130 <MX_GPIO_Init+0xf4>)
 80010c6:	f001 fb71 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4814      	ldr	r0, [pc, #80]	@ (8001134 <MX_GPIO_Init+0xf8>)
 80010e2:	f001 f9f1 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 80010e6:	2320      	movs	r3, #32
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f001 f9e2 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_GPIO_Init+0xf4>)
 800111e:	f001 f9d3 	bl	80024c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	48000400 	.word	0x48000400
 8001134:	48000800 	.word	0x48000800

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_MspInit+0x44>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_MspInit+0x44>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_MspInit+0x44>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x44>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x44>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800117a:	2007      	movs	r0, #7
 800117c:	f001 f962 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <HAL_CAN_MspInit+0x90>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d131      	bne.n	8001212 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_CAN_MspInit+0x94>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <HAL_CAN_MspInit+0x94>)
 80011b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_CAN_MspInit+0x94>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_CAN_MspInit+0x94>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <HAL_CAN_MspInit+0x94>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_CAN_MspInit+0x94>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80011f0:	2309      	movs	r3, #9
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fe:	f001 f963 	bl	80024c8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2014      	movs	r0, #20
 8001208:	f001 f927 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800120c:	2014      	movs	r0, #20
 800120e:	f001 f940 	bl	8002492 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	@ 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40006400 	.word	0x40006400
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <HAL_UART_MspInit+0x7c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d128      	bne.n	8001298 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_UART_MspInit+0x80>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a16      	ldr	r2, [pc, #88]	@ (80012a4 <HAL_UART_MspInit+0x80>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_UART_MspInit+0x80>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_UART_MspInit+0x80>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <HAL_UART_MspInit+0x80>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_UART_MspInit+0x80>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001276:	230c      	movs	r3, #12
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001286:	2307      	movs	r3, #7
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001294:	f001 f918 	bl	80024c8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	@ 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f955 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800130e:	f000 fd90 	bl	8001e32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001f0 	.word	0x200001f0

0800131c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_kill>:

int _kill(int pid, int sig)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001336:	f004 fa17 	bl	8005768 <__errno>
 800133a:	4603      	mov	r3, r0
 800133c:	2216      	movs	r2, #22
 800133e:	601a      	str	r2, [r3, #0]
  return -1;
 8001340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_exit>:

void _exit (int status)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001354:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffe7 	bl	800132c <_kill>
  while (1) {}    /* Make sure we hang here */
 800135e:	bf00      	nop
 8001360:	e7fd      	b.n	800135e <_exit+0x12>

08001362 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e00a      	b.n	800138a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001374:	f7ff fcd0 	bl	8000d18 <__io_getchar>
 8001378:	4601      	mov	r1, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	b2ca      	uxtb	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf0      	blt.n	8001374 <_read+0x12>
  }

  return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e009      	b.n	80013c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	60ba      	str	r2, [r7, #8]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc9c 	bl	8000cf4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf1      	blt.n	80013ae <_write+0x12>
  }
  return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_close>:

int _close(int file)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013fc:	605a      	str	r2, [r3, #4]
  return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_isatty>:

int _isatty(int file)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f004 f97c 	bl	8005768 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20004000 	.word	0x20004000
 800149c:	00000400 	.word	0x00000400
 80014a0:	200002ec 	.word	0x200002ec
 80014a4:	20000440 	.word	0x20000440

080014a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001504 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d0:	f7ff ffea 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopForever+0xe>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopForever+0x16>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fa:	f004 f93b 	bl	8005774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fe:	f7ff fc3b 	bl	8000d78 <main>

08001502 <LoopForever>:

LoopForever:
    b LoopForever
 8001502:	e7fe      	b.n	8001502 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001504:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001510:	08009d84 	.word	0x08009d84
  ldr r2, =_sbss
 8001514:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001518:	20000440 	.word	0x20000440

0800151c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_IRQHandler>
	...

08001520 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <HAL_Init+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <HAL_Init+0x28>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 ff87 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fe02 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 ff9f 	bl	80024ae <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001588:	f000 ff67 	bl	800245a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200002f0 	.word	0x200002f0

080015d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200002f0 	.word	0x200002f0

080015ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0ed      	b.n	80017da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fdbe 	bl	800118c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001620:	f7ff ffd8 	bl	80015d4 <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001626:	e012      	b.n	800164e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001628:	f7ff ffd4 	bl	80015d4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b0a      	cmp	r3, #10
 8001634:	d90b      	bls.n	800164e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0c5      	b.n	80017da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0e5      	beq.n	8001628 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0202 	bic.w	r2, r2, #2
 800166a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800166c:	f7ff ffb2 	bl	80015d4 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001672:	e012      	b.n	800169a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001674:	f7ff ffae 	bl	80015d4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b0a      	cmp	r3, #10
 8001680:	d90b      	bls.n	800169a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2205      	movs	r2, #5
 8001692:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e09f      	b.n	80017da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e5      	bne.n	8001674 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7e1b      	ldrb	r3, [r3, #24]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e007      	b.n	80016d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7e5b      	ldrb	r3, [r3, #25]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e007      	b.n	80016fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7e9b      	ldrb	r3, [r3, #26]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d108      	bne.n	8001716 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0220 	orr.w	r2, r2, #32
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e007      	b.n	8001726 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0220 	bic.w	r2, r2, #32
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7edb      	ldrb	r3, [r3, #27]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0210 	bic.w	r2, r2, #16
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e007      	b.n	8001750 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0210 	orr.w	r2, r2, #16
 800174e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7f1b      	ldrb	r3, [r3, #28]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0208 	orr.w	r2, r2, #8
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e007      	b.n	800177a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0208 	bic.w	r2, r2, #8
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7f5b      	ldrb	r3, [r3, #29]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0204 	orr.w	r2, r2, #4
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e007      	b.n	80017a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0204 	bic.w	r2, r2, #4
 80017a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	ea42 0103 	orr.w	r1, r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b087      	sub	sp, #28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d003      	beq.n	8001808 <HAL_CAN_ConfigFilter+0x26>
 8001800:	7cfb      	ldrb	r3, [r7, #19]
 8001802:	2b02      	cmp	r3, #2
 8001804:	f040 80aa 	bne.w	800195c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800180e:	f043 0201 	orr.w	r2, r3, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	2201      	movs	r2, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d123      	bne.n	800188a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	401a      	ands	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001864:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3248      	adds	r2, #72	@ 0x48
 800186a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800187e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001880:	6979      	ldr	r1, [r7, #20]
 8001882:	3348      	adds	r3, #72	@ 0x48
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d122      	bne.n	80018d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	431a      	orrs	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3248      	adds	r2, #72	@ 0x48
 80018b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	3348      	adds	r3, #72	@ 0x48
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d109      	bne.n	80018f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80018f2:	e007      	b.n	8001904 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800191e:	e007      	b.n	8001930 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d107      	bne.n	8001948 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800194e:	f023 0201 	bic.w	r2, r3, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e006      	b.n	800196a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d12e      	bne.n	80019e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019a2:	f7ff fe17 	bl	80015d4 <HAL_GetTick>
 80019a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019a8:	e012      	b.n	80019d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019aa:	f7ff fe13 	bl	80015d4 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d90b      	bls.n	80019d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2205      	movs	r2, #5
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e012      	b.n	80019f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1e5      	bne.n	80019aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e006      	b.n	80019f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
  }
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b089      	sub	sp, #36	@ 0x24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a12:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a1c:	7ffb      	ldrb	r3, [r7, #31]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d003      	beq.n	8001a2a <HAL_CAN_AddTxMessage+0x2c>
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	f040 80ad 	bne.w	8001b84 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10a      	bne.n	8001a4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8095 	beq.w	8001b74 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	0e1b      	lsrs	r3, r3, #24
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a54:	2201      	movs	r2, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	6809      	ldr	r1, [r1, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	440b      	add	r3, r1
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e00f      	b.n	8001aa2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3318      	adds	r3, #24
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	440b      	add	r3, r1
 8001aa0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3318      	adds	r3, #24
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	7d1b      	ldrb	r3, [r3, #20]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d111      	bne.n	8001ae2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3318      	adds	r3, #24
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	3304      	adds	r3, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3318      	adds	r3, #24
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	440b      	add	r3, r1
 8001ade:	3304      	adds	r3, #4
 8001ae0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	061a      	lsls	r2, r3, #24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3306      	adds	r3, #6
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3305      	adds	r3, #5
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	4313      	orrs	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	3204      	adds	r2, #4
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	4610      	mov	r0, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6811      	ldr	r1, [r2, #0]
 8001b0a:	ea43 0200 	orr.w	r2, r3, r0
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	440b      	add	r3, r1
 8001b14:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	061a      	lsls	r2, r3, #24
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3302      	adds	r3, #2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4313      	orrs	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	ea43 0200 	orr.w	r2, r3, r0
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3318      	adds	r3, #24
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	6811      	ldr	r1, [r2, #0]
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3318      	adds	r3, #24
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	440b      	add	r3, r1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e00e      	b.n	8001b92 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e006      	b.n	8001b92 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b087      	sub	sp, #28
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d003      	beq.n	8001bc2 <HAL_CAN_GetRxMessage+0x24>
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	f040 8103 	bne.w	8001dc8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10e      	bne.n	8001be6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0f7      	b.n	8001dd6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0e8      	b.n	8001dd6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	331b      	adds	r3, #27
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0204 	and.w	r2, r3, #4
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	331b      	adds	r3, #27
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0d5b      	lsrs	r3, r3, #21
 8001c32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	331b      	adds	r3, #27
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	331b      	adds	r3, #27
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4413      	add	r3, r2
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0202 	and.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	331b      	adds	r3, #27
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2208      	movs	r2, #8
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	e00b      	b.n	8001ca2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	331b      	adds	r3, #27
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 020f 	and.w	r2, r3, #15
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	331b      	adds	r3, #27
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4413      	add	r3, r2
 8001cae:	3304      	adds	r3, #4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	331b      	adds	r3, #27
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0a1a      	lsrs	r2, r3, #8
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0c1a      	lsrs	r2, r3, #16
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3302      	adds	r3, #2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0e1a      	lsrs	r2, r3, #24
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3303      	adds	r3, #3
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0a1a      	lsrs	r2, r3, #8
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3305      	adds	r3, #5
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0c1a      	lsrs	r2, r3, #16
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3306      	adds	r3, #6
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0e1a      	lsrs	r2, r3, #24
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3307      	adds	r3, #7
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d108      	bne.n	8001db4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0220 	orr.w	r2, r2, #32
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	e007      	b.n	8001dc4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0220 	orr.w	r2, r2, #32
 8001dc2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e006      	b.n	8001dd6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
  }
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001df8:	7afb      	ldrb	r3, [r7, #11]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d002      	beq.n	8001e04 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d10f      	bne.n	8001e24 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e005      	b.n	8001e24 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001e24:	68fb      	ldr	r3, [r7, #12]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b08a      	sub	sp, #40	@ 0x28
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d07c      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d023      	beq.n	8001eca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f983 	bl	80021a0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e9a:	e016      	b.n	8001eca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	e00c      	b.n	8001eca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec2:	e002      	b.n	8001eca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f989 	bl	80021dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d024      	beq.n	8001f1e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001edc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f963 	bl	80021b4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001eee:	e016      	b.n	8001f1e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f02:	e00c      	b.n	8001f1e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f16:	e002      	b.n	8001f1e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f969 	bl	80021f0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d024      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f943 	bl	80021c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f42:	e016      	b.n	8001f72 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f56:	e00c      	b.n	8001f72 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d004      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6a:	e002      	b.n	8001f72 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f949 	bl	8002204 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00c      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2210      	movs	r2, #16
 8001f94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00b      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2208      	movs	r2, #8
 8001fb0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f93a 	bl	800222c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f921 	bl	8002218 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2208      	movs	r2, #8
 8002014:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f91c 	bl	8002254 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f903 	bl	8002240 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00b      	beq.n	800205c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2210      	movs	r2, #16
 8002054:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f906 	bl	8002268 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2208      	movs	r2, #8
 8002076:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8ff 	bl	800227c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d07b      	beq.n	8002180 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d072      	beq.n	8002178 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d043      	beq.n	8002178 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03e      	beq.n	8002178 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002100:	2b60      	cmp	r3, #96	@ 0x60
 8002102:	d02b      	beq.n	800215c <HAL_CAN_IRQHandler+0x32a>
 8002104:	2b60      	cmp	r3, #96	@ 0x60
 8002106:	d82e      	bhi.n	8002166 <HAL_CAN_IRQHandler+0x334>
 8002108:	2b50      	cmp	r3, #80	@ 0x50
 800210a:	d022      	beq.n	8002152 <HAL_CAN_IRQHandler+0x320>
 800210c:	2b50      	cmp	r3, #80	@ 0x50
 800210e:	d82a      	bhi.n	8002166 <HAL_CAN_IRQHandler+0x334>
 8002110:	2b40      	cmp	r3, #64	@ 0x40
 8002112:	d019      	beq.n	8002148 <HAL_CAN_IRQHandler+0x316>
 8002114:	2b40      	cmp	r3, #64	@ 0x40
 8002116:	d826      	bhi.n	8002166 <HAL_CAN_IRQHandler+0x334>
 8002118:	2b30      	cmp	r3, #48	@ 0x30
 800211a:	d010      	beq.n	800213e <HAL_CAN_IRQHandler+0x30c>
 800211c:	2b30      	cmp	r3, #48	@ 0x30
 800211e:	d822      	bhi.n	8002166 <HAL_CAN_IRQHandler+0x334>
 8002120:	2b10      	cmp	r3, #16
 8002122:	d002      	beq.n	800212a <HAL_CAN_IRQHandler+0x2f8>
 8002124:	2b20      	cmp	r3, #32
 8002126:	d005      	beq.n	8002134 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002128:	e01d      	b.n	8002166 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002132:	e019      	b.n	8002168 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800213c:	e014      	b.n	8002168 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f043 0320 	orr.w	r3, r3, #32
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002146:	e00f      	b.n	8002168 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002150:	e00a      	b.n	8002168 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800215a:	e005      	b.n	8002168 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002164:	e000      	b.n	8002168 <HAL_CAN_IRQHandler+0x336>
            break;
 8002166:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002176:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2204      	movs	r2, #4
 800217e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f87c 	bl	8002290 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	@ 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0b      	blt.n	8002332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	@ (8002340 <__NVIC_EnableIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	@ (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	@ (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	@ 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	@ 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002424:	f7ff ff8e 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff29 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246c:	f7ff ff3e 	bl	80022ec <__NVIC_GetPriorityGrouping>
 8002470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff8e 	bl	8002398 <NVIC_EncodePriority>
 800247c:	4602      	mov	r2, r0
 800247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff5d 	bl	8002344 <__NVIC_SetPriority>
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff31 	bl	8002308 <__NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffa2 	bl	8002400 <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d6:	e14e      	b.n	8002776 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2101      	movs	r1, #1
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8140 	beq.w	8002770 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d005      	beq.n	8002508 <HAL_GPIO_Init+0x40>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d130      	bne.n	800256a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253e:	2201      	movs	r2, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0201 	and.w	r2, r3, #1
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b03      	cmp	r3, #3
 8002574:	d017      	beq.n	80025a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d123      	bne.n	80025fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	6939      	ldr	r1, [r7, #16]
 80025f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0203 	and.w	r2, r3, #3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 809a 	beq.w	8002770 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263c:	4b55      	ldr	r3, [pc, #340]	@ (8002794 <HAL_GPIO_Init+0x2cc>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4a54      	ldr	r2, [pc, #336]	@ (8002794 <HAL_GPIO_Init+0x2cc>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6193      	str	r3, [r2, #24]
 8002648:	4b52      	ldr	r3, [pc, #328]	@ (8002794 <HAL_GPIO_Init+0x2cc>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002654:	4a50      	ldr	r2, [pc, #320]	@ (8002798 <HAL_GPIO_Init+0x2d0>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800267e:	d013      	beq.n	80026a8 <HAL_GPIO_Init+0x1e0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a46      	ldr	r2, [pc, #280]	@ (800279c <HAL_GPIO_Init+0x2d4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00d      	beq.n	80026a4 <HAL_GPIO_Init+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a45      	ldr	r2, [pc, #276]	@ (80027a0 <HAL_GPIO_Init+0x2d8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x1d8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a44      	ldr	r2, [pc, #272]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_GPIO_Init+0x1d4>
 8002698:	2303      	movs	r3, #3
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x1e2>
 800269c:	2305      	movs	r3, #5
 800269e:	e004      	b.n	80026aa <HAL_GPIO_Init+0x1e2>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_Init+0x1e2>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_Init+0x1e2>
 80026a8:	2300      	movs	r3, #0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4093      	lsls	r3, r2
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ba:	4937      	ldr	r1, [pc, #220]	@ (8002798 <HAL_GPIO_Init+0x2d0>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c8:	4b37      	ldr	r3, [pc, #220]	@ (80027a8 <HAL_GPIO_Init+0x2e0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ec:	4a2e      	ldr	r2, [pc, #184]	@ (80027a8 <HAL_GPIO_Init+0x2e0>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f2:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_GPIO_Init+0x2e0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002716:	4a24      	ldr	r2, [pc, #144]	@ (80027a8 <HAL_GPIO_Init+0x2e0>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800271c:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <HAL_GPIO_Init+0x2e0>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002740:	4a19      	ldr	r2, [pc, #100]	@ (80027a8 <HAL_GPIO_Init+0x2e0>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002746:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <HAL_GPIO_Init+0x2e0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800276a:	4a0f      	ldr	r2, [pc, #60]	@ (80027a8 <HAL_GPIO_Init+0x2e0>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	f47f aea9 	bne.w	80024d8 <HAL_GPIO_Init+0x10>
  }
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	48000400 	.word	0x48000400
 80027a0:	48000800 	.word	0x48000800
 80027a4:	48000c00 	.word	0x48000c00
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c8:	e002      	b.n	80027d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f000 bff4 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002806:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 816d 	beq.w	8002af2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002818:	4bb4      	ldr	r3, [pc, #720]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00c      	beq.n	800283e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002824:	4bb1      	ldr	r3, [pc, #708]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d157      	bne.n	80028e0 <HAL_RCC_OscConfig+0x104>
 8002830:	4bae      	ldr	r3, [pc, #696]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283c:	d150      	bne.n	80028e0 <HAL_RCC_OscConfig+0x104>
 800283e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002842:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002852:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b3f      	cmp	r3, #63	@ 0x3f
 800285e:	d802      	bhi.n	8002866 <HAL_RCC_OscConfig+0x8a>
 8002860:	4ba2      	ldr	r3, [pc, #648]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0xb6>
 8002866:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800286a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800287a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002882:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800288e:	4b97      	ldr	r3, [pc, #604]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002896:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800289a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800289e:	fa92 f2a2 	rbit	r2, r2
 80028a2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80028a6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0220 	orr.w	r2, r2, #32
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8114 	beq.w	8002af0 <HAL_RCC_OscConfig+0x314>
 80028c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 810b 	bne.w	8002af0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f000 bf85 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x124>
 80028f2:	4b7e      	ldr	r3, [pc, #504]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7d      	ldr	r2, [pc, #500]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e036      	b.n	800296e <HAL_RCC_OscConfig+0x192>
 8002900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002904:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x14e>
 8002910:	4b76      	ldr	r3, [pc, #472]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a75      	ldr	r2, [pc, #468]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b73      	ldr	r3, [pc, #460]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a72      	ldr	r2, [pc, #456]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	e021      	b.n	800296e <HAL_RCC_OscConfig+0x192>
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_OscConfig+0x17a>
 800293c:	4b6b      	ldr	r3, [pc, #428]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6a      	ldr	r2, [pc, #424]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002942:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b68      	ldr	r3, [pc, #416]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a67      	ldr	r2, [pc, #412]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 800294e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	e00b      	b.n	800296e <HAL_RCC_OscConfig+0x192>
 8002956:	4b65      	ldr	r3, [pc, #404]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a64      	ldr	r2, [pc, #400]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b62      	ldr	r3, [pc, #392]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a61      	ldr	r2, [pc, #388]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800296e:	4b5f      	ldr	r3, [pc, #380]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	f023 020f 	bic.w	r2, r3, #15
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	495a      	ldr	r1, [pc, #360]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002984:	4313      	orrs	r3, r2
 8002986:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d054      	beq.n	8002a42 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fe1c 	bl	80015d4 <HAL_GetTick>
 800299c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a2:	f7fe fe17 	bl	80015d4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d902      	bls.n	80029b8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	f000 bf19 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>
 80029b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029bc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80029cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80029d8:	d802      	bhi.n	80029e0 <HAL_RCC_OscConfig+0x204>
 80029da:	4b44      	ldr	r3, [pc, #272]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e015      	b.n	8002a0c <HAL_RCC_OscConfig+0x230>
 80029e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029e4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80029f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80029fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a08:	4b38      	ldr	r3, [pc, #224]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a10:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002a14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002a20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f042 0220 	orr.w	r2, r2, #32
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f002 021f 	and.w	r2, r2, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0b0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1c6>
 8002a40:	e057      	b.n	8002af2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe fdc7 	bl	80015d4 <HAL_GetTick>
 8002a46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fdc2 	bl	80015d4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	@ 0x64
 8002a5a:	d902      	bls.n	8002a62 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f000 bec4 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>
 8002a62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a66:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002a76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a82:	d802      	bhi.n	8002a8a <HAL_RCC_OscConfig+0x2ae>
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x2da>
 8002a8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a8e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002a9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002aa6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <HAL_RCC_OscConfig+0x310>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aba:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002abe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002ac2:	fa92 f2a2 	rbit	r2, r2
 8002ac6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002aca:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f002 021f 	and.w	r2, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1b0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x270>
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_OscConfig+0x316>
 8002aec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 816c 	beq.w	8002de0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b08:	4bcc      	ldr	r3, [pc, #816]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b14:	4bc9      	ldr	r3, [pc, #804]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d16d      	bne.n	8002bfc <HAL_RCC_OscConfig+0x420>
 8002b20:	4bc6      	ldr	r3, [pc, #792]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d167      	bne.n	8002bfc <HAL_RCC_OscConfig+0x420>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002b3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b4a:	d802      	bhi.n	8002b52 <HAL_RCC_OscConfig+0x376>
 8002b4c:	4bbb      	ldr	r3, [pc, #748]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e013      	b.n	8002b7a <HAL_RCC_OscConfig+0x39e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002b64:	2302      	movs	r3, #2
 8002b66:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002b6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002b76:	4bb1      	ldr	r3, [pc, #708]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002b80:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002b84:	fa92 f2a2 	rbit	r2, r2
 8002b88:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002b8c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002b90:	fab2 f282 	clz	r2, r2
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	f042 0220 	orr.w	r2, r2, #32
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f002 021f 	and.w	r2, r2, #31
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x3e6>
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d002      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f000 be14 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	21f8      	movs	r1, #248	@ 0xf8
 8002bd8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002be0:	fa91 f1a1 	rbit	r1, r1
 8002be4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002be8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002bec:	fab1 f181 	clz	r1, r1
 8002bf0:	b2c9      	uxtb	r1, r1
 8002bf2:	408b      	lsls	r3, r1
 8002bf4:	4991      	ldr	r1, [pc, #580]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e0f1      	b.n	8002de0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8083 	beq.w	8002d14 <HAL_RCC_OscConfig+0x538>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002c20:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	461a      	mov	r2, r3
 8002c36:	2301      	movs	r3, #1
 8002c38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fccb 	bl	80015d4 <HAL_GetTick>
 8002c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe fcc6 	bl	80015d4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d902      	bls.n	8002c5a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	f000 bdc8 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002c6c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c78:	d802      	bhi.n	8002c80 <HAL_RCC_OscConfig+0x4a4>
 8002c7a:	4b70      	ldr	r3, [pc, #448]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	e013      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4cc>
 8002c80:	2302      	movs	r3, #2
 8002c82:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002c92:	2302      	movs	r3, #2
 8002c94:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002c98:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ca4:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002cae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002cb2:	fa92 f2a2 	rbit	r2, r2
 8002cb6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002cba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f042 0220 	orr.w	r2, r2, #32
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f002 021f 	and.w	r2, r2, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0b4      	beq.n	8002c44 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b58      	ldr	r3, [pc, #352]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	21f8      	movs	r1, #248	@ 0xf8
 8002cf0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002cf8:	fa91 f1a1 	rbit	r1, r1
 8002cfc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002d00:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002d04:	fab1 f181 	clz	r1, r1
 8002d08:	b2c9      	uxtb	r1, r1
 8002d0a:	408b      	lsls	r3, r1
 8002d0c:	494b      	ldr	r1, [pc, #300]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
 8002d12:	e065      	b.n	8002de0 <HAL_RCC_OscConfig+0x604>
 8002d14:	2301      	movs	r3, #1
 8002d16:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fc48 	bl	80015d4 <HAL_GetTick>
 8002d44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fc43 	bl	80015d4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d902      	bls.n	8002d60 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	f000 bd45 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>
 8002d60:	2302      	movs	r3, #2
 8002d62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d7e:	d802      	bhi.n	8002d86 <HAL_RCC_OscConfig+0x5aa>
 8002d80:	4b2e      	ldr	r3, [pc, #184]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e013      	b.n	8002dae <HAL_RCC_OscConfig+0x5d2>
 8002d86:	2302      	movs	r3, #2
 8002d88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002d9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCC_OscConfig+0x660>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	2202      	movs	r2, #2
 8002db0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002db4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002db8:	fa92 f2a2 	rbit	r2, r2
 8002dbc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002dc0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002dc4:	fab2 f282 	clz	r2, r2
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f042 0220 	orr.w	r2, r2, #32
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f002 021f 	and.w	r2, r2, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1b4      	bne.n	8002d4a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 8115 	beq.w	8003020 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d07e      	beq.n	8002f04 <HAL_RCC_OscConfig+0x728>
 8002e06:	2301      	movs	r3, #1
 8002e08:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_RCC_OscConfig+0x664>)
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe fbd0 	bl	80015d4 <HAL_GetTick>
 8002e34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e38:	e00f      	b.n	8002e5a <HAL_RCC_OscConfig+0x67e>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe fbc6 	bl	80015d4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d902      	bls.n	8002e5a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	f000 bcc8 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e74:	2202      	movs	r2, #2
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	fa93 f2a3 	rbit	r2, r3
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e98:	2202      	movs	r2, #2
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	fa93 f2a3 	rbit	r2, r3
 8002eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002eb2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 8002eb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	6019      	str	r1, [r3, #0]
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f1a3 	rbit	r1, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002eda:	6019      	str	r1, [r3, #0]
  return result;
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0a0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x668>
 8002f02:	e08d      	b.n	8003020 <HAL_RCC_OscConfig+0x844>
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f26:	601a      	str	r2, [r3, #0]
  return result;
 8002f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b90      	ldr	r3, [pc, #576]	@ (800317c <HAL_RCC_OscConfig+0x9a0>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	461a      	mov	r2, r3
 8002f42:	2300      	movs	r3, #0
 8002f44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fe fb45 	bl	80015d4 <HAL_GetTick>
 8002f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fe fb40 	bl	80015d4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d902      	bls.n	8002f66 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	f000 bc42 	b.w	80037ea <HAL_RCC_OscConfig+0x100e>
 8002f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f6e:	2202      	movs	r2, #2
 8002f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fa93 f2a3 	rbit	r2, r3
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f92:	2202      	movs	r2, #2
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	fa93 f2a3 	rbit	r2, r3
 8002fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	fa93 f2a3 	rbit	r2, r3
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002fd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd2:	4b69      	ldr	r3, [pc, #420]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 8002fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002fde:	2102      	movs	r1, #2
 8002fe0:	6019      	str	r1, [r3, #0]
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f1a3 	rbit	r1, r3
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ff8:	6019      	str	r1, [r3, #0]
  return result;
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	2101      	movs	r1, #1
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d197      	bne.n	8002f50 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003024:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 819e 	beq.w	8003372 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303c:	4b4e      	ldr	r3, [pc, #312]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d116      	bne.n	8003076 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003048:	4b4b      	ldr	r3, [pc, #300]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4a4a      	ldr	r2, [pc, #296]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 800304e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003052:	61d3      	str	r3, [r2, #28]
 8003054:	4b48      	ldr	r3, [pc, #288]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800305c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003060:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800306e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b42      	ldr	r3, [pc, #264]	@ (8003180 <HAL_RCC_OscConfig+0x9a4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11a      	bne.n	80030b8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	4b3f      	ldr	r3, [pc, #252]	@ (8003180 <HAL_RCC_OscConfig+0x9a4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a3e      	ldr	r2, [pc, #248]	@ (8003180 <HAL_RCC_OscConfig+0x9a4>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fe faa1 	bl	80015d4 <HAL_GetTick>
 8003092:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003096:	e009      	b.n	80030ac <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003098:	f7fe fa9c 	bl	80015d4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b64      	cmp	r3, #100	@ 0x64
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e39e      	b.n	80037ea <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <HAL_RCC_OscConfig+0x9a4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x8fa>
 80030c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	e035      	b.n	8003142 <HAL_RCC_OscConfig+0x966>
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x924>
 80030e6:	4b24      	ldr	r3, [pc, #144]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a23      	ldr	r2, [pc, #140]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6213      	str	r3, [r2, #32]
 80030f2:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4a20      	ldr	r2, [pc, #128]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	6213      	str	r3, [r2, #32]
 80030fe:	e020      	b.n	8003142 <HAL_RCC_OscConfig+0x966>
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d10c      	bne.n	800312a <HAL_RCC_OscConfig+0x94e>
 8003110:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a18      	ldr	r2, [pc, #96]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	4b16      	ldr	r3, [pc, #88]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6213      	str	r3, [r2, #32]
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0x966>
 800312a:	4b13      	ldr	r3, [pc, #76]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a12      	ldr	r2, [pc, #72]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6213      	str	r3, [r2, #32]
 8003136:	4b10      	ldr	r3, [pc, #64]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a0f      	ldr	r2, [pc, #60]	@ (8003178 <HAL_RCC_OscConfig+0x99c>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8087 	beq.w	8003262 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003154:	f7fe fa3e 	bl	80015d4 <HAL_GetTick>
 8003158:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	e012      	b.n	8003184 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fe fa39 	bl	80015d4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d908      	bls.n	8003184 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e339      	b.n	80037ea <HAL_RCC_OscConfig+0x100e>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	10908120 	.word	0x10908120
 8003180:	40007000 	.word	0x40007000
 8003184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003188:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800318c:	2202      	movs	r2, #2
 800318e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80031b0:	2202      	movs	r2, #2
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80031ca:	601a      	str	r2, [r3, #0]
  return result;
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80031d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_RCC_OscConfig+0xa10>
 80031e6:	4b98      	ldr	r3, [pc, #608]	@ (8003448 <HAL_RCC_OscConfig+0xc6c>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	e013      	b.n	8003214 <HAL_RCC_OscConfig+0xa38>
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80031f4:	2202      	movs	r2, #2
 80031f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	4b8d      	ldr	r3, [pc, #564]	@ (8003448 <HAL_RCC_OscConfig+0xc6c>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003218:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800321c:	2102      	movs	r1, #2
 800321e:	6011      	str	r1, [r2, #0]
 8003220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003224:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	fa92 f1a2 	rbit	r1, r2
 800322e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003232:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003236:	6011      	str	r1, [r2, #0]
  return result;
 8003238:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800323c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	fab2 f282 	clz	r2, r2
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f002 021f 	and.w	r2, r2, #31
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	f43f af7f 	beq.w	800315e <HAL_RCC_OscConfig+0x982>
 8003260:	e07d      	b.n	800335e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe f9b7 	bl	80015d4 <HAL_GetTick>
 8003266:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe f9b2 	bl	80015d4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e2b2      	b.n	80037ea <HAL_RCC_OscConfig+0x100e>
 8003284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003288:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800328c:	2202      	movs	r2, #2
 800328e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80032b0:	2202      	movs	r2, #2
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	fa93 f2a3 	rbit	r2, r3
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80032ca:	601a      	str	r2, [r3, #0]
  return result;
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80032d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_RCC_OscConfig+0xb10>
 80032e6:	4b58      	ldr	r3, [pc, #352]	@ (8003448 <HAL_RCC_OscConfig+0xc6c>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	e013      	b.n	8003314 <HAL_RCC_OscConfig+0xb38>
 80032ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80032f4:	2202      	movs	r2, #2
 80032f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	fa93 f2a3 	rbit	r2, r3
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	4b4d      	ldr	r3, [pc, #308]	@ (8003448 <HAL_RCC_OscConfig+0xc6c>)
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003318:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800331c:	2102      	movs	r1, #2
 800331e:	6011      	str	r1, [r2, #0]
 8003320:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003324:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	fa92 f1a2 	rbit	r1, r2
 800332e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003332:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003336:	6011      	str	r1, [r2, #0]
  return result;
 8003338:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800333c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	fab2 f282 	clz	r2, r2
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f002 021f 	and.w	r2, r2, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f202 	lsl.w	r2, r1, r2
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d186      	bne.n	800326c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800335e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <HAL_RCC_OscConfig+0xc6c>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4a37      	ldr	r2, [pc, #220]	@ (8003448 <HAL_RCC_OscConfig+0xc6c>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003370:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8232 	beq.w	80037e8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003384:	4b30      	ldr	r3, [pc, #192]	@ (8003448 <HAL_RCC_OscConfig+0xc6c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	f000 8201 	beq.w	8003794 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003396:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	f040 8157 	bne.w	8003652 <HAL_RCC_OscConfig+0xe76>
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80033ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80033c8:	601a      	str	r2, [r3, #0]
  return result;
 80033ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80033d2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	461a      	mov	r2, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe f8f3 	bl	80015d4 <HAL_GetTick>
 80033ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f2:	e009      	b.n	8003408 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fe f8ee 	bl	80015d4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e1f0      	b.n	80037ea <HAL_RCC_OscConfig+0x100e>
 8003408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003410:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	fa93 f2a3 	rbit	r2, r3
 8003424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003428:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800342c:	601a      	str	r2, [r3, #0]
  return result;
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003436:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003440:	d804      	bhi.n	800344c <HAL_RCC_OscConfig+0xc70>
 8003442:	4b01      	ldr	r3, [pc, #4]	@ (8003448 <HAL_RCC_OscConfig+0xc6c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e029      	b.n	800349c <HAL_RCC_OscConfig+0xcc0>
 8003448:	40021000 	.word	0x40021000
 800344c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003450:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003454:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003476:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800347a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003484:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	fa93 f2a3 	rbit	r2, r3
 800348e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003492:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	4bc3      	ldr	r3, [pc, #780]	@ (80037a8 <HAL_RCC_OscConfig+0xfcc>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80034a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034a8:	6011      	str	r1, [r2, #0]
 80034aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	fa92 f1a2 	rbit	r1, r2
 80034b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80034c0:	6011      	str	r1, [r2, #0]
  return result;
 80034c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034c6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	fab2 f282 	clz	r2, r2
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f042 0220 	orr.w	r2, r2, #32
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	f002 021f 	and.w	r2, r2, #31
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f202 	lsl.w	r2, r1, r2
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d185      	bne.n	80033f4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e8:	4baf      	ldr	r3, [pc, #700]	@ (80037a8 <HAL_RCC_OscConfig+0xfcc>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80034fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003500:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	430b      	orrs	r3, r1
 800350a:	49a7      	ldr	r1, [pc, #668]	@ (80037a8 <HAL_RCC_OscConfig+0xfcc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003518:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800351c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003534:	601a      	str	r2, [r3, #0]
  return result;
 8003536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800353e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800354a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	461a      	mov	r2, r3
 8003552:	2301      	movs	r3, #1
 8003554:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe f83d 	bl	80015d4 <HAL_GetTick>
 800355a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800355e:	e009      	b.n	8003574 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe f838 	bl	80015d4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e13a      	b.n	80037ea <HAL_RCC_OscConfig+0x100e>
 8003574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003578:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800357c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003586:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f2a3 	rbit	r2, r3
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003598:	601a      	str	r2, [r3, #0]
  return result;
 800359a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80035a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80035ac:	d802      	bhi.n	80035b4 <HAL_RCC_OscConfig+0xdd8>
 80035ae:	4b7e      	ldr	r3, [pc, #504]	@ (80037a8 <HAL_RCC_OscConfig+0xfcc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	e027      	b.n	8003604 <HAL_RCC_OscConfig+0xe28>
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80035bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fa93 f2a3 	rbit	r2, r3
 80035d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80035e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	4b69      	ldr	r3, [pc, #420]	@ (80037a8 <HAL_RCC_OscConfig+0xfcc>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003608:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800360c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003610:	6011      	str	r1, [r2, #0]
 8003612:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003616:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	fa92 f1a2 	rbit	r1, r2
 8003620:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003624:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003628:	6011      	str	r1, [r2, #0]
  return result;
 800362a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800362e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	fab2 f282 	clz	r2, r2
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f002 021f 	and.w	r2, r2, #31
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d087      	beq.n	8003560 <HAL_RCC_OscConfig+0xd84>
 8003650:	e0ca      	b.n	80037e8 <HAL_RCC_OscConfig+0x100c>
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800365a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800365e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	fa93 f2a3 	rbit	r2, r3
 800366e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003672:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003676:	601a      	str	r2, [r3, #0]
  return result;
 8003678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003680:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800368c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	461a      	mov	r2, r3
 8003694:	2300      	movs	r3, #0
 8003696:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fd ff9c 	bl	80015d4 <HAL_GetTick>
 800369c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a0:	e009      	b.n	80036b6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fd ff97 	bl	80015d4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e099      	b.n	80037ea <HAL_RCC_OscConfig+0x100e>
 80036b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80036be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fa93 f2a3 	rbit	r2, r3
 80036d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80036da:	601a      	str	r2, [r3, #0]
  return result;
 80036dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80036e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80036ee:	d802      	bhi.n	80036f6 <HAL_RCC_OscConfig+0xf1a>
 80036f0:	4b2d      	ldr	r3, [pc, #180]	@ (80037a8 <HAL_RCC_OscConfig+0xfcc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	e027      	b.n	8003746 <HAL_RCC_OscConfig+0xf6a>
 80036f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80036fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003716:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003720:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003724:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	fa93 f2a3 	rbit	r2, r3
 8003738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <HAL_RCC_OscConfig+0xfcc>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800374a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800374e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003752:	6011      	str	r1, [r2, #0]
 8003754:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003758:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	fa92 f1a2 	rbit	r1, r2
 8003762:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003766:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800376a:	6011      	str	r1, [r2, #0]
  return result;
 800376c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003770:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f002 021f 	and.w	r2, r2, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d187      	bne.n	80036a2 <HAL_RCC_OscConfig+0xec6>
 8003792:	e029      	b.n	80037e8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d103      	bne.n	80037ac <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e020      	b.n	80037ea <HAL_RCC_OscConfig+0x100e>
 80037a8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_RCC_OscConfig+0x1018>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80037b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80037d0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000

080037f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b09e      	sub	sp, #120	@ 0x78
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e154      	b.n	8003aba <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b89      	ldr	r3, [pc, #548]	@ (8003a38 <HAL_RCC_ClockConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d910      	bls.n	8003840 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b86      	ldr	r3, [pc, #536]	@ (8003a38 <HAL_RCC_ClockConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 0207 	bic.w	r2, r3, #7
 8003826:	4984      	ldr	r1, [pc, #528]	@ (8003a38 <HAL_RCC_ClockConfig+0x240>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b82      	ldr	r3, [pc, #520]	@ (8003a38 <HAL_RCC_ClockConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e13c      	b.n	8003aba <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b7b      	ldr	r3, [pc, #492]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4978      	ldr	r1, [pc, #480]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80cd 	beq.w	8003a06 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d137      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xec>
 8003874:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003878:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003884:	fab3 f383 	clz	r3, r3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b3f      	cmp	r3, #63	@ 0x3f
 800388c:	d802      	bhi.n	8003894 <HAL_RCC_ClockConfig+0x9c>
 800388e:	4b6b      	ldr	r3, [pc, #428]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e00f      	b.n	80038b4 <HAL_RCC_ClockConfig+0xbc>
 8003894:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003898:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80038a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80038a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b0:	4b62      	ldr	r3, [pc, #392]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038bc:	fa92 f2a2 	rbit	r2, r2
 80038c0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80038c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038c4:	fab2 f282 	clz	r2, r2
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f002 021f 	and.w	r2, r2, #31
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d171      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0ea      	b.n	8003aba <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d137      	bne.n	800395c <HAL_RCC_ClockConfig+0x164>
 80038ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b3f      	cmp	r3, #63	@ 0x3f
 8003904:	d802      	bhi.n	800390c <HAL_RCC_ClockConfig+0x114>
 8003906:	4b4d      	ldr	r3, [pc, #308]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e00f      	b.n	800392c <HAL_RCC_ClockConfig+0x134>
 800390c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003910:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	647b      	str	r3, [r7, #68]	@ 0x44
 800391a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800391e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003928:	4b44      	ldr	r3, [pc, #272]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003930:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003932:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003934:	fa92 f2a2 	rbit	r2, r2
 8003938:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800393a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800393c:	fab2 f282 	clz	r2, r2
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f042 0220 	orr.w	r2, r2, #32
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f002 021f 	and.w	r2, r2, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f202 	lsl.w	r2, r1, r2
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d135      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0ae      	b.n	8003aba <HAL_RCC_ClockConfig+0x2c2>
 800395c:	2302      	movs	r3, #2
 800395e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b3f      	cmp	r3, #63	@ 0x3f
 8003972:	d802      	bhi.n	800397a <HAL_RCC_ClockConfig+0x182>
 8003974:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	e00d      	b.n	8003996 <HAL_RCC_ClockConfig+0x19e>
 800397a:	2302      	movs	r3, #2
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
 8003986:	2302      	movs	r3, #2
 8003988:	623b      	str	r3, [r7, #32]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	4b2a      	ldr	r3, [pc, #168]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	2202      	movs	r2, #2
 8003998:	61ba      	str	r2, [r7, #24]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	fa92 f2a2 	rbit	r2, r2
 80039a0:	617a      	str	r2, [r7, #20]
  return result;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f042 0220 	orr.w	r2, r2, #32
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f002 021f 	and.w	r2, r2, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e07a      	b.n	8003aba <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f023 0203 	bic.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	491a      	ldr	r1, [pc, #104]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d6:	f7fd fdfd 	bl	80015d4 <HAL_GetTick>
 80039da:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039dc:	e00a      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039de:	f7fd fdf9 	bl	80015d4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e062      	b.n	8003aba <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f4:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_RCC_ClockConfig+0x244>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 020c 	and.w	r2, r3, #12
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d1eb      	bne.n	80039de <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a06:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <HAL_RCC_ClockConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d215      	bcs.n	8003a40 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a14:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <HAL_RCC_ClockConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 0207 	bic.w	r2, r3, #7
 8003a1c:	4906      	ldr	r1, [pc, #24]	@ (8003a38 <HAL_RCC_ClockConfig+0x240>)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <HAL_RCC_ClockConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d006      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e041      	b.n	8003aba <HAL_RCC_ClockConfig+0x2c2>
 8003a36:	bf00      	nop
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <HAL_RCC_ClockConfig+0x2cc>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	491a      	ldr	r1, [pc, #104]	@ (8003ac4 <HAL_RCC_ClockConfig+0x2cc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a6a:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <HAL_RCC_ClockConfig+0x2cc>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4912      	ldr	r1, [pc, #72]	@ (8003ac4 <HAL_RCC_ClockConfig+0x2cc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a7e:	f000 f829 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003a82:	4601      	mov	r1, r0
 8003a84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <HAL_RCC_ClockConfig+0x2cc>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a8c:	22f0      	movs	r2, #240	@ 0xf0
 8003a8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	fa92 f2a2 	rbit	r2, r2
 8003a96:	60fa      	str	r2, [r7, #12]
  return result;
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	fab2 f282 	clz	r2, r2
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	40d3      	lsrs	r3, r2
 8003aa2:	4a09      	ldr	r2, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x2d0>)
 8003aa4:	5cd3      	ldrb	r3, [r2, r3]
 8003aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8003aaa:	4a08      	ldr	r2, [pc, #32]	@ (8003acc <HAL_RCC_ClockConfig+0x2d4>)
 8003aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003aae:	4b08      	ldr	r3, [pc, #32]	@ (8003ad0 <HAL_RCC_ClockConfig+0x2d8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fd4a 	bl	800154c <HAL_InitTick>
  
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3778      	adds	r7, #120	@ 0x78
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	080098f8 	.word	0x080098f8
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	20000004 	.word	0x20000004

08003ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003aee:	4b1e      	ldr	r3, [pc, #120]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d002      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x30>
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_GetSysClockFreq+0x36>
 8003b02:	e026      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b06:	613b      	str	r3, [r7, #16]
      break;
 8003b08:	e026      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	0c9b      	lsrs	r3, r3, #18
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b14:	5cd3      	ldrb	r3, [r2, r3]
 8003b16:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003b18:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	4a14      	ldr	r2, [pc, #80]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b30:	4a0e      	ldr	r2, [pc, #56]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e004      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a0c      	ldr	r2, [pc, #48]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	613b      	str	r3, [r7, #16]
      break;
 8003b50:	e002      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b52:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b54:	613b      	str	r3, [r7, #16]
      break;
 8003b56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b58:	693b      	ldr	r3, [r7, #16]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	007a1200 	.word	0x007a1200
 8003b70:	08009910 	.word	0x08009910
 8003b74:	08009920 	.word	0x08009920
 8003b78:	003d0900 	.word	0x003d0900

08003b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b80:	4b03      	ldr	r3, [pc, #12]	@ (8003b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000000 	.word	0x20000000

08003b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b9a:	f7ff ffef 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ba8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003bac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	fa92 f2a2 	rbit	r2, r2
 8003bb4:	603a      	str	r2, [r7, #0]
  return result;
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	fab2 f282 	clz	r2, r2
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	40d3      	lsrs	r3, r2
 8003bc0:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08009908 	.word	0x08009908

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bde:	f7ff ffcd 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003be2:	4601      	mov	r1, r0
 8003be4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003bec:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003bf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	fa92 f2a2 	rbit	r2, r2
 8003bf8:	603a      	str	r2, [r7, #0]
  return result;
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	fab2 f282 	clz	r2, r2
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	40d3      	lsrs	r3, r2
 8003c04:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c06:	5cd3      	ldrb	r3, [r2, r3]
 8003c08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	08009908 	.word	0x08009908

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e040      	b.n	8003cb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd faf0 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	@ 0x24
 8003c48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fab0 	bl	80041c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f977 	bl	8003f5c <UART_SetConfig>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e01b      	b.n	8003cb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fb2f 	bl	800430c <UART_CheckIdleState>
 8003cae:	4603      	mov	r3, r0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	@ 0x28
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d177      	bne.n	8003dc0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_UART_Transmit+0x24>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e070      	b.n	8003dc2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2221      	movs	r2, #33	@ 0x21
 8003cec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fc71 	bl	80015d4 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0c:	d108      	bne.n	8003d20 <HAL_UART_Transmit+0x68>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e003      	b.n	8003d28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d28:	e02f      	b.n	8003d8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	@ 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fb91 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e03b      	b.n	8003dc2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	881a      	ldrh	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3302      	adds	r3, #2
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e007      	b.n	8003d78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1c9      	bne.n	8003d2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2140      	movs	r1, #64	@ 0x40
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fb5b 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e005      	b.n	8003dc2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b08a      	sub	sp, #40	@ 0x28
 8003dce:	af02      	add	r7, sp, #8
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	f040 80b6 	bne.w	8003f52 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_UART_Receive+0x28>
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0ae      	b.n	8003f54 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2222      	movs	r2, #34	@ 0x22
 8003e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0c:	f7fd fbe2 	bl	80015d4 <HAL_GetTick>
 8003e10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	88fa      	ldrh	r2, [r7, #6]
 8003e16:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e2a:	d10e      	bne.n	8003e4a <HAL_UART_Receive+0x80>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <HAL_UART_Receive+0x76>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e3e:	e02d      	b.n	8003e9c <HAL_UART_Receive+0xd2>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	22ff      	movs	r2, #255	@ 0xff
 8003e44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e48:	e028      	b.n	8003e9c <HAL_UART_Receive+0xd2>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <HAL_UART_Receive+0xa4>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <HAL_UART_Receive+0x9a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22ff      	movs	r2, #255	@ 0xff
 8003e5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e62:	e01b      	b.n	8003e9c <HAL_UART_Receive+0xd2>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	227f      	movs	r2, #127	@ 0x7f
 8003e68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e6c:	e016      	b.n	8003e9c <HAL_UART_Receive+0xd2>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e76:	d10d      	bne.n	8003e94 <HAL_UART_Receive+0xca>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <HAL_UART_Receive+0xc0>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	227f      	movs	r2, #127	@ 0x7f
 8003e84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e88:	e008      	b.n	8003e9c <HAL_UART_Receive+0xd2>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	223f      	movs	r2, #63	@ 0x3f
 8003e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e92:	e003      	b.n	8003e9c <HAL_UART_Receive+0xd2>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ea2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eac:	d108      	bne.n	8003ec0 <HAL_UART_Receive+0xf6>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e003      	b.n	8003ec8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ec8:	e037      	b.n	8003f3a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2120      	movs	r1, #32
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fac1 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e033      	b.n	8003f54 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10c      	bne.n	8003f0c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	8a7b      	ldrh	r3, [r7, #18]
 8003efc:	4013      	ands	r3, r2
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	3302      	adds	r3, #2
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	e00d      	b.n	8003f28 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	8a7b      	ldrh	r3, [r7, #18]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3301      	adds	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1c1      	bne.n	8003eca <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
  }
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b8a      	ldr	r3, [pc, #552]	@ (80041b0 <UART_SetConfig+0x254>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a78      	ldr	r2, [pc, #480]	@ (80041b4 <UART_SetConfig+0x258>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d120      	bne.n	800401a <UART_SetConfig+0xbe>
 8003fd8:	4b77      	ldr	r3, [pc, #476]	@ (80041b8 <UART_SetConfig+0x25c>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d817      	bhi.n	8004014 <UART_SetConfig+0xb8>
 8003fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <UART_SetConfig+0x90>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	08004009 	.word	0x08004009
 8003ff4:	0800400f 	.word	0x0800400f
 8003ff8:	08004003 	.word	0x08004003
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e01d      	b.n	800403e <UART_SetConfig+0xe2>
 8004002:	2302      	movs	r3, #2
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e01a      	b.n	800403e <UART_SetConfig+0xe2>
 8004008:	2304      	movs	r3, #4
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e017      	b.n	800403e <UART_SetConfig+0xe2>
 800400e:	2308      	movs	r3, #8
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e014      	b.n	800403e <UART_SetConfig+0xe2>
 8004014:	2310      	movs	r3, #16
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e011      	b.n	800403e <UART_SetConfig+0xe2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a67      	ldr	r2, [pc, #412]	@ (80041bc <UART_SetConfig+0x260>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d102      	bne.n	800402a <UART_SetConfig+0xce>
 8004024:	2300      	movs	r3, #0
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e009      	b.n	800403e <UART_SetConfig+0xe2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a64      	ldr	r2, [pc, #400]	@ (80041c0 <UART_SetConfig+0x264>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d102      	bne.n	800403a <UART_SetConfig+0xde>
 8004034:	2300      	movs	r3, #0
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e001      	b.n	800403e <UART_SetConfig+0xe2>
 800403a:	2310      	movs	r3, #16
 800403c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004046:	d15a      	bne.n	80040fe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004048:	7ffb      	ldrb	r3, [r7, #31]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d827      	bhi.n	800409e <UART_SetConfig+0x142>
 800404e:	a201      	add	r2, pc, #4	@ (adr r2, 8004054 <UART_SetConfig+0xf8>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004079 	.word	0x08004079
 8004058:	08004081 	.word	0x08004081
 800405c:	08004089 	.word	0x08004089
 8004060:	0800409f 	.word	0x0800409f
 8004064:	0800408f 	.word	0x0800408f
 8004068:	0800409f 	.word	0x0800409f
 800406c:	0800409f 	.word	0x0800409f
 8004070:	0800409f 	.word	0x0800409f
 8004074:	08004097 	.word	0x08004097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004078:	f7ff fd8c 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 800407c:	61b8      	str	r0, [r7, #24]
        break;
 800407e:	e013      	b.n	80040a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004080:	f7ff fdaa 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8004084:	61b8      	str	r0, [r7, #24]
        break;
 8004086:	e00f      	b.n	80040a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004088:	4b4e      	ldr	r3, [pc, #312]	@ (80041c4 <UART_SetConfig+0x268>)
 800408a:	61bb      	str	r3, [r7, #24]
        break;
 800408c:	e00c      	b.n	80040a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408e:	f7ff fd21 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004092:	61b8      	str	r0, [r7, #24]
        break;
 8004094:	e008      	b.n	80040a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800409a:	61bb      	str	r3, [r7, #24]
        break;
 800409c:	e004      	b.n	80040a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	77bb      	strb	r3, [r7, #30]
        break;
 80040a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d074      	beq.n	8004198 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	005a      	lsls	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b0f      	cmp	r3, #15
 80040c8:	d916      	bls.n	80040f8 <UART_SetConfig+0x19c>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d0:	d212      	bcs.n	80040f8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f023 030f 	bic.w	r3, r3, #15
 80040da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	89fb      	ldrh	r3, [r7, #14]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	89fa      	ldrh	r2, [r7, #14]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	e04f      	b.n	8004198 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	77bb      	strb	r3, [r7, #30]
 80040fc:	e04c      	b.n	8004198 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040fe:	7ffb      	ldrb	r3, [r7, #31]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d828      	bhi.n	8004156 <UART_SetConfig+0x1fa>
 8004104:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <UART_SetConfig+0x1b0>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004131 	.word	0x08004131
 8004110:	08004139 	.word	0x08004139
 8004114:	08004141 	.word	0x08004141
 8004118:	08004157 	.word	0x08004157
 800411c:	08004147 	.word	0x08004147
 8004120:	08004157 	.word	0x08004157
 8004124:	08004157 	.word	0x08004157
 8004128:	08004157 	.word	0x08004157
 800412c:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7ff fd30 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8004134:	61b8      	str	r0, [r7, #24]
        break;
 8004136:	e013      	b.n	8004160 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7ff fd4e 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 800413c:	61b8      	str	r0, [r7, #24]
        break;
 800413e:	e00f      	b.n	8004160 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b20      	ldr	r3, [pc, #128]	@ (80041c4 <UART_SetConfig+0x268>)
 8004142:	61bb      	str	r3, [r7, #24]
        break;
 8004144:	e00c      	b.n	8004160 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7ff fcc5 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 800414a:	61b8      	str	r0, [r7, #24]
        break;
 800414c:	e008      	b.n	8004160 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004152:	61bb      	str	r3, [r7, #24]
        break;
 8004154:	e004      	b.n	8004160 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	77bb      	strb	r3, [r7, #30]
        break;
 800415e:	bf00      	nop
    }

    if (pclk != 0U)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d018      	beq.n	8004198 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	085a      	lsrs	r2, r3, #1
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	441a      	add	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b0f      	cmp	r3, #15
 800417e:	d909      	bls.n	8004194 <UART_SetConfig+0x238>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004186:	d205      	bcs.n	8004194 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60da      	str	r2, [r3, #12]
 8004192:	e001      	b.n	8004198 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	efff69f3 	.word	0xefff69f3
 80041b4:	40013800 	.word	0x40013800
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40004400 	.word	0x40004400
 80041c0:	40004800 	.word	0x40004800
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01a      	beq.n	80042de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c6:	d10a      	bne.n	80042de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b098      	sub	sp, #96	@ 0x60
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800431c:	f7fd f95a 	bl	80015d4 <HAL_GetTick>
 8004320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b08      	cmp	r3, #8
 800432e:	d12e      	bne.n	800438e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004338:	2200      	movs	r2, #0
 800433a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f88c 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d021      	beq.n	800438e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004368:	647b      	str	r3, [r7, #68]	@ 0x44
 800436a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800436e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e6      	bne.n	800434a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e062      	b.n	8004454 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d149      	bne.n	8004430 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800439c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f856 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03c      	beq.n	8004430 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	623b      	str	r3, [r7, #32]
   return(result);
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004408:	61fa      	str	r2, [r7, #28]
 800440a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	617b      	str	r3, [r7, #20]
   return(result);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e011      	b.n	8004454 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3758      	adds	r7, #88	@ 0x58
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446c:	e04f      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004474:	d04b      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fd f8ad 	bl	80015d4 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <UART_WaitOnFlagUntilTimeout+0x30>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e04e      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d037      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b80      	cmp	r3, #128	@ 0x80
 80044a2:	d034      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b40      	cmp	r3, #64	@ 0x40
 80044a8:	d031      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d110      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2208      	movs	r2, #8
 80044be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f838 	bl	8004536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2208      	movs	r2, #8
 80044ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e029      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e8:	d111      	bne.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f81e 	bl	8004536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e00f      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	bf0c      	ite	eq
 800451e:	2301      	moveq	r3, #1
 8004520:	2300      	movne	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	429a      	cmp	r2, r3
 800452a:	d0a0      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004536:	b480      	push	{r7}
 8004538:	b095      	sub	sp, #84	@ 0x54
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455c:	643b      	str	r3, [r7, #64]	@ 0x40
 800455e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800456a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e6      	bne.n	800453e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d118      	bne.n	80045de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f023 0310 	bic.w	r3, r3, #16
 80045c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6979      	ldr	r1, [r7, #20]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	613b      	str	r3, [r7, #16]
   return(result);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e6      	bne.n	80045ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045f2:	bf00      	nop
 80045f4:	3754      	adds	r7, #84	@ 0x54
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <__cvt>:
 80045fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004602:	ec57 6b10 	vmov	r6, r7, d0
 8004606:	2f00      	cmp	r7, #0
 8004608:	460c      	mov	r4, r1
 800460a:	4619      	mov	r1, r3
 800460c:	463b      	mov	r3, r7
 800460e:	bfbb      	ittet	lt
 8004610:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004614:	461f      	movlt	r7, r3
 8004616:	2300      	movge	r3, #0
 8004618:	232d      	movlt	r3, #45	@ 0x2d
 800461a:	700b      	strb	r3, [r1, #0]
 800461c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800461e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004622:	4691      	mov	r9, r2
 8004624:	f023 0820 	bic.w	r8, r3, #32
 8004628:	bfbc      	itt	lt
 800462a:	4632      	movlt	r2, r6
 800462c:	4616      	movlt	r6, r2
 800462e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004632:	d005      	beq.n	8004640 <__cvt+0x42>
 8004634:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004638:	d100      	bne.n	800463c <__cvt+0x3e>
 800463a:	3401      	adds	r4, #1
 800463c:	2102      	movs	r1, #2
 800463e:	e000      	b.n	8004642 <__cvt+0x44>
 8004640:	2103      	movs	r1, #3
 8004642:	ab03      	add	r3, sp, #12
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	ab02      	add	r3, sp, #8
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	ec47 6b10 	vmov	d0, r6, r7
 800464e:	4653      	mov	r3, sl
 8004650:	4622      	mov	r2, r4
 8004652:	f001 f945 	bl	80058e0 <_dtoa_r>
 8004656:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800465a:	4605      	mov	r5, r0
 800465c:	d119      	bne.n	8004692 <__cvt+0x94>
 800465e:	f019 0f01 	tst.w	r9, #1
 8004662:	d00e      	beq.n	8004682 <__cvt+0x84>
 8004664:	eb00 0904 	add.w	r9, r0, r4
 8004668:	2200      	movs	r2, #0
 800466a:	2300      	movs	r3, #0
 800466c:	4630      	mov	r0, r6
 800466e:	4639      	mov	r1, r7
 8004670:	f7fc fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004674:	b108      	cbz	r0, 800467a <__cvt+0x7c>
 8004676:	f8cd 900c 	str.w	r9, [sp, #12]
 800467a:	2230      	movs	r2, #48	@ 0x30
 800467c:	9b03      	ldr	r3, [sp, #12]
 800467e:	454b      	cmp	r3, r9
 8004680:	d31e      	bcc.n	80046c0 <__cvt+0xc2>
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004686:	1b5b      	subs	r3, r3, r5
 8004688:	4628      	mov	r0, r5
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	b004      	add	sp, #16
 800468e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004692:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004696:	eb00 0904 	add.w	r9, r0, r4
 800469a:	d1e5      	bne.n	8004668 <__cvt+0x6a>
 800469c:	7803      	ldrb	r3, [r0, #0]
 800469e:	2b30      	cmp	r3, #48	@ 0x30
 80046a0:	d10a      	bne.n	80046b8 <__cvt+0xba>
 80046a2:	2200      	movs	r2, #0
 80046a4:	2300      	movs	r3, #0
 80046a6:	4630      	mov	r0, r6
 80046a8:	4639      	mov	r1, r7
 80046aa:	f7fc fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80046ae:	b918      	cbnz	r0, 80046b8 <__cvt+0xba>
 80046b0:	f1c4 0401 	rsb	r4, r4, #1
 80046b4:	f8ca 4000 	str.w	r4, [sl]
 80046b8:	f8da 3000 	ldr.w	r3, [sl]
 80046bc:	4499      	add	r9, r3
 80046be:	e7d3      	b.n	8004668 <__cvt+0x6a>
 80046c0:	1c59      	adds	r1, r3, #1
 80046c2:	9103      	str	r1, [sp, #12]
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e7d9      	b.n	800467c <__cvt+0x7e>

080046c8 <__exponent>:
 80046c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ca:	2900      	cmp	r1, #0
 80046cc:	bfba      	itte	lt
 80046ce:	4249      	neglt	r1, r1
 80046d0:	232d      	movlt	r3, #45	@ 0x2d
 80046d2:	232b      	movge	r3, #43	@ 0x2b
 80046d4:	2909      	cmp	r1, #9
 80046d6:	7002      	strb	r2, [r0, #0]
 80046d8:	7043      	strb	r3, [r0, #1]
 80046da:	dd29      	ble.n	8004730 <__exponent+0x68>
 80046dc:	f10d 0307 	add.w	r3, sp, #7
 80046e0:	461d      	mov	r5, r3
 80046e2:	270a      	movs	r7, #10
 80046e4:	461a      	mov	r2, r3
 80046e6:	fbb1 f6f7 	udiv	r6, r1, r7
 80046ea:	fb07 1416 	mls	r4, r7, r6, r1
 80046ee:	3430      	adds	r4, #48	@ 0x30
 80046f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80046f4:	460c      	mov	r4, r1
 80046f6:	2c63      	cmp	r4, #99	@ 0x63
 80046f8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80046fc:	4631      	mov	r1, r6
 80046fe:	dcf1      	bgt.n	80046e4 <__exponent+0x1c>
 8004700:	3130      	adds	r1, #48	@ 0x30
 8004702:	1e94      	subs	r4, r2, #2
 8004704:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004708:	1c41      	adds	r1, r0, #1
 800470a:	4623      	mov	r3, r4
 800470c:	42ab      	cmp	r3, r5
 800470e:	d30a      	bcc.n	8004726 <__exponent+0x5e>
 8004710:	f10d 0309 	add.w	r3, sp, #9
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	42ac      	cmp	r4, r5
 8004718:	bf88      	it	hi
 800471a:	2300      	movhi	r3, #0
 800471c:	3302      	adds	r3, #2
 800471e:	4403      	add	r3, r0
 8004720:	1a18      	subs	r0, r3, r0
 8004722:	b003      	add	sp, #12
 8004724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004726:	f813 6b01 	ldrb.w	r6, [r3], #1
 800472a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800472e:	e7ed      	b.n	800470c <__exponent+0x44>
 8004730:	2330      	movs	r3, #48	@ 0x30
 8004732:	3130      	adds	r1, #48	@ 0x30
 8004734:	7083      	strb	r3, [r0, #2]
 8004736:	70c1      	strb	r1, [r0, #3]
 8004738:	1d03      	adds	r3, r0, #4
 800473a:	e7f1      	b.n	8004720 <__exponent+0x58>

0800473c <_printf_float>:
 800473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	b08d      	sub	sp, #52	@ 0x34
 8004742:	460c      	mov	r4, r1
 8004744:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004748:	4616      	mov	r6, r2
 800474a:	461f      	mov	r7, r3
 800474c:	4605      	mov	r5, r0
 800474e:	f000 ffc1 	bl	80056d4 <_localeconv_r>
 8004752:	6803      	ldr	r3, [r0, #0]
 8004754:	9304      	str	r3, [sp, #16]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fb fd8a 	bl	8000270 <strlen>
 800475c:	2300      	movs	r3, #0
 800475e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004760:	f8d8 3000 	ldr.w	r3, [r8]
 8004764:	9005      	str	r0, [sp, #20]
 8004766:	3307      	adds	r3, #7
 8004768:	f023 0307 	bic.w	r3, r3, #7
 800476c:	f103 0208 	add.w	r2, r3, #8
 8004770:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004774:	f8d4 b000 	ldr.w	fp, [r4]
 8004778:	f8c8 2000 	str.w	r2, [r8]
 800477c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004780:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004784:	9307      	str	r3, [sp, #28]
 8004786:	f8cd 8018 	str.w	r8, [sp, #24]
 800478a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800478e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004792:	4b9c      	ldr	r3, [pc, #624]	@ (8004a04 <_printf_float+0x2c8>)
 8004794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004798:	f7fc f9c8 	bl	8000b2c <__aeabi_dcmpun>
 800479c:	bb70      	cbnz	r0, 80047fc <_printf_float+0xc0>
 800479e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047a2:	4b98      	ldr	r3, [pc, #608]	@ (8004a04 <_printf_float+0x2c8>)
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047a8:	f7fc f9a2 	bl	8000af0 <__aeabi_dcmple>
 80047ac:	bb30      	cbnz	r0, 80047fc <_printf_float+0xc0>
 80047ae:	2200      	movs	r2, #0
 80047b0:	2300      	movs	r3, #0
 80047b2:	4640      	mov	r0, r8
 80047b4:	4649      	mov	r1, r9
 80047b6:	f7fc f991 	bl	8000adc <__aeabi_dcmplt>
 80047ba:	b110      	cbz	r0, 80047c2 <_printf_float+0x86>
 80047bc:	232d      	movs	r3, #45	@ 0x2d
 80047be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047c2:	4a91      	ldr	r2, [pc, #580]	@ (8004a08 <_printf_float+0x2cc>)
 80047c4:	4b91      	ldr	r3, [pc, #580]	@ (8004a0c <_printf_float+0x2d0>)
 80047c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80047ca:	bf8c      	ite	hi
 80047cc:	4690      	movhi	r8, r2
 80047ce:	4698      	movls	r8, r3
 80047d0:	2303      	movs	r3, #3
 80047d2:	6123      	str	r3, [r4, #16]
 80047d4:	f02b 0304 	bic.w	r3, fp, #4
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	f04f 0900 	mov.w	r9, #0
 80047de:	9700      	str	r7, [sp, #0]
 80047e0:	4633      	mov	r3, r6
 80047e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80047e4:	4621      	mov	r1, r4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 f9d2 	bl	8004b90 <_printf_common>
 80047ec:	3001      	adds	r0, #1
 80047ee:	f040 808d 	bne.w	800490c <_printf_float+0x1d0>
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047f6:	b00d      	add	sp, #52	@ 0x34
 80047f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	f7fc f992 	bl	8000b2c <__aeabi_dcmpun>
 8004808:	b140      	cbz	r0, 800481c <_printf_float+0xe0>
 800480a:	464b      	mov	r3, r9
 800480c:	2b00      	cmp	r3, #0
 800480e:	bfbc      	itt	lt
 8004810:	232d      	movlt	r3, #45	@ 0x2d
 8004812:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004816:	4a7e      	ldr	r2, [pc, #504]	@ (8004a10 <_printf_float+0x2d4>)
 8004818:	4b7e      	ldr	r3, [pc, #504]	@ (8004a14 <_printf_float+0x2d8>)
 800481a:	e7d4      	b.n	80047c6 <_printf_float+0x8a>
 800481c:	6863      	ldr	r3, [r4, #4]
 800481e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004822:	9206      	str	r2, [sp, #24]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	d13b      	bne.n	80048a0 <_printf_float+0x164>
 8004828:	2306      	movs	r3, #6
 800482a:	6063      	str	r3, [r4, #4]
 800482c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004830:	2300      	movs	r3, #0
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	9303      	str	r3, [sp, #12]
 8004836:	ab0a      	add	r3, sp, #40	@ 0x28
 8004838:	e9cd a301 	strd	sl, r3, [sp, #4]
 800483c:	ab09      	add	r3, sp, #36	@ 0x24
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	6861      	ldr	r1, [r4, #4]
 8004842:	ec49 8b10 	vmov	d0, r8, r9
 8004846:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800484a:	4628      	mov	r0, r5
 800484c:	f7ff fed7 	bl	80045fe <__cvt>
 8004850:	9b06      	ldr	r3, [sp, #24]
 8004852:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004854:	2b47      	cmp	r3, #71	@ 0x47
 8004856:	4680      	mov	r8, r0
 8004858:	d129      	bne.n	80048ae <_printf_float+0x172>
 800485a:	1cc8      	adds	r0, r1, #3
 800485c:	db02      	blt.n	8004864 <_printf_float+0x128>
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	4299      	cmp	r1, r3
 8004862:	dd41      	ble.n	80048e8 <_printf_float+0x1ac>
 8004864:	f1aa 0a02 	sub.w	sl, sl, #2
 8004868:	fa5f fa8a 	uxtb.w	sl, sl
 800486c:	3901      	subs	r1, #1
 800486e:	4652      	mov	r2, sl
 8004870:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004874:	9109      	str	r1, [sp, #36]	@ 0x24
 8004876:	f7ff ff27 	bl	80046c8 <__exponent>
 800487a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800487c:	1813      	adds	r3, r2, r0
 800487e:	2a01      	cmp	r2, #1
 8004880:	4681      	mov	r9, r0
 8004882:	6123      	str	r3, [r4, #16]
 8004884:	dc02      	bgt.n	800488c <_printf_float+0x150>
 8004886:	6822      	ldr	r2, [r4, #0]
 8004888:	07d2      	lsls	r2, r2, #31
 800488a:	d501      	bpl.n	8004890 <_printf_float+0x154>
 800488c:	3301      	adds	r3, #1
 800488e:	6123      	str	r3, [r4, #16]
 8004890:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0a2      	beq.n	80047de <_printf_float+0xa2>
 8004898:	232d      	movs	r3, #45	@ 0x2d
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800489e:	e79e      	b.n	80047de <_printf_float+0xa2>
 80048a0:	9a06      	ldr	r2, [sp, #24]
 80048a2:	2a47      	cmp	r2, #71	@ 0x47
 80048a4:	d1c2      	bne.n	800482c <_printf_float+0xf0>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1c0      	bne.n	800482c <_printf_float+0xf0>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e7bd      	b.n	800482a <_printf_float+0xee>
 80048ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048b2:	d9db      	bls.n	800486c <_printf_float+0x130>
 80048b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80048b8:	d118      	bne.n	80048ec <_printf_float+0x1b0>
 80048ba:	2900      	cmp	r1, #0
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	dd0b      	ble.n	80048d8 <_printf_float+0x19c>
 80048c0:	6121      	str	r1, [r4, #16]
 80048c2:	b913      	cbnz	r3, 80048ca <_printf_float+0x18e>
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	07d0      	lsls	r0, r2, #31
 80048c8:	d502      	bpl.n	80048d0 <_printf_float+0x194>
 80048ca:	3301      	adds	r3, #1
 80048cc:	440b      	add	r3, r1
 80048ce:	6123      	str	r3, [r4, #16]
 80048d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80048d2:	f04f 0900 	mov.w	r9, #0
 80048d6:	e7db      	b.n	8004890 <_printf_float+0x154>
 80048d8:	b913      	cbnz	r3, 80048e0 <_printf_float+0x1a4>
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	07d2      	lsls	r2, r2, #31
 80048de:	d501      	bpl.n	80048e4 <_printf_float+0x1a8>
 80048e0:	3302      	adds	r3, #2
 80048e2:	e7f4      	b.n	80048ce <_printf_float+0x192>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e7f2      	b.n	80048ce <_printf_float+0x192>
 80048e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80048ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048ee:	4299      	cmp	r1, r3
 80048f0:	db05      	blt.n	80048fe <_printf_float+0x1c2>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	6121      	str	r1, [r4, #16]
 80048f6:	07d8      	lsls	r0, r3, #31
 80048f8:	d5ea      	bpl.n	80048d0 <_printf_float+0x194>
 80048fa:	1c4b      	adds	r3, r1, #1
 80048fc:	e7e7      	b.n	80048ce <_printf_float+0x192>
 80048fe:	2900      	cmp	r1, #0
 8004900:	bfd4      	ite	le
 8004902:	f1c1 0202 	rsble	r2, r1, #2
 8004906:	2201      	movgt	r2, #1
 8004908:	4413      	add	r3, r2
 800490a:	e7e0      	b.n	80048ce <_printf_float+0x192>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	055a      	lsls	r2, r3, #21
 8004910:	d407      	bmi.n	8004922 <_printf_float+0x1e6>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	4642      	mov	r2, r8
 8004916:	4631      	mov	r1, r6
 8004918:	4628      	mov	r0, r5
 800491a:	47b8      	blx	r7
 800491c:	3001      	adds	r0, #1
 800491e:	d12b      	bne.n	8004978 <_printf_float+0x23c>
 8004920:	e767      	b.n	80047f2 <_printf_float+0xb6>
 8004922:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004926:	f240 80dd 	bls.w	8004ae4 <_printf_float+0x3a8>
 800492a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800492e:	2200      	movs	r2, #0
 8004930:	2300      	movs	r3, #0
 8004932:	f7fc f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004936:	2800      	cmp	r0, #0
 8004938:	d033      	beq.n	80049a2 <_printf_float+0x266>
 800493a:	4a37      	ldr	r2, [pc, #220]	@ (8004a18 <_printf_float+0x2dc>)
 800493c:	2301      	movs	r3, #1
 800493e:	4631      	mov	r1, r6
 8004940:	4628      	mov	r0, r5
 8004942:	47b8      	blx	r7
 8004944:	3001      	adds	r0, #1
 8004946:	f43f af54 	beq.w	80047f2 <_printf_float+0xb6>
 800494a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800494e:	4543      	cmp	r3, r8
 8004950:	db02      	blt.n	8004958 <_printf_float+0x21c>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	07d8      	lsls	r0, r3, #31
 8004956:	d50f      	bpl.n	8004978 <_printf_float+0x23c>
 8004958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800495c:	4631      	mov	r1, r6
 800495e:	4628      	mov	r0, r5
 8004960:	47b8      	blx	r7
 8004962:	3001      	adds	r0, #1
 8004964:	f43f af45 	beq.w	80047f2 <_printf_float+0xb6>
 8004968:	f04f 0900 	mov.w	r9, #0
 800496c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004970:	f104 0a1a 	add.w	sl, r4, #26
 8004974:	45c8      	cmp	r8, r9
 8004976:	dc09      	bgt.n	800498c <_printf_float+0x250>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	079b      	lsls	r3, r3, #30
 800497c:	f100 8103 	bmi.w	8004b86 <_printf_float+0x44a>
 8004980:	68e0      	ldr	r0, [r4, #12]
 8004982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004984:	4298      	cmp	r0, r3
 8004986:	bfb8      	it	lt
 8004988:	4618      	movlt	r0, r3
 800498a:	e734      	b.n	80047f6 <_printf_float+0xba>
 800498c:	2301      	movs	r3, #1
 800498e:	4652      	mov	r2, sl
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f af2b 	beq.w	80047f2 <_printf_float+0xb6>
 800499c:	f109 0901 	add.w	r9, r9, #1
 80049a0:	e7e8      	b.n	8004974 <_printf_float+0x238>
 80049a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dc39      	bgt.n	8004a1c <_printf_float+0x2e0>
 80049a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a18 <_printf_float+0x2dc>)
 80049aa:	2301      	movs	r3, #1
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f af1d 	beq.w	80047f2 <_printf_float+0xb6>
 80049b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80049bc:	ea59 0303 	orrs.w	r3, r9, r3
 80049c0:	d102      	bne.n	80049c8 <_printf_float+0x28c>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	07d9      	lsls	r1, r3, #31
 80049c6:	d5d7      	bpl.n	8004978 <_printf_float+0x23c>
 80049c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b8      	blx	r7
 80049d2:	3001      	adds	r0, #1
 80049d4:	f43f af0d 	beq.w	80047f2 <_printf_float+0xb6>
 80049d8:	f04f 0a00 	mov.w	sl, #0
 80049dc:	f104 0b1a 	add.w	fp, r4, #26
 80049e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e2:	425b      	negs	r3, r3
 80049e4:	4553      	cmp	r3, sl
 80049e6:	dc01      	bgt.n	80049ec <_printf_float+0x2b0>
 80049e8:	464b      	mov	r3, r9
 80049ea:	e793      	b.n	8004914 <_printf_float+0x1d8>
 80049ec:	2301      	movs	r3, #1
 80049ee:	465a      	mov	r2, fp
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f aefb 	beq.w	80047f2 <_printf_float+0xb6>
 80049fc:	f10a 0a01 	add.w	sl, sl, #1
 8004a00:	e7ee      	b.n	80049e0 <_printf_float+0x2a4>
 8004a02:	bf00      	nop
 8004a04:	7fefffff 	.word	0x7fefffff
 8004a08:	08009934 	.word	0x08009934
 8004a0c:	08009930 	.word	0x08009930
 8004a10:	0800993c 	.word	0x0800993c
 8004a14:	08009938 	.word	0x08009938
 8004a18:	08009a76 	.word	0x08009a76
 8004a1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a22:	4553      	cmp	r3, sl
 8004a24:	bfa8      	it	ge
 8004a26:	4653      	movge	r3, sl
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	4699      	mov	r9, r3
 8004a2c:	dc36      	bgt.n	8004a9c <_printf_float+0x360>
 8004a2e:	f04f 0b00 	mov.w	fp, #0
 8004a32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a36:	f104 021a 	add.w	r2, r4, #26
 8004a3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a3c:	9306      	str	r3, [sp, #24]
 8004a3e:	eba3 0309 	sub.w	r3, r3, r9
 8004a42:	455b      	cmp	r3, fp
 8004a44:	dc31      	bgt.n	8004aaa <_printf_float+0x36e>
 8004a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a48:	459a      	cmp	sl, r3
 8004a4a:	dc3a      	bgt.n	8004ac2 <_printf_float+0x386>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	07da      	lsls	r2, r3, #31
 8004a50:	d437      	bmi.n	8004ac2 <_printf_float+0x386>
 8004a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a54:	ebaa 0903 	sub.w	r9, sl, r3
 8004a58:	9b06      	ldr	r3, [sp, #24]
 8004a5a:	ebaa 0303 	sub.w	r3, sl, r3
 8004a5e:	4599      	cmp	r9, r3
 8004a60:	bfa8      	it	ge
 8004a62:	4699      	movge	r9, r3
 8004a64:	f1b9 0f00 	cmp.w	r9, #0
 8004a68:	dc33      	bgt.n	8004ad2 <_printf_float+0x396>
 8004a6a:	f04f 0800 	mov.w	r8, #0
 8004a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a72:	f104 0b1a 	add.w	fp, r4, #26
 8004a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a78:	ebaa 0303 	sub.w	r3, sl, r3
 8004a7c:	eba3 0309 	sub.w	r3, r3, r9
 8004a80:	4543      	cmp	r3, r8
 8004a82:	f77f af79 	ble.w	8004978 <_printf_float+0x23c>
 8004a86:	2301      	movs	r3, #1
 8004a88:	465a      	mov	r2, fp
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	f43f aeae 	beq.w	80047f2 <_printf_float+0xb6>
 8004a96:	f108 0801 	add.w	r8, r8, #1
 8004a9a:	e7ec      	b.n	8004a76 <_printf_float+0x33a>
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d1c2      	bne.n	8004a2e <_printf_float+0x2f2>
 8004aa8:	e6a3      	b.n	80047f2 <_printf_float+0xb6>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	9206      	str	r2, [sp, #24]
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f43f ae9c 	beq.w	80047f2 <_printf_float+0xb6>
 8004aba:	9a06      	ldr	r2, [sp, #24]
 8004abc:	f10b 0b01 	add.w	fp, fp, #1
 8004ac0:	e7bb      	b.n	8004a3a <_printf_float+0x2fe>
 8004ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	d1c0      	bne.n	8004a52 <_printf_float+0x316>
 8004ad0:	e68f      	b.n	80047f2 <_printf_float+0xb6>
 8004ad2:	9a06      	ldr	r2, [sp, #24]
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	4442      	add	r2, r8
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b8      	blx	r7
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d1c3      	bne.n	8004a6a <_printf_float+0x32e>
 8004ae2:	e686      	b.n	80047f2 <_printf_float+0xb6>
 8004ae4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ae8:	f1ba 0f01 	cmp.w	sl, #1
 8004aec:	dc01      	bgt.n	8004af2 <_printf_float+0x3b6>
 8004aee:	07db      	lsls	r3, r3, #31
 8004af0:	d536      	bpl.n	8004b60 <_printf_float+0x424>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4642      	mov	r2, r8
 8004af6:	4631      	mov	r1, r6
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f ae78 	beq.w	80047f2 <_printf_float+0xb6>
 8004b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f43f ae70 	beq.w	80047f2 <_printf_float+0xb6>
 8004b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b16:	2200      	movs	r2, #0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004b1e:	f7fb ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b22:	b9c0      	cbnz	r0, 8004b56 <_printf_float+0x41a>
 8004b24:	4653      	mov	r3, sl
 8004b26:	f108 0201 	add.w	r2, r8, #1
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	d10c      	bne.n	8004b4e <_printf_float+0x412>
 8004b34:	e65d      	b.n	80047f2 <_printf_float+0xb6>
 8004b36:	2301      	movs	r3, #1
 8004b38:	465a      	mov	r2, fp
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	f43f ae56 	beq.w	80047f2 <_printf_float+0xb6>
 8004b46:	f108 0801 	add.w	r8, r8, #1
 8004b4a:	45d0      	cmp	r8, sl
 8004b4c:	dbf3      	blt.n	8004b36 <_printf_float+0x3fa>
 8004b4e:	464b      	mov	r3, r9
 8004b50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004b54:	e6df      	b.n	8004916 <_printf_float+0x1da>
 8004b56:	f04f 0800 	mov.w	r8, #0
 8004b5a:	f104 0b1a 	add.w	fp, r4, #26
 8004b5e:	e7f4      	b.n	8004b4a <_printf_float+0x40e>
 8004b60:	2301      	movs	r3, #1
 8004b62:	4642      	mov	r2, r8
 8004b64:	e7e1      	b.n	8004b2a <_printf_float+0x3ee>
 8004b66:	2301      	movs	r3, #1
 8004b68:	464a      	mov	r2, r9
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f ae3e 	beq.w	80047f2 <_printf_float+0xb6>
 8004b76:	f108 0801 	add.w	r8, r8, #1
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b7e:	1a5b      	subs	r3, r3, r1
 8004b80:	4543      	cmp	r3, r8
 8004b82:	dcf0      	bgt.n	8004b66 <_printf_float+0x42a>
 8004b84:	e6fc      	b.n	8004980 <_printf_float+0x244>
 8004b86:	f04f 0800 	mov.w	r8, #0
 8004b8a:	f104 0919 	add.w	r9, r4, #25
 8004b8e:	e7f4      	b.n	8004b7a <_printf_float+0x43e>

08004b90 <_printf_common>:
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	4616      	mov	r6, r2
 8004b96:	4698      	mov	r8, r3
 8004b98:	688a      	ldr	r2, [r1, #8]
 8004b9a:	690b      	ldr	r3, [r1, #16]
 8004b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bfb8      	it	lt
 8004ba4:	4613      	movlt	r3, r2
 8004ba6:	6033      	str	r3, [r6, #0]
 8004ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bac:	4607      	mov	r7, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	b10a      	cbz	r2, 8004bb6 <_printf_common+0x26>
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	0699      	lsls	r1, r3, #26
 8004bba:	bf42      	ittt	mi
 8004bbc:	6833      	ldrmi	r3, [r6, #0]
 8004bbe:	3302      	addmi	r3, #2
 8004bc0:	6033      	strmi	r3, [r6, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	f015 0506 	ands.w	r5, r5, #6
 8004bc8:	d106      	bne.n	8004bd8 <_printf_common+0x48>
 8004bca:	f104 0a19 	add.w	sl, r4, #25
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	6832      	ldr	r2, [r6, #0]
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dc26      	bgt.n	8004c26 <_printf_common+0x96>
 8004bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	3b00      	subs	r3, #0
 8004be0:	bf18      	it	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	0692      	lsls	r2, r2, #26
 8004be6:	d42b      	bmi.n	8004c40 <_printf_common+0xb0>
 8004be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bec:	4641      	mov	r1, r8
 8004bee:	4638      	mov	r0, r7
 8004bf0:	47c8      	blx	r9
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d01e      	beq.n	8004c34 <_printf_common+0xa4>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	6922      	ldr	r2, [r4, #16]
 8004bfa:	f003 0306 	and.w	r3, r3, #6
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf02      	ittt	eq
 8004c02:	68e5      	ldreq	r5, [r4, #12]
 8004c04:	6833      	ldreq	r3, [r6, #0]
 8004c06:	1aed      	subeq	r5, r5, r3
 8004c08:	68a3      	ldr	r3, [r4, #8]
 8004c0a:	bf0c      	ite	eq
 8004c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c10:	2500      	movne	r5, #0
 8004c12:	4293      	cmp	r3, r2
 8004c14:	bfc4      	itt	gt
 8004c16:	1a9b      	subgt	r3, r3, r2
 8004c18:	18ed      	addgt	r5, r5, r3
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	341a      	adds	r4, #26
 8004c1e:	42b5      	cmp	r5, r6
 8004c20:	d11a      	bne.n	8004c58 <_printf_common+0xc8>
 8004c22:	2000      	movs	r0, #0
 8004c24:	e008      	b.n	8004c38 <_printf_common+0xa8>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4652      	mov	r2, sl
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	47c8      	blx	r9
 8004c30:	3001      	adds	r0, #1
 8004c32:	d103      	bne.n	8004c3c <_printf_common+0xac>
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7c6      	b.n	8004bce <_printf_common+0x3e>
 8004c40:	18e1      	adds	r1, r4, r3
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	2030      	movs	r0, #48	@ 0x30
 8004c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c4a:	4422      	add	r2, r4
 8004c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c54:	3302      	adds	r3, #2
 8004c56:	e7c7      	b.n	8004be8 <_printf_common+0x58>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	4638      	mov	r0, r7
 8004c60:	47c8      	blx	r9
 8004c62:	3001      	adds	r0, #1
 8004c64:	d0e6      	beq.n	8004c34 <_printf_common+0xa4>
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7d9      	b.n	8004c1e <_printf_common+0x8e>
	...

08004c6c <_printf_i>:
 8004c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c70:	7e0f      	ldrb	r7, [r1, #24]
 8004c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c74:	2f78      	cmp	r7, #120	@ 0x78
 8004c76:	4691      	mov	r9, r2
 8004c78:	4680      	mov	r8, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	469a      	mov	sl, r3
 8004c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c82:	d807      	bhi.n	8004c94 <_printf_i+0x28>
 8004c84:	2f62      	cmp	r7, #98	@ 0x62
 8004c86:	d80a      	bhi.n	8004c9e <_printf_i+0x32>
 8004c88:	2f00      	cmp	r7, #0
 8004c8a:	f000 80d1 	beq.w	8004e30 <_printf_i+0x1c4>
 8004c8e:	2f58      	cmp	r7, #88	@ 0x58
 8004c90:	f000 80b8 	beq.w	8004e04 <_printf_i+0x198>
 8004c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c9c:	e03a      	b.n	8004d14 <_printf_i+0xa8>
 8004c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ca2:	2b15      	cmp	r3, #21
 8004ca4:	d8f6      	bhi.n	8004c94 <_printf_i+0x28>
 8004ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8004cac <_printf_i+0x40>)
 8004ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004d19 	.word	0x08004d19
 8004cb4:	08004c95 	.word	0x08004c95
 8004cb8:	08004c95 	.word	0x08004c95
 8004cbc:	08004c95 	.word	0x08004c95
 8004cc0:	08004c95 	.word	0x08004c95
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004c95 	.word	0x08004c95
 8004ccc:	08004c95 	.word	0x08004c95
 8004cd0:	08004c95 	.word	0x08004c95
 8004cd4:	08004c95 	.word	0x08004c95
 8004cd8:	08004e17 	.word	0x08004e17
 8004cdc:	08004d43 	.word	0x08004d43
 8004ce0:	08004dd1 	.word	0x08004dd1
 8004ce4:	08004c95 	.word	0x08004c95
 8004ce8:	08004c95 	.word	0x08004c95
 8004cec:	08004e39 	.word	0x08004e39
 8004cf0:	08004c95 	.word	0x08004c95
 8004cf4:	08004d43 	.word	0x08004d43
 8004cf8:	08004c95 	.word	0x08004c95
 8004cfc:	08004c95 	.word	0x08004c95
 8004d00:	08004dd9 	.word	0x08004dd9
 8004d04:	6833      	ldr	r3, [r6, #0]
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6032      	str	r2, [r6, #0]
 8004d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d14:	2301      	movs	r3, #1
 8004d16:	e09c      	b.n	8004e52 <_printf_i+0x1e6>
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	1d19      	adds	r1, r3, #4
 8004d1e:	6031      	str	r1, [r6, #0]
 8004d20:	0606      	lsls	r6, r0, #24
 8004d22:	d501      	bpl.n	8004d28 <_printf_i+0xbc>
 8004d24:	681d      	ldr	r5, [r3, #0]
 8004d26:	e003      	b.n	8004d30 <_printf_i+0xc4>
 8004d28:	0645      	lsls	r5, r0, #25
 8004d2a:	d5fb      	bpl.n	8004d24 <_printf_i+0xb8>
 8004d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	da03      	bge.n	8004d3c <_printf_i+0xd0>
 8004d34:	232d      	movs	r3, #45	@ 0x2d
 8004d36:	426d      	negs	r5, r5
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d3c:	4858      	ldr	r0, [pc, #352]	@ (8004ea0 <_printf_i+0x234>)
 8004d3e:	230a      	movs	r3, #10
 8004d40:	e011      	b.n	8004d66 <_printf_i+0xfa>
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	0608      	lsls	r0, r1, #24
 8004d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d4c:	d402      	bmi.n	8004d54 <_printf_i+0xe8>
 8004d4e:	0649      	lsls	r1, r1, #25
 8004d50:	bf48      	it	mi
 8004d52:	b2ad      	uxthmi	r5, r5
 8004d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d56:	4852      	ldr	r0, [pc, #328]	@ (8004ea0 <_printf_i+0x234>)
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	bf14      	ite	ne
 8004d5c:	230a      	movne	r3, #10
 8004d5e:	2308      	moveq	r3, #8
 8004d60:	2100      	movs	r1, #0
 8004d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d66:	6866      	ldr	r6, [r4, #4]
 8004d68:	60a6      	str	r6, [r4, #8]
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	db05      	blt.n	8004d7a <_printf_i+0x10e>
 8004d6e:	6821      	ldr	r1, [r4, #0]
 8004d70:	432e      	orrs	r6, r5
 8004d72:	f021 0104 	bic.w	r1, r1, #4
 8004d76:	6021      	str	r1, [r4, #0]
 8004d78:	d04b      	beq.n	8004e12 <_printf_i+0x1a6>
 8004d7a:	4616      	mov	r6, r2
 8004d7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d80:	fb03 5711 	mls	r7, r3, r1, r5
 8004d84:	5dc7      	ldrb	r7, [r0, r7]
 8004d86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d8a:	462f      	mov	r7, r5
 8004d8c:	42bb      	cmp	r3, r7
 8004d8e:	460d      	mov	r5, r1
 8004d90:	d9f4      	bls.n	8004d7c <_printf_i+0x110>
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d10b      	bne.n	8004dae <_printf_i+0x142>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	07df      	lsls	r7, r3, #31
 8004d9a:	d508      	bpl.n	8004dae <_printf_i+0x142>
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	6861      	ldr	r1, [r4, #4]
 8004da0:	4299      	cmp	r1, r3
 8004da2:	bfde      	ittt	le
 8004da4:	2330      	movle	r3, #48	@ 0x30
 8004da6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004daa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004dae:	1b92      	subs	r2, r2, r6
 8004db0:	6122      	str	r2, [r4, #16]
 8004db2:	f8cd a000 	str.w	sl, [sp]
 8004db6:	464b      	mov	r3, r9
 8004db8:	aa03      	add	r2, sp, #12
 8004dba:	4621      	mov	r1, r4
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	f7ff fee7 	bl	8004b90 <_printf_common>
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d14a      	bne.n	8004e5c <_printf_i+0x1f0>
 8004dc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dca:	b004      	add	sp, #16
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	f043 0320 	orr.w	r3, r3, #32
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	4832      	ldr	r0, [pc, #200]	@ (8004ea4 <_printf_i+0x238>)
 8004dda:	2778      	movs	r7, #120	@ 0x78
 8004ddc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	6831      	ldr	r1, [r6, #0]
 8004de4:	061f      	lsls	r7, r3, #24
 8004de6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dea:	d402      	bmi.n	8004df2 <_printf_i+0x186>
 8004dec:	065f      	lsls	r7, r3, #25
 8004dee:	bf48      	it	mi
 8004df0:	b2ad      	uxthmi	r5, r5
 8004df2:	6031      	str	r1, [r6, #0]
 8004df4:	07d9      	lsls	r1, r3, #31
 8004df6:	bf44      	itt	mi
 8004df8:	f043 0320 	orrmi.w	r3, r3, #32
 8004dfc:	6023      	strmi	r3, [r4, #0]
 8004dfe:	b11d      	cbz	r5, 8004e08 <_printf_i+0x19c>
 8004e00:	2310      	movs	r3, #16
 8004e02:	e7ad      	b.n	8004d60 <_printf_i+0xf4>
 8004e04:	4826      	ldr	r0, [pc, #152]	@ (8004ea0 <_printf_i+0x234>)
 8004e06:	e7e9      	b.n	8004ddc <_printf_i+0x170>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	f023 0320 	bic.w	r3, r3, #32
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	e7f6      	b.n	8004e00 <_printf_i+0x194>
 8004e12:	4616      	mov	r6, r2
 8004e14:	e7bd      	b.n	8004d92 <_printf_i+0x126>
 8004e16:	6833      	ldr	r3, [r6, #0]
 8004e18:	6825      	ldr	r5, [r4, #0]
 8004e1a:	6961      	ldr	r1, [r4, #20]
 8004e1c:	1d18      	adds	r0, r3, #4
 8004e1e:	6030      	str	r0, [r6, #0]
 8004e20:	062e      	lsls	r6, r5, #24
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	d501      	bpl.n	8004e2a <_printf_i+0x1be>
 8004e26:	6019      	str	r1, [r3, #0]
 8004e28:	e002      	b.n	8004e30 <_printf_i+0x1c4>
 8004e2a:	0668      	lsls	r0, r5, #25
 8004e2c:	d5fb      	bpl.n	8004e26 <_printf_i+0x1ba>
 8004e2e:	8019      	strh	r1, [r3, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	6123      	str	r3, [r4, #16]
 8004e34:	4616      	mov	r6, r2
 8004e36:	e7bc      	b.n	8004db2 <_printf_i+0x146>
 8004e38:	6833      	ldr	r3, [r6, #0]
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	6032      	str	r2, [r6, #0]
 8004e3e:	681e      	ldr	r6, [r3, #0]
 8004e40:	6862      	ldr	r2, [r4, #4]
 8004e42:	2100      	movs	r1, #0
 8004e44:	4630      	mov	r0, r6
 8004e46:	f7fb f9c3 	bl	80001d0 <memchr>
 8004e4a:	b108      	cbz	r0, 8004e50 <_printf_i+0x1e4>
 8004e4c:	1b80      	subs	r0, r0, r6
 8004e4e:	6060      	str	r0, [r4, #4]
 8004e50:	6863      	ldr	r3, [r4, #4]
 8004e52:	6123      	str	r3, [r4, #16]
 8004e54:	2300      	movs	r3, #0
 8004e56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e5a:	e7aa      	b.n	8004db2 <_printf_i+0x146>
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	4632      	mov	r2, r6
 8004e60:	4649      	mov	r1, r9
 8004e62:	4640      	mov	r0, r8
 8004e64:	47d0      	blx	sl
 8004e66:	3001      	adds	r0, #1
 8004e68:	d0ad      	beq.n	8004dc6 <_printf_i+0x15a>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	079b      	lsls	r3, r3, #30
 8004e6e:	d413      	bmi.n	8004e98 <_printf_i+0x22c>
 8004e70:	68e0      	ldr	r0, [r4, #12]
 8004e72:	9b03      	ldr	r3, [sp, #12]
 8004e74:	4298      	cmp	r0, r3
 8004e76:	bfb8      	it	lt
 8004e78:	4618      	movlt	r0, r3
 8004e7a:	e7a6      	b.n	8004dca <_printf_i+0x15e>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4632      	mov	r2, r6
 8004e80:	4649      	mov	r1, r9
 8004e82:	4640      	mov	r0, r8
 8004e84:	47d0      	blx	sl
 8004e86:	3001      	adds	r0, #1
 8004e88:	d09d      	beq.n	8004dc6 <_printf_i+0x15a>
 8004e8a:	3501      	adds	r5, #1
 8004e8c:	68e3      	ldr	r3, [r4, #12]
 8004e8e:	9903      	ldr	r1, [sp, #12]
 8004e90:	1a5b      	subs	r3, r3, r1
 8004e92:	42ab      	cmp	r3, r5
 8004e94:	dcf2      	bgt.n	8004e7c <_printf_i+0x210>
 8004e96:	e7eb      	b.n	8004e70 <_printf_i+0x204>
 8004e98:	2500      	movs	r5, #0
 8004e9a:	f104 0619 	add.w	r6, r4, #25
 8004e9e:	e7f5      	b.n	8004e8c <_printf_i+0x220>
 8004ea0:	08009940 	.word	0x08009940
 8004ea4:	08009951 	.word	0x08009951

08004ea8 <_scanf_float>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	b087      	sub	sp, #28
 8004eae:	4691      	mov	r9, r2
 8004eb0:	9303      	str	r3, [sp, #12]
 8004eb2:	688b      	ldr	r3, [r1, #8]
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004eba:	bf81      	itttt	hi
 8004ebc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004ec0:	eb03 0b05 	addhi.w	fp, r3, r5
 8004ec4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004ec8:	608b      	strhi	r3, [r1, #8]
 8004eca:	680b      	ldr	r3, [r1, #0]
 8004ecc:	460a      	mov	r2, r1
 8004ece:	f04f 0500 	mov.w	r5, #0
 8004ed2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004ed6:	f842 3b1c 	str.w	r3, [r2], #28
 8004eda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004ede:	4680      	mov	r8, r0
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	bf98      	it	ls
 8004ee4:	f04f 0b00 	movls.w	fp, #0
 8004ee8:	9201      	str	r2, [sp, #4]
 8004eea:	4616      	mov	r6, r2
 8004eec:	46aa      	mov	sl, r5
 8004eee:	462f      	mov	r7, r5
 8004ef0:	9502      	str	r5, [sp, #8]
 8004ef2:	68a2      	ldr	r2, [r4, #8]
 8004ef4:	b15a      	cbz	r2, 8004f0e <_scanf_float+0x66>
 8004ef6:	f8d9 3000 	ldr.w	r3, [r9]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b4e      	cmp	r3, #78	@ 0x4e
 8004efe:	d863      	bhi.n	8004fc8 <_scanf_float+0x120>
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d83b      	bhi.n	8004f7c <_scanf_float+0xd4>
 8004f04:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004f08:	b2c8      	uxtb	r0, r1
 8004f0a:	280e      	cmp	r0, #14
 8004f0c:	d939      	bls.n	8004f82 <_scanf_float+0xda>
 8004f0e:	b11f      	cbz	r7, 8004f18 <_scanf_float+0x70>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004f1c:	f1ba 0f01 	cmp.w	sl, #1
 8004f20:	f200 8114 	bhi.w	800514c <_scanf_float+0x2a4>
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	429e      	cmp	r6, r3
 8004f28:	f200 8105 	bhi.w	8005136 <_scanf_float+0x28e>
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	b007      	add	sp, #28
 8004f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f34:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004f38:	2a0d      	cmp	r2, #13
 8004f3a:	d8e8      	bhi.n	8004f0e <_scanf_float+0x66>
 8004f3c:	a101      	add	r1, pc, #4	@ (adr r1, 8004f44 <_scanf_float+0x9c>)
 8004f3e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	0800508d 	.word	0x0800508d
 8004f48:	08004f0f 	.word	0x08004f0f
 8004f4c:	08004f0f 	.word	0x08004f0f
 8004f50:	08004f0f 	.word	0x08004f0f
 8004f54:	080050e9 	.word	0x080050e9
 8004f58:	080050c3 	.word	0x080050c3
 8004f5c:	08004f0f 	.word	0x08004f0f
 8004f60:	08004f0f 	.word	0x08004f0f
 8004f64:	0800509b 	.word	0x0800509b
 8004f68:	08004f0f 	.word	0x08004f0f
 8004f6c:	08004f0f 	.word	0x08004f0f
 8004f70:	08004f0f 	.word	0x08004f0f
 8004f74:	08004f0f 	.word	0x08004f0f
 8004f78:	08005057 	.word	0x08005057
 8004f7c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004f80:	e7da      	b.n	8004f38 <_scanf_float+0x90>
 8004f82:	290e      	cmp	r1, #14
 8004f84:	d8c3      	bhi.n	8004f0e <_scanf_float+0x66>
 8004f86:	a001      	add	r0, pc, #4	@ (adr r0, 8004f8c <_scanf_float+0xe4>)
 8004f88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004f8c:	08005047 	.word	0x08005047
 8004f90:	08004f0f 	.word	0x08004f0f
 8004f94:	08005047 	.word	0x08005047
 8004f98:	080050d7 	.word	0x080050d7
 8004f9c:	08004f0f 	.word	0x08004f0f
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	0800502d 	.word	0x0800502d
 8004fa8:	0800502d 	.word	0x0800502d
 8004fac:	0800502d 	.word	0x0800502d
 8004fb0:	0800502d 	.word	0x0800502d
 8004fb4:	0800502d 	.word	0x0800502d
 8004fb8:	0800502d 	.word	0x0800502d
 8004fbc:	0800502d 	.word	0x0800502d
 8004fc0:	0800502d 	.word	0x0800502d
 8004fc4:	0800502d 	.word	0x0800502d
 8004fc8:	2b6e      	cmp	r3, #110	@ 0x6e
 8004fca:	d809      	bhi.n	8004fe0 <_scanf_float+0x138>
 8004fcc:	2b60      	cmp	r3, #96	@ 0x60
 8004fce:	d8b1      	bhi.n	8004f34 <_scanf_float+0x8c>
 8004fd0:	2b54      	cmp	r3, #84	@ 0x54
 8004fd2:	d07b      	beq.n	80050cc <_scanf_float+0x224>
 8004fd4:	2b59      	cmp	r3, #89	@ 0x59
 8004fd6:	d19a      	bne.n	8004f0e <_scanf_float+0x66>
 8004fd8:	2d07      	cmp	r5, #7
 8004fda:	d198      	bne.n	8004f0e <_scanf_float+0x66>
 8004fdc:	2508      	movs	r5, #8
 8004fde:	e02f      	b.n	8005040 <_scanf_float+0x198>
 8004fe0:	2b74      	cmp	r3, #116	@ 0x74
 8004fe2:	d073      	beq.n	80050cc <_scanf_float+0x224>
 8004fe4:	2b79      	cmp	r3, #121	@ 0x79
 8004fe6:	e7f6      	b.n	8004fd6 <_scanf_float+0x12e>
 8004fe8:	6821      	ldr	r1, [r4, #0]
 8004fea:	05c8      	lsls	r0, r1, #23
 8004fec:	d51e      	bpl.n	800502c <_scanf_float+0x184>
 8004fee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004ff2:	6021      	str	r1, [r4, #0]
 8004ff4:	3701      	adds	r7, #1
 8004ff6:	f1bb 0f00 	cmp.w	fp, #0
 8004ffa:	d003      	beq.n	8005004 <_scanf_float+0x15c>
 8004ffc:	3201      	adds	r2, #1
 8004ffe:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005002:	60a2      	str	r2, [r4, #8]
 8005004:	68a3      	ldr	r3, [r4, #8]
 8005006:	3b01      	subs	r3, #1
 8005008:	60a3      	str	r3, [r4, #8]
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	3301      	adds	r3, #1
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005014:	3b01      	subs	r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	f8c9 3004 	str.w	r3, [r9, #4]
 800501c:	f340 8082 	ble.w	8005124 <_scanf_float+0x27c>
 8005020:	f8d9 3000 	ldr.w	r3, [r9]
 8005024:	3301      	adds	r3, #1
 8005026:	f8c9 3000 	str.w	r3, [r9]
 800502a:	e762      	b.n	8004ef2 <_scanf_float+0x4a>
 800502c:	eb1a 0105 	adds.w	r1, sl, r5
 8005030:	f47f af6d 	bne.w	8004f0e <_scanf_float+0x66>
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800503a:	6022      	str	r2, [r4, #0]
 800503c:	460d      	mov	r5, r1
 800503e:	468a      	mov	sl, r1
 8005040:	f806 3b01 	strb.w	r3, [r6], #1
 8005044:	e7de      	b.n	8005004 <_scanf_float+0x15c>
 8005046:	6822      	ldr	r2, [r4, #0]
 8005048:	0610      	lsls	r0, r2, #24
 800504a:	f57f af60 	bpl.w	8004f0e <_scanf_float+0x66>
 800504e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005052:	6022      	str	r2, [r4, #0]
 8005054:	e7f4      	b.n	8005040 <_scanf_float+0x198>
 8005056:	f1ba 0f00 	cmp.w	sl, #0
 800505a:	d10c      	bne.n	8005076 <_scanf_float+0x1ce>
 800505c:	b977      	cbnz	r7, 800507c <_scanf_float+0x1d4>
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005064:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005068:	d108      	bne.n	800507c <_scanf_float+0x1d4>
 800506a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800506e:	6022      	str	r2, [r4, #0]
 8005070:	f04f 0a01 	mov.w	sl, #1
 8005074:	e7e4      	b.n	8005040 <_scanf_float+0x198>
 8005076:	f1ba 0f02 	cmp.w	sl, #2
 800507a:	d050      	beq.n	800511e <_scanf_float+0x276>
 800507c:	2d01      	cmp	r5, #1
 800507e:	d002      	beq.n	8005086 <_scanf_float+0x1de>
 8005080:	2d04      	cmp	r5, #4
 8005082:	f47f af44 	bne.w	8004f0e <_scanf_float+0x66>
 8005086:	3501      	adds	r5, #1
 8005088:	b2ed      	uxtb	r5, r5
 800508a:	e7d9      	b.n	8005040 <_scanf_float+0x198>
 800508c:	f1ba 0f01 	cmp.w	sl, #1
 8005090:	f47f af3d 	bne.w	8004f0e <_scanf_float+0x66>
 8005094:	f04f 0a02 	mov.w	sl, #2
 8005098:	e7d2      	b.n	8005040 <_scanf_float+0x198>
 800509a:	b975      	cbnz	r5, 80050ba <_scanf_float+0x212>
 800509c:	2f00      	cmp	r7, #0
 800509e:	f47f af37 	bne.w	8004f10 <_scanf_float+0x68>
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80050a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80050ac:	f040 8103 	bne.w	80052b6 <_scanf_float+0x40e>
 80050b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80050b4:	6022      	str	r2, [r4, #0]
 80050b6:	2501      	movs	r5, #1
 80050b8:	e7c2      	b.n	8005040 <_scanf_float+0x198>
 80050ba:	2d03      	cmp	r5, #3
 80050bc:	d0e3      	beq.n	8005086 <_scanf_float+0x1de>
 80050be:	2d05      	cmp	r5, #5
 80050c0:	e7df      	b.n	8005082 <_scanf_float+0x1da>
 80050c2:	2d02      	cmp	r5, #2
 80050c4:	f47f af23 	bne.w	8004f0e <_scanf_float+0x66>
 80050c8:	2503      	movs	r5, #3
 80050ca:	e7b9      	b.n	8005040 <_scanf_float+0x198>
 80050cc:	2d06      	cmp	r5, #6
 80050ce:	f47f af1e 	bne.w	8004f0e <_scanf_float+0x66>
 80050d2:	2507      	movs	r5, #7
 80050d4:	e7b4      	b.n	8005040 <_scanf_float+0x198>
 80050d6:	6822      	ldr	r2, [r4, #0]
 80050d8:	0591      	lsls	r1, r2, #22
 80050da:	f57f af18 	bpl.w	8004f0e <_scanf_float+0x66>
 80050de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80050e2:	6022      	str	r2, [r4, #0]
 80050e4:	9702      	str	r7, [sp, #8]
 80050e6:	e7ab      	b.n	8005040 <_scanf_float+0x198>
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80050ee:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80050f2:	d005      	beq.n	8005100 <_scanf_float+0x258>
 80050f4:	0550      	lsls	r0, r2, #21
 80050f6:	f57f af0a 	bpl.w	8004f0e <_scanf_float+0x66>
 80050fa:	2f00      	cmp	r7, #0
 80050fc:	f000 80db 	beq.w	80052b6 <_scanf_float+0x40e>
 8005100:	0591      	lsls	r1, r2, #22
 8005102:	bf58      	it	pl
 8005104:	9902      	ldrpl	r1, [sp, #8]
 8005106:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800510a:	bf58      	it	pl
 800510c:	1a79      	subpl	r1, r7, r1
 800510e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005112:	bf58      	it	pl
 8005114:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005118:	6022      	str	r2, [r4, #0]
 800511a:	2700      	movs	r7, #0
 800511c:	e790      	b.n	8005040 <_scanf_float+0x198>
 800511e:	f04f 0a03 	mov.w	sl, #3
 8005122:	e78d      	b.n	8005040 <_scanf_float+0x198>
 8005124:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005128:	4649      	mov	r1, r9
 800512a:	4640      	mov	r0, r8
 800512c:	4798      	blx	r3
 800512e:	2800      	cmp	r0, #0
 8005130:	f43f aedf 	beq.w	8004ef2 <_scanf_float+0x4a>
 8005134:	e6eb      	b.n	8004f0e <_scanf_float+0x66>
 8005136:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800513a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800513e:	464a      	mov	r2, r9
 8005140:	4640      	mov	r0, r8
 8005142:	4798      	blx	r3
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	3b01      	subs	r3, #1
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	e6eb      	b.n	8004f24 <_scanf_float+0x7c>
 800514c:	1e6b      	subs	r3, r5, #1
 800514e:	2b06      	cmp	r3, #6
 8005150:	d824      	bhi.n	800519c <_scanf_float+0x2f4>
 8005152:	2d02      	cmp	r5, #2
 8005154:	d836      	bhi.n	80051c4 <_scanf_float+0x31c>
 8005156:	9b01      	ldr	r3, [sp, #4]
 8005158:	429e      	cmp	r6, r3
 800515a:	f67f aee7 	bls.w	8004f2c <_scanf_float+0x84>
 800515e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005162:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005166:	464a      	mov	r2, r9
 8005168:	4640      	mov	r0, r8
 800516a:	4798      	blx	r3
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	3b01      	subs	r3, #1
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	e7f0      	b.n	8005156 <_scanf_float+0x2ae>
 8005174:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005178:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800517c:	464a      	mov	r2, r9
 800517e:	4640      	mov	r0, r8
 8005180:	4798      	blx	r3
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	3b01      	subs	r3, #1
 8005186:	6123      	str	r3, [r4, #16]
 8005188:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800518c:	fa5f fa8a 	uxtb.w	sl, sl
 8005190:	f1ba 0f02 	cmp.w	sl, #2
 8005194:	d1ee      	bne.n	8005174 <_scanf_float+0x2cc>
 8005196:	3d03      	subs	r5, #3
 8005198:	b2ed      	uxtb	r5, r5
 800519a:	1b76      	subs	r6, r6, r5
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	05da      	lsls	r2, r3, #23
 80051a0:	d530      	bpl.n	8005204 <_scanf_float+0x35c>
 80051a2:	055b      	lsls	r3, r3, #21
 80051a4:	d511      	bpl.n	80051ca <_scanf_float+0x322>
 80051a6:	9b01      	ldr	r3, [sp, #4]
 80051a8:	429e      	cmp	r6, r3
 80051aa:	f67f aebf 	bls.w	8004f2c <_scanf_float+0x84>
 80051ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051b6:	464a      	mov	r2, r9
 80051b8:	4640      	mov	r0, r8
 80051ba:	4798      	blx	r3
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	3b01      	subs	r3, #1
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	e7f0      	b.n	80051a6 <_scanf_float+0x2fe>
 80051c4:	46aa      	mov	sl, r5
 80051c6:	46b3      	mov	fp, r6
 80051c8:	e7de      	b.n	8005188 <_scanf_float+0x2e0>
 80051ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80051ce:	6923      	ldr	r3, [r4, #16]
 80051d0:	2965      	cmp	r1, #101	@ 0x65
 80051d2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80051d6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80051da:	6123      	str	r3, [r4, #16]
 80051dc:	d00c      	beq.n	80051f8 <_scanf_float+0x350>
 80051de:	2945      	cmp	r1, #69	@ 0x45
 80051e0:	d00a      	beq.n	80051f8 <_scanf_float+0x350>
 80051e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051e6:	464a      	mov	r2, r9
 80051e8:	4640      	mov	r0, r8
 80051ea:	4798      	blx	r3
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	1eb5      	subs	r5, r6, #2
 80051f6:	6123      	str	r3, [r4, #16]
 80051f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051fc:	464a      	mov	r2, r9
 80051fe:	4640      	mov	r0, r8
 8005200:	4798      	blx	r3
 8005202:	462e      	mov	r6, r5
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	f012 0210 	ands.w	r2, r2, #16
 800520a:	d001      	beq.n	8005210 <_scanf_float+0x368>
 800520c:	2000      	movs	r0, #0
 800520e:	e68e      	b.n	8004f2e <_scanf_float+0x86>
 8005210:	7032      	strb	r2, [r6, #0]
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521c:	d125      	bne.n	800526a <_scanf_float+0x3c2>
 800521e:	9b02      	ldr	r3, [sp, #8]
 8005220:	429f      	cmp	r7, r3
 8005222:	d00a      	beq.n	800523a <_scanf_float+0x392>
 8005224:	1bda      	subs	r2, r3, r7
 8005226:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800522a:	429e      	cmp	r6, r3
 800522c:	bf28      	it	cs
 800522e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005232:	4922      	ldr	r1, [pc, #136]	@ (80052bc <_scanf_float+0x414>)
 8005234:	4630      	mov	r0, r6
 8005236:	f000 f9df 	bl	80055f8 <siprintf>
 800523a:	9901      	ldr	r1, [sp, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	4640      	mov	r0, r8
 8005240:	f002 fcca 	bl	8007bd8 <_strtod_r>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	6821      	ldr	r1, [r4, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f011 0f02 	tst.w	r1, #2
 800524e:	ec57 6b10 	vmov	r6, r7, d0
 8005252:	f103 0204 	add.w	r2, r3, #4
 8005256:	d015      	beq.n	8005284 <_scanf_float+0x3dc>
 8005258:	9903      	ldr	r1, [sp, #12]
 800525a:	600a      	str	r2, [r1, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	e9c3 6700 	strd	r6, r7, [r3]
 8005262:	68e3      	ldr	r3, [r4, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60e3      	str	r3, [r4, #12]
 8005268:	e7d0      	b.n	800520c <_scanf_float+0x364>
 800526a:	9b04      	ldr	r3, [sp, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0e4      	beq.n	800523a <_scanf_float+0x392>
 8005270:	9905      	ldr	r1, [sp, #20]
 8005272:	230a      	movs	r3, #10
 8005274:	3101      	adds	r1, #1
 8005276:	4640      	mov	r0, r8
 8005278:	f002 fd2e 	bl	8007cd8 <_strtol_r>
 800527c:	9b04      	ldr	r3, [sp, #16]
 800527e:	9e05      	ldr	r6, [sp, #20]
 8005280:	1ac2      	subs	r2, r0, r3
 8005282:	e7d0      	b.n	8005226 <_scanf_float+0x37e>
 8005284:	f011 0f04 	tst.w	r1, #4
 8005288:	9903      	ldr	r1, [sp, #12]
 800528a:	600a      	str	r2, [r1, #0]
 800528c:	d1e6      	bne.n	800525c <_scanf_float+0x3b4>
 800528e:	681d      	ldr	r5, [r3, #0]
 8005290:	4632      	mov	r2, r6
 8005292:	463b      	mov	r3, r7
 8005294:	4630      	mov	r0, r6
 8005296:	4639      	mov	r1, r7
 8005298:	f7fb fc48 	bl	8000b2c <__aeabi_dcmpun>
 800529c:	b128      	cbz	r0, 80052aa <_scanf_float+0x402>
 800529e:	4808      	ldr	r0, [pc, #32]	@ (80052c0 <_scanf_float+0x418>)
 80052a0:	f000 fa90 	bl	80057c4 <nanf>
 80052a4:	ed85 0a00 	vstr	s0, [r5]
 80052a8:	e7db      	b.n	8005262 <_scanf_float+0x3ba>
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fb fc9b 	bl	8000be8 <__aeabi_d2f>
 80052b2:	6028      	str	r0, [r5, #0]
 80052b4:	e7d5      	b.n	8005262 <_scanf_float+0x3ba>
 80052b6:	2700      	movs	r7, #0
 80052b8:	e62e      	b.n	8004f18 <_scanf_float+0x70>
 80052ba:	bf00      	nop
 80052bc:	08009962 	.word	0x08009962
 80052c0:	08009abe 	.word	0x08009abe

080052c4 <std>:
 80052c4:	2300      	movs	r3, #0
 80052c6:	b510      	push	{r4, lr}
 80052c8:	4604      	mov	r4, r0
 80052ca:	e9c0 3300 	strd	r3, r3, [r0]
 80052ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052d2:	6083      	str	r3, [r0, #8]
 80052d4:	8181      	strh	r1, [r0, #12]
 80052d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052d8:	81c2      	strh	r2, [r0, #14]
 80052da:	6183      	str	r3, [r0, #24]
 80052dc:	4619      	mov	r1, r3
 80052de:	2208      	movs	r2, #8
 80052e0:	305c      	adds	r0, #92	@ 0x5c
 80052e2:	f000 f9ee 	bl	80056c2 <memset>
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <std+0x58>)
 80052e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80052ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <std+0x5c>)
 80052ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <std+0x60>)
 80052f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <std+0x64>)
 80052f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <std+0x68>)
 80052f8:	6224      	str	r4, [r4, #32]
 80052fa:	429c      	cmp	r4, r3
 80052fc:	d006      	beq.n	800530c <std+0x48>
 80052fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005302:	4294      	cmp	r4, r2
 8005304:	d002      	beq.n	800530c <std+0x48>
 8005306:	33d0      	adds	r3, #208	@ 0xd0
 8005308:	429c      	cmp	r4, r3
 800530a:	d105      	bne.n	8005318 <std+0x54>
 800530c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005314:	f000 ba52 	b.w	80057bc <__retarget_lock_init_recursive>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	0800563d 	.word	0x0800563d
 8005320:	0800565f 	.word	0x0800565f
 8005324:	08005697 	.word	0x08005697
 8005328:	080056bb 	.word	0x080056bb
 800532c:	200002f4 	.word	0x200002f4

08005330 <stdio_exit_handler>:
 8005330:	4a02      	ldr	r2, [pc, #8]	@ (800533c <stdio_exit_handler+0xc>)
 8005332:	4903      	ldr	r1, [pc, #12]	@ (8005340 <stdio_exit_handler+0x10>)
 8005334:	4803      	ldr	r0, [pc, #12]	@ (8005344 <stdio_exit_handler+0x14>)
 8005336:	f000 b869 	b.w	800540c <_fwalk_sglue>
 800533a:	bf00      	nop
 800533c:	2000000c 	.word	0x2000000c
 8005340:	08008919 	.word	0x08008919
 8005344:	2000001c 	.word	0x2000001c

08005348 <cleanup_stdio>:
 8005348:	6841      	ldr	r1, [r0, #4]
 800534a:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <cleanup_stdio+0x34>)
 800534c:	4299      	cmp	r1, r3
 800534e:	b510      	push	{r4, lr}
 8005350:	4604      	mov	r4, r0
 8005352:	d001      	beq.n	8005358 <cleanup_stdio+0x10>
 8005354:	f003 fae0 	bl	8008918 <_fflush_r>
 8005358:	68a1      	ldr	r1, [r4, #8]
 800535a:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <cleanup_stdio+0x38>)
 800535c:	4299      	cmp	r1, r3
 800535e:	d002      	beq.n	8005366 <cleanup_stdio+0x1e>
 8005360:	4620      	mov	r0, r4
 8005362:	f003 fad9 	bl	8008918 <_fflush_r>
 8005366:	68e1      	ldr	r1, [r4, #12]
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <cleanup_stdio+0x3c>)
 800536a:	4299      	cmp	r1, r3
 800536c:	d004      	beq.n	8005378 <cleanup_stdio+0x30>
 800536e:	4620      	mov	r0, r4
 8005370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005374:	f003 bad0 	b.w	8008918 <_fflush_r>
 8005378:	bd10      	pop	{r4, pc}
 800537a:	bf00      	nop
 800537c:	200002f4 	.word	0x200002f4
 8005380:	2000035c 	.word	0x2000035c
 8005384:	200003c4 	.word	0x200003c4

08005388 <global_stdio_init.part.0>:
 8005388:	b510      	push	{r4, lr}
 800538a:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <global_stdio_init.part.0+0x30>)
 800538c:	4c0b      	ldr	r4, [pc, #44]	@ (80053bc <global_stdio_init.part.0+0x34>)
 800538e:	4a0c      	ldr	r2, [pc, #48]	@ (80053c0 <global_stdio_init.part.0+0x38>)
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	4620      	mov	r0, r4
 8005394:	2200      	movs	r2, #0
 8005396:	2104      	movs	r1, #4
 8005398:	f7ff ff94 	bl	80052c4 <std>
 800539c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053a0:	2201      	movs	r2, #1
 80053a2:	2109      	movs	r1, #9
 80053a4:	f7ff ff8e 	bl	80052c4 <std>
 80053a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053ac:	2202      	movs	r2, #2
 80053ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b2:	2112      	movs	r1, #18
 80053b4:	f7ff bf86 	b.w	80052c4 <std>
 80053b8:	2000042c 	.word	0x2000042c
 80053bc:	200002f4 	.word	0x200002f4
 80053c0:	08005331 	.word	0x08005331

080053c4 <__sfp_lock_acquire>:
 80053c4:	4801      	ldr	r0, [pc, #4]	@ (80053cc <__sfp_lock_acquire+0x8>)
 80053c6:	f000 b9fa 	b.w	80057be <__retarget_lock_acquire_recursive>
 80053ca:	bf00      	nop
 80053cc:	20000435 	.word	0x20000435

080053d0 <__sfp_lock_release>:
 80053d0:	4801      	ldr	r0, [pc, #4]	@ (80053d8 <__sfp_lock_release+0x8>)
 80053d2:	f000 b9f5 	b.w	80057c0 <__retarget_lock_release_recursive>
 80053d6:	bf00      	nop
 80053d8:	20000435 	.word	0x20000435

080053dc <__sinit>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4604      	mov	r4, r0
 80053e0:	f7ff fff0 	bl	80053c4 <__sfp_lock_acquire>
 80053e4:	6a23      	ldr	r3, [r4, #32]
 80053e6:	b11b      	cbz	r3, 80053f0 <__sinit+0x14>
 80053e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ec:	f7ff bff0 	b.w	80053d0 <__sfp_lock_release>
 80053f0:	4b04      	ldr	r3, [pc, #16]	@ (8005404 <__sinit+0x28>)
 80053f2:	6223      	str	r3, [r4, #32]
 80053f4:	4b04      	ldr	r3, [pc, #16]	@ (8005408 <__sinit+0x2c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f5      	bne.n	80053e8 <__sinit+0xc>
 80053fc:	f7ff ffc4 	bl	8005388 <global_stdio_init.part.0>
 8005400:	e7f2      	b.n	80053e8 <__sinit+0xc>
 8005402:	bf00      	nop
 8005404:	08005349 	.word	0x08005349
 8005408:	2000042c 	.word	0x2000042c

0800540c <_fwalk_sglue>:
 800540c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005410:	4607      	mov	r7, r0
 8005412:	4688      	mov	r8, r1
 8005414:	4614      	mov	r4, r2
 8005416:	2600      	movs	r6, #0
 8005418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800541c:	f1b9 0901 	subs.w	r9, r9, #1
 8005420:	d505      	bpl.n	800542e <_fwalk_sglue+0x22>
 8005422:	6824      	ldr	r4, [r4, #0]
 8005424:	2c00      	cmp	r4, #0
 8005426:	d1f7      	bne.n	8005418 <_fwalk_sglue+0xc>
 8005428:	4630      	mov	r0, r6
 800542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542e:	89ab      	ldrh	r3, [r5, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d907      	bls.n	8005444 <_fwalk_sglue+0x38>
 8005434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005438:	3301      	adds	r3, #1
 800543a:	d003      	beq.n	8005444 <_fwalk_sglue+0x38>
 800543c:	4629      	mov	r1, r5
 800543e:	4638      	mov	r0, r7
 8005440:	47c0      	blx	r8
 8005442:	4306      	orrs	r6, r0
 8005444:	3568      	adds	r5, #104	@ 0x68
 8005446:	e7e9      	b.n	800541c <_fwalk_sglue+0x10>

08005448 <iprintf>:
 8005448:	b40f      	push	{r0, r1, r2, r3}
 800544a:	b507      	push	{r0, r1, r2, lr}
 800544c:	4906      	ldr	r1, [pc, #24]	@ (8005468 <iprintf+0x20>)
 800544e:	ab04      	add	r3, sp, #16
 8005450:	6808      	ldr	r0, [r1, #0]
 8005452:	f853 2b04 	ldr.w	r2, [r3], #4
 8005456:	6881      	ldr	r1, [r0, #8]
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	f002 fdc1 	bl	8007fe0 <_vfiprintf_r>
 800545e:	b003      	add	sp, #12
 8005460:	f85d eb04 	ldr.w	lr, [sp], #4
 8005464:	b004      	add	sp, #16
 8005466:	4770      	bx	lr
 8005468:	20000018 	.word	0x20000018

0800546c <iscanf>:
 800546c:	b40f      	push	{r0, r1, r2, r3}
 800546e:	b507      	push	{r0, r1, r2, lr}
 8005470:	4906      	ldr	r1, [pc, #24]	@ (800548c <iscanf+0x20>)
 8005472:	ab04      	add	r3, sp, #16
 8005474:	6808      	ldr	r0, [r1, #0]
 8005476:	f853 2b04 	ldr.w	r2, [r3], #4
 800547a:	6841      	ldr	r1, [r0, #4]
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	f003 f865 	bl	800854c <_vfiscanf_r>
 8005482:	b003      	add	sp, #12
 8005484:	f85d eb04 	ldr.w	lr, [sp], #4
 8005488:	b004      	add	sp, #16
 800548a:	4770      	bx	lr
 800548c:	20000018 	.word	0x20000018

08005490 <setvbuf>:
 8005490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005494:	461d      	mov	r5, r3
 8005496:	4b57      	ldr	r3, [pc, #348]	@ (80055f4 <setvbuf+0x164>)
 8005498:	681f      	ldr	r7, [r3, #0]
 800549a:	4604      	mov	r4, r0
 800549c:	460e      	mov	r6, r1
 800549e:	4690      	mov	r8, r2
 80054a0:	b127      	cbz	r7, 80054ac <setvbuf+0x1c>
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	b913      	cbnz	r3, 80054ac <setvbuf+0x1c>
 80054a6:	4638      	mov	r0, r7
 80054a8:	f7ff ff98 	bl	80053dc <__sinit>
 80054ac:	f1b8 0f02 	cmp.w	r8, #2
 80054b0:	d006      	beq.n	80054c0 <setvbuf+0x30>
 80054b2:	f1b8 0f01 	cmp.w	r8, #1
 80054b6:	f200 809a 	bhi.w	80055ee <setvbuf+0x15e>
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	f2c0 8097 	blt.w	80055ee <setvbuf+0x15e>
 80054c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054c2:	07d9      	lsls	r1, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <setvbuf+0x42>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	059a      	lsls	r2, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <setvbuf+0x42>
 80054cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ce:	f000 f976 	bl	80057be <__retarget_lock_acquire_recursive>
 80054d2:	4621      	mov	r1, r4
 80054d4:	4638      	mov	r0, r7
 80054d6:	f003 fa1f 	bl	8008918 <_fflush_r>
 80054da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054dc:	b141      	cbz	r1, 80054f0 <setvbuf+0x60>
 80054de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054e2:	4299      	cmp	r1, r3
 80054e4:	d002      	beq.n	80054ec <setvbuf+0x5c>
 80054e6:	4638      	mov	r0, r7
 80054e8:	f000 ffca 	bl	8006480 <_free_r>
 80054ec:	2300      	movs	r3, #0
 80054ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80054f0:	2300      	movs	r3, #0
 80054f2:	61a3      	str	r3, [r4, #24]
 80054f4:	6063      	str	r3, [r4, #4]
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	061b      	lsls	r3, r3, #24
 80054fa:	d503      	bpl.n	8005504 <setvbuf+0x74>
 80054fc:	6921      	ldr	r1, [r4, #16]
 80054fe:	4638      	mov	r0, r7
 8005500:	f000 ffbe 	bl	8006480 <_free_r>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800550a:	f023 0303 	bic.w	r3, r3, #3
 800550e:	f1b8 0f02 	cmp.w	r8, #2
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	d061      	beq.n	80055da <setvbuf+0x14a>
 8005516:	ab01      	add	r3, sp, #4
 8005518:	466a      	mov	r2, sp
 800551a:	4621      	mov	r1, r4
 800551c:	4638      	mov	r0, r7
 800551e:	f003 fa23 	bl	8008968 <__swhatbuf_r>
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	4318      	orrs	r0, r3
 8005526:	81a0      	strh	r0, [r4, #12]
 8005528:	bb2d      	cbnz	r5, 8005576 <setvbuf+0xe6>
 800552a:	9d00      	ldr	r5, [sp, #0]
 800552c:	4628      	mov	r0, r5
 800552e:	f000 fff1 	bl	8006514 <malloc>
 8005532:	4606      	mov	r6, r0
 8005534:	2800      	cmp	r0, #0
 8005536:	d152      	bne.n	80055de <setvbuf+0x14e>
 8005538:	f8dd 9000 	ldr.w	r9, [sp]
 800553c:	45a9      	cmp	r9, r5
 800553e:	d140      	bne.n	80055c2 <setvbuf+0x132>
 8005540:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005548:	f043 0202 	orr.w	r2, r3, #2
 800554c:	81a2      	strh	r2, [r4, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	60a2      	str	r2, [r4, #8]
 8005552:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005556:	6022      	str	r2, [r4, #0]
 8005558:	6122      	str	r2, [r4, #16]
 800555a:	2201      	movs	r2, #1
 800555c:	6162      	str	r2, [r4, #20]
 800555e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005560:	07d6      	lsls	r6, r2, #31
 8005562:	d404      	bmi.n	800556e <setvbuf+0xde>
 8005564:	0598      	lsls	r0, r3, #22
 8005566:	d402      	bmi.n	800556e <setvbuf+0xde>
 8005568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800556a:	f000 f929 	bl	80057c0 <__retarget_lock_release_recursive>
 800556e:	4628      	mov	r0, r5
 8005570:	b003      	add	sp, #12
 8005572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005576:	2e00      	cmp	r6, #0
 8005578:	d0d8      	beq.n	800552c <setvbuf+0x9c>
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	b913      	cbnz	r3, 8005584 <setvbuf+0xf4>
 800557e:	4638      	mov	r0, r7
 8005580:	f7ff ff2c 	bl	80053dc <__sinit>
 8005584:	f1b8 0f01 	cmp.w	r8, #1
 8005588:	bf08      	it	eq
 800558a:	89a3      	ldrheq	r3, [r4, #12]
 800558c:	6026      	str	r6, [r4, #0]
 800558e:	bf04      	itt	eq
 8005590:	f043 0301 	orreq.w	r3, r3, #1
 8005594:	81a3      	strheq	r3, [r4, #12]
 8005596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800559a:	f013 0208 	ands.w	r2, r3, #8
 800559e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80055a2:	d01e      	beq.n	80055e2 <setvbuf+0x152>
 80055a4:	07d9      	lsls	r1, r3, #31
 80055a6:	bf41      	itttt	mi
 80055a8:	2200      	movmi	r2, #0
 80055aa:	426d      	negmi	r5, r5
 80055ac:	60a2      	strmi	r2, [r4, #8]
 80055ae:	61a5      	strmi	r5, [r4, #24]
 80055b0:	bf58      	it	pl
 80055b2:	60a5      	strpl	r5, [r4, #8]
 80055b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055b6:	07d2      	lsls	r2, r2, #31
 80055b8:	d401      	bmi.n	80055be <setvbuf+0x12e>
 80055ba:	059b      	lsls	r3, r3, #22
 80055bc:	d513      	bpl.n	80055e6 <setvbuf+0x156>
 80055be:	2500      	movs	r5, #0
 80055c0:	e7d5      	b.n	800556e <setvbuf+0xde>
 80055c2:	4648      	mov	r0, r9
 80055c4:	f000 ffa6 	bl	8006514 <malloc>
 80055c8:	4606      	mov	r6, r0
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d0b8      	beq.n	8005540 <setvbuf+0xb0>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	464d      	mov	r5, r9
 80055d8:	e7cf      	b.n	800557a <setvbuf+0xea>
 80055da:	2500      	movs	r5, #0
 80055dc:	e7b2      	b.n	8005544 <setvbuf+0xb4>
 80055de:	46a9      	mov	r9, r5
 80055e0:	e7f5      	b.n	80055ce <setvbuf+0x13e>
 80055e2:	60a2      	str	r2, [r4, #8]
 80055e4:	e7e6      	b.n	80055b4 <setvbuf+0x124>
 80055e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055e8:	f000 f8ea 	bl	80057c0 <__retarget_lock_release_recursive>
 80055ec:	e7e7      	b.n	80055be <setvbuf+0x12e>
 80055ee:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80055f2:	e7bc      	b.n	800556e <setvbuf+0xde>
 80055f4:	20000018 	.word	0x20000018

080055f8 <siprintf>:
 80055f8:	b40e      	push	{r1, r2, r3}
 80055fa:	b510      	push	{r4, lr}
 80055fc:	b09d      	sub	sp, #116	@ 0x74
 80055fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005600:	9002      	str	r0, [sp, #8]
 8005602:	9006      	str	r0, [sp, #24]
 8005604:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005608:	480a      	ldr	r0, [pc, #40]	@ (8005634 <siprintf+0x3c>)
 800560a:	9107      	str	r1, [sp, #28]
 800560c:	9104      	str	r1, [sp, #16]
 800560e:	490a      	ldr	r1, [pc, #40]	@ (8005638 <siprintf+0x40>)
 8005610:	f853 2b04 	ldr.w	r2, [r3], #4
 8005614:	9105      	str	r1, [sp, #20]
 8005616:	2400      	movs	r4, #0
 8005618:	a902      	add	r1, sp, #8
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005620:	f002 fbb8 	bl	8007d94 <_svfiprintf_r>
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	701c      	strb	r4, [r3, #0]
 8005628:	b01d      	add	sp, #116	@ 0x74
 800562a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562e:	b003      	add	sp, #12
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000018 	.word	0x20000018
 8005638:	ffff0208 	.word	0xffff0208

0800563c <__sread>:
 800563c:	b510      	push	{r4, lr}
 800563e:	460c      	mov	r4, r1
 8005640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005644:	f000 f86c 	bl	8005720 <_read_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	bfab      	itete	ge
 800564c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800564e:	89a3      	ldrhlt	r3, [r4, #12]
 8005650:	181b      	addge	r3, r3, r0
 8005652:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005656:	bfac      	ite	ge
 8005658:	6563      	strge	r3, [r4, #84]	@ 0x54
 800565a:	81a3      	strhlt	r3, [r4, #12]
 800565c:	bd10      	pop	{r4, pc}

0800565e <__swrite>:
 800565e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005662:	461f      	mov	r7, r3
 8005664:	898b      	ldrh	r3, [r1, #12]
 8005666:	05db      	lsls	r3, r3, #23
 8005668:	4605      	mov	r5, r0
 800566a:	460c      	mov	r4, r1
 800566c:	4616      	mov	r6, r2
 800566e:	d505      	bpl.n	800567c <__swrite+0x1e>
 8005670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005674:	2302      	movs	r3, #2
 8005676:	2200      	movs	r2, #0
 8005678:	f000 f840 	bl	80056fc <_lseek_r>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005682:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	4632      	mov	r2, r6
 800568a:	463b      	mov	r3, r7
 800568c:	4628      	mov	r0, r5
 800568e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005692:	f000 b857 	b.w	8005744 <_write_r>

08005696 <__sseek>:
 8005696:	b510      	push	{r4, lr}
 8005698:	460c      	mov	r4, r1
 800569a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800569e:	f000 f82d 	bl	80056fc <_lseek_r>
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	bf15      	itete	ne
 80056a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056b2:	81a3      	strheq	r3, [r4, #12]
 80056b4:	bf18      	it	ne
 80056b6:	81a3      	strhne	r3, [r4, #12]
 80056b8:	bd10      	pop	{r4, pc}

080056ba <__sclose>:
 80056ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056be:	f000 b80d 	b.w	80056dc <_close_r>

080056c2 <memset>:
 80056c2:	4402      	add	r2, r0
 80056c4:	4603      	mov	r3, r0
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d100      	bne.n	80056cc <memset+0xa>
 80056ca:	4770      	bx	lr
 80056cc:	f803 1b01 	strb.w	r1, [r3], #1
 80056d0:	e7f9      	b.n	80056c6 <memset+0x4>
	...

080056d4 <_localeconv_r>:
 80056d4:	4800      	ldr	r0, [pc, #0]	@ (80056d8 <_localeconv_r+0x4>)
 80056d6:	4770      	bx	lr
 80056d8:	20000158 	.word	0x20000158

080056dc <_close_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d06      	ldr	r5, [pc, #24]	@ (80056f8 <_close_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fb fe74 	bl	80013d4 <_close>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_close_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_close_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	20000430 	.word	0x20000430

080056fc <_lseek_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4d07      	ldr	r5, [pc, #28]	@ (800571c <_lseek_r+0x20>)
 8005700:	4604      	mov	r4, r0
 8005702:	4608      	mov	r0, r1
 8005704:	4611      	mov	r1, r2
 8005706:	2200      	movs	r2, #0
 8005708:	602a      	str	r2, [r5, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	f7fb fe89 	bl	8001422 <_lseek>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_lseek_r+0x1e>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_lseek_r+0x1e>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	20000430 	.word	0x20000430

08005720 <_read_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4d07      	ldr	r5, [pc, #28]	@ (8005740 <_read_r+0x20>)
 8005724:	4604      	mov	r4, r0
 8005726:	4608      	mov	r0, r1
 8005728:	4611      	mov	r1, r2
 800572a:	2200      	movs	r2, #0
 800572c:	602a      	str	r2, [r5, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	f7fb fe17 	bl	8001362 <_read>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_read_r+0x1e>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_read_r+0x1e>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000430 	.word	0x20000430

08005744 <_write_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d07      	ldr	r5, [pc, #28]	@ (8005764 <_write_r+0x20>)
 8005748:	4604      	mov	r4, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	2200      	movs	r2, #0
 8005750:	602a      	str	r2, [r5, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f7fb fe22 	bl	800139c <_write>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_write_r+0x1e>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_write_r+0x1e>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20000430 	.word	0x20000430

08005768 <__errno>:
 8005768:	4b01      	ldr	r3, [pc, #4]	@ (8005770 <__errno+0x8>)
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20000018 	.word	0x20000018

08005774 <__libc_init_array>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	4d0d      	ldr	r5, [pc, #52]	@ (80057ac <__libc_init_array+0x38>)
 8005778:	4c0d      	ldr	r4, [pc, #52]	@ (80057b0 <__libc_init_array+0x3c>)
 800577a:	1b64      	subs	r4, r4, r5
 800577c:	10a4      	asrs	r4, r4, #2
 800577e:	2600      	movs	r6, #0
 8005780:	42a6      	cmp	r6, r4
 8005782:	d109      	bne.n	8005798 <__libc_init_array+0x24>
 8005784:	4d0b      	ldr	r5, [pc, #44]	@ (80057b4 <__libc_init_array+0x40>)
 8005786:	4c0c      	ldr	r4, [pc, #48]	@ (80057b8 <__libc_init_array+0x44>)
 8005788:	f004 f85e 	bl	8009848 <_init>
 800578c:	1b64      	subs	r4, r4, r5
 800578e:	10a4      	asrs	r4, r4, #2
 8005790:	2600      	movs	r6, #0
 8005792:	42a6      	cmp	r6, r4
 8005794:	d105      	bne.n	80057a2 <__libc_init_array+0x2e>
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	f855 3b04 	ldr.w	r3, [r5], #4
 800579c:	4798      	blx	r3
 800579e:	3601      	adds	r6, #1
 80057a0:	e7ee      	b.n	8005780 <__libc_init_array+0xc>
 80057a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a6:	4798      	blx	r3
 80057a8:	3601      	adds	r6, #1
 80057aa:	e7f2      	b.n	8005792 <__libc_init_array+0x1e>
 80057ac:	08009d7c 	.word	0x08009d7c
 80057b0:	08009d7c 	.word	0x08009d7c
 80057b4:	08009d7c 	.word	0x08009d7c
 80057b8:	08009d80 	.word	0x08009d80

080057bc <__retarget_lock_init_recursive>:
 80057bc:	4770      	bx	lr

080057be <__retarget_lock_acquire_recursive>:
 80057be:	4770      	bx	lr

080057c0 <__retarget_lock_release_recursive>:
 80057c0:	4770      	bx	lr
	...

080057c4 <nanf>:
 80057c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80057cc <nanf+0x8>
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	7fc00000 	.word	0x7fc00000

080057d0 <quorem>:
 80057d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	6903      	ldr	r3, [r0, #16]
 80057d6:	690c      	ldr	r4, [r1, #16]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	4607      	mov	r7, r0
 80057dc:	db7e      	blt.n	80058dc <quorem+0x10c>
 80057de:	3c01      	subs	r4, #1
 80057e0:	f101 0814 	add.w	r8, r1, #20
 80057e4:	00a3      	lsls	r3, r4, #2
 80057e6:	f100 0514 	add.w	r5, r0, #20
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057fa:	3301      	adds	r3, #1
 80057fc:	429a      	cmp	r2, r3
 80057fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005802:	fbb2 f6f3 	udiv	r6, r2, r3
 8005806:	d32e      	bcc.n	8005866 <quorem+0x96>
 8005808:	f04f 0a00 	mov.w	sl, #0
 800580c:	46c4      	mov	ip, r8
 800580e:	46ae      	mov	lr, r5
 8005810:	46d3      	mov	fp, sl
 8005812:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005816:	b298      	uxth	r0, r3
 8005818:	fb06 a000 	mla	r0, r6, r0, sl
 800581c:	0c02      	lsrs	r2, r0, #16
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	fb06 2303 	mla	r3, r6, r3, r2
 8005824:	f8de 2000 	ldr.w	r2, [lr]
 8005828:	b280      	uxth	r0, r0
 800582a:	b292      	uxth	r2, r2
 800582c:	1a12      	subs	r2, r2, r0
 800582e:	445a      	add	r2, fp
 8005830:	f8de 0000 	ldr.w	r0, [lr]
 8005834:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005838:	b29b      	uxth	r3, r3
 800583a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800583e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005842:	b292      	uxth	r2, r2
 8005844:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005848:	45e1      	cmp	r9, ip
 800584a:	f84e 2b04 	str.w	r2, [lr], #4
 800584e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005852:	d2de      	bcs.n	8005812 <quorem+0x42>
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	58eb      	ldr	r3, [r5, r3]
 8005858:	b92b      	cbnz	r3, 8005866 <quorem+0x96>
 800585a:	9b01      	ldr	r3, [sp, #4]
 800585c:	3b04      	subs	r3, #4
 800585e:	429d      	cmp	r5, r3
 8005860:	461a      	mov	r2, r3
 8005862:	d32f      	bcc.n	80058c4 <quorem+0xf4>
 8005864:	613c      	str	r4, [r7, #16]
 8005866:	4638      	mov	r0, r7
 8005868:	f001 f9c6 	bl	8006bf8 <__mcmp>
 800586c:	2800      	cmp	r0, #0
 800586e:	db25      	blt.n	80058bc <quorem+0xec>
 8005870:	4629      	mov	r1, r5
 8005872:	2000      	movs	r0, #0
 8005874:	f858 2b04 	ldr.w	r2, [r8], #4
 8005878:	f8d1 c000 	ldr.w	ip, [r1]
 800587c:	fa1f fe82 	uxth.w	lr, r2
 8005880:	fa1f f38c 	uxth.w	r3, ip
 8005884:	eba3 030e 	sub.w	r3, r3, lr
 8005888:	4403      	add	r3, r0
 800588a:	0c12      	lsrs	r2, r2, #16
 800588c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005890:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005894:	b29b      	uxth	r3, r3
 8005896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800589a:	45c1      	cmp	r9, r8
 800589c:	f841 3b04 	str.w	r3, [r1], #4
 80058a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80058a4:	d2e6      	bcs.n	8005874 <quorem+0xa4>
 80058a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ae:	b922      	cbnz	r2, 80058ba <quorem+0xea>
 80058b0:	3b04      	subs	r3, #4
 80058b2:	429d      	cmp	r5, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	d30b      	bcc.n	80058d0 <quorem+0x100>
 80058b8:	613c      	str	r4, [r7, #16]
 80058ba:	3601      	adds	r6, #1
 80058bc:	4630      	mov	r0, r6
 80058be:	b003      	add	sp, #12
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	3b04      	subs	r3, #4
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d1cb      	bne.n	8005864 <quorem+0x94>
 80058cc:	3c01      	subs	r4, #1
 80058ce:	e7c6      	b.n	800585e <quorem+0x8e>
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	3b04      	subs	r3, #4
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	d1ef      	bne.n	80058b8 <quorem+0xe8>
 80058d8:	3c01      	subs	r4, #1
 80058da:	e7ea      	b.n	80058b2 <quorem+0xe2>
 80058dc:	2000      	movs	r0, #0
 80058de:	e7ee      	b.n	80058be <quorem+0xee>

080058e0 <_dtoa_r>:
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	69c7      	ldr	r7, [r0, #28]
 80058e6:	b097      	sub	sp, #92	@ 0x5c
 80058e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80058ec:	ec55 4b10 	vmov	r4, r5, d0
 80058f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80058f2:	9107      	str	r1, [sp, #28]
 80058f4:	4681      	mov	r9, r0
 80058f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80058f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80058fa:	b97f      	cbnz	r7, 800591c <_dtoa_r+0x3c>
 80058fc:	2010      	movs	r0, #16
 80058fe:	f000 fe09 	bl	8006514 <malloc>
 8005902:	4602      	mov	r2, r0
 8005904:	f8c9 001c 	str.w	r0, [r9, #28]
 8005908:	b920      	cbnz	r0, 8005914 <_dtoa_r+0x34>
 800590a:	4ba9      	ldr	r3, [pc, #676]	@ (8005bb0 <_dtoa_r+0x2d0>)
 800590c:	21ef      	movs	r1, #239	@ 0xef
 800590e:	48a9      	ldr	r0, [pc, #676]	@ (8005bb4 <_dtoa_r+0x2d4>)
 8005910:	f003 fb0a 	bl	8008f28 <__assert_func>
 8005914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005918:	6007      	str	r7, [r0, #0]
 800591a:	60c7      	str	r7, [r0, #12]
 800591c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005920:	6819      	ldr	r1, [r3, #0]
 8005922:	b159      	cbz	r1, 800593c <_dtoa_r+0x5c>
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	604a      	str	r2, [r1, #4]
 8005928:	2301      	movs	r3, #1
 800592a:	4093      	lsls	r3, r2
 800592c:	608b      	str	r3, [r1, #8]
 800592e:	4648      	mov	r0, r9
 8005930:	f000 fee6 	bl	8006700 <_Bfree>
 8005934:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	1e2b      	subs	r3, r5, #0
 800593e:	bfb9      	ittee	lt
 8005940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005944:	9305      	strlt	r3, [sp, #20]
 8005946:	2300      	movge	r3, #0
 8005948:	6033      	strge	r3, [r6, #0]
 800594a:	9f05      	ldr	r7, [sp, #20]
 800594c:	4b9a      	ldr	r3, [pc, #616]	@ (8005bb8 <_dtoa_r+0x2d8>)
 800594e:	bfbc      	itt	lt
 8005950:	2201      	movlt	r2, #1
 8005952:	6032      	strlt	r2, [r6, #0]
 8005954:	43bb      	bics	r3, r7
 8005956:	d112      	bne.n	800597e <_dtoa_r+0x9e>
 8005958:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800595a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005964:	4323      	orrs	r3, r4
 8005966:	f000 855a 	beq.w	800641e <_dtoa_r+0xb3e>
 800596a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800596c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005bcc <_dtoa_r+0x2ec>
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 855c 	beq.w	800642e <_dtoa_r+0xb4e>
 8005976:	f10a 0303 	add.w	r3, sl, #3
 800597a:	f000 bd56 	b.w	800642a <_dtoa_r+0xb4a>
 800597e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005982:	2200      	movs	r2, #0
 8005984:	ec51 0b17 	vmov	r0, r1, d7
 8005988:	2300      	movs	r3, #0
 800598a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800598e:	f7fb f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005992:	4680      	mov	r8, r0
 8005994:	b158      	cbz	r0, 80059ae <_dtoa_r+0xce>
 8005996:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005998:	2301      	movs	r3, #1
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800599e:	b113      	cbz	r3, 80059a6 <_dtoa_r+0xc6>
 80059a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80059a2:	4b86      	ldr	r3, [pc, #536]	@ (8005bbc <_dtoa_r+0x2dc>)
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005bd0 <_dtoa_r+0x2f0>
 80059aa:	f000 bd40 	b.w	800642e <_dtoa_r+0xb4e>
 80059ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80059b2:	aa14      	add	r2, sp, #80	@ 0x50
 80059b4:	a915      	add	r1, sp, #84	@ 0x54
 80059b6:	4648      	mov	r0, r9
 80059b8:	f001 fa3e 	bl	8006e38 <__d2b>
 80059bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80059c0:	9002      	str	r0, [sp, #8]
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	d078      	beq.n	8005ab8 <_dtoa_r+0x1d8>
 80059c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80059cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80059d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80059d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80059dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80059e0:	4619      	mov	r1, r3
 80059e2:	2200      	movs	r2, #0
 80059e4:	4b76      	ldr	r3, [pc, #472]	@ (8005bc0 <_dtoa_r+0x2e0>)
 80059e6:	f7fa fc4f 	bl	8000288 <__aeabi_dsub>
 80059ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8005b98 <_dtoa_r+0x2b8>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fe02 	bl	80005f8 <__aeabi_dmul>
 80059f4:	a36a      	add	r3, pc, #424	@ (adr r3, 8005ba0 <_dtoa_r+0x2c0>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fc47 	bl	800028c <__adddf3>
 80059fe:	4604      	mov	r4, r0
 8005a00:	4630      	mov	r0, r6
 8005a02:	460d      	mov	r5, r1
 8005a04:	f7fa fd8e 	bl	8000524 <__aeabi_i2d>
 8005a08:	a367      	add	r3, pc, #412	@ (adr r3, 8005ba8 <_dtoa_r+0x2c8>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fdf3 	bl	80005f8 <__aeabi_dmul>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa fc37 	bl	800028c <__adddf3>
 8005a1e:	4604      	mov	r4, r0
 8005a20:	460d      	mov	r5, r1
 8005a22:	f7fb f899 	bl	8000b58 <__aeabi_d2iz>
 8005a26:	2200      	movs	r2, #0
 8005a28:	4607      	mov	r7, r0
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f7fb f854 	bl	8000adc <__aeabi_dcmplt>
 8005a34:	b140      	cbz	r0, 8005a48 <_dtoa_r+0x168>
 8005a36:	4638      	mov	r0, r7
 8005a38:	f7fa fd74 	bl	8000524 <__aeabi_i2d>
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	462b      	mov	r3, r5
 8005a40:	f7fb f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a44:	b900      	cbnz	r0, 8005a48 <_dtoa_r+0x168>
 8005a46:	3f01      	subs	r7, #1
 8005a48:	2f16      	cmp	r7, #22
 8005a4a:	d852      	bhi.n	8005af2 <_dtoa_r+0x212>
 8005a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8005bc4 <_dtoa_r+0x2e4>)
 8005a4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a5a:	f7fb f83f 	bl	8000adc <__aeabi_dcmplt>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d049      	beq.n	8005af6 <_dtoa_r+0x216>
 8005a62:	3f01      	subs	r7, #1
 8005a64:	2300      	movs	r3, #0
 8005a66:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a6a:	1b9b      	subs	r3, r3, r6
 8005a6c:	1e5a      	subs	r2, r3, #1
 8005a6e:	bf45      	ittet	mi
 8005a70:	f1c3 0301 	rsbmi	r3, r3, #1
 8005a74:	9300      	strmi	r3, [sp, #0]
 8005a76:	2300      	movpl	r3, #0
 8005a78:	2300      	movmi	r3, #0
 8005a7a:	9206      	str	r2, [sp, #24]
 8005a7c:	bf54      	ite	pl
 8005a7e:	9300      	strpl	r3, [sp, #0]
 8005a80:	9306      	strmi	r3, [sp, #24]
 8005a82:	2f00      	cmp	r7, #0
 8005a84:	db39      	blt.n	8005afa <_dtoa_r+0x21a>
 8005a86:	9b06      	ldr	r3, [sp, #24]
 8005a88:	970d      	str	r7, [sp, #52]	@ 0x34
 8005a8a:	443b      	add	r3, r7
 8005a8c:	9306      	str	r3, [sp, #24]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9308      	str	r3, [sp, #32]
 8005a92:	9b07      	ldr	r3, [sp, #28]
 8005a94:	2b09      	cmp	r3, #9
 8005a96:	d863      	bhi.n	8005b60 <_dtoa_r+0x280>
 8005a98:	2b05      	cmp	r3, #5
 8005a9a:	bfc4      	itt	gt
 8005a9c:	3b04      	subgt	r3, #4
 8005a9e:	9307      	strgt	r3, [sp, #28]
 8005aa0:	9b07      	ldr	r3, [sp, #28]
 8005aa2:	f1a3 0302 	sub.w	r3, r3, #2
 8005aa6:	bfcc      	ite	gt
 8005aa8:	2400      	movgt	r4, #0
 8005aaa:	2401      	movle	r4, #1
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d863      	bhi.n	8005b78 <_dtoa_r+0x298>
 8005ab0:	e8df f003 	tbb	[pc, r3]
 8005ab4:	2b375452 	.word	0x2b375452
 8005ab8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005abc:	441e      	add	r6, r3
 8005abe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	bfc1      	itttt	gt
 8005ac6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005aca:	409f      	lslgt	r7, r3
 8005acc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ad0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ad4:	bfd6      	itet	le
 8005ad6:	f1c3 0320 	rsble	r3, r3, #32
 8005ada:	ea47 0003 	orrgt.w	r0, r7, r3
 8005ade:	fa04 f003 	lslle.w	r0, r4, r3
 8005ae2:	f7fa fd0f 	bl	8000504 <__aeabi_ui2d>
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005aec:	3e01      	subs	r6, #1
 8005aee:	9212      	str	r2, [sp, #72]	@ 0x48
 8005af0:	e776      	b.n	80059e0 <_dtoa_r+0x100>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e7b7      	b.n	8005a66 <_dtoa_r+0x186>
 8005af6:	9010      	str	r0, [sp, #64]	@ 0x40
 8005af8:	e7b6      	b.n	8005a68 <_dtoa_r+0x188>
 8005afa:	9b00      	ldr	r3, [sp, #0]
 8005afc:	1bdb      	subs	r3, r3, r7
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	427b      	negs	r3, r7
 8005b02:	9308      	str	r3, [sp, #32]
 8005b04:	2300      	movs	r3, #0
 8005b06:	930d      	str	r3, [sp, #52]	@ 0x34
 8005b08:	e7c3      	b.n	8005a92 <_dtoa_r+0x1b2>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b10:	eb07 0b03 	add.w	fp, r7, r3
 8005b14:	f10b 0301 	add.w	r3, fp, #1
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	9303      	str	r3, [sp, #12]
 8005b1c:	bfb8      	it	lt
 8005b1e:	2301      	movlt	r3, #1
 8005b20:	e006      	b.n	8005b30 <_dtoa_r+0x250>
 8005b22:	2301      	movs	r3, #1
 8005b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dd28      	ble.n	8005b7e <_dtoa_r+0x29e>
 8005b2c:	469b      	mov	fp, r3
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005b34:	2100      	movs	r1, #0
 8005b36:	2204      	movs	r2, #4
 8005b38:	f102 0514 	add.w	r5, r2, #20
 8005b3c:	429d      	cmp	r5, r3
 8005b3e:	d926      	bls.n	8005b8e <_dtoa_r+0x2ae>
 8005b40:	6041      	str	r1, [r0, #4]
 8005b42:	4648      	mov	r0, r9
 8005b44:	f000 fd9c 	bl	8006680 <_Balloc>
 8005b48:	4682      	mov	sl, r0
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d142      	bne.n	8005bd4 <_dtoa_r+0x2f4>
 8005b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc8 <_dtoa_r+0x2e8>)
 8005b50:	4602      	mov	r2, r0
 8005b52:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b56:	e6da      	b.n	800590e <_dtoa_r+0x2e>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e7e3      	b.n	8005b24 <_dtoa_r+0x244>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e7d5      	b.n	8005b0c <_dtoa_r+0x22c>
 8005b60:	2401      	movs	r4, #1
 8005b62:	2300      	movs	r3, #0
 8005b64:	9307      	str	r3, [sp, #28]
 8005b66:	9409      	str	r4, [sp, #36]	@ 0x24
 8005b68:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005b72:	2312      	movs	r3, #18
 8005b74:	920c      	str	r2, [sp, #48]	@ 0x30
 8005b76:	e7db      	b.n	8005b30 <_dtoa_r+0x250>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7c:	e7f4      	b.n	8005b68 <_dtoa_r+0x288>
 8005b7e:	f04f 0b01 	mov.w	fp, #1
 8005b82:	f8cd b00c 	str.w	fp, [sp, #12]
 8005b86:	465b      	mov	r3, fp
 8005b88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005b8c:	e7d0      	b.n	8005b30 <_dtoa_r+0x250>
 8005b8e:	3101      	adds	r1, #1
 8005b90:	0052      	lsls	r2, r2, #1
 8005b92:	e7d1      	b.n	8005b38 <_dtoa_r+0x258>
 8005b94:	f3af 8000 	nop.w
 8005b98:	636f4361 	.word	0x636f4361
 8005b9c:	3fd287a7 	.word	0x3fd287a7
 8005ba0:	8b60c8b3 	.word	0x8b60c8b3
 8005ba4:	3fc68a28 	.word	0x3fc68a28
 8005ba8:	509f79fb 	.word	0x509f79fb
 8005bac:	3fd34413 	.word	0x3fd34413
 8005bb0:	08009974 	.word	0x08009974
 8005bb4:	0800998b 	.word	0x0800998b
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	08009a77 	.word	0x08009a77
 8005bc0:	3ff80000 	.word	0x3ff80000
 8005bc4:	08009b58 	.word	0x08009b58
 8005bc8:	080099e3 	.word	0x080099e3
 8005bcc:	08009970 	.word	0x08009970
 8005bd0:	08009a76 	.word	0x08009a76
 8005bd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005bd8:	6018      	str	r0, [r3, #0]
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	2b0e      	cmp	r3, #14
 8005bde:	f200 80a1 	bhi.w	8005d24 <_dtoa_r+0x444>
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	f000 809e 	beq.w	8005d24 <_dtoa_r+0x444>
 8005be8:	2f00      	cmp	r7, #0
 8005bea:	dd33      	ble.n	8005c54 <_dtoa_r+0x374>
 8005bec:	4b9c      	ldr	r3, [pc, #624]	@ (8005e60 <_dtoa_r+0x580>)
 8005bee:	f007 020f 	and.w	r2, r7, #15
 8005bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bf6:	ed93 7b00 	vldr	d7, [r3]
 8005bfa:	05f8      	lsls	r0, r7, #23
 8005bfc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005c00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c04:	d516      	bpl.n	8005c34 <_dtoa_r+0x354>
 8005c06:	4b97      	ldr	r3, [pc, #604]	@ (8005e64 <_dtoa_r+0x584>)
 8005c08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c10:	f7fa fe1c 	bl	800084c <__aeabi_ddiv>
 8005c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c18:	f004 040f 	and.w	r4, r4, #15
 8005c1c:	2603      	movs	r6, #3
 8005c1e:	4d91      	ldr	r5, [pc, #580]	@ (8005e64 <_dtoa_r+0x584>)
 8005c20:	b954      	cbnz	r4, 8005c38 <_dtoa_r+0x358>
 8005c22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c2a:	f7fa fe0f 	bl	800084c <__aeabi_ddiv>
 8005c2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c32:	e028      	b.n	8005c86 <_dtoa_r+0x3a6>
 8005c34:	2602      	movs	r6, #2
 8005c36:	e7f2      	b.n	8005c1e <_dtoa_r+0x33e>
 8005c38:	07e1      	lsls	r1, r4, #31
 8005c3a:	d508      	bpl.n	8005c4e <_dtoa_r+0x36e>
 8005c3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005c40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c44:	f7fa fcd8 	bl	80005f8 <__aeabi_dmul>
 8005c48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c4c:	3601      	adds	r6, #1
 8005c4e:	1064      	asrs	r4, r4, #1
 8005c50:	3508      	adds	r5, #8
 8005c52:	e7e5      	b.n	8005c20 <_dtoa_r+0x340>
 8005c54:	f000 80af 	beq.w	8005db6 <_dtoa_r+0x4d6>
 8005c58:	427c      	negs	r4, r7
 8005c5a:	4b81      	ldr	r3, [pc, #516]	@ (8005e60 <_dtoa_r+0x580>)
 8005c5c:	4d81      	ldr	r5, [pc, #516]	@ (8005e64 <_dtoa_r+0x584>)
 8005c5e:	f004 020f 	and.w	r2, r4, #15
 8005c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c6e:	f7fa fcc3 	bl	80005f8 <__aeabi_dmul>
 8005c72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c76:	1124      	asrs	r4, r4, #4
 8005c78:	2300      	movs	r3, #0
 8005c7a:	2602      	movs	r6, #2
 8005c7c:	2c00      	cmp	r4, #0
 8005c7e:	f040 808f 	bne.w	8005da0 <_dtoa_r+0x4c0>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1d3      	bne.n	8005c2e <_dtoa_r+0x34e>
 8005c86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8094 	beq.w	8005dba <_dtoa_r+0x4da>
 8005c92:	4b75      	ldr	r3, [pc, #468]	@ (8005e68 <_dtoa_r+0x588>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fa ff1f 	bl	8000adc <__aeabi_dcmplt>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f000 808b 	beq.w	8005dba <_dtoa_r+0x4da>
 8005ca4:	9b03      	ldr	r3, [sp, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8087 	beq.w	8005dba <_dtoa_r+0x4da>
 8005cac:	f1bb 0f00 	cmp.w	fp, #0
 8005cb0:	dd34      	ble.n	8005d1c <_dtoa_r+0x43c>
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	4b6d      	ldr	r3, [pc, #436]	@ (8005e6c <_dtoa_r+0x58c>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fa fc9d 	bl	80005f8 <__aeabi_dmul>
 8005cbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cc2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	465c      	mov	r4, fp
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7fa fc2a 	bl	8000524 <__aeabi_i2d>
 8005cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cd4:	f7fa fc90 	bl	80005f8 <__aeabi_dmul>
 8005cd8:	4b65      	ldr	r3, [pc, #404]	@ (8005e70 <_dtoa_r+0x590>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f7fa fad6 	bl	800028c <__adddf3>
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ce6:	2c00      	cmp	r4, #0
 8005ce8:	d16a      	bne.n	8005dc0 <_dtoa_r+0x4e0>
 8005cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cee:	4b61      	ldr	r3, [pc, #388]	@ (8005e74 <_dtoa_r+0x594>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f7fa fac9 	bl	8000288 <__aeabi_dsub>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cfe:	462a      	mov	r2, r5
 8005d00:	4633      	mov	r3, r6
 8005d02:	f7fa ff09 	bl	8000b18 <__aeabi_dcmpgt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f040 8298 	bne.w	800623c <_dtoa_r+0x95c>
 8005d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d10:	462a      	mov	r2, r5
 8005d12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d16:	f7fa fee1 	bl	8000adc <__aeabi_dcmplt>
 8005d1a:	bb38      	cbnz	r0, 8005d6c <_dtoa_r+0x48c>
 8005d1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005d20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f2c0 8157 	blt.w	8005fda <_dtoa_r+0x6fa>
 8005d2c:	2f0e      	cmp	r7, #14
 8005d2e:	f300 8154 	bgt.w	8005fda <_dtoa_r+0x6fa>
 8005d32:	4b4b      	ldr	r3, [pc, #300]	@ (8005e60 <_dtoa_r+0x580>)
 8005d34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d38:	ed93 7b00 	vldr	d7, [r3]
 8005d3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	ed8d 7b00 	vstr	d7, [sp]
 8005d44:	f280 80e5 	bge.w	8005f12 <_dtoa_r+0x632>
 8005d48:	9b03      	ldr	r3, [sp, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f300 80e1 	bgt.w	8005f12 <_dtoa_r+0x632>
 8005d50:	d10c      	bne.n	8005d6c <_dtoa_r+0x48c>
 8005d52:	4b48      	ldr	r3, [pc, #288]	@ (8005e74 <_dtoa_r+0x594>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	ec51 0b17 	vmov	r0, r1, d7
 8005d5a:	f7fa fc4d 	bl	80005f8 <__aeabi_dmul>
 8005d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d62:	f7fa fecf 	bl	8000b04 <__aeabi_dcmpge>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f000 8266 	beq.w	8006238 <_dtoa_r+0x958>
 8005d6c:	2400      	movs	r4, #0
 8005d6e:	4625      	mov	r5, r4
 8005d70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d72:	4656      	mov	r6, sl
 8005d74:	ea6f 0803 	mvn.w	r8, r3
 8005d78:	2700      	movs	r7, #0
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4648      	mov	r0, r9
 8005d7e:	f000 fcbf 	bl	8006700 <_Bfree>
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	f000 80bd 	beq.w	8005f02 <_dtoa_r+0x622>
 8005d88:	b12f      	cbz	r7, 8005d96 <_dtoa_r+0x4b6>
 8005d8a:	42af      	cmp	r7, r5
 8005d8c:	d003      	beq.n	8005d96 <_dtoa_r+0x4b6>
 8005d8e:	4639      	mov	r1, r7
 8005d90:	4648      	mov	r0, r9
 8005d92:	f000 fcb5 	bl	8006700 <_Bfree>
 8005d96:	4629      	mov	r1, r5
 8005d98:	4648      	mov	r0, r9
 8005d9a:	f000 fcb1 	bl	8006700 <_Bfree>
 8005d9e:	e0b0      	b.n	8005f02 <_dtoa_r+0x622>
 8005da0:	07e2      	lsls	r2, r4, #31
 8005da2:	d505      	bpl.n	8005db0 <_dtoa_r+0x4d0>
 8005da4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005da8:	f7fa fc26 	bl	80005f8 <__aeabi_dmul>
 8005dac:	3601      	adds	r6, #1
 8005dae:	2301      	movs	r3, #1
 8005db0:	1064      	asrs	r4, r4, #1
 8005db2:	3508      	adds	r5, #8
 8005db4:	e762      	b.n	8005c7c <_dtoa_r+0x39c>
 8005db6:	2602      	movs	r6, #2
 8005db8:	e765      	b.n	8005c86 <_dtoa_r+0x3a6>
 8005dba:	9c03      	ldr	r4, [sp, #12]
 8005dbc:	46b8      	mov	r8, r7
 8005dbe:	e784      	b.n	8005cca <_dtoa_r+0x3ea>
 8005dc0:	4b27      	ldr	r3, [pc, #156]	@ (8005e60 <_dtoa_r+0x580>)
 8005dc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dcc:	4454      	add	r4, sl
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d054      	beq.n	8005e7c <_dtoa_r+0x59c>
 8005dd2:	4929      	ldr	r1, [pc, #164]	@ (8005e78 <_dtoa_r+0x598>)
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	f7fa fd39 	bl	800084c <__aeabi_ddiv>
 8005dda:	4633      	mov	r3, r6
 8005ddc:	462a      	mov	r2, r5
 8005dde:	f7fa fa53 	bl	8000288 <__aeabi_dsub>
 8005de2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005de6:	4656      	mov	r6, sl
 8005de8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dec:	f7fa feb4 	bl	8000b58 <__aeabi_d2iz>
 8005df0:	4605      	mov	r5, r0
 8005df2:	f7fa fb97 	bl	8000524 <__aeabi_i2d>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dfe:	f7fa fa43 	bl	8000288 <__aeabi_dsub>
 8005e02:	3530      	adds	r5, #48	@ 0x30
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e0c:	f806 5b01 	strb.w	r5, [r6], #1
 8005e10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005e14:	f7fa fe62 	bl	8000adc <__aeabi_dcmplt>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d172      	bne.n	8005f02 <_dtoa_r+0x622>
 8005e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e20:	4911      	ldr	r1, [pc, #68]	@ (8005e68 <_dtoa_r+0x588>)
 8005e22:	2000      	movs	r0, #0
 8005e24:	f7fa fa30 	bl	8000288 <__aeabi_dsub>
 8005e28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005e2c:	f7fa fe56 	bl	8000adc <__aeabi_dcmplt>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	f040 80b4 	bne.w	8005f9e <_dtoa_r+0x6be>
 8005e36:	42a6      	cmp	r6, r4
 8005e38:	f43f af70 	beq.w	8005d1c <_dtoa_r+0x43c>
 8005e3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005e40:	4b0a      	ldr	r3, [pc, #40]	@ (8005e6c <_dtoa_r+0x58c>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	f7fa fbd8 	bl	80005f8 <__aeabi_dmul>
 8005e48:	4b08      	ldr	r3, [pc, #32]	@ (8005e6c <_dtoa_r+0x58c>)
 8005e4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005e4e:	2200      	movs	r2, #0
 8005e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e54:	f7fa fbd0 	bl	80005f8 <__aeabi_dmul>
 8005e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e5c:	e7c4      	b.n	8005de8 <_dtoa_r+0x508>
 8005e5e:	bf00      	nop
 8005e60:	08009b58 	.word	0x08009b58
 8005e64:	08009b30 	.word	0x08009b30
 8005e68:	3ff00000 	.word	0x3ff00000
 8005e6c:	40240000 	.word	0x40240000
 8005e70:	401c0000 	.word	0x401c0000
 8005e74:	40140000 	.word	0x40140000
 8005e78:	3fe00000 	.word	0x3fe00000
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f7fa fbba 	bl	80005f8 <__aeabi_dmul>
 8005e84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005e88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005e8a:	4656      	mov	r6, sl
 8005e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e90:	f7fa fe62 	bl	8000b58 <__aeabi_d2iz>
 8005e94:	4605      	mov	r5, r0
 8005e96:	f7fa fb45 	bl	8000524 <__aeabi_i2d>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ea2:	f7fa f9f1 	bl	8000288 <__aeabi_dsub>
 8005ea6:	3530      	adds	r5, #48	@ 0x30
 8005ea8:	f806 5b01 	strb.w	r5, [r6], #1
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	42a6      	cmp	r6, r4
 8005eb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	d124      	bne.n	8005f06 <_dtoa_r+0x626>
 8005ebc:	4baf      	ldr	r3, [pc, #700]	@ (800617c <_dtoa_r+0x89c>)
 8005ebe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005ec2:	f7fa f9e3 	bl	800028c <__adddf3>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ece:	f7fa fe23 	bl	8000b18 <__aeabi_dcmpgt>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d163      	bne.n	8005f9e <_dtoa_r+0x6be>
 8005ed6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005eda:	49a8      	ldr	r1, [pc, #672]	@ (800617c <_dtoa_r+0x89c>)
 8005edc:	2000      	movs	r0, #0
 8005ede:	f7fa f9d3 	bl	8000288 <__aeabi_dsub>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eea:	f7fa fdf7 	bl	8000adc <__aeabi_dcmplt>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f43f af14 	beq.w	8005d1c <_dtoa_r+0x43c>
 8005ef4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005ef6:	1e73      	subs	r3, r6, #1
 8005ef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005efa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005efe:	2b30      	cmp	r3, #48	@ 0x30
 8005f00:	d0f8      	beq.n	8005ef4 <_dtoa_r+0x614>
 8005f02:	4647      	mov	r7, r8
 8005f04:	e03b      	b.n	8005f7e <_dtoa_r+0x69e>
 8005f06:	4b9e      	ldr	r3, [pc, #632]	@ (8006180 <_dtoa_r+0x8a0>)
 8005f08:	f7fa fb76 	bl	80005f8 <__aeabi_dmul>
 8005f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f10:	e7bc      	b.n	8005e8c <_dtoa_r+0x5ac>
 8005f12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005f16:	4656      	mov	r6, sl
 8005f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa fc94 	bl	800084c <__aeabi_ddiv>
 8005f24:	f7fa fe18 	bl	8000b58 <__aeabi_d2iz>
 8005f28:	4680      	mov	r8, r0
 8005f2a:	f7fa fafb 	bl	8000524 <__aeabi_i2d>
 8005f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f32:	f7fa fb61 	bl	80005f8 <__aeabi_dmul>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005f42:	f7fa f9a1 	bl	8000288 <__aeabi_dsub>
 8005f46:	f806 4b01 	strb.w	r4, [r6], #1
 8005f4a:	9d03      	ldr	r5, [sp, #12]
 8005f4c:	eba6 040a 	sub.w	r4, r6, sl
 8005f50:	42a5      	cmp	r5, r4
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	d133      	bne.n	8005fc0 <_dtoa_r+0x6e0>
 8005f58:	f7fa f998 	bl	800028c <__adddf3>
 8005f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	f7fa fdd8 	bl	8000b18 <__aeabi_dcmpgt>
 8005f68:	b9c0      	cbnz	r0, 8005f9c <_dtoa_r+0x6bc>
 8005f6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4629      	mov	r1, r5
 8005f72:	f7fa fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f76:	b110      	cbz	r0, 8005f7e <_dtoa_r+0x69e>
 8005f78:	f018 0f01 	tst.w	r8, #1
 8005f7c:	d10e      	bne.n	8005f9c <_dtoa_r+0x6bc>
 8005f7e:	9902      	ldr	r1, [sp, #8]
 8005f80:	4648      	mov	r0, r9
 8005f82:	f000 fbbd 	bl	8006700 <_Bfree>
 8005f86:	2300      	movs	r3, #0
 8005f88:	7033      	strb	r3, [r6, #0]
 8005f8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005f8c:	3701      	adds	r7, #1
 8005f8e:	601f      	str	r7, [r3, #0]
 8005f90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 824b 	beq.w	800642e <_dtoa_r+0xb4e>
 8005f98:	601e      	str	r6, [r3, #0]
 8005f9a:	e248      	b.n	800642e <_dtoa_r+0xb4e>
 8005f9c:	46b8      	mov	r8, r7
 8005f9e:	4633      	mov	r3, r6
 8005fa0:	461e      	mov	r6, r3
 8005fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fa6:	2a39      	cmp	r2, #57	@ 0x39
 8005fa8:	d106      	bne.n	8005fb8 <_dtoa_r+0x6d8>
 8005faa:	459a      	cmp	sl, r3
 8005fac:	d1f8      	bne.n	8005fa0 <_dtoa_r+0x6c0>
 8005fae:	2230      	movs	r2, #48	@ 0x30
 8005fb0:	f108 0801 	add.w	r8, r8, #1
 8005fb4:	f88a 2000 	strb.w	r2, [sl]
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	3201      	adds	r2, #1
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	e7a0      	b.n	8005f02 <_dtoa_r+0x622>
 8005fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006180 <_dtoa_r+0x8a0>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f7fa fb18 	bl	80005f8 <__aeabi_dmul>
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4604      	mov	r4, r0
 8005fce:	460d      	mov	r5, r1
 8005fd0:	f7fa fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d09f      	beq.n	8005f18 <_dtoa_r+0x638>
 8005fd8:	e7d1      	b.n	8005f7e <_dtoa_r+0x69e>
 8005fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fdc:	2a00      	cmp	r2, #0
 8005fde:	f000 80ea 	beq.w	80061b6 <_dtoa_r+0x8d6>
 8005fe2:	9a07      	ldr	r2, [sp, #28]
 8005fe4:	2a01      	cmp	r2, #1
 8005fe6:	f300 80cd 	bgt.w	8006184 <_dtoa_r+0x8a4>
 8005fea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	f000 80c1 	beq.w	8006174 <_dtoa_r+0x894>
 8005ff2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ff6:	9c08      	ldr	r4, [sp, #32]
 8005ff8:	9e00      	ldr	r6, [sp, #0]
 8005ffa:	9a00      	ldr	r2, [sp, #0]
 8005ffc:	441a      	add	r2, r3
 8005ffe:	9200      	str	r2, [sp, #0]
 8006000:	9a06      	ldr	r2, [sp, #24]
 8006002:	2101      	movs	r1, #1
 8006004:	441a      	add	r2, r3
 8006006:	4648      	mov	r0, r9
 8006008:	9206      	str	r2, [sp, #24]
 800600a:	f000 fc77 	bl	80068fc <__i2b>
 800600e:	4605      	mov	r5, r0
 8006010:	b166      	cbz	r6, 800602c <_dtoa_r+0x74c>
 8006012:	9b06      	ldr	r3, [sp, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	dd09      	ble.n	800602c <_dtoa_r+0x74c>
 8006018:	42b3      	cmp	r3, r6
 800601a:	9a00      	ldr	r2, [sp, #0]
 800601c:	bfa8      	it	ge
 800601e:	4633      	movge	r3, r6
 8006020:	1ad2      	subs	r2, r2, r3
 8006022:	9200      	str	r2, [sp, #0]
 8006024:	9a06      	ldr	r2, [sp, #24]
 8006026:	1af6      	subs	r6, r6, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	9306      	str	r3, [sp, #24]
 800602c:	9b08      	ldr	r3, [sp, #32]
 800602e:	b30b      	cbz	r3, 8006074 <_dtoa_r+0x794>
 8006030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80c6 	beq.w	80061c4 <_dtoa_r+0x8e4>
 8006038:	2c00      	cmp	r4, #0
 800603a:	f000 80c0 	beq.w	80061be <_dtoa_r+0x8de>
 800603e:	4629      	mov	r1, r5
 8006040:	4622      	mov	r2, r4
 8006042:	4648      	mov	r0, r9
 8006044:	f000 fd12 	bl	8006a6c <__pow5mult>
 8006048:	9a02      	ldr	r2, [sp, #8]
 800604a:	4601      	mov	r1, r0
 800604c:	4605      	mov	r5, r0
 800604e:	4648      	mov	r0, r9
 8006050:	f000 fc6a 	bl	8006928 <__multiply>
 8006054:	9902      	ldr	r1, [sp, #8]
 8006056:	4680      	mov	r8, r0
 8006058:	4648      	mov	r0, r9
 800605a:	f000 fb51 	bl	8006700 <_Bfree>
 800605e:	9b08      	ldr	r3, [sp, #32]
 8006060:	1b1b      	subs	r3, r3, r4
 8006062:	9308      	str	r3, [sp, #32]
 8006064:	f000 80b1 	beq.w	80061ca <_dtoa_r+0x8ea>
 8006068:	9a08      	ldr	r2, [sp, #32]
 800606a:	4641      	mov	r1, r8
 800606c:	4648      	mov	r0, r9
 800606e:	f000 fcfd 	bl	8006a6c <__pow5mult>
 8006072:	9002      	str	r0, [sp, #8]
 8006074:	2101      	movs	r1, #1
 8006076:	4648      	mov	r0, r9
 8006078:	f000 fc40 	bl	80068fc <__i2b>
 800607c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800607e:	4604      	mov	r4, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 81d8 	beq.w	8006436 <_dtoa_r+0xb56>
 8006086:	461a      	mov	r2, r3
 8006088:	4601      	mov	r1, r0
 800608a:	4648      	mov	r0, r9
 800608c:	f000 fcee 	bl	8006a6c <__pow5mult>
 8006090:	9b07      	ldr	r3, [sp, #28]
 8006092:	2b01      	cmp	r3, #1
 8006094:	4604      	mov	r4, r0
 8006096:	f300 809f 	bgt.w	80061d8 <_dtoa_r+0x8f8>
 800609a:	9b04      	ldr	r3, [sp, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f040 8097 	bne.w	80061d0 <_dtoa_r+0x8f0>
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f040 8093 	bne.w	80061d4 <_dtoa_r+0x8f4>
 80060ae:	9b05      	ldr	r3, [sp, #20]
 80060b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	051b      	lsls	r3, r3, #20
 80060b8:	b133      	cbz	r3, 80060c8 <_dtoa_r+0x7e8>
 80060ba:	9b00      	ldr	r3, [sp, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	9b06      	ldr	r3, [sp, #24]
 80060c2:	3301      	adds	r3, #1
 80060c4:	9306      	str	r3, [sp, #24]
 80060c6:	2301      	movs	r3, #1
 80060c8:	9308      	str	r3, [sp, #32]
 80060ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 81b8 	beq.w	8006442 <_dtoa_r+0xb62>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060d8:	6918      	ldr	r0, [r3, #16]
 80060da:	f000 fbc3 	bl	8006864 <__hi0bits>
 80060de:	f1c0 0020 	rsb	r0, r0, #32
 80060e2:	9b06      	ldr	r3, [sp, #24]
 80060e4:	4418      	add	r0, r3
 80060e6:	f010 001f 	ands.w	r0, r0, #31
 80060ea:	f000 8082 	beq.w	80061f2 <_dtoa_r+0x912>
 80060ee:	f1c0 0320 	rsb	r3, r0, #32
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	dd73      	ble.n	80061de <_dtoa_r+0x8fe>
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	f1c0 001c 	rsb	r0, r0, #28
 80060fc:	4403      	add	r3, r0
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	9b06      	ldr	r3, [sp, #24]
 8006102:	4403      	add	r3, r0
 8006104:	4406      	add	r6, r0
 8006106:	9306      	str	r3, [sp, #24]
 8006108:	9b00      	ldr	r3, [sp, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	dd05      	ble.n	800611a <_dtoa_r+0x83a>
 800610e:	9902      	ldr	r1, [sp, #8]
 8006110:	461a      	mov	r2, r3
 8006112:	4648      	mov	r0, r9
 8006114:	f000 fd04 	bl	8006b20 <__lshift>
 8006118:	9002      	str	r0, [sp, #8]
 800611a:	9b06      	ldr	r3, [sp, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	dd05      	ble.n	800612c <_dtoa_r+0x84c>
 8006120:	4621      	mov	r1, r4
 8006122:	461a      	mov	r2, r3
 8006124:	4648      	mov	r0, r9
 8006126:	f000 fcfb 	bl	8006b20 <__lshift>
 800612a:	4604      	mov	r4, r0
 800612c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d061      	beq.n	80061f6 <_dtoa_r+0x916>
 8006132:	9802      	ldr	r0, [sp, #8]
 8006134:	4621      	mov	r1, r4
 8006136:	f000 fd5f 	bl	8006bf8 <__mcmp>
 800613a:	2800      	cmp	r0, #0
 800613c:	da5b      	bge.n	80061f6 <_dtoa_r+0x916>
 800613e:	2300      	movs	r3, #0
 8006140:	9902      	ldr	r1, [sp, #8]
 8006142:	220a      	movs	r2, #10
 8006144:	4648      	mov	r0, r9
 8006146:	f000 fafd 	bl	8006744 <__multadd>
 800614a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614c:	9002      	str	r0, [sp, #8]
 800614e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 8177 	beq.w	8006446 <_dtoa_r+0xb66>
 8006158:	4629      	mov	r1, r5
 800615a:	2300      	movs	r3, #0
 800615c:	220a      	movs	r2, #10
 800615e:	4648      	mov	r0, r9
 8006160:	f000 faf0 	bl	8006744 <__multadd>
 8006164:	f1bb 0f00 	cmp.w	fp, #0
 8006168:	4605      	mov	r5, r0
 800616a:	dc6f      	bgt.n	800624c <_dtoa_r+0x96c>
 800616c:	9b07      	ldr	r3, [sp, #28]
 800616e:	2b02      	cmp	r3, #2
 8006170:	dc49      	bgt.n	8006206 <_dtoa_r+0x926>
 8006172:	e06b      	b.n	800624c <_dtoa_r+0x96c>
 8006174:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006176:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800617a:	e73c      	b.n	8005ff6 <_dtoa_r+0x716>
 800617c:	3fe00000 	.word	0x3fe00000
 8006180:	40240000 	.word	0x40240000
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	1e5c      	subs	r4, r3, #1
 8006188:	9b08      	ldr	r3, [sp, #32]
 800618a:	42a3      	cmp	r3, r4
 800618c:	db09      	blt.n	80061a2 <_dtoa_r+0x8c2>
 800618e:	1b1c      	subs	r4, r3, r4
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f6bf af30 	bge.w	8005ff8 <_dtoa_r+0x718>
 8006198:	9b00      	ldr	r3, [sp, #0]
 800619a:	9a03      	ldr	r2, [sp, #12]
 800619c:	1a9e      	subs	r6, r3, r2
 800619e:	2300      	movs	r3, #0
 80061a0:	e72b      	b.n	8005ffa <_dtoa_r+0x71a>
 80061a2:	9b08      	ldr	r3, [sp, #32]
 80061a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061a6:	9408      	str	r4, [sp, #32]
 80061a8:	1ae3      	subs	r3, r4, r3
 80061aa:	441a      	add	r2, r3
 80061ac:	9e00      	ldr	r6, [sp, #0]
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80061b2:	2400      	movs	r4, #0
 80061b4:	e721      	b.n	8005ffa <_dtoa_r+0x71a>
 80061b6:	9c08      	ldr	r4, [sp, #32]
 80061b8:	9e00      	ldr	r6, [sp, #0]
 80061ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80061bc:	e728      	b.n	8006010 <_dtoa_r+0x730>
 80061be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80061c2:	e751      	b.n	8006068 <_dtoa_r+0x788>
 80061c4:	9a08      	ldr	r2, [sp, #32]
 80061c6:	9902      	ldr	r1, [sp, #8]
 80061c8:	e750      	b.n	800606c <_dtoa_r+0x78c>
 80061ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80061ce:	e751      	b.n	8006074 <_dtoa_r+0x794>
 80061d0:	2300      	movs	r3, #0
 80061d2:	e779      	b.n	80060c8 <_dtoa_r+0x7e8>
 80061d4:	9b04      	ldr	r3, [sp, #16]
 80061d6:	e777      	b.n	80060c8 <_dtoa_r+0x7e8>
 80061d8:	2300      	movs	r3, #0
 80061da:	9308      	str	r3, [sp, #32]
 80061dc:	e779      	b.n	80060d2 <_dtoa_r+0x7f2>
 80061de:	d093      	beq.n	8006108 <_dtoa_r+0x828>
 80061e0:	9a00      	ldr	r2, [sp, #0]
 80061e2:	331c      	adds	r3, #28
 80061e4:	441a      	add	r2, r3
 80061e6:	9200      	str	r2, [sp, #0]
 80061e8:	9a06      	ldr	r2, [sp, #24]
 80061ea:	441a      	add	r2, r3
 80061ec:	441e      	add	r6, r3
 80061ee:	9206      	str	r2, [sp, #24]
 80061f0:	e78a      	b.n	8006108 <_dtoa_r+0x828>
 80061f2:	4603      	mov	r3, r0
 80061f4:	e7f4      	b.n	80061e0 <_dtoa_r+0x900>
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	46b8      	mov	r8, r7
 80061fc:	dc20      	bgt.n	8006240 <_dtoa_r+0x960>
 80061fe:	469b      	mov	fp, r3
 8006200:	9b07      	ldr	r3, [sp, #28]
 8006202:	2b02      	cmp	r3, #2
 8006204:	dd1e      	ble.n	8006244 <_dtoa_r+0x964>
 8006206:	f1bb 0f00 	cmp.w	fp, #0
 800620a:	f47f adb1 	bne.w	8005d70 <_dtoa_r+0x490>
 800620e:	4621      	mov	r1, r4
 8006210:	465b      	mov	r3, fp
 8006212:	2205      	movs	r2, #5
 8006214:	4648      	mov	r0, r9
 8006216:	f000 fa95 	bl	8006744 <__multadd>
 800621a:	4601      	mov	r1, r0
 800621c:	4604      	mov	r4, r0
 800621e:	9802      	ldr	r0, [sp, #8]
 8006220:	f000 fcea 	bl	8006bf8 <__mcmp>
 8006224:	2800      	cmp	r0, #0
 8006226:	f77f ada3 	ble.w	8005d70 <_dtoa_r+0x490>
 800622a:	4656      	mov	r6, sl
 800622c:	2331      	movs	r3, #49	@ 0x31
 800622e:	f806 3b01 	strb.w	r3, [r6], #1
 8006232:	f108 0801 	add.w	r8, r8, #1
 8006236:	e59f      	b.n	8005d78 <_dtoa_r+0x498>
 8006238:	9c03      	ldr	r4, [sp, #12]
 800623a:	46b8      	mov	r8, r7
 800623c:	4625      	mov	r5, r4
 800623e:	e7f4      	b.n	800622a <_dtoa_r+0x94a>
 8006240:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8101 	beq.w	800644e <_dtoa_r+0xb6e>
 800624c:	2e00      	cmp	r6, #0
 800624e:	dd05      	ble.n	800625c <_dtoa_r+0x97c>
 8006250:	4629      	mov	r1, r5
 8006252:	4632      	mov	r2, r6
 8006254:	4648      	mov	r0, r9
 8006256:	f000 fc63 	bl	8006b20 <__lshift>
 800625a:	4605      	mov	r5, r0
 800625c:	9b08      	ldr	r3, [sp, #32]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d05c      	beq.n	800631c <_dtoa_r+0xa3c>
 8006262:	6869      	ldr	r1, [r5, #4]
 8006264:	4648      	mov	r0, r9
 8006266:	f000 fa0b 	bl	8006680 <_Balloc>
 800626a:	4606      	mov	r6, r0
 800626c:	b928      	cbnz	r0, 800627a <_dtoa_r+0x99a>
 800626e:	4b82      	ldr	r3, [pc, #520]	@ (8006478 <_dtoa_r+0xb98>)
 8006270:	4602      	mov	r2, r0
 8006272:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006276:	f7ff bb4a 	b.w	800590e <_dtoa_r+0x2e>
 800627a:	692a      	ldr	r2, [r5, #16]
 800627c:	3202      	adds	r2, #2
 800627e:	0092      	lsls	r2, r2, #2
 8006280:	f105 010c 	add.w	r1, r5, #12
 8006284:	300c      	adds	r0, #12
 8006286:	f002 fe37 	bl	8008ef8 <memcpy>
 800628a:	2201      	movs	r2, #1
 800628c:	4631      	mov	r1, r6
 800628e:	4648      	mov	r0, r9
 8006290:	f000 fc46 	bl	8006b20 <__lshift>
 8006294:	f10a 0301 	add.w	r3, sl, #1
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	eb0a 030b 	add.w	r3, sl, fp
 800629e:	9308      	str	r3, [sp, #32]
 80062a0:	9b04      	ldr	r3, [sp, #16]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	462f      	mov	r7, r5
 80062a8:	9306      	str	r3, [sp, #24]
 80062aa:	4605      	mov	r5, r0
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	9802      	ldr	r0, [sp, #8]
 80062b0:	4621      	mov	r1, r4
 80062b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80062b6:	f7ff fa8b 	bl	80057d0 <quorem>
 80062ba:	4603      	mov	r3, r0
 80062bc:	3330      	adds	r3, #48	@ 0x30
 80062be:	9003      	str	r0, [sp, #12]
 80062c0:	4639      	mov	r1, r7
 80062c2:	9802      	ldr	r0, [sp, #8]
 80062c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c6:	f000 fc97 	bl	8006bf8 <__mcmp>
 80062ca:	462a      	mov	r2, r5
 80062cc:	9004      	str	r0, [sp, #16]
 80062ce:	4621      	mov	r1, r4
 80062d0:	4648      	mov	r0, r9
 80062d2:	f000 fcad 	bl	8006c30 <__mdiff>
 80062d6:	68c2      	ldr	r2, [r0, #12]
 80062d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062da:	4606      	mov	r6, r0
 80062dc:	bb02      	cbnz	r2, 8006320 <_dtoa_r+0xa40>
 80062de:	4601      	mov	r1, r0
 80062e0:	9802      	ldr	r0, [sp, #8]
 80062e2:	f000 fc89 	bl	8006bf8 <__mcmp>
 80062e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e8:	4602      	mov	r2, r0
 80062ea:	4631      	mov	r1, r6
 80062ec:	4648      	mov	r0, r9
 80062ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80062f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062f2:	f000 fa05 	bl	8006700 <_Bfree>
 80062f6:	9b07      	ldr	r3, [sp, #28]
 80062f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80062fa:	9e00      	ldr	r6, [sp, #0]
 80062fc:	ea42 0103 	orr.w	r1, r2, r3
 8006300:	9b06      	ldr	r3, [sp, #24]
 8006302:	4319      	orrs	r1, r3
 8006304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006306:	d10d      	bne.n	8006324 <_dtoa_r+0xa44>
 8006308:	2b39      	cmp	r3, #57	@ 0x39
 800630a:	d027      	beq.n	800635c <_dtoa_r+0xa7c>
 800630c:	9a04      	ldr	r2, [sp, #16]
 800630e:	2a00      	cmp	r2, #0
 8006310:	dd01      	ble.n	8006316 <_dtoa_r+0xa36>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	3331      	adds	r3, #49	@ 0x31
 8006316:	f88b 3000 	strb.w	r3, [fp]
 800631a:	e52e      	b.n	8005d7a <_dtoa_r+0x49a>
 800631c:	4628      	mov	r0, r5
 800631e:	e7b9      	b.n	8006294 <_dtoa_r+0x9b4>
 8006320:	2201      	movs	r2, #1
 8006322:	e7e2      	b.n	80062ea <_dtoa_r+0xa0a>
 8006324:	9904      	ldr	r1, [sp, #16]
 8006326:	2900      	cmp	r1, #0
 8006328:	db04      	blt.n	8006334 <_dtoa_r+0xa54>
 800632a:	9807      	ldr	r0, [sp, #28]
 800632c:	4301      	orrs	r1, r0
 800632e:	9806      	ldr	r0, [sp, #24]
 8006330:	4301      	orrs	r1, r0
 8006332:	d120      	bne.n	8006376 <_dtoa_r+0xa96>
 8006334:	2a00      	cmp	r2, #0
 8006336:	ddee      	ble.n	8006316 <_dtoa_r+0xa36>
 8006338:	9902      	ldr	r1, [sp, #8]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2201      	movs	r2, #1
 800633e:	4648      	mov	r0, r9
 8006340:	f000 fbee 	bl	8006b20 <__lshift>
 8006344:	4621      	mov	r1, r4
 8006346:	9002      	str	r0, [sp, #8]
 8006348:	f000 fc56 	bl	8006bf8 <__mcmp>
 800634c:	2800      	cmp	r0, #0
 800634e:	9b00      	ldr	r3, [sp, #0]
 8006350:	dc02      	bgt.n	8006358 <_dtoa_r+0xa78>
 8006352:	d1e0      	bne.n	8006316 <_dtoa_r+0xa36>
 8006354:	07da      	lsls	r2, r3, #31
 8006356:	d5de      	bpl.n	8006316 <_dtoa_r+0xa36>
 8006358:	2b39      	cmp	r3, #57	@ 0x39
 800635a:	d1da      	bne.n	8006312 <_dtoa_r+0xa32>
 800635c:	2339      	movs	r3, #57	@ 0x39
 800635e:	f88b 3000 	strb.w	r3, [fp]
 8006362:	4633      	mov	r3, r6
 8006364:	461e      	mov	r6, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800636c:	2a39      	cmp	r2, #57	@ 0x39
 800636e:	d04e      	beq.n	800640e <_dtoa_r+0xb2e>
 8006370:	3201      	adds	r2, #1
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e501      	b.n	8005d7a <_dtoa_r+0x49a>
 8006376:	2a00      	cmp	r2, #0
 8006378:	dd03      	ble.n	8006382 <_dtoa_r+0xaa2>
 800637a:	2b39      	cmp	r3, #57	@ 0x39
 800637c:	d0ee      	beq.n	800635c <_dtoa_r+0xa7c>
 800637e:	3301      	adds	r3, #1
 8006380:	e7c9      	b.n	8006316 <_dtoa_r+0xa36>
 8006382:	9a00      	ldr	r2, [sp, #0]
 8006384:	9908      	ldr	r1, [sp, #32]
 8006386:	f802 3c01 	strb.w	r3, [r2, #-1]
 800638a:	428a      	cmp	r2, r1
 800638c:	d028      	beq.n	80063e0 <_dtoa_r+0xb00>
 800638e:	9902      	ldr	r1, [sp, #8]
 8006390:	2300      	movs	r3, #0
 8006392:	220a      	movs	r2, #10
 8006394:	4648      	mov	r0, r9
 8006396:	f000 f9d5 	bl	8006744 <__multadd>
 800639a:	42af      	cmp	r7, r5
 800639c:	9002      	str	r0, [sp, #8]
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	f04f 020a 	mov.w	r2, #10
 80063a6:	4639      	mov	r1, r7
 80063a8:	4648      	mov	r0, r9
 80063aa:	d107      	bne.n	80063bc <_dtoa_r+0xadc>
 80063ac:	f000 f9ca 	bl	8006744 <__multadd>
 80063b0:	4607      	mov	r7, r0
 80063b2:	4605      	mov	r5, r0
 80063b4:	9b00      	ldr	r3, [sp, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	e777      	b.n	80062ac <_dtoa_r+0x9cc>
 80063bc:	f000 f9c2 	bl	8006744 <__multadd>
 80063c0:	4629      	mov	r1, r5
 80063c2:	4607      	mov	r7, r0
 80063c4:	2300      	movs	r3, #0
 80063c6:	220a      	movs	r2, #10
 80063c8:	4648      	mov	r0, r9
 80063ca:	f000 f9bb 	bl	8006744 <__multadd>
 80063ce:	4605      	mov	r5, r0
 80063d0:	e7f0      	b.n	80063b4 <_dtoa_r+0xad4>
 80063d2:	f1bb 0f00 	cmp.w	fp, #0
 80063d6:	bfcc      	ite	gt
 80063d8:	465e      	movgt	r6, fp
 80063da:	2601      	movle	r6, #1
 80063dc:	4456      	add	r6, sl
 80063de:	2700      	movs	r7, #0
 80063e0:	9902      	ldr	r1, [sp, #8]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	4648      	mov	r0, r9
 80063e8:	f000 fb9a 	bl	8006b20 <__lshift>
 80063ec:	4621      	mov	r1, r4
 80063ee:	9002      	str	r0, [sp, #8]
 80063f0:	f000 fc02 	bl	8006bf8 <__mcmp>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	dcb4      	bgt.n	8006362 <_dtoa_r+0xa82>
 80063f8:	d102      	bne.n	8006400 <_dtoa_r+0xb20>
 80063fa:	9b00      	ldr	r3, [sp, #0]
 80063fc:	07db      	lsls	r3, r3, #31
 80063fe:	d4b0      	bmi.n	8006362 <_dtoa_r+0xa82>
 8006400:	4633      	mov	r3, r6
 8006402:	461e      	mov	r6, r3
 8006404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006408:	2a30      	cmp	r2, #48	@ 0x30
 800640a:	d0fa      	beq.n	8006402 <_dtoa_r+0xb22>
 800640c:	e4b5      	b.n	8005d7a <_dtoa_r+0x49a>
 800640e:	459a      	cmp	sl, r3
 8006410:	d1a8      	bne.n	8006364 <_dtoa_r+0xa84>
 8006412:	2331      	movs	r3, #49	@ 0x31
 8006414:	f108 0801 	add.w	r8, r8, #1
 8006418:	f88a 3000 	strb.w	r3, [sl]
 800641c:	e4ad      	b.n	8005d7a <_dtoa_r+0x49a>
 800641e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006420:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800647c <_dtoa_r+0xb9c>
 8006424:	b11b      	cbz	r3, 800642e <_dtoa_r+0xb4e>
 8006426:	f10a 0308 	add.w	r3, sl, #8
 800642a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	4650      	mov	r0, sl
 8006430:	b017      	add	sp, #92	@ 0x5c
 8006432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006436:	9b07      	ldr	r3, [sp, #28]
 8006438:	2b01      	cmp	r3, #1
 800643a:	f77f ae2e 	ble.w	800609a <_dtoa_r+0x7ba>
 800643e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006440:	9308      	str	r3, [sp, #32]
 8006442:	2001      	movs	r0, #1
 8006444:	e64d      	b.n	80060e2 <_dtoa_r+0x802>
 8006446:	f1bb 0f00 	cmp.w	fp, #0
 800644a:	f77f aed9 	ble.w	8006200 <_dtoa_r+0x920>
 800644e:	4656      	mov	r6, sl
 8006450:	9802      	ldr	r0, [sp, #8]
 8006452:	4621      	mov	r1, r4
 8006454:	f7ff f9bc 	bl	80057d0 <quorem>
 8006458:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800645c:	f806 3b01 	strb.w	r3, [r6], #1
 8006460:	eba6 020a 	sub.w	r2, r6, sl
 8006464:	4593      	cmp	fp, r2
 8006466:	ddb4      	ble.n	80063d2 <_dtoa_r+0xaf2>
 8006468:	9902      	ldr	r1, [sp, #8]
 800646a:	2300      	movs	r3, #0
 800646c:	220a      	movs	r2, #10
 800646e:	4648      	mov	r0, r9
 8006470:	f000 f968 	bl	8006744 <__multadd>
 8006474:	9002      	str	r0, [sp, #8]
 8006476:	e7eb      	b.n	8006450 <_dtoa_r+0xb70>
 8006478:	080099e3 	.word	0x080099e3
 800647c:	08009967 	.word	0x08009967

08006480 <_free_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4605      	mov	r5, r0
 8006484:	2900      	cmp	r1, #0
 8006486:	d041      	beq.n	800650c <_free_r+0x8c>
 8006488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648c:	1f0c      	subs	r4, r1, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfb8      	it	lt
 8006492:	18e4      	addlt	r4, r4, r3
 8006494:	f000 f8e8 	bl	8006668 <__malloc_lock>
 8006498:	4a1d      	ldr	r2, [pc, #116]	@ (8006510 <_free_r+0x90>)
 800649a:	6813      	ldr	r3, [r2, #0]
 800649c:	b933      	cbnz	r3, 80064ac <_free_r+0x2c>
 800649e:	6063      	str	r3, [r4, #4]
 80064a0:	6014      	str	r4, [r2, #0]
 80064a2:	4628      	mov	r0, r5
 80064a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a8:	f000 b8e4 	b.w	8006674 <__malloc_unlock>
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d908      	bls.n	80064c2 <_free_r+0x42>
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	1821      	adds	r1, r4, r0
 80064b4:	428b      	cmp	r3, r1
 80064b6:	bf01      	itttt	eq
 80064b8:	6819      	ldreq	r1, [r3, #0]
 80064ba:	685b      	ldreq	r3, [r3, #4]
 80064bc:	1809      	addeq	r1, r1, r0
 80064be:	6021      	streq	r1, [r4, #0]
 80064c0:	e7ed      	b.n	800649e <_free_r+0x1e>
 80064c2:	461a      	mov	r2, r3
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	b10b      	cbz	r3, 80064cc <_free_r+0x4c>
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	d9fa      	bls.n	80064c2 <_free_r+0x42>
 80064cc:	6811      	ldr	r1, [r2, #0]
 80064ce:	1850      	adds	r0, r2, r1
 80064d0:	42a0      	cmp	r0, r4
 80064d2:	d10b      	bne.n	80064ec <_free_r+0x6c>
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	4401      	add	r1, r0
 80064d8:	1850      	adds	r0, r2, r1
 80064da:	4283      	cmp	r3, r0
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	d1e0      	bne.n	80064a2 <_free_r+0x22>
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	6053      	str	r3, [r2, #4]
 80064e6:	4408      	add	r0, r1
 80064e8:	6010      	str	r0, [r2, #0]
 80064ea:	e7da      	b.n	80064a2 <_free_r+0x22>
 80064ec:	d902      	bls.n	80064f4 <_free_r+0x74>
 80064ee:	230c      	movs	r3, #12
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	e7d6      	b.n	80064a2 <_free_r+0x22>
 80064f4:	6820      	ldr	r0, [r4, #0]
 80064f6:	1821      	adds	r1, r4, r0
 80064f8:	428b      	cmp	r3, r1
 80064fa:	bf04      	itt	eq
 80064fc:	6819      	ldreq	r1, [r3, #0]
 80064fe:	685b      	ldreq	r3, [r3, #4]
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	bf04      	itt	eq
 8006504:	1809      	addeq	r1, r1, r0
 8006506:	6021      	streq	r1, [r4, #0]
 8006508:	6054      	str	r4, [r2, #4]
 800650a:	e7ca      	b.n	80064a2 <_free_r+0x22>
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	bf00      	nop
 8006510:	2000043c 	.word	0x2000043c

08006514 <malloc>:
 8006514:	4b02      	ldr	r3, [pc, #8]	@ (8006520 <malloc+0xc>)
 8006516:	4601      	mov	r1, r0
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	f000 b825 	b.w	8006568 <_malloc_r>
 800651e:	bf00      	nop
 8006520:	20000018 	.word	0x20000018

08006524 <sbrk_aligned>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	4e0f      	ldr	r6, [pc, #60]	@ (8006564 <sbrk_aligned+0x40>)
 8006528:	460c      	mov	r4, r1
 800652a:	6831      	ldr	r1, [r6, #0]
 800652c:	4605      	mov	r5, r0
 800652e:	b911      	cbnz	r1, 8006536 <sbrk_aligned+0x12>
 8006530:	f002 fcd2 	bl	8008ed8 <_sbrk_r>
 8006534:	6030      	str	r0, [r6, #0]
 8006536:	4621      	mov	r1, r4
 8006538:	4628      	mov	r0, r5
 800653a:	f002 fccd 	bl	8008ed8 <_sbrk_r>
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d103      	bne.n	800654a <sbrk_aligned+0x26>
 8006542:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006546:	4620      	mov	r0, r4
 8006548:	bd70      	pop	{r4, r5, r6, pc}
 800654a:	1cc4      	adds	r4, r0, #3
 800654c:	f024 0403 	bic.w	r4, r4, #3
 8006550:	42a0      	cmp	r0, r4
 8006552:	d0f8      	beq.n	8006546 <sbrk_aligned+0x22>
 8006554:	1a21      	subs	r1, r4, r0
 8006556:	4628      	mov	r0, r5
 8006558:	f002 fcbe 	bl	8008ed8 <_sbrk_r>
 800655c:	3001      	adds	r0, #1
 800655e:	d1f2      	bne.n	8006546 <sbrk_aligned+0x22>
 8006560:	e7ef      	b.n	8006542 <sbrk_aligned+0x1e>
 8006562:	bf00      	nop
 8006564:	20000438 	.word	0x20000438

08006568 <_malloc_r>:
 8006568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800656c:	1ccd      	adds	r5, r1, #3
 800656e:	f025 0503 	bic.w	r5, r5, #3
 8006572:	3508      	adds	r5, #8
 8006574:	2d0c      	cmp	r5, #12
 8006576:	bf38      	it	cc
 8006578:	250c      	movcc	r5, #12
 800657a:	2d00      	cmp	r5, #0
 800657c:	4606      	mov	r6, r0
 800657e:	db01      	blt.n	8006584 <_malloc_r+0x1c>
 8006580:	42a9      	cmp	r1, r5
 8006582:	d904      	bls.n	800658e <_malloc_r+0x26>
 8006584:	230c      	movs	r3, #12
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	2000      	movs	r0, #0
 800658a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006664 <_malloc_r+0xfc>
 8006592:	f000 f869 	bl	8006668 <__malloc_lock>
 8006596:	f8d8 3000 	ldr.w	r3, [r8]
 800659a:	461c      	mov	r4, r3
 800659c:	bb44      	cbnz	r4, 80065f0 <_malloc_r+0x88>
 800659e:	4629      	mov	r1, r5
 80065a0:	4630      	mov	r0, r6
 80065a2:	f7ff ffbf 	bl	8006524 <sbrk_aligned>
 80065a6:	1c43      	adds	r3, r0, #1
 80065a8:	4604      	mov	r4, r0
 80065aa:	d158      	bne.n	800665e <_malloc_r+0xf6>
 80065ac:	f8d8 4000 	ldr.w	r4, [r8]
 80065b0:	4627      	mov	r7, r4
 80065b2:	2f00      	cmp	r7, #0
 80065b4:	d143      	bne.n	800663e <_malloc_r+0xd6>
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	d04b      	beq.n	8006652 <_malloc_r+0xea>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	4639      	mov	r1, r7
 80065be:	4630      	mov	r0, r6
 80065c0:	eb04 0903 	add.w	r9, r4, r3
 80065c4:	f002 fc88 	bl	8008ed8 <_sbrk_r>
 80065c8:	4581      	cmp	r9, r0
 80065ca:	d142      	bne.n	8006652 <_malloc_r+0xea>
 80065cc:	6821      	ldr	r1, [r4, #0]
 80065ce:	1a6d      	subs	r5, r5, r1
 80065d0:	4629      	mov	r1, r5
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7ff ffa6 	bl	8006524 <sbrk_aligned>
 80065d8:	3001      	adds	r0, #1
 80065da:	d03a      	beq.n	8006652 <_malloc_r+0xea>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	442b      	add	r3, r5
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	f8d8 3000 	ldr.w	r3, [r8]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	bb62      	cbnz	r2, 8006644 <_malloc_r+0xdc>
 80065ea:	f8c8 7000 	str.w	r7, [r8]
 80065ee:	e00f      	b.n	8006610 <_malloc_r+0xa8>
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	1b52      	subs	r2, r2, r5
 80065f4:	d420      	bmi.n	8006638 <_malloc_r+0xd0>
 80065f6:	2a0b      	cmp	r2, #11
 80065f8:	d917      	bls.n	800662a <_malloc_r+0xc2>
 80065fa:	1961      	adds	r1, r4, r5
 80065fc:	42a3      	cmp	r3, r4
 80065fe:	6025      	str	r5, [r4, #0]
 8006600:	bf18      	it	ne
 8006602:	6059      	strne	r1, [r3, #4]
 8006604:	6863      	ldr	r3, [r4, #4]
 8006606:	bf08      	it	eq
 8006608:	f8c8 1000 	streq.w	r1, [r8]
 800660c:	5162      	str	r2, [r4, r5]
 800660e:	604b      	str	r3, [r1, #4]
 8006610:	4630      	mov	r0, r6
 8006612:	f000 f82f 	bl	8006674 <__malloc_unlock>
 8006616:	f104 000b 	add.w	r0, r4, #11
 800661a:	1d23      	adds	r3, r4, #4
 800661c:	f020 0007 	bic.w	r0, r0, #7
 8006620:	1ac2      	subs	r2, r0, r3
 8006622:	bf1c      	itt	ne
 8006624:	1a1b      	subne	r3, r3, r0
 8006626:	50a3      	strne	r3, [r4, r2]
 8006628:	e7af      	b.n	800658a <_malloc_r+0x22>
 800662a:	6862      	ldr	r2, [r4, #4]
 800662c:	42a3      	cmp	r3, r4
 800662e:	bf0c      	ite	eq
 8006630:	f8c8 2000 	streq.w	r2, [r8]
 8006634:	605a      	strne	r2, [r3, #4]
 8006636:	e7eb      	b.n	8006610 <_malloc_r+0xa8>
 8006638:	4623      	mov	r3, r4
 800663a:	6864      	ldr	r4, [r4, #4]
 800663c:	e7ae      	b.n	800659c <_malloc_r+0x34>
 800663e:	463c      	mov	r4, r7
 8006640:	687f      	ldr	r7, [r7, #4]
 8006642:	e7b6      	b.n	80065b2 <_malloc_r+0x4a>
 8006644:	461a      	mov	r2, r3
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	42a3      	cmp	r3, r4
 800664a:	d1fb      	bne.n	8006644 <_malloc_r+0xdc>
 800664c:	2300      	movs	r3, #0
 800664e:	6053      	str	r3, [r2, #4]
 8006650:	e7de      	b.n	8006610 <_malloc_r+0xa8>
 8006652:	230c      	movs	r3, #12
 8006654:	6033      	str	r3, [r6, #0]
 8006656:	4630      	mov	r0, r6
 8006658:	f000 f80c 	bl	8006674 <__malloc_unlock>
 800665c:	e794      	b.n	8006588 <_malloc_r+0x20>
 800665e:	6005      	str	r5, [r0, #0]
 8006660:	e7d6      	b.n	8006610 <_malloc_r+0xa8>
 8006662:	bf00      	nop
 8006664:	2000043c 	.word	0x2000043c

08006668 <__malloc_lock>:
 8006668:	4801      	ldr	r0, [pc, #4]	@ (8006670 <__malloc_lock+0x8>)
 800666a:	f7ff b8a8 	b.w	80057be <__retarget_lock_acquire_recursive>
 800666e:	bf00      	nop
 8006670:	20000434 	.word	0x20000434

08006674 <__malloc_unlock>:
 8006674:	4801      	ldr	r0, [pc, #4]	@ (800667c <__malloc_unlock+0x8>)
 8006676:	f7ff b8a3 	b.w	80057c0 <__retarget_lock_release_recursive>
 800667a:	bf00      	nop
 800667c:	20000434 	.word	0x20000434

08006680 <_Balloc>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	69c6      	ldr	r6, [r0, #28]
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	b976      	cbnz	r6, 80066a8 <_Balloc+0x28>
 800668a:	2010      	movs	r0, #16
 800668c:	f7ff ff42 	bl	8006514 <malloc>
 8006690:	4602      	mov	r2, r0
 8006692:	61e0      	str	r0, [r4, #28]
 8006694:	b920      	cbnz	r0, 80066a0 <_Balloc+0x20>
 8006696:	4b18      	ldr	r3, [pc, #96]	@ (80066f8 <_Balloc+0x78>)
 8006698:	4818      	ldr	r0, [pc, #96]	@ (80066fc <_Balloc+0x7c>)
 800669a:	216b      	movs	r1, #107	@ 0x6b
 800669c:	f002 fc44 	bl	8008f28 <__assert_func>
 80066a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066a4:	6006      	str	r6, [r0, #0]
 80066a6:	60c6      	str	r6, [r0, #12]
 80066a8:	69e6      	ldr	r6, [r4, #28]
 80066aa:	68f3      	ldr	r3, [r6, #12]
 80066ac:	b183      	cbz	r3, 80066d0 <_Balloc+0x50>
 80066ae:	69e3      	ldr	r3, [r4, #28]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066b6:	b9b8      	cbnz	r0, 80066e8 <_Balloc+0x68>
 80066b8:	2101      	movs	r1, #1
 80066ba:	fa01 f605 	lsl.w	r6, r1, r5
 80066be:	1d72      	adds	r2, r6, #5
 80066c0:	0092      	lsls	r2, r2, #2
 80066c2:	4620      	mov	r0, r4
 80066c4:	f002 fc4e 	bl	8008f64 <_calloc_r>
 80066c8:	b160      	cbz	r0, 80066e4 <_Balloc+0x64>
 80066ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066ce:	e00e      	b.n	80066ee <_Balloc+0x6e>
 80066d0:	2221      	movs	r2, #33	@ 0x21
 80066d2:	2104      	movs	r1, #4
 80066d4:	4620      	mov	r0, r4
 80066d6:	f002 fc45 	bl	8008f64 <_calloc_r>
 80066da:	69e3      	ldr	r3, [r4, #28]
 80066dc:	60f0      	str	r0, [r6, #12]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e4      	bne.n	80066ae <_Balloc+0x2e>
 80066e4:	2000      	movs	r0, #0
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	6802      	ldr	r2, [r0, #0]
 80066ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066ee:	2300      	movs	r3, #0
 80066f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066f4:	e7f7      	b.n	80066e6 <_Balloc+0x66>
 80066f6:	bf00      	nop
 80066f8:	08009974 	.word	0x08009974
 80066fc:	080099f4 	.word	0x080099f4

08006700 <_Bfree>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	69c6      	ldr	r6, [r0, #28]
 8006704:	4605      	mov	r5, r0
 8006706:	460c      	mov	r4, r1
 8006708:	b976      	cbnz	r6, 8006728 <_Bfree+0x28>
 800670a:	2010      	movs	r0, #16
 800670c:	f7ff ff02 	bl	8006514 <malloc>
 8006710:	4602      	mov	r2, r0
 8006712:	61e8      	str	r0, [r5, #28]
 8006714:	b920      	cbnz	r0, 8006720 <_Bfree+0x20>
 8006716:	4b09      	ldr	r3, [pc, #36]	@ (800673c <_Bfree+0x3c>)
 8006718:	4809      	ldr	r0, [pc, #36]	@ (8006740 <_Bfree+0x40>)
 800671a:	218f      	movs	r1, #143	@ 0x8f
 800671c:	f002 fc04 	bl	8008f28 <__assert_func>
 8006720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006724:	6006      	str	r6, [r0, #0]
 8006726:	60c6      	str	r6, [r0, #12]
 8006728:	b13c      	cbz	r4, 800673a <_Bfree+0x3a>
 800672a:	69eb      	ldr	r3, [r5, #28]
 800672c:	6862      	ldr	r2, [r4, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006734:	6021      	str	r1, [r4, #0]
 8006736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	08009974 	.word	0x08009974
 8006740:	080099f4 	.word	0x080099f4

08006744 <__multadd>:
 8006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	690d      	ldr	r5, [r1, #16]
 800674a:	4607      	mov	r7, r0
 800674c:	460c      	mov	r4, r1
 800674e:	461e      	mov	r6, r3
 8006750:	f101 0c14 	add.w	ip, r1, #20
 8006754:	2000      	movs	r0, #0
 8006756:	f8dc 3000 	ldr.w	r3, [ip]
 800675a:	b299      	uxth	r1, r3
 800675c:	fb02 6101 	mla	r1, r2, r1, r6
 8006760:	0c1e      	lsrs	r6, r3, #16
 8006762:	0c0b      	lsrs	r3, r1, #16
 8006764:	fb02 3306 	mla	r3, r2, r6, r3
 8006768:	b289      	uxth	r1, r1
 800676a:	3001      	adds	r0, #1
 800676c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006770:	4285      	cmp	r5, r0
 8006772:	f84c 1b04 	str.w	r1, [ip], #4
 8006776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800677a:	dcec      	bgt.n	8006756 <__multadd+0x12>
 800677c:	b30e      	cbz	r6, 80067c2 <__multadd+0x7e>
 800677e:	68a3      	ldr	r3, [r4, #8]
 8006780:	42ab      	cmp	r3, r5
 8006782:	dc19      	bgt.n	80067b8 <__multadd+0x74>
 8006784:	6861      	ldr	r1, [r4, #4]
 8006786:	4638      	mov	r0, r7
 8006788:	3101      	adds	r1, #1
 800678a:	f7ff ff79 	bl	8006680 <_Balloc>
 800678e:	4680      	mov	r8, r0
 8006790:	b928      	cbnz	r0, 800679e <__multadd+0x5a>
 8006792:	4602      	mov	r2, r0
 8006794:	4b0c      	ldr	r3, [pc, #48]	@ (80067c8 <__multadd+0x84>)
 8006796:	480d      	ldr	r0, [pc, #52]	@ (80067cc <__multadd+0x88>)
 8006798:	21ba      	movs	r1, #186	@ 0xba
 800679a:	f002 fbc5 	bl	8008f28 <__assert_func>
 800679e:	6922      	ldr	r2, [r4, #16]
 80067a0:	3202      	adds	r2, #2
 80067a2:	f104 010c 	add.w	r1, r4, #12
 80067a6:	0092      	lsls	r2, r2, #2
 80067a8:	300c      	adds	r0, #12
 80067aa:	f002 fba5 	bl	8008ef8 <memcpy>
 80067ae:	4621      	mov	r1, r4
 80067b0:	4638      	mov	r0, r7
 80067b2:	f7ff ffa5 	bl	8006700 <_Bfree>
 80067b6:	4644      	mov	r4, r8
 80067b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067bc:	3501      	adds	r5, #1
 80067be:	615e      	str	r6, [r3, #20]
 80067c0:	6125      	str	r5, [r4, #16]
 80067c2:	4620      	mov	r0, r4
 80067c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c8:	080099e3 	.word	0x080099e3
 80067cc:	080099f4 	.word	0x080099f4

080067d0 <__s2b>:
 80067d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d4:	460c      	mov	r4, r1
 80067d6:	4615      	mov	r5, r2
 80067d8:	461f      	mov	r7, r3
 80067da:	2209      	movs	r2, #9
 80067dc:	3308      	adds	r3, #8
 80067de:	4606      	mov	r6, r0
 80067e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80067e4:	2100      	movs	r1, #0
 80067e6:	2201      	movs	r2, #1
 80067e8:	429a      	cmp	r2, r3
 80067ea:	db09      	blt.n	8006800 <__s2b+0x30>
 80067ec:	4630      	mov	r0, r6
 80067ee:	f7ff ff47 	bl	8006680 <_Balloc>
 80067f2:	b940      	cbnz	r0, 8006806 <__s2b+0x36>
 80067f4:	4602      	mov	r2, r0
 80067f6:	4b19      	ldr	r3, [pc, #100]	@ (800685c <__s2b+0x8c>)
 80067f8:	4819      	ldr	r0, [pc, #100]	@ (8006860 <__s2b+0x90>)
 80067fa:	21d3      	movs	r1, #211	@ 0xd3
 80067fc:	f002 fb94 	bl	8008f28 <__assert_func>
 8006800:	0052      	lsls	r2, r2, #1
 8006802:	3101      	adds	r1, #1
 8006804:	e7f0      	b.n	80067e8 <__s2b+0x18>
 8006806:	9b08      	ldr	r3, [sp, #32]
 8006808:	6143      	str	r3, [r0, #20]
 800680a:	2d09      	cmp	r5, #9
 800680c:	f04f 0301 	mov.w	r3, #1
 8006810:	6103      	str	r3, [r0, #16]
 8006812:	dd16      	ble.n	8006842 <__s2b+0x72>
 8006814:	f104 0909 	add.w	r9, r4, #9
 8006818:	46c8      	mov	r8, r9
 800681a:	442c      	add	r4, r5
 800681c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006820:	4601      	mov	r1, r0
 8006822:	3b30      	subs	r3, #48	@ 0x30
 8006824:	220a      	movs	r2, #10
 8006826:	4630      	mov	r0, r6
 8006828:	f7ff ff8c 	bl	8006744 <__multadd>
 800682c:	45a0      	cmp	r8, r4
 800682e:	d1f5      	bne.n	800681c <__s2b+0x4c>
 8006830:	f1a5 0408 	sub.w	r4, r5, #8
 8006834:	444c      	add	r4, r9
 8006836:	1b2d      	subs	r5, r5, r4
 8006838:	1963      	adds	r3, r4, r5
 800683a:	42bb      	cmp	r3, r7
 800683c:	db04      	blt.n	8006848 <__s2b+0x78>
 800683e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006842:	340a      	adds	r4, #10
 8006844:	2509      	movs	r5, #9
 8006846:	e7f6      	b.n	8006836 <__s2b+0x66>
 8006848:	f814 3b01 	ldrb.w	r3, [r4], #1
 800684c:	4601      	mov	r1, r0
 800684e:	3b30      	subs	r3, #48	@ 0x30
 8006850:	220a      	movs	r2, #10
 8006852:	4630      	mov	r0, r6
 8006854:	f7ff ff76 	bl	8006744 <__multadd>
 8006858:	e7ee      	b.n	8006838 <__s2b+0x68>
 800685a:	bf00      	nop
 800685c:	080099e3 	.word	0x080099e3
 8006860:	080099f4 	.word	0x080099f4

08006864 <__hi0bits>:
 8006864:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006868:	4603      	mov	r3, r0
 800686a:	bf36      	itet	cc
 800686c:	0403      	lslcc	r3, r0, #16
 800686e:	2000      	movcs	r0, #0
 8006870:	2010      	movcc	r0, #16
 8006872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006876:	bf3c      	itt	cc
 8006878:	021b      	lslcc	r3, r3, #8
 800687a:	3008      	addcc	r0, #8
 800687c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006880:	bf3c      	itt	cc
 8006882:	011b      	lslcc	r3, r3, #4
 8006884:	3004      	addcc	r0, #4
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688a:	bf3c      	itt	cc
 800688c:	009b      	lslcc	r3, r3, #2
 800688e:	3002      	addcc	r0, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	db05      	blt.n	80068a0 <__hi0bits+0x3c>
 8006894:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006898:	f100 0001 	add.w	r0, r0, #1
 800689c:	bf08      	it	eq
 800689e:	2020      	moveq	r0, #32
 80068a0:	4770      	bx	lr

080068a2 <__lo0bits>:
 80068a2:	6803      	ldr	r3, [r0, #0]
 80068a4:	4602      	mov	r2, r0
 80068a6:	f013 0007 	ands.w	r0, r3, #7
 80068aa:	d00b      	beq.n	80068c4 <__lo0bits+0x22>
 80068ac:	07d9      	lsls	r1, r3, #31
 80068ae:	d421      	bmi.n	80068f4 <__lo0bits+0x52>
 80068b0:	0798      	lsls	r0, r3, #30
 80068b2:	bf49      	itett	mi
 80068b4:	085b      	lsrmi	r3, r3, #1
 80068b6:	089b      	lsrpl	r3, r3, #2
 80068b8:	2001      	movmi	r0, #1
 80068ba:	6013      	strmi	r3, [r2, #0]
 80068bc:	bf5c      	itt	pl
 80068be:	6013      	strpl	r3, [r2, #0]
 80068c0:	2002      	movpl	r0, #2
 80068c2:	4770      	bx	lr
 80068c4:	b299      	uxth	r1, r3
 80068c6:	b909      	cbnz	r1, 80068cc <__lo0bits+0x2a>
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	2010      	movs	r0, #16
 80068cc:	b2d9      	uxtb	r1, r3
 80068ce:	b909      	cbnz	r1, 80068d4 <__lo0bits+0x32>
 80068d0:	3008      	adds	r0, #8
 80068d2:	0a1b      	lsrs	r3, r3, #8
 80068d4:	0719      	lsls	r1, r3, #28
 80068d6:	bf04      	itt	eq
 80068d8:	091b      	lsreq	r3, r3, #4
 80068da:	3004      	addeq	r0, #4
 80068dc:	0799      	lsls	r1, r3, #30
 80068de:	bf04      	itt	eq
 80068e0:	089b      	lsreq	r3, r3, #2
 80068e2:	3002      	addeq	r0, #2
 80068e4:	07d9      	lsls	r1, r3, #31
 80068e6:	d403      	bmi.n	80068f0 <__lo0bits+0x4e>
 80068e8:	085b      	lsrs	r3, r3, #1
 80068ea:	f100 0001 	add.w	r0, r0, #1
 80068ee:	d003      	beq.n	80068f8 <__lo0bits+0x56>
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	4770      	bx	lr
 80068f4:	2000      	movs	r0, #0
 80068f6:	4770      	bx	lr
 80068f8:	2020      	movs	r0, #32
 80068fa:	4770      	bx	lr

080068fc <__i2b>:
 80068fc:	b510      	push	{r4, lr}
 80068fe:	460c      	mov	r4, r1
 8006900:	2101      	movs	r1, #1
 8006902:	f7ff febd 	bl	8006680 <_Balloc>
 8006906:	4602      	mov	r2, r0
 8006908:	b928      	cbnz	r0, 8006916 <__i2b+0x1a>
 800690a:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <__i2b+0x24>)
 800690c:	4805      	ldr	r0, [pc, #20]	@ (8006924 <__i2b+0x28>)
 800690e:	f240 1145 	movw	r1, #325	@ 0x145
 8006912:	f002 fb09 	bl	8008f28 <__assert_func>
 8006916:	2301      	movs	r3, #1
 8006918:	6144      	str	r4, [r0, #20]
 800691a:	6103      	str	r3, [r0, #16]
 800691c:	bd10      	pop	{r4, pc}
 800691e:	bf00      	nop
 8006920:	080099e3 	.word	0x080099e3
 8006924:	080099f4 	.word	0x080099f4

08006928 <__multiply>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	4617      	mov	r7, r2
 800692e:	690a      	ldr	r2, [r1, #16]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	429a      	cmp	r2, r3
 8006934:	bfa8      	it	ge
 8006936:	463b      	movge	r3, r7
 8006938:	4689      	mov	r9, r1
 800693a:	bfa4      	itt	ge
 800693c:	460f      	movge	r7, r1
 800693e:	4699      	movge	r9, r3
 8006940:	693d      	ldr	r5, [r7, #16]
 8006942:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	eb05 060a 	add.w	r6, r5, sl
 800694e:	42b3      	cmp	r3, r6
 8006950:	b085      	sub	sp, #20
 8006952:	bfb8      	it	lt
 8006954:	3101      	addlt	r1, #1
 8006956:	f7ff fe93 	bl	8006680 <_Balloc>
 800695a:	b930      	cbnz	r0, 800696a <__multiply+0x42>
 800695c:	4602      	mov	r2, r0
 800695e:	4b41      	ldr	r3, [pc, #260]	@ (8006a64 <__multiply+0x13c>)
 8006960:	4841      	ldr	r0, [pc, #260]	@ (8006a68 <__multiply+0x140>)
 8006962:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006966:	f002 fadf 	bl	8008f28 <__assert_func>
 800696a:	f100 0414 	add.w	r4, r0, #20
 800696e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006972:	4623      	mov	r3, r4
 8006974:	2200      	movs	r2, #0
 8006976:	4573      	cmp	r3, lr
 8006978:	d320      	bcc.n	80069bc <__multiply+0x94>
 800697a:	f107 0814 	add.w	r8, r7, #20
 800697e:	f109 0114 	add.w	r1, r9, #20
 8006982:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006986:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800698a:	9302      	str	r3, [sp, #8]
 800698c:	1beb      	subs	r3, r5, r7
 800698e:	3b15      	subs	r3, #21
 8006990:	f023 0303 	bic.w	r3, r3, #3
 8006994:	3304      	adds	r3, #4
 8006996:	3715      	adds	r7, #21
 8006998:	42bd      	cmp	r5, r7
 800699a:	bf38      	it	cc
 800699c:	2304      	movcc	r3, #4
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	9b02      	ldr	r3, [sp, #8]
 80069a2:	9103      	str	r1, [sp, #12]
 80069a4:	428b      	cmp	r3, r1
 80069a6:	d80c      	bhi.n	80069c2 <__multiply+0x9a>
 80069a8:	2e00      	cmp	r6, #0
 80069aa:	dd03      	ble.n	80069b4 <__multiply+0x8c>
 80069ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d055      	beq.n	8006a60 <__multiply+0x138>
 80069b4:	6106      	str	r6, [r0, #16]
 80069b6:	b005      	add	sp, #20
 80069b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069bc:	f843 2b04 	str.w	r2, [r3], #4
 80069c0:	e7d9      	b.n	8006976 <__multiply+0x4e>
 80069c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80069c6:	f1ba 0f00 	cmp.w	sl, #0
 80069ca:	d01f      	beq.n	8006a0c <__multiply+0xe4>
 80069cc:	46c4      	mov	ip, r8
 80069ce:	46a1      	mov	r9, r4
 80069d0:	2700      	movs	r7, #0
 80069d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069d6:	f8d9 3000 	ldr.w	r3, [r9]
 80069da:	fa1f fb82 	uxth.w	fp, r2
 80069de:	b29b      	uxth	r3, r3
 80069e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80069e4:	443b      	add	r3, r7
 80069e6:	f8d9 7000 	ldr.w	r7, [r9]
 80069ea:	0c12      	lsrs	r2, r2, #16
 80069ec:	0c3f      	lsrs	r7, r7, #16
 80069ee:	fb0a 7202 	mla	r2, sl, r2, r7
 80069f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069fc:	4565      	cmp	r5, ip
 80069fe:	f849 3b04 	str.w	r3, [r9], #4
 8006a02:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006a06:	d8e4      	bhi.n	80069d2 <__multiply+0xaa>
 8006a08:	9b01      	ldr	r3, [sp, #4]
 8006a0a:	50e7      	str	r7, [r4, r3]
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a12:	3104      	adds	r1, #4
 8006a14:	f1b9 0f00 	cmp.w	r9, #0
 8006a18:	d020      	beq.n	8006a5c <__multiply+0x134>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	4647      	mov	r7, r8
 8006a1e:	46a4      	mov	ip, r4
 8006a20:	f04f 0a00 	mov.w	sl, #0
 8006a24:	f8b7 b000 	ldrh.w	fp, [r7]
 8006a28:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006a2c:	fb09 220b 	mla	r2, r9, fp, r2
 8006a30:	4452      	add	r2, sl
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a38:	f84c 3b04 	str.w	r3, [ip], #4
 8006a3c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006a40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a44:	f8bc 3000 	ldrh.w	r3, [ip]
 8006a48:	fb09 330a 	mla	r3, r9, sl, r3
 8006a4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006a50:	42bd      	cmp	r5, r7
 8006a52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a56:	d8e5      	bhi.n	8006a24 <__multiply+0xfc>
 8006a58:	9a01      	ldr	r2, [sp, #4]
 8006a5a:	50a3      	str	r3, [r4, r2]
 8006a5c:	3404      	adds	r4, #4
 8006a5e:	e79f      	b.n	80069a0 <__multiply+0x78>
 8006a60:	3e01      	subs	r6, #1
 8006a62:	e7a1      	b.n	80069a8 <__multiply+0x80>
 8006a64:	080099e3 	.word	0x080099e3
 8006a68:	080099f4 	.word	0x080099f4

08006a6c <__pow5mult>:
 8006a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a70:	4615      	mov	r5, r2
 8006a72:	f012 0203 	ands.w	r2, r2, #3
 8006a76:	4607      	mov	r7, r0
 8006a78:	460e      	mov	r6, r1
 8006a7a:	d007      	beq.n	8006a8c <__pow5mult+0x20>
 8006a7c:	4c25      	ldr	r4, [pc, #148]	@ (8006b14 <__pow5mult+0xa8>)
 8006a7e:	3a01      	subs	r2, #1
 8006a80:	2300      	movs	r3, #0
 8006a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a86:	f7ff fe5d 	bl	8006744 <__multadd>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	10ad      	asrs	r5, r5, #2
 8006a8e:	d03d      	beq.n	8006b0c <__pow5mult+0xa0>
 8006a90:	69fc      	ldr	r4, [r7, #28]
 8006a92:	b97c      	cbnz	r4, 8006ab4 <__pow5mult+0x48>
 8006a94:	2010      	movs	r0, #16
 8006a96:	f7ff fd3d 	bl	8006514 <malloc>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	61f8      	str	r0, [r7, #28]
 8006a9e:	b928      	cbnz	r0, 8006aac <__pow5mult+0x40>
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <__pow5mult+0xac>)
 8006aa2:	481e      	ldr	r0, [pc, #120]	@ (8006b1c <__pow5mult+0xb0>)
 8006aa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006aa8:	f002 fa3e 	bl	8008f28 <__assert_func>
 8006aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ab0:	6004      	str	r4, [r0, #0]
 8006ab2:	60c4      	str	r4, [r0, #12]
 8006ab4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006abc:	b94c      	cbnz	r4, 8006ad2 <__pow5mult+0x66>
 8006abe:	f240 2171 	movw	r1, #625	@ 0x271
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f7ff ff1a 	bl	80068fc <__i2b>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ace:	4604      	mov	r4, r0
 8006ad0:	6003      	str	r3, [r0, #0]
 8006ad2:	f04f 0900 	mov.w	r9, #0
 8006ad6:	07eb      	lsls	r3, r5, #31
 8006ad8:	d50a      	bpl.n	8006af0 <__pow5mult+0x84>
 8006ada:	4631      	mov	r1, r6
 8006adc:	4622      	mov	r2, r4
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f7ff ff22 	bl	8006928 <__multiply>
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4680      	mov	r8, r0
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff fe09 	bl	8006700 <_Bfree>
 8006aee:	4646      	mov	r6, r8
 8006af0:	106d      	asrs	r5, r5, #1
 8006af2:	d00b      	beq.n	8006b0c <__pow5mult+0xa0>
 8006af4:	6820      	ldr	r0, [r4, #0]
 8006af6:	b938      	cbnz	r0, 8006b08 <__pow5mult+0x9c>
 8006af8:	4622      	mov	r2, r4
 8006afa:	4621      	mov	r1, r4
 8006afc:	4638      	mov	r0, r7
 8006afe:	f7ff ff13 	bl	8006928 <__multiply>
 8006b02:	6020      	str	r0, [r4, #0]
 8006b04:	f8c0 9000 	str.w	r9, [r0]
 8006b08:	4604      	mov	r4, r0
 8006b0a:	e7e4      	b.n	8006ad6 <__pow5mult+0x6a>
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b12:	bf00      	nop
 8006b14:	08009b20 	.word	0x08009b20
 8006b18:	08009974 	.word	0x08009974
 8006b1c:	080099f4 	.word	0x080099f4

08006b20 <__lshift>:
 8006b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b24:	460c      	mov	r4, r1
 8006b26:	6849      	ldr	r1, [r1, #4]
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b2e:	68a3      	ldr	r3, [r4, #8]
 8006b30:	4607      	mov	r7, r0
 8006b32:	4691      	mov	r9, r2
 8006b34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b38:	f108 0601 	add.w	r6, r8, #1
 8006b3c:	42b3      	cmp	r3, r6
 8006b3e:	db0b      	blt.n	8006b58 <__lshift+0x38>
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7ff fd9d 	bl	8006680 <_Balloc>
 8006b46:	4605      	mov	r5, r0
 8006b48:	b948      	cbnz	r0, 8006b5e <__lshift+0x3e>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	4b28      	ldr	r3, [pc, #160]	@ (8006bf0 <__lshift+0xd0>)
 8006b4e:	4829      	ldr	r0, [pc, #164]	@ (8006bf4 <__lshift+0xd4>)
 8006b50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b54:	f002 f9e8 	bl	8008f28 <__assert_func>
 8006b58:	3101      	adds	r1, #1
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	e7ee      	b.n	8006b3c <__lshift+0x1c>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f100 0114 	add.w	r1, r0, #20
 8006b64:	f100 0210 	add.w	r2, r0, #16
 8006b68:	4618      	mov	r0, r3
 8006b6a:	4553      	cmp	r3, sl
 8006b6c:	db33      	blt.n	8006bd6 <__lshift+0xb6>
 8006b6e:	6920      	ldr	r0, [r4, #16]
 8006b70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b74:	f104 0314 	add.w	r3, r4, #20
 8006b78:	f019 091f 	ands.w	r9, r9, #31
 8006b7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b84:	d02b      	beq.n	8006bde <__lshift+0xbe>
 8006b86:	f1c9 0e20 	rsb	lr, r9, #32
 8006b8a:	468a      	mov	sl, r1
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	fa00 f009 	lsl.w	r0, r0, r9
 8006b94:	4310      	orrs	r0, r2
 8006b96:	f84a 0b04 	str.w	r0, [sl], #4
 8006b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b9e:	459c      	cmp	ip, r3
 8006ba0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ba4:	d8f3      	bhi.n	8006b8e <__lshift+0x6e>
 8006ba6:	ebac 0304 	sub.w	r3, ip, r4
 8006baa:	3b15      	subs	r3, #21
 8006bac:	f023 0303 	bic.w	r3, r3, #3
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	f104 0015 	add.w	r0, r4, #21
 8006bb6:	4560      	cmp	r0, ip
 8006bb8:	bf88      	it	hi
 8006bba:	2304      	movhi	r3, #4
 8006bbc:	50ca      	str	r2, [r1, r3]
 8006bbe:	b10a      	cbz	r2, 8006bc4 <__lshift+0xa4>
 8006bc0:	f108 0602 	add.w	r6, r8, #2
 8006bc4:	3e01      	subs	r6, #1
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	612e      	str	r6, [r5, #16]
 8006bca:	4621      	mov	r1, r4
 8006bcc:	f7ff fd98 	bl	8006700 <_Bfree>
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006bda:	3301      	adds	r3, #1
 8006bdc:	e7c5      	b.n	8006b6a <__lshift+0x4a>
 8006bde:	3904      	subs	r1, #4
 8006be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006be8:	459c      	cmp	ip, r3
 8006bea:	d8f9      	bhi.n	8006be0 <__lshift+0xc0>
 8006bec:	e7ea      	b.n	8006bc4 <__lshift+0xa4>
 8006bee:	bf00      	nop
 8006bf0:	080099e3 	.word	0x080099e3
 8006bf4:	080099f4 	.word	0x080099f4

08006bf8 <__mcmp>:
 8006bf8:	690a      	ldr	r2, [r1, #16]
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	6900      	ldr	r0, [r0, #16]
 8006bfe:	1a80      	subs	r0, r0, r2
 8006c00:	b530      	push	{r4, r5, lr}
 8006c02:	d10e      	bne.n	8006c22 <__mcmp+0x2a>
 8006c04:	3314      	adds	r3, #20
 8006c06:	3114      	adds	r1, #20
 8006c08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c18:	4295      	cmp	r5, r2
 8006c1a:	d003      	beq.n	8006c24 <__mcmp+0x2c>
 8006c1c:	d205      	bcs.n	8006c2a <__mcmp+0x32>
 8006c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c22:	bd30      	pop	{r4, r5, pc}
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d3f3      	bcc.n	8006c10 <__mcmp+0x18>
 8006c28:	e7fb      	b.n	8006c22 <__mcmp+0x2a>
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	e7f9      	b.n	8006c22 <__mcmp+0x2a>
	...

08006c30 <__mdiff>:
 8006c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	4689      	mov	r9, r1
 8006c36:	4606      	mov	r6, r0
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4648      	mov	r0, r9
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	f7ff ffdb 	bl	8006bf8 <__mcmp>
 8006c42:	1e05      	subs	r5, r0, #0
 8006c44:	d112      	bne.n	8006c6c <__mdiff+0x3c>
 8006c46:	4629      	mov	r1, r5
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f7ff fd19 	bl	8006680 <_Balloc>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	b928      	cbnz	r0, 8006c5e <__mdiff+0x2e>
 8006c52:	4b3f      	ldr	r3, [pc, #252]	@ (8006d50 <__mdiff+0x120>)
 8006c54:	f240 2137 	movw	r1, #567	@ 0x237
 8006c58:	483e      	ldr	r0, [pc, #248]	@ (8006d54 <__mdiff+0x124>)
 8006c5a:	f002 f965 	bl	8008f28 <__assert_func>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c64:	4610      	mov	r0, r2
 8006c66:	b003      	add	sp, #12
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6c:	bfbc      	itt	lt
 8006c6e:	464b      	movlt	r3, r9
 8006c70:	46a1      	movlt	r9, r4
 8006c72:	4630      	mov	r0, r6
 8006c74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c78:	bfba      	itte	lt
 8006c7a:	461c      	movlt	r4, r3
 8006c7c:	2501      	movlt	r5, #1
 8006c7e:	2500      	movge	r5, #0
 8006c80:	f7ff fcfe 	bl	8006680 <_Balloc>
 8006c84:	4602      	mov	r2, r0
 8006c86:	b918      	cbnz	r0, 8006c90 <__mdiff+0x60>
 8006c88:	4b31      	ldr	r3, [pc, #196]	@ (8006d50 <__mdiff+0x120>)
 8006c8a:	f240 2145 	movw	r1, #581	@ 0x245
 8006c8e:	e7e3      	b.n	8006c58 <__mdiff+0x28>
 8006c90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c94:	6926      	ldr	r6, [r4, #16]
 8006c96:	60c5      	str	r5, [r0, #12]
 8006c98:	f109 0310 	add.w	r3, r9, #16
 8006c9c:	f109 0514 	add.w	r5, r9, #20
 8006ca0:	f104 0e14 	add.w	lr, r4, #20
 8006ca4:	f100 0b14 	add.w	fp, r0, #20
 8006ca8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006cac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	46d9      	mov	r9, fp
 8006cb4:	f04f 0c00 	mov.w	ip, #0
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006cbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	fa1f f38a 	uxth.w	r3, sl
 8006cc8:	4619      	mov	r1, r3
 8006cca:	b283      	uxth	r3, r0
 8006ccc:	1acb      	subs	r3, r1, r3
 8006cce:	0c00      	lsrs	r0, r0, #16
 8006cd0:	4463      	add	r3, ip
 8006cd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006cd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ce0:	4576      	cmp	r6, lr
 8006ce2:	f849 3b04 	str.w	r3, [r9], #4
 8006ce6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006cea:	d8e5      	bhi.n	8006cb8 <__mdiff+0x88>
 8006cec:	1b33      	subs	r3, r6, r4
 8006cee:	3b15      	subs	r3, #21
 8006cf0:	f023 0303 	bic.w	r3, r3, #3
 8006cf4:	3415      	adds	r4, #21
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	42a6      	cmp	r6, r4
 8006cfa:	bf38      	it	cc
 8006cfc:	2304      	movcc	r3, #4
 8006cfe:	441d      	add	r5, r3
 8006d00:	445b      	add	r3, fp
 8006d02:	461e      	mov	r6, r3
 8006d04:	462c      	mov	r4, r5
 8006d06:	4544      	cmp	r4, r8
 8006d08:	d30e      	bcc.n	8006d28 <__mdiff+0xf8>
 8006d0a:	f108 0103 	add.w	r1, r8, #3
 8006d0e:	1b49      	subs	r1, r1, r5
 8006d10:	f021 0103 	bic.w	r1, r1, #3
 8006d14:	3d03      	subs	r5, #3
 8006d16:	45a8      	cmp	r8, r5
 8006d18:	bf38      	it	cc
 8006d1a:	2100      	movcc	r1, #0
 8006d1c:	440b      	add	r3, r1
 8006d1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d22:	b191      	cbz	r1, 8006d4a <__mdiff+0x11a>
 8006d24:	6117      	str	r7, [r2, #16]
 8006d26:	e79d      	b.n	8006c64 <__mdiff+0x34>
 8006d28:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d2c:	46e6      	mov	lr, ip
 8006d2e:	0c08      	lsrs	r0, r1, #16
 8006d30:	fa1c fc81 	uxtah	ip, ip, r1
 8006d34:	4471      	add	r1, lr
 8006d36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006d3a:	b289      	uxth	r1, r1
 8006d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d40:	f846 1b04 	str.w	r1, [r6], #4
 8006d44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d48:	e7dd      	b.n	8006d06 <__mdiff+0xd6>
 8006d4a:	3f01      	subs	r7, #1
 8006d4c:	e7e7      	b.n	8006d1e <__mdiff+0xee>
 8006d4e:	bf00      	nop
 8006d50:	080099e3 	.word	0x080099e3
 8006d54:	080099f4 	.word	0x080099f4

08006d58 <__ulp>:
 8006d58:	b082      	sub	sp, #8
 8006d5a:	ed8d 0b00 	vstr	d0, [sp]
 8006d5e:	9a01      	ldr	r2, [sp, #4]
 8006d60:	4b0f      	ldr	r3, [pc, #60]	@ (8006da0 <__ulp+0x48>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dc08      	bgt.n	8006d7e <__ulp+0x26>
 8006d6c:	425b      	negs	r3, r3
 8006d6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006d72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d76:	da04      	bge.n	8006d82 <__ulp+0x2a>
 8006d78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006d7c:	4113      	asrs	r3, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	e008      	b.n	8006d94 <__ulp+0x3c>
 8006d82:	f1a2 0314 	sub.w	r3, r2, #20
 8006d86:	2b1e      	cmp	r3, #30
 8006d88:	bfda      	itte	le
 8006d8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006d8e:	40da      	lsrle	r2, r3
 8006d90:	2201      	movgt	r2, #1
 8006d92:	2300      	movs	r3, #0
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	ec41 0b10 	vmov	d0, r0, r1
 8006d9c:	b002      	add	sp, #8
 8006d9e:	4770      	bx	lr
 8006da0:	7ff00000 	.word	0x7ff00000

08006da4 <__b2d>:
 8006da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da8:	6906      	ldr	r6, [r0, #16]
 8006daa:	f100 0814 	add.w	r8, r0, #20
 8006dae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006db2:	1f37      	subs	r7, r6, #4
 8006db4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006db8:	4610      	mov	r0, r2
 8006dba:	f7ff fd53 	bl	8006864 <__hi0bits>
 8006dbe:	f1c0 0320 	rsb	r3, r0, #32
 8006dc2:	280a      	cmp	r0, #10
 8006dc4:	600b      	str	r3, [r1, #0]
 8006dc6:	491b      	ldr	r1, [pc, #108]	@ (8006e34 <__b2d+0x90>)
 8006dc8:	dc15      	bgt.n	8006df6 <__b2d+0x52>
 8006dca:	f1c0 0c0b 	rsb	ip, r0, #11
 8006dce:	fa22 f30c 	lsr.w	r3, r2, ip
 8006dd2:	45b8      	cmp	r8, r7
 8006dd4:	ea43 0501 	orr.w	r5, r3, r1
 8006dd8:	bf34      	ite	cc
 8006dda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006dde:	2300      	movcs	r3, #0
 8006de0:	3015      	adds	r0, #21
 8006de2:	fa02 f000 	lsl.w	r0, r2, r0
 8006de6:	fa23 f30c 	lsr.w	r3, r3, ip
 8006dea:	4303      	orrs	r3, r0
 8006dec:	461c      	mov	r4, r3
 8006dee:	ec45 4b10 	vmov	d0, r4, r5
 8006df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df6:	45b8      	cmp	r8, r7
 8006df8:	bf3a      	itte	cc
 8006dfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006dfe:	f1a6 0708 	subcc.w	r7, r6, #8
 8006e02:	2300      	movcs	r3, #0
 8006e04:	380b      	subs	r0, #11
 8006e06:	d012      	beq.n	8006e2e <__b2d+0x8a>
 8006e08:	f1c0 0120 	rsb	r1, r0, #32
 8006e0c:	fa23 f401 	lsr.w	r4, r3, r1
 8006e10:	4082      	lsls	r2, r0
 8006e12:	4322      	orrs	r2, r4
 8006e14:	4547      	cmp	r7, r8
 8006e16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006e1a:	bf8c      	ite	hi
 8006e1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006e20:	2200      	movls	r2, #0
 8006e22:	4083      	lsls	r3, r0
 8006e24:	40ca      	lsrs	r2, r1
 8006e26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	e7de      	b.n	8006dec <__b2d+0x48>
 8006e2e:	ea42 0501 	orr.w	r5, r2, r1
 8006e32:	e7db      	b.n	8006dec <__b2d+0x48>
 8006e34:	3ff00000 	.word	0x3ff00000

08006e38 <__d2b>:
 8006e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	2101      	movs	r1, #1
 8006e40:	ec59 8b10 	vmov	r8, r9, d0
 8006e44:	4616      	mov	r6, r2
 8006e46:	f7ff fc1b 	bl	8006680 <_Balloc>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	b930      	cbnz	r0, 8006e5c <__d2b+0x24>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	4b23      	ldr	r3, [pc, #140]	@ (8006ee0 <__d2b+0xa8>)
 8006e52:	4824      	ldr	r0, [pc, #144]	@ (8006ee4 <__d2b+0xac>)
 8006e54:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e58:	f002 f866 	bl	8008f28 <__assert_func>
 8006e5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e64:	b10d      	cbz	r5, 8006e6a <__d2b+0x32>
 8006e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	f1b8 0300 	subs.w	r3, r8, #0
 8006e70:	d023      	beq.n	8006eba <__d2b+0x82>
 8006e72:	4668      	mov	r0, sp
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	f7ff fd14 	bl	80068a2 <__lo0bits>
 8006e7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e7e:	b1d0      	cbz	r0, 8006eb6 <__d2b+0x7e>
 8006e80:	f1c0 0320 	rsb	r3, r0, #32
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	40c2      	lsrs	r2, r0
 8006e8c:	6163      	str	r3, [r4, #20]
 8006e8e:	9201      	str	r2, [sp, #4]
 8006e90:	9b01      	ldr	r3, [sp, #4]
 8006e92:	61a3      	str	r3, [r4, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf0c      	ite	eq
 8006e98:	2201      	moveq	r2, #1
 8006e9a:	2202      	movne	r2, #2
 8006e9c:	6122      	str	r2, [r4, #16]
 8006e9e:	b1a5      	cbz	r5, 8006eca <__d2b+0x92>
 8006ea0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ea4:	4405      	add	r5, r0
 8006ea6:	603d      	str	r5, [r7, #0]
 8006ea8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006eac:	6030      	str	r0, [r6, #0]
 8006eae:	4620      	mov	r0, r4
 8006eb0:	b003      	add	sp, #12
 8006eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eb6:	6161      	str	r1, [r4, #20]
 8006eb8:	e7ea      	b.n	8006e90 <__d2b+0x58>
 8006eba:	a801      	add	r0, sp, #4
 8006ebc:	f7ff fcf1 	bl	80068a2 <__lo0bits>
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	6163      	str	r3, [r4, #20]
 8006ec4:	3020      	adds	r0, #32
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	e7e8      	b.n	8006e9c <__d2b+0x64>
 8006eca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ece:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006ed2:	6038      	str	r0, [r7, #0]
 8006ed4:	6918      	ldr	r0, [r3, #16]
 8006ed6:	f7ff fcc5 	bl	8006864 <__hi0bits>
 8006eda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ede:	e7e5      	b.n	8006eac <__d2b+0x74>
 8006ee0:	080099e3 	.word	0x080099e3
 8006ee4:	080099f4 	.word	0x080099f4

08006ee8 <__ratio>:
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	b085      	sub	sp, #20
 8006eee:	e9cd 1000 	strd	r1, r0, [sp]
 8006ef2:	a902      	add	r1, sp, #8
 8006ef4:	f7ff ff56 	bl	8006da4 <__b2d>
 8006ef8:	9800      	ldr	r0, [sp, #0]
 8006efa:	a903      	add	r1, sp, #12
 8006efc:	ec55 4b10 	vmov	r4, r5, d0
 8006f00:	f7ff ff50 	bl	8006da4 <__b2d>
 8006f04:	9b01      	ldr	r3, [sp, #4]
 8006f06:	6919      	ldr	r1, [r3, #16]
 8006f08:	9b00      	ldr	r3, [sp, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	1ac9      	subs	r1, r1, r3
 8006f0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006f12:	1a9b      	subs	r3, r3, r2
 8006f14:	ec5b ab10 	vmov	sl, fp, d0
 8006f18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bfce      	itee	gt
 8006f20:	462a      	movgt	r2, r5
 8006f22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f26:	465a      	movle	r2, fp
 8006f28:	462f      	mov	r7, r5
 8006f2a:	46d9      	mov	r9, fp
 8006f2c:	bfcc      	ite	gt
 8006f2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006f32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006f36:	464b      	mov	r3, r9
 8006f38:	4652      	mov	r2, sl
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	f7f9 fc85 	bl	800084c <__aeabi_ddiv>
 8006f42:	ec41 0b10 	vmov	d0, r0, r1
 8006f46:	b005      	add	sp, #20
 8006f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f4c <__copybits>:
 8006f4c:	3901      	subs	r1, #1
 8006f4e:	b570      	push	{r4, r5, r6, lr}
 8006f50:	1149      	asrs	r1, r1, #5
 8006f52:	6914      	ldr	r4, [r2, #16]
 8006f54:	3101      	adds	r1, #1
 8006f56:	f102 0314 	add.w	r3, r2, #20
 8006f5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f62:	1f05      	subs	r5, r0, #4
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d30c      	bcc.n	8006f82 <__copybits+0x36>
 8006f68:	1aa3      	subs	r3, r4, r2
 8006f6a:	3b11      	subs	r3, #17
 8006f6c:	f023 0303 	bic.w	r3, r3, #3
 8006f70:	3211      	adds	r2, #17
 8006f72:	42a2      	cmp	r2, r4
 8006f74:	bf88      	it	hi
 8006f76:	2300      	movhi	r3, #0
 8006f78:	4418      	add	r0, r3
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4288      	cmp	r0, r1
 8006f7e:	d305      	bcc.n	8006f8c <__copybits+0x40>
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	f853 6b04 	ldr.w	r6, [r3], #4
 8006f86:	f845 6f04 	str.w	r6, [r5, #4]!
 8006f8a:	e7eb      	b.n	8006f64 <__copybits+0x18>
 8006f8c:	f840 3b04 	str.w	r3, [r0], #4
 8006f90:	e7f4      	b.n	8006f7c <__copybits+0x30>

08006f92 <__any_on>:
 8006f92:	f100 0214 	add.w	r2, r0, #20
 8006f96:	6900      	ldr	r0, [r0, #16]
 8006f98:	114b      	asrs	r3, r1, #5
 8006f9a:	4298      	cmp	r0, r3
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	db11      	blt.n	8006fc4 <__any_on+0x32>
 8006fa0:	dd0a      	ble.n	8006fb8 <__any_on+0x26>
 8006fa2:	f011 011f 	ands.w	r1, r1, #31
 8006fa6:	d007      	beq.n	8006fb8 <__any_on+0x26>
 8006fa8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006fac:	fa24 f001 	lsr.w	r0, r4, r1
 8006fb0:	fa00 f101 	lsl.w	r1, r0, r1
 8006fb4:	428c      	cmp	r4, r1
 8006fb6:	d10b      	bne.n	8006fd0 <__any_on+0x3e>
 8006fb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d803      	bhi.n	8006fc8 <__any_on+0x36>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	bd10      	pop	{r4, pc}
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	e7f7      	b.n	8006fb8 <__any_on+0x26>
 8006fc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d0f5      	beq.n	8006fbc <__any_on+0x2a>
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	e7f6      	b.n	8006fc2 <__any_on+0x30>

08006fd4 <sulp>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	460d      	mov	r5, r1
 8006fda:	ec45 4b10 	vmov	d0, r4, r5
 8006fde:	4616      	mov	r6, r2
 8006fe0:	f7ff feba 	bl	8006d58 <__ulp>
 8006fe4:	ec51 0b10 	vmov	r0, r1, d0
 8006fe8:	b17e      	cbz	r6, 800700a <sulp+0x36>
 8006fea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dd09      	ble.n	800700a <sulp+0x36>
 8006ff6:	051b      	lsls	r3, r3, #20
 8006ff8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ffc:	2400      	movs	r4, #0
 8006ffe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007002:	4622      	mov	r2, r4
 8007004:	462b      	mov	r3, r5
 8007006:	f7f9 faf7 	bl	80005f8 <__aeabi_dmul>
 800700a:	ec41 0b10 	vmov	d0, r0, r1
 800700e:	bd70      	pop	{r4, r5, r6, pc}

08007010 <_strtod_l>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	b09f      	sub	sp, #124	@ 0x7c
 8007016:	460c      	mov	r4, r1
 8007018:	9217      	str	r2, [sp, #92]	@ 0x5c
 800701a:	2200      	movs	r2, #0
 800701c:	921a      	str	r2, [sp, #104]	@ 0x68
 800701e:	9005      	str	r0, [sp, #20]
 8007020:	f04f 0a00 	mov.w	sl, #0
 8007024:	f04f 0b00 	mov.w	fp, #0
 8007028:	460a      	mov	r2, r1
 800702a:	9219      	str	r2, [sp, #100]	@ 0x64
 800702c:	7811      	ldrb	r1, [r2, #0]
 800702e:	292b      	cmp	r1, #43	@ 0x2b
 8007030:	d04a      	beq.n	80070c8 <_strtod_l+0xb8>
 8007032:	d838      	bhi.n	80070a6 <_strtod_l+0x96>
 8007034:	290d      	cmp	r1, #13
 8007036:	d832      	bhi.n	800709e <_strtod_l+0x8e>
 8007038:	2908      	cmp	r1, #8
 800703a:	d832      	bhi.n	80070a2 <_strtod_l+0x92>
 800703c:	2900      	cmp	r1, #0
 800703e:	d03b      	beq.n	80070b8 <_strtod_l+0xa8>
 8007040:	2200      	movs	r2, #0
 8007042:	920e      	str	r2, [sp, #56]	@ 0x38
 8007044:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007046:	782a      	ldrb	r2, [r5, #0]
 8007048:	2a30      	cmp	r2, #48	@ 0x30
 800704a:	f040 80b2 	bne.w	80071b2 <_strtod_l+0x1a2>
 800704e:	786a      	ldrb	r2, [r5, #1]
 8007050:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007054:	2a58      	cmp	r2, #88	@ 0x58
 8007056:	d16e      	bne.n	8007136 <_strtod_l+0x126>
 8007058:	9302      	str	r3, [sp, #8]
 800705a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	4a8f      	ldr	r2, [pc, #572]	@ (80072a0 <_strtod_l+0x290>)
 8007064:	9805      	ldr	r0, [sp, #20]
 8007066:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007068:	a919      	add	r1, sp, #100	@ 0x64
 800706a:	f001 fff7 	bl	800905c <__gethex>
 800706e:	f010 060f 	ands.w	r6, r0, #15
 8007072:	4604      	mov	r4, r0
 8007074:	d005      	beq.n	8007082 <_strtod_l+0x72>
 8007076:	2e06      	cmp	r6, #6
 8007078:	d128      	bne.n	80070cc <_strtod_l+0xbc>
 800707a:	3501      	adds	r5, #1
 800707c:	2300      	movs	r3, #0
 800707e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007080:	930e      	str	r3, [sp, #56]	@ 0x38
 8007082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007084:	2b00      	cmp	r3, #0
 8007086:	f040 858e 	bne.w	8007ba6 <_strtod_l+0xb96>
 800708a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800708c:	b1cb      	cbz	r3, 80070c2 <_strtod_l+0xb2>
 800708e:	4652      	mov	r2, sl
 8007090:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007094:	ec43 2b10 	vmov	d0, r2, r3
 8007098:	b01f      	add	sp, #124	@ 0x7c
 800709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709e:	2920      	cmp	r1, #32
 80070a0:	d1ce      	bne.n	8007040 <_strtod_l+0x30>
 80070a2:	3201      	adds	r2, #1
 80070a4:	e7c1      	b.n	800702a <_strtod_l+0x1a>
 80070a6:	292d      	cmp	r1, #45	@ 0x2d
 80070a8:	d1ca      	bne.n	8007040 <_strtod_l+0x30>
 80070aa:	2101      	movs	r1, #1
 80070ac:	910e      	str	r1, [sp, #56]	@ 0x38
 80070ae:	1c51      	adds	r1, r2, #1
 80070b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80070b2:	7852      	ldrb	r2, [r2, #1]
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	d1c5      	bne.n	8007044 <_strtod_l+0x34>
 80070b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f040 8570 	bne.w	8007ba2 <_strtod_l+0xb92>
 80070c2:	4652      	mov	r2, sl
 80070c4:	465b      	mov	r3, fp
 80070c6:	e7e5      	b.n	8007094 <_strtod_l+0x84>
 80070c8:	2100      	movs	r1, #0
 80070ca:	e7ef      	b.n	80070ac <_strtod_l+0x9c>
 80070cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80070ce:	b13a      	cbz	r2, 80070e0 <_strtod_l+0xd0>
 80070d0:	2135      	movs	r1, #53	@ 0x35
 80070d2:	a81c      	add	r0, sp, #112	@ 0x70
 80070d4:	f7ff ff3a 	bl	8006f4c <__copybits>
 80070d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070da:	9805      	ldr	r0, [sp, #20]
 80070dc:	f7ff fb10 	bl	8006700 <_Bfree>
 80070e0:	3e01      	subs	r6, #1
 80070e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80070e4:	2e04      	cmp	r6, #4
 80070e6:	d806      	bhi.n	80070f6 <_strtod_l+0xe6>
 80070e8:	e8df f006 	tbb	[pc, r6]
 80070ec:	201d0314 	.word	0x201d0314
 80070f0:	14          	.byte	0x14
 80070f1:	00          	.byte	0x00
 80070f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80070f6:	05e1      	lsls	r1, r4, #23
 80070f8:	bf48      	it	mi
 80070fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80070fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007102:	0d1b      	lsrs	r3, r3, #20
 8007104:	051b      	lsls	r3, r3, #20
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1bb      	bne.n	8007082 <_strtod_l+0x72>
 800710a:	f7fe fb2d 	bl	8005768 <__errno>
 800710e:	2322      	movs	r3, #34	@ 0x22
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	e7b6      	b.n	8007082 <_strtod_l+0x72>
 8007114:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007118:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800711c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007120:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007124:	e7e7      	b.n	80070f6 <_strtod_l+0xe6>
 8007126:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80072a8 <_strtod_l+0x298>
 800712a:	e7e4      	b.n	80070f6 <_strtod_l+0xe6>
 800712c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007130:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007134:	e7df      	b.n	80070f6 <_strtod_l+0xe6>
 8007136:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	9219      	str	r2, [sp, #100]	@ 0x64
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	2b30      	cmp	r3, #48	@ 0x30
 8007140:	d0f9      	beq.n	8007136 <_strtod_l+0x126>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d09d      	beq.n	8007082 <_strtod_l+0x72>
 8007146:	2301      	movs	r3, #1
 8007148:	2700      	movs	r7, #0
 800714a:	9308      	str	r3, [sp, #32]
 800714c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800714e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007150:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007152:	46b9      	mov	r9, r7
 8007154:	220a      	movs	r2, #10
 8007156:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007158:	7805      	ldrb	r5, [r0, #0]
 800715a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800715e:	b2d9      	uxtb	r1, r3
 8007160:	2909      	cmp	r1, #9
 8007162:	d928      	bls.n	80071b6 <_strtod_l+0x1a6>
 8007164:	494f      	ldr	r1, [pc, #316]	@ (80072a4 <_strtod_l+0x294>)
 8007166:	2201      	movs	r2, #1
 8007168:	f001 fe82 	bl	8008e70 <strncmp>
 800716c:	2800      	cmp	r0, #0
 800716e:	d032      	beq.n	80071d6 <_strtod_l+0x1c6>
 8007170:	2000      	movs	r0, #0
 8007172:	462a      	mov	r2, r5
 8007174:	900a      	str	r0, [sp, #40]	@ 0x28
 8007176:	464d      	mov	r5, r9
 8007178:	4603      	mov	r3, r0
 800717a:	2a65      	cmp	r2, #101	@ 0x65
 800717c:	d001      	beq.n	8007182 <_strtod_l+0x172>
 800717e:	2a45      	cmp	r2, #69	@ 0x45
 8007180:	d114      	bne.n	80071ac <_strtod_l+0x19c>
 8007182:	b91d      	cbnz	r5, 800718c <_strtod_l+0x17c>
 8007184:	9a08      	ldr	r2, [sp, #32]
 8007186:	4302      	orrs	r2, r0
 8007188:	d096      	beq.n	80070b8 <_strtod_l+0xa8>
 800718a:	2500      	movs	r5, #0
 800718c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800718e:	1c62      	adds	r2, r4, #1
 8007190:	9219      	str	r2, [sp, #100]	@ 0x64
 8007192:	7862      	ldrb	r2, [r4, #1]
 8007194:	2a2b      	cmp	r2, #43	@ 0x2b
 8007196:	d07a      	beq.n	800728e <_strtod_l+0x27e>
 8007198:	2a2d      	cmp	r2, #45	@ 0x2d
 800719a:	d07e      	beq.n	800729a <_strtod_l+0x28a>
 800719c:	f04f 0c00 	mov.w	ip, #0
 80071a0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80071a4:	2909      	cmp	r1, #9
 80071a6:	f240 8085 	bls.w	80072b4 <_strtod_l+0x2a4>
 80071aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80071ac:	f04f 0800 	mov.w	r8, #0
 80071b0:	e0a5      	b.n	80072fe <_strtod_l+0x2ee>
 80071b2:	2300      	movs	r3, #0
 80071b4:	e7c8      	b.n	8007148 <_strtod_l+0x138>
 80071b6:	f1b9 0f08 	cmp.w	r9, #8
 80071ba:	bfd8      	it	le
 80071bc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80071be:	f100 0001 	add.w	r0, r0, #1
 80071c2:	bfda      	itte	le
 80071c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80071c8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80071ca:	fb02 3707 	mlagt	r7, r2, r7, r3
 80071ce:	f109 0901 	add.w	r9, r9, #1
 80071d2:	9019      	str	r0, [sp, #100]	@ 0x64
 80071d4:	e7bf      	b.n	8007156 <_strtod_l+0x146>
 80071d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	9219      	str	r2, [sp, #100]	@ 0x64
 80071dc:	785a      	ldrb	r2, [r3, #1]
 80071de:	f1b9 0f00 	cmp.w	r9, #0
 80071e2:	d03b      	beq.n	800725c <_strtod_l+0x24c>
 80071e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80071e6:	464d      	mov	r5, r9
 80071e8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80071ec:	2b09      	cmp	r3, #9
 80071ee:	d912      	bls.n	8007216 <_strtod_l+0x206>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7c2      	b.n	800717a <_strtod_l+0x16a>
 80071f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80071fa:	785a      	ldrb	r2, [r3, #1]
 80071fc:	3001      	adds	r0, #1
 80071fe:	2a30      	cmp	r2, #48	@ 0x30
 8007200:	d0f8      	beq.n	80071f4 <_strtod_l+0x1e4>
 8007202:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007206:	2b08      	cmp	r3, #8
 8007208:	f200 84d2 	bhi.w	8007bb0 <_strtod_l+0xba0>
 800720c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800720e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007210:	2000      	movs	r0, #0
 8007212:	930c      	str	r3, [sp, #48]	@ 0x30
 8007214:	4605      	mov	r5, r0
 8007216:	3a30      	subs	r2, #48	@ 0x30
 8007218:	f100 0301 	add.w	r3, r0, #1
 800721c:	d018      	beq.n	8007250 <_strtod_l+0x240>
 800721e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007220:	4419      	add	r1, r3
 8007222:	910a      	str	r1, [sp, #40]	@ 0x28
 8007224:	462e      	mov	r6, r5
 8007226:	f04f 0e0a 	mov.w	lr, #10
 800722a:	1c71      	adds	r1, r6, #1
 800722c:	eba1 0c05 	sub.w	ip, r1, r5
 8007230:	4563      	cmp	r3, ip
 8007232:	dc15      	bgt.n	8007260 <_strtod_l+0x250>
 8007234:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007238:	182b      	adds	r3, r5, r0
 800723a:	2b08      	cmp	r3, #8
 800723c:	f105 0501 	add.w	r5, r5, #1
 8007240:	4405      	add	r5, r0
 8007242:	dc1a      	bgt.n	800727a <_strtod_l+0x26a>
 8007244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007246:	230a      	movs	r3, #10
 8007248:	fb03 2301 	mla	r3, r3, r1, r2
 800724c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800724e:	2300      	movs	r3, #0
 8007250:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007252:	1c51      	adds	r1, r2, #1
 8007254:	9119      	str	r1, [sp, #100]	@ 0x64
 8007256:	7852      	ldrb	r2, [r2, #1]
 8007258:	4618      	mov	r0, r3
 800725a:	e7c5      	b.n	80071e8 <_strtod_l+0x1d8>
 800725c:	4648      	mov	r0, r9
 800725e:	e7ce      	b.n	80071fe <_strtod_l+0x1ee>
 8007260:	2e08      	cmp	r6, #8
 8007262:	dc05      	bgt.n	8007270 <_strtod_l+0x260>
 8007264:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007266:	fb0e f606 	mul.w	r6, lr, r6
 800726a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800726c:	460e      	mov	r6, r1
 800726e:	e7dc      	b.n	800722a <_strtod_l+0x21a>
 8007270:	2910      	cmp	r1, #16
 8007272:	bfd8      	it	le
 8007274:	fb0e f707 	mulle.w	r7, lr, r7
 8007278:	e7f8      	b.n	800726c <_strtod_l+0x25c>
 800727a:	2b0f      	cmp	r3, #15
 800727c:	bfdc      	itt	le
 800727e:	230a      	movle	r3, #10
 8007280:	fb03 2707 	mlale	r7, r3, r7, r2
 8007284:	e7e3      	b.n	800724e <_strtod_l+0x23e>
 8007286:	2300      	movs	r3, #0
 8007288:	930a      	str	r3, [sp, #40]	@ 0x28
 800728a:	2301      	movs	r3, #1
 800728c:	e77a      	b.n	8007184 <_strtod_l+0x174>
 800728e:	f04f 0c00 	mov.w	ip, #0
 8007292:	1ca2      	adds	r2, r4, #2
 8007294:	9219      	str	r2, [sp, #100]	@ 0x64
 8007296:	78a2      	ldrb	r2, [r4, #2]
 8007298:	e782      	b.n	80071a0 <_strtod_l+0x190>
 800729a:	f04f 0c01 	mov.w	ip, #1
 800729e:	e7f8      	b.n	8007292 <_strtod_l+0x282>
 80072a0:	08009c34 	.word	0x08009c34
 80072a4:	08009a4d 	.word	0x08009a4d
 80072a8:	7ff00000 	.word	0x7ff00000
 80072ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072ae:	1c51      	adds	r1, r2, #1
 80072b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80072b2:	7852      	ldrb	r2, [r2, #1]
 80072b4:	2a30      	cmp	r2, #48	@ 0x30
 80072b6:	d0f9      	beq.n	80072ac <_strtod_l+0x29c>
 80072b8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80072bc:	2908      	cmp	r1, #8
 80072be:	f63f af75 	bhi.w	80071ac <_strtod_l+0x19c>
 80072c2:	3a30      	subs	r2, #48	@ 0x30
 80072c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80072c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072c8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80072ca:	f04f 080a 	mov.w	r8, #10
 80072ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072d0:	1c56      	adds	r6, r2, #1
 80072d2:	9619      	str	r6, [sp, #100]	@ 0x64
 80072d4:	7852      	ldrb	r2, [r2, #1]
 80072d6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80072da:	f1be 0f09 	cmp.w	lr, #9
 80072de:	d939      	bls.n	8007354 <_strtod_l+0x344>
 80072e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80072e2:	1a76      	subs	r6, r6, r1
 80072e4:	2e08      	cmp	r6, #8
 80072e6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80072ea:	dc03      	bgt.n	80072f4 <_strtod_l+0x2e4>
 80072ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072ee:	4588      	cmp	r8, r1
 80072f0:	bfa8      	it	ge
 80072f2:	4688      	movge	r8, r1
 80072f4:	f1bc 0f00 	cmp.w	ip, #0
 80072f8:	d001      	beq.n	80072fe <_strtod_l+0x2ee>
 80072fa:	f1c8 0800 	rsb	r8, r8, #0
 80072fe:	2d00      	cmp	r5, #0
 8007300:	d14e      	bne.n	80073a0 <_strtod_l+0x390>
 8007302:	9908      	ldr	r1, [sp, #32]
 8007304:	4308      	orrs	r0, r1
 8007306:	f47f aebc 	bne.w	8007082 <_strtod_l+0x72>
 800730a:	2b00      	cmp	r3, #0
 800730c:	f47f aed4 	bne.w	80070b8 <_strtod_l+0xa8>
 8007310:	2a69      	cmp	r2, #105	@ 0x69
 8007312:	d028      	beq.n	8007366 <_strtod_l+0x356>
 8007314:	dc25      	bgt.n	8007362 <_strtod_l+0x352>
 8007316:	2a49      	cmp	r2, #73	@ 0x49
 8007318:	d025      	beq.n	8007366 <_strtod_l+0x356>
 800731a:	2a4e      	cmp	r2, #78	@ 0x4e
 800731c:	f47f aecc 	bne.w	80070b8 <_strtod_l+0xa8>
 8007320:	499a      	ldr	r1, [pc, #616]	@ (800758c <_strtod_l+0x57c>)
 8007322:	a819      	add	r0, sp, #100	@ 0x64
 8007324:	f002 f8bc 	bl	80094a0 <__match>
 8007328:	2800      	cmp	r0, #0
 800732a:	f43f aec5 	beq.w	80070b8 <_strtod_l+0xa8>
 800732e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b28      	cmp	r3, #40	@ 0x28
 8007334:	d12e      	bne.n	8007394 <_strtod_l+0x384>
 8007336:	4996      	ldr	r1, [pc, #600]	@ (8007590 <_strtod_l+0x580>)
 8007338:	aa1c      	add	r2, sp, #112	@ 0x70
 800733a:	a819      	add	r0, sp, #100	@ 0x64
 800733c:	f002 f8c4 	bl	80094c8 <__hexnan>
 8007340:	2805      	cmp	r0, #5
 8007342:	d127      	bne.n	8007394 <_strtod_l+0x384>
 8007344:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007346:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800734a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800734e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007352:	e696      	b.n	8007082 <_strtod_l+0x72>
 8007354:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007356:	fb08 2101 	mla	r1, r8, r1, r2
 800735a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800735e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007360:	e7b5      	b.n	80072ce <_strtod_l+0x2be>
 8007362:	2a6e      	cmp	r2, #110	@ 0x6e
 8007364:	e7da      	b.n	800731c <_strtod_l+0x30c>
 8007366:	498b      	ldr	r1, [pc, #556]	@ (8007594 <_strtod_l+0x584>)
 8007368:	a819      	add	r0, sp, #100	@ 0x64
 800736a:	f002 f899 	bl	80094a0 <__match>
 800736e:	2800      	cmp	r0, #0
 8007370:	f43f aea2 	beq.w	80070b8 <_strtod_l+0xa8>
 8007374:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007376:	4988      	ldr	r1, [pc, #544]	@ (8007598 <_strtod_l+0x588>)
 8007378:	3b01      	subs	r3, #1
 800737a:	a819      	add	r0, sp, #100	@ 0x64
 800737c:	9319      	str	r3, [sp, #100]	@ 0x64
 800737e:	f002 f88f 	bl	80094a0 <__match>
 8007382:	b910      	cbnz	r0, 800738a <_strtod_l+0x37a>
 8007384:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007386:	3301      	adds	r3, #1
 8007388:	9319      	str	r3, [sp, #100]	@ 0x64
 800738a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80075a8 <_strtod_l+0x598>
 800738e:	f04f 0a00 	mov.w	sl, #0
 8007392:	e676      	b.n	8007082 <_strtod_l+0x72>
 8007394:	4881      	ldr	r0, [pc, #516]	@ (800759c <_strtod_l+0x58c>)
 8007396:	f001 fdbf 	bl	8008f18 <nan>
 800739a:	ec5b ab10 	vmov	sl, fp, d0
 800739e:	e670      	b.n	8007082 <_strtod_l+0x72>
 80073a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80073a4:	eba8 0303 	sub.w	r3, r8, r3
 80073a8:	f1b9 0f00 	cmp.w	r9, #0
 80073ac:	bf08      	it	eq
 80073ae:	46a9      	moveq	r9, r5
 80073b0:	2d10      	cmp	r5, #16
 80073b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073b4:	462c      	mov	r4, r5
 80073b6:	bfa8      	it	ge
 80073b8:	2410      	movge	r4, #16
 80073ba:	f7f9 f8a3 	bl	8000504 <__aeabi_ui2d>
 80073be:	2d09      	cmp	r5, #9
 80073c0:	4682      	mov	sl, r0
 80073c2:	468b      	mov	fp, r1
 80073c4:	dc13      	bgt.n	80073ee <_strtod_l+0x3de>
 80073c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f43f ae5a 	beq.w	8007082 <_strtod_l+0x72>
 80073ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d0:	dd78      	ble.n	80074c4 <_strtod_l+0x4b4>
 80073d2:	2b16      	cmp	r3, #22
 80073d4:	dc5f      	bgt.n	8007496 <_strtod_l+0x486>
 80073d6:	4972      	ldr	r1, [pc, #456]	@ (80075a0 <_strtod_l+0x590>)
 80073d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073e0:	4652      	mov	r2, sl
 80073e2:	465b      	mov	r3, fp
 80073e4:	f7f9 f908 	bl	80005f8 <__aeabi_dmul>
 80073e8:	4682      	mov	sl, r0
 80073ea:	468b      	mov	fp, r1
 80073ec:	e649      	b.n	8007082 <_strtod_l+0x72>
 80073ee:	4b6c      	ldr	r3, [pc, #432]	@ (80075a0 <_strtod_l+0x590>)
 80073f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80073f8:	f7f9 f8fe 	bl	80005f8 <__aeabi_dmul>
 80073fc:	4682      	mov	sl, r0
 80073fe:	4638      	mov	r0, r7
 8007400:	468b      	mov	fp, r1
 8007402:	f7f9 f87f 	bl	8000504 <__aeabi_ui2d>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	f7f8 ff3d 	bl	800028c <__adddf3>
 8007412:	2d0f      	cmp	r5, #15
 8007414:	4682      	mov	sl, r0
 8007416:	468b      	mov	fp, r1
 8007418:	ddd5      	ble.n	80073c6 <_strtod_l+0x3b6>
 800741a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800741c:	1b2c      	subs	r4, r5, r4
 800741e:	441c      	add	r4, r3
 8007420:	2c00      	cmp	r4, #0
 8007422:	f340 8093 	ble.w	800754c <_strtod_l+0x53c>
 8007426:	f014 030f 	ands.w	r3, r4, #15
 800742a:	d00a      	beq.n	8007442 <_strtod_l+0x432>
 800742c:	495c      	ldr	r1, [pc, #368]	@ (80075a0 <_strtod_l+0x590>)
 800742e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007432:	4652      	mov	r2, sl
 8007434:	465b      	mov	r3, fp
 8007436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800743a:	f7f9 f8dd 	bl	80005f8 <__aeabi_dmul>
 800743e:	4682      	mov	sl, r0
 8007440:	468b      	mov	fp, r1
 8007442:	f034 040f 	bics.w	r4, r4, #15
 8007446:	d073      	beq.n	8007530 <_strtod_l+0x520>
 8007448:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800744c:	dd49      	ble.n	80074e2 <_strtod_l+0x4d2>
 800744e:	2400      	movs	r4, #0
 8007450:	46a0      	mov	r8, r4
 8007452:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007454:	46a1      	mov	r9, r4
 8007456:	9a05      	ldr	r2, [sp, #20]
 8007458:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80075a8 <_strtod_l+0x598>
 800745c:	2322      	movs	r3, #34	@ 0x22
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	f04f 0a00 	mov.w	sl, #0
 8007464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007466:	2b00      	cmp	r3, #0
 8007468:	f43f ae0b 	beq.w	8007082 <_strtod_l+0x72>
 800746c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800746e:	9805      	ldr	r0, [sp, #20]
 8007470:	f7ff f946 	bl	8006700 <_Bfree>
 8007474:	9805      	ldr	r0, [sp, #20]
 8007476:	4649      	mov	r1, r9
 8007478:	f7ff f942 	bl	8006700 <_Bfree>
 800747c:	9805      	ldr	r0, [sp, #20]
 800747e:	4641      	mov	r1, r8
 8007480:	f7ff f93e 	bl	8006700 <_Bfree>
 8007484:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007486:	9805      	ldr	r0, [sp, #20]
 8007488:	f7ff f93a 	bl	8006700 <_Bfree>
 800748c:	9805      	ldr	r0, [sp, #20]
 800748e:	4621      	mov	r1, r4
 8007490:	f7ff f936 	bl	8006700 <_Bfree>
 8007494:	e5f5      	b.n	8007082 <_strtod_l+0x72>
 8007496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007498:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800749c:	4293      	cmp	r3, r2
 800749e:	dbbc      	blt.n	800741a <_strtod_l+0x40a>
 80074a0:	4c3f      	ldr	r4, [pc, #252]	@ (80075a0 <_strtod_l+0x590>)
 80074a2:	f1c5 050f 	rsb	r5, r5, #15
 80074a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074aa:	4652      	mov	r2, sl
 80074ac:	465b      	mov	r3, fp
 80074ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b2:	f7f9 f8a1 	bl	80005f8 <__aeabi_dmul>
 80074b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b8:	1b5d      	subs	r5, r3, r5
 80074ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80074be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074c2:	e78f      	b.n	80073e4 <_strtod_l+0x3d4>
 80074c4:	3316      	adds	r3, #22
 80074c6:	dba8      	blt.n	800741a <_strtod_l+0x40a>
 80074c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ca:	eba3 0808 	sub.w	r8, r3, r8
 80074ce:	4b34      	ldr	r3, [pc, #208]	@ (80075a0 <_strtod_l+0x590>)
 80074d0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80074d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80074d8:	4650      	mov	r0, sl
 80074da:	4659      	mov	r1, fp
 80074dc:	f7f9 f9b6 	bl	800084c <__aeabi_ddiv>
 80074e0:	e782      	b.n	80073e8 <_strtod_l+0x3d8>
 80074e2:	2300      	movs	r3, #0
 80074e4:	4f2f      	ldr	r7, [pc, #188]	@ (80075a4 <_strtod_l+0x594>)
 80074e6:	1124      	asrs	r4, r4, #4
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	461e      	mov	r6, r3
 80074ee:	2c01      	cmp	r4, #1
 80074f0:	dc21      	bgt.n	8007536 <_strtod_l+0x526>
 80074f2:	b10b      	cbz	r3, 80074f8 <_strtod_l+0x4e8>
 80074f4:	4682      	mov	sl, r0
 80074f6:	468b      	mov	fp, r1
 80074f8:	492a      	ldr	r1, [pc, #168]	@ (80075a4 <_strtod_l+0x594>)
 80074fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80074fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007502:	4652      	mov	r2, sl
 8007504:	465b      	mov	r3, fp
 8007506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800750a:	f7f9 f875 	bl	80005f8 <__aeabi_dmul>
 800750e:	4b26      	ldr	r3, [pc, #152]	@ (80075a8 <_strtod_l+0x598>)
 8007510:	460a      	mov	r2, r1
 8007512:	400b      	ands	r3, r1
 8007514:	4925      	ldr	r1, [pc, #148]	@ (80075ac <_strtod_l+0x59c>)
 8007516:	428b      	cmp	r3, r1
 8007518:	4682      	mov	sl, r0
 800751a:	d898      	bhi.n	800744e <_strtod_l+0x43e>
 800751c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007520:	428b      	cmp	r3, r1
 8007522:	bf86      	itte	hi
 8007524:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80075b0 <_strtod_l+0x5a0>
 8007528:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800752c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007530:	2300      	movs	r3, #0
 8007532:	9308      	str	r3, [sp, #32]
 8007534:	e076      	b.n	8007624 <_strtod_l+0x614>
 8007536:	07e2      	lsls	r2, r4, #31
 8007538:	d504      	bpl.n	8007544 <_strtod_l+0x534>
 800753a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800753e:	f7f9 f85b 	bl	80005f8 <__aeabi_dmul>
 8007542:	2301      	movs	r3, #1
 8007544:	3601      	adds	r6, #1
 8007546:	1064      	asrs	r4, r4, #1
 8007548:	3708      	adds	r7, #8
 800754a:	e7d0      	b.n	80074ee <_strtod_l+0x4de>
 800754c:	d0f0      	beq.n	8007530 <_strtod_l+0x520>
 800754e:	4264      	negs	r4, r4
 8007550:	f014 020f 	ands.w	r2, r4, #15
 8007554:	d00a      	beq.n	800756c <_strtod_l+0x55c>
 8007556:	4b12      	ldr	r3, [pc, #72]	@ (80075a0 <_strtod_l+0x590>)
 8007558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800755c:	4650      	mov	r0, sl
 800755e:	4659      	mov	r1, fp
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f7f9 f972 	bl	800084c <__aeabi_ddiv>
 8007568:	4682      	mov	sl, r0
 800756a:	468b      	mov	fp, r1
 800756c:	1124      	asrs	r4, r4, #4
 800756e:	d0df      	beq.n	8007530 <_strtod_l+0x520>
 8007570:	2c1f      	cmp	r4, #31
 8007572:	dd1f      	ble.n	80075b4 <_strtod_l+0x5a4>
 8007574:	2400      	movs	r4, #0
 8007576:	46a0      	mov	r8, r4
 8007578:	940b      	str	r4, [sp, #44]	@ 0x2c
 800757a:	46a1      	mov	r9, r4
 800757c:	9a05      	ldr	r2, [sp, #20]
 800757e:	2322      	movs	r3, #34	@ 0x22
 8007580:	f04f 0a00 	mov.w	sl, #0
 8007584:	f04f 0b00 	mov.w	fp, #0
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	e76b      	b.n	8007464 <_strtod_l+0x454>
 800758c:	0800993d 	.word	0x0800993d
 8007590:	08009c20 	.word	0x08009c20
 8007594:	08009935 	.word	0x08009935
 8007598:	0800996a 	.word	0x0800996a
 800759c:	08009abe 	.word	0x08009abe
 80075a0:	08009b58 	.word	0x08009b58
 80075a4:	08009b30 	.word	0x08009b30
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	7ca00000 	.word	0x7ca00000
 80075b0:	7fefffff 	.word	0x7fefffff
 80075b4:	f014 0310 	ands.w	r3, r4, #16
 80075b8:	bf18      	it	ne
 80075ba:	236a      	movne	r3, #106	@ 0x6a
 80075bc:	4ea9      	ldr	r6, [pc, #676]	@ (8007864 <_strtod_l+0x854>)
 80075be:	9308      	str	r3, [sp, #32]
 80075c0:	4650      	mov	r0, sl
 80075c2:	4659      	mov	r1, fp
 80075c4:	2300      	movs	r3, #0
 80075c6:	07e7      	lsls	r7, r4, #31
 80075c8:	d504      	bpl.n	80075d4 <_strtod_l+0x5c4>
 80075ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075ce:	f7f9 f813 	bl	80005f8 <__aeabi_dmul>
 80075d2:	2301      	movs	r3, #1
 80075d4:	1064      	asrs	r4, r4, #1
 80075d6:	f106 0608 	add.w	r6, r6, #8
 80075da:	d1f4      	bne.n	80075c6 <_strtod_l+0x5b6>
 80075dc:	b10b      	cbz	r3, 80075e2 <_strtod_l+0x5d2>
 80075de:	4682      	mov	sl, r0
 80075e0:	468b      	mov	fp, r1
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	b1b3      	cbz	r3, 8007614 <_strtod_l+0x604>
 80075e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80075ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	4659      	mov	r1, fp
 80075f2:	dd0f      	ble.n	8007614 <_strtod_l+0x604>
 80075f4:	2b1f      	cmp	r3, #31
 80075f6:	dd56      	ble.n	80076a6 <_strtod_l+0x696>
 80075f8:	2b34      	cmp	r3, #52	@ 0x34
 80075fa:	bfde      	ittt	le
 80075fc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007600:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007604:	4093      	lslle	r3, r2
 8007606:	f04f 0a00 	mov.w	sl, #0
 800760a:	bfcc      	ite	gt
 800760c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007610:	ea03 0b01 	andle.w	fp, r3, r1
 8007614:	2200      	movs	r2, #0
 8007616:	2300      	movs	r3, #0
 8007618:	4650      	mov	r0, sl
 800761a:	4659      	mov	r1, fp
 800761c:	f7f9 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007620:	2800      	cmp	r0, #0
 8007622:	d1a7      	bne.n	8007574 <_strtod_l+0x564>
 8007624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800762a:	9805      	ldr	r0, [sp, #20]
 800762c:	462b      	mov	r3, r5
 800762e:	464a      	mov	r2, r9
 8007630:	f7ff f8ce 	bl	80067d0 <__s2b>
 8007634:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007636:	2800      	cmp	r0, #0
 8007638:	f43f af09 	beq.w	800744e <_strtod_l+0x43e>
 800763c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800763e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007640:	2a00      	cmp	r2, #0
 8007642:	eba3 0308 	sub.w	r3, r3, r8
 8007646:	bfa8      	it	ge
 8007648:	2300      	movge	r3, #0
 800764a:	9312      	str	r3, [sp, #72]	@ 0x48
 800764c:	2400      	movs	r4, #0
 800764e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007652:	9316      	str	r3, [sp, #88]	@ 0x58
 8007654:	46a0      	mov	r8, r4
 8007656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007658:	9805      	ldr	r0, [sp, #20]
 800765a:	6859      	ldr	r1, [r3, #4]
 800765c:	f7ff f810 	bl	8006680 <_Balloc>
 8007660:	4681      	mov	r9, r0
 8007662:	2800      	cmp	r0, #0
 8007664:	f43f aef7 	beq.w	8007456 <_strtod_l+0x446>
 8007668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	3202      	adds	r2, #2
 800766e:	f103 010c 	add.w	r1, r3, #12
 8007672:	0092      	lsls	r2, r2, #2
 8007674:	300c      	adds	r0, #12
 8007676:	f001 fc3f 	bl	8008ef8 <memcpy>
 800767a:	ec4b ab10 	vmov	d0, sl, fp
 800767e:	9805      	ldr	r0, [sp, #20]
 8007680:	aa1c      	add	r2, sp, #112	@ 0x70
 8007682:	a91b      	add	r1, sp, #108	@ 0x6c
 8007684:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007688:	f7ff fbd6 	bl	8006e38 <__d2b>
 800768c:	901a      	str	r0, [sp, #104]	@ 0x68
 800768e:	2800      	cmp	r0, #0
 8007690:	f43f aee1 	beq.w	8007456 <_strtod_l+0x446>
 8007694:	9805      	ldr	r0, [sp, #20]
 8007696:	2101      	movs	r1, #1
 8007698:	f7ff f930 	bl	80068fc <__i2b>
 800769c:	4680      	mov	r8, r0
 800769e:	b948      	cbnz	r0, 80076b4 <_strtod_l+0x6a4>
 80076a0:	f04f 0800 	mov.w	r8, #0
 80076a4:	e6d7      	b.n	8007456 <_strtod_l+0x446>
 80076a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076aa:	fa02 f303 	lsl.w	r3, r2, r3
 80076ae:	ea03 0a0a 	and.w	sl, r3, sl
 80076b2:	e7af      	b.n	8007614 <_strtod_l+0x604>
 80076b4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80076b6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	bfab      	itete	ge
 80076bc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80076be:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80076c0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80076c2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80076c4:	bfac      	ite	ge
 80076c6:	18ef      	addge	r7, r5, r3
 80076c8:	1b5e      	sublt	r6, r3, r5
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	1aed      	subs	r5, r5, r3
 80076ce:	4415      	add	r5, r2
 80076d0:	4b65      	ldr	r3, [pc, #404]	@ (8007868 <_strtod_l+0x858>)
 80076d2:	3d01      	subs	r5, #1
 80076d4:	429d      	cmp	r5, r3
 80076d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80076da:	da50      	bge.n	800777e <_strtod_l+0x76e>
 80076dc:	1b5b      	subs	r3, r3, r5
 80076de:	2b1f      	cmp	r3, #31
 80076e0:	eba2 0203 	sub.w	r2, r2, r3
 80076e4:	f04f 0101 	mov.w	r1, #1
 80076e8:	dc3d      	bgt.n	8007766 <_strtod_l+0x756>
 80076ea:	fa01 f303 	lsl.w	r3, r1, r3
 80076ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076f0:	2300      	movs	r3, #0
 80076f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80076f4:	18bd      	adds	r5, r7, r2
 80076f6:	9b08      	ldr	r3, [sp, #32]
 80076f8:	42af      	cmp	r7, r5
 80076fa:	4416      	add	r6, r2
 80076fc:	441e      	add	r6, r3
 80076fe:	463b      	mov	r3, r7
 8007700:	bfa8      	it	ge
 8007702:	462b      	movge	r3, r5
 8007704:	42b3      	cmp	r3, r6
 8007706:	bfa8      	it	ge
 8007708:	4633      	movge	r3, r6
 800770a:	2b00      	cmp	r3, #0
 800770c:	bfc2      	ittt	gt
 800770e:	1aed      	subgt	r5, r5, r3
 8007710:	1af6      	subgt	r6, r6, r3
 8007712:	1aff      	subgt	r7, r7, r3
 8007714:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd16      	ble.n	8007748 <_strtod_l+0x738>
 800771a:	4641      	mov	r1, r8
 800771c:	9805      	ldr	r0, [sp, #20]
 800771e:	461a      	mov	r2, r3
 8007720:	f7ff f9a4 	bl	8006a6c <__pow5mult>
 8007724:	4680      	mov	r8, r0
 8007726:	2800      	cmp	r0, #0
 8007728:	d0ba      	beq.n	80076a0 <_strtod_l+0x690>
 800772a:	4601      	mov	r1, r0
 800772c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800772e:	9805      	ldr	r0, [sp, #20]
 8007730:	f7ff f8fa 	bl	8006928 <__multiply>
 8007734:	900a      	str	r0, [sp, #40]	@ 0x28
 8007736:	2800      	cmp	r0, #0
 8007738:	f43f ae8d 	beq.w	8007456 <_strtod_l+0x446>
 800773c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800773e:	9805      	ldr	r0, [sp, #20]
 8007740:	f7fe ffde 	bl	8006700 <_Bfree>
 8007744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007746:	931a      	str	r3, [sp, #104]	@ 0x68
 8007748:	2d00      	cmp	r5, #0
 800774a:	dc1d      	bgt.n	8007788 <_strtod_l+0x778>
 800774c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	dd23      	ble.n	800779a <_strtod_l+0x78a>
 8007752:	4649      	mov	r1, r9
 8007754:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007756:	9805      	ldr	r0, [sp, #20]
 8007758:	f7ff f988 	bl	8006a6c <__pow5mult>
 800775c:	4681      	mov	r9, r0
 800775e:	b9e0      	cbnz	r0, 800779a <_strtod_l+0x78a>
 8007760:	f04f 0900 	mov.w	r9, #0
 8007764:	e677      	b.n	8007456 <_strtod_l+0x446>
 8007766:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800776a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800776e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007772:	35e2      	adds	r5, #226	@ 0xe2
 8007774:	fa01 f305 	lsl.w	r3, r1, r5
 8007778:	9310      	str	r3, [sp, #64]	@ 0x40
 800777a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800777c:	e7ba      	b.n	80076f4 <_strtod_l+0x6e4>
 800777e:	2300      	movs	r3, #0
 8007780:	9310      	str	r3, [sp, #64]	@ 0x40
 8007782:	2301      	movs	r3, #1
 8007784:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007786:	e7b5      	b.n	80076f4 <_strtod_l+0x6e4>
 8007788:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800778a:	9805      	ldr	r0, [sp, #20]
 800778c:	462a      	mov	r2, r5
 800778e:	f7ff f9c7 	bl	8006b20 <__lshift>
 8007792:	901a      	str	r0, [sp, #104]	@ 0x68
 8007794:	2800      	cmp	r0, #0
 8007796:	d1d9      	bne.n	800774c <_strtod_l+0x73c>
 8007798:	e65d      	b.n	8007456 <_strtod_l+0x446>
 800779a:	2e00      	cmp	r6, #0
 800779c:	dd07      	ble.n	80077ae <_strtod_l+0x79e>
 800779e:	4649      	mov	r1, r9
 80077a0:	9805      	ldr	r0, [sp, #20]
 80077a2:	4632      	mov	r2, r6
 80077a4:	f7ff f9bc 	bl	8006b20 <__lshift>
 80077a8:	4681      	mov	r9, r0
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d0d8      	beq.n	8007760 <_strtod_l+0x750>
 80077ae:	2f00      	cmp	r7, #0
 80077b0:	dd08      	ble.n	80077c4 <_strtod_l+0x7b4>
 80077b2:	4641      	mov	r1, r8
 80077b4:	9805      	ldr	r0, [sp, #20]
 80077b6:	463a      	mov	r2, r7
 80077b8:	f7ff f9b2 	bl	8006b20 <__lshift>
 80077bc:	4680      	mov	r8, r0
 80077be:	2800      	cmp	r0, #0
 80077c0:	f43f ae49 	beq.w	8007456 <_strtod_l+0x446>
 80077c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077c6:	9805      	ldr	r0, [sp, #20]
 80077c8:	464a      	mov	r2, r9
 80077ca:	f7ff fa31 	bl	8006c30 <__mdiff>
 80077ce:	4604      	mov	r4, r0
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f43f ae40 	beq.w	8007456 <_strtod_l+0x446>
 80077d6:	68c3      	ldr	r3, [r0, #12]
 80077d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077da:	2300      	movs	r3, #0
 80077dc:	60c3      	str	r3, [r0, #12]
 80077de:	4641      	mov	r1, r8
 80077e0:	f7ff fa0a 	bl	8006bf8 <__mcmp>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	da45      	bge.n	8007874 <_strtod_l+0x864>
 80077e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ea:	ea53 030a 	orrs.w	r3, r3, sl
 80077ee:	d16b      	bne.n	80078c8 <_strtod_l+0x8b8>
 80077f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d167      	bne.n	80078c8 <_strtod_l+0x8b8>
 80077f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077fc:	0d1b      	lsrs	r3, r3, #20
 80077fe:	051b      	lsls	r3, r3, #20
 8007800:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007804:	d960      	bls.n	80078c8 <_strtod_l+0x8b8>
 8007806:	6963      	ldr	r3, [r4, #20]
 8007808:	b913      	cbnz	r3, 8007810 <_strtod_l+0x800>
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	2b01      	cmp	r3, #1
 800780e:	dd5b      	ble.n	80078c8 <_strtod_l+0x8b8>
 8007810:	4621      	mov	r1, r4
 8007812:	2201      	movs	r2, #1
 8007814:	9805      	ldr	r0, [sp, #20]
 8007816:	f7ff f983 	bl	8006b20 <__lshift>
 800781a:	4641      	mov	r1, r8
 800781c:	4604      	mov	r4, r0
 800781e:	f7ff f9eb 	bl	8006bf8 <__mcmp>
 8007822:	2800      	cmp	r0, #0
 8007824:	dd50      	ble.n	80078c8 <_strtod_l+0x8b8>
 8007826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800782a:	9a08      	ldr	r2, [sp, #32]
 800782c:	0d1b      	lsrs	r3, r3, #20
 800782e:	051b      	lsls	r3, r3, #20
 8007830:	2a00      	cmp	r2, #0
 8007832:	d06a      	beq.n	800790a <_strtod_l+0x8fa>
 8007834:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007838:	d867      	bhi.n	800790a <_strtod_l+0x8fa>
 800783a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800783e:	f67f ae9d 	bls.w	800757c <_strtod_l+0x56c>
 8007842:	4b0a      	ldr	r3, [pc, #40]	@ (800786c <_strtod_l+0x85c>)
 8007844:	4650      	mov	r0, sl
 8007846:	4659      	mov	r1, fp
 8007848:	2200      	movs	r2, #0
 800784a:	f7f8 fed5 	bl	80005f8 <__aeabi_dmul>
 800784e:	4b08      	ldr	r3, [pc, #32]	@ (8007870 <_strtod_l+0x860>)
 8007850:	400b      	ands	r3, r1
 8007852:	4682      	mov	sl, r0
 8007854:	468b      	mov	fp, r1
 8007856:	2b00      	cmp	r3, #0
 8007858:	f47f ae08 	bne.w	800746c <_strtod_l+0x45c>
 800785c:	9a05      	ldr	r2, [sp, #20]
 800785e:	2322      	movs	r3, #34	@ 0x22
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	e603      	b.n	800746c <_strtod_l+0x45c>
 8007864:	08009c48 	.word	0x08009c48
 8007868:	fffffc02 	.word	0xfffffc02
 800786c:	39500000 	.word	0x39500000
 8007870:	7ff00000 	.word	0x7ff00000
 8007874:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007878:	d165      	bne.n	8007946 <_strtod_l+0x936>
 800787a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800787c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007880:	b35a      	cbz	r2, 80078da <_strtod_l+0x8ca>
 8007882:	4a9f      	ldr	r2, [pc, #636]	@ (8007b00 <_strtod_l+0xaf0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d12b      	bne.n	80078e0 <_strtod_l+0x8d0>
 8007888:	9b08      	ldr	r3, [sp, #32]
 800788a:	4651      	mov	r1, sl
 800788c:	b303      	cbz	r3, 80078d0 <_strtod_l+0x8c0>
 800788e:	4b9d      	ldr	r3, [pc, #628]	@ (8007b04 <_strtod_l+0xaf4>)
 8007890:	465a      	mov	r2, fp
 8007892:	4013      	ands	r3, r2
 8007894:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007898:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800789c:	d81b      	bhi.n	80078d6 <_strtod_l+0x8c6>
 800789e:	0d1b      	lsrs	r3, r3, #20
 80078a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078a4:	fa02 f303 	lsl.w	r3, r2, r3
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d119      	bne.n	80078e0 <_strtod_l+0x8d0>
 80078ac:	4b96      	ldr	r3, [pc, #600]	@ (8007b08 <_strtod_l+0xaf8>)
 80078ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d102      	bne.n	80078ba <_strtod_l+0x8aa>
 80078b4:	3101      	adds	r1, #1
 80078b6:	f43f adce 	beq.w	8007456 <_strtod_l+0x446>
 80078ba:	4b92      	ldr	r3, [pc, #584]	@ (8007b04 <_strtod_l+0xaf4>)
 80078bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078be:	401a      	ands	r2, r3
 80078c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80078c4:	f04f 0a00 	mov.w	sl, #0
 80078c8:	9b08      	ldr	r3, [sp, #32]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1b9      	bne.n	8007842 <_strtod_l+0x832>
 80078ce:	e5cd      	b.n	800746c <_strtod_l+0x45c>
 80078d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078d4:	e7e8      	b.n	80078a8 <_strtod_l+0x898>
 80078d6:	4613      	mov	r3, r2
 80078d8:	e7e6      	b.n	80078a8 <_strtod_l+0x898>
 80078da:	ea53 030a 	orrs.w	r3, r3, sl
 80078de:	d0a2      	beq.n	8007826 <_strtod_l+0x816>
 80078e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078e2:	b1db      	cbz	r3, 800791c <_strtod_l+0x90c>
 80078e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078e6:	4213      	tst	r3, r2
 80078e8:	d0ee      	beq.n	80078c8 <_strtod_l+0x8b8>
 80078ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ec:	9a08      	ldr	r2, [sp, #32]
 80078ee:	4650      	mov	r0, sl
 80078f0:	4659      	mov	r1, fp
 80078f2:	b1bb      	cbz	r3, 8007924 <_strtod_l+0x914>
 80078f4:	f7ff fb6e 	bl	8006fd4 <sulp>
 80078f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078fc:	ec53 2b10 	vmov	r2, r3, d0
 8007900:	f7f8 fcc4 	bl	800028c <__adddf3>
 8007904:	4682      	mov	sl, r0
 8007906:	468b      	mov	fp, r1
 8007908:	e7de      	b.n	80078c8 <_strtod_l+0x8b8>
 800790a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800790e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007912:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007916:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800791a:	e7d5      	b.n	80078c8 <_strtod_l+0x8b8>
 800791c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800791e:	ea13 0f0a 	tst.w	r3, sl
 8007922:	e7e1      	b.n	80078e8 <_strtod_l+0x8d8>
 8007924:	f7ff fb56 	bl	8006fd4 <sulp>
 8007928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800792c:	ec53 2b10 	vmov	r2, r3, d0
 8007930:	f7f8 fcaa 	bl	8000288 <__aeabi_dsub>
 8007934:	2200      	movs	r2, #0
 8007936:	2300      	movs	r3, #0
 8007938:	4682      	mov	sl, r0
 800793a:	468b      	mov	fp, r1
 800793c:	f7f9 f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007940:	2800      	cmp	r0, #0
 8007942:	d0c1      	beq.n	80078c8 <_strtod_l+0x8b8>
 8007944:	e61a      	b.n	800757c <_strtod_l+0x56c>
 8007946:	4641      	mov	r1, r8
 8007948:	4620      	mov	r0, r4
 800794a:	f7ff facd 	bl	8006ee8 <__ratio>
 800794e:	ec57 6b10 	vmov	r6, r7, d0
 8007952:	2200      	movs	r2, #0
 8007954:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007958:	4630      	mov	r0, r6
 800795a:	4639      	mov	r1, r7
 800795c:	f7f9 f8c8 	bl	8000af0 <__aeabi_dcmple>
 8007960:	2800      	cmp	r0, #0
 8007962:	d06f      	beq.n	8007a44 <_strtod_l+0xa34>
 8007964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d17a      	bne.n	8007a60 <_strtod_l+0xa50>
 800796a:	f1ba 0f00 	cmp.w	sl, #0
 800796e:	d158      	bne.n	8007a22 <_strtod_l+0xa12>
 8007970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007972:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007976:	2b00      	cmp	r3, #0
 8007978:	d15a      	bne.n	8007a30 <_strtod_l+0xa20>
 800797a:	4b64      	ldr	r3, [pc, #400]	@ (8007b0c <_strtod_l+0xafc>)
 800797c:	2200      	movs	r2, #0
 800797e:	4630      	mov	r0, r6
 8007980:	4639      	mov	r1, r7
 8007982:	f7f9 f8ab 	bl	8000adc <__aeabi_dcmplt>
 8007986:	2800      	cmp	r0, #0
 8007988:	d159      	bne.n	8007a3e <_strtod_l+0xa2e>
 800798a:	4630      	mov	r0, r6
 800798c:	4639      	mov	r1, r7
 800798e:	4b60      	ldr	r3, [pc, #384]	@ (8007b10 <_strtod_l+0xb00>)
 8007990:	2200      	movs	r2, #0
 8007992:	f7f8 fe31 	bl	80005f8 <__aeabi_dmul>
 8007996:	4606      	mov	r6, r0
 8007998:	460f      	mov	r7, r1
 800799a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800799e:	9606      	str	r6, [sp, #24]
 80079a0:	9307      	str	r3, [sp, #28]
 80079a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079a6:	4d57      	ldr	r5, [pc, #348]	@ (8007b04 <_strtod_l+0xaf4>)
 80079a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ae:	401d      	ands	r5, r3
 80079b0:	4b58      	ldr	r3, [pc, #352]	@ (8007b14 <_strtod_l+0xb04>)
 80079b2:	429d      	cmp	r5, r3
 80079b4:	f040 80b2 	bne.w	8007b1c <_strtod_l+0xb0c>
 80079b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80079be:	ec4b ab10 	vmov	d0, sl, fp
 80079c2:	f7ff f9c9 	bl	8006d58 <__ulp>
 80079c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079ca:	ec51 0b10 	vmov	r0, r1, d0
 80079ce:	f7f8 fe13 	bl	80005f8 <__aeabi_dmul>
 80079d2:	4652      	mov	r2, sl
 80079d4:	465b      	mov	r3, fp
 80079d6:	f7f8 fc59 	bl	800028c <__adddf3>
 80079da:	460b      	mov	r3, r1
 80079dc:	4949      	ldr	r1, [pc, #292]	@ (8007b04 <_strtod_l+0xaf4>)
 80079de:	4a4e      	ldr	r2, [pc, #312]	@ (8007b18 <_strtod_l+0xb08>)
 80079e0:	4019      	ands	r1, r3
 80079e2:	4291      	cmp	r1, r2
 80079e4:	4682      	mov	sl, r0
 80079e6:	d942      	bls.n	8007a6e <_strtod_l+0xa5e>
 80079e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079ea:	4b47      	ldr	r3, [pc, #284]	@ (8007b08 <_strtod_l+0xaf8>)
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d103      	bne.n	80079f8 <_strtod_l+0x9e8>
 80079f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079f2:	3301      	adds	r3, #1
 80079f4:	f43f ad2f 	beq.w	8007456 <_strtod_l+0x446>
 80079f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007b08 <_strtod_l+0xaf8>
 80079fc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007a00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a02:	9805      	ldr	r0, [sp, #20]
 8007a04:	f7fe fe7c 	bl	8006700 <_Bfree>
 8007a08:	9805      	ldr	r0, [sp, #20]
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	f7fe fe78 	bl	8006700 <_Bfree>
 8007a10:	9805      	ldr	r0, [sp, #20]
 8007a12:	4641      	mov	r1, r8
 8007a14:	f7fe fe74 	bl	8006700 <_Bfree>
 8007a18:	9805      	ldr	r0, [sp, #20]
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f7fe fe70 	bl	8006700 <_Bfree>
 8007a20:	e619      	b.n	8007656 <_strtod_l+0x646>
 8007a22:	f1ba 0f01 	cmp.w	sl, #1
 8007a26:	d103      	bne.n	8007a30 <_strtod_l+0xa20>
 8007a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f43f ada6 	beq.w	800757c <_strtod_l+0x56c>
 8007a30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007ae0 <_strtod_l+0xad0>
 8007a34:	4f35      	ldr	r7, [pc, #212]	@ (8007b0c <_strtod_l+0xafc>)
 8007a36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	e7b1      	b.n	80079a2 <_strtod_l+0x992>
 8007a3e:	4f34      	ldr	r7, [pc, #208]	@ (8007b10 <_strtod_l+0xb00>)
 8007a40:	2600      	movs	r6, #0
 8007a42:	e7aa      	b.n	800799a <_strtod_l+0x98a>
 8007a44:	4b32      	ldr	r3, [pc, #200]	@ (8007b10 <_strtod_l+0xb00>)
 8007a46:	4630      	mov	r0, r6
 8007a48:	4639      	mov	r1, r7
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f7f8 fdd4 	bl	80005f8 <__aeabi_dmul>
 8007a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a52:	4606      	mov	r6, r0
 8007a54:	460f      	mov	r7, r1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d09f      	beq.n	800799a <_strtod_l+0x98a>
 8007a5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a5e:	e7a0      	b.n	80079a2 <_strtod_l+0x992>
 8007a60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007ae8 <_strtod_l+0xad8>
 8007a64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a68:	ec57 6b17 	vmov	r6, r7, d7
 8007a6c:	e799      	b.n	80079a2 <_strtod_l+0x992>
 8007a6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007a72:	9b08      	ldr	r3, [sp, #32]
 8007a74:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1c1      	bne.n	8007a00 <_strtod_l+0x9f0>
 8007a7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a80:	0d1b      	lsrs	r3, r3, #20
 8007a82:	051b      	lsls	r3, r3, #20
 8007a84:	429d      	cmp	r5, r3
 8007a86:	d1bb      	bne.n	8007a00 <_strtod_l+0x9f0>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f9 f8fc 	bl	8000c88 <__aeabi_d2lz>
 8007a90:	f7f8 fd84 	bl	800059c <__aeabi_l2d>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	f7f8 fbf4 	bl	8000288 <__aeabi_dsub>
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007aa8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aae:	ea46 060a 	orr.w	r6, r6, sl
 8007ab2:	431e      	orrs	r6, r3
 8007ab4:	d06f      	beq.n	8007b96 <_strtod_l+0xb86>
 8007ab6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007af0 <_strtod_l+0xae0>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f7f9 f80e 	bl	8000adc <__aeabi_dcmplt>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f47f acd3 	bne.w	800746c <_strtod_l+0x45c>
 8007ac6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007af8 <_strtod_l+0xae8>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ad0:	f7f9 f822 	bl	8000b18 <__aeabi_dcmpgt>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d093      	beq.n	8007a00 <_strtod_l+0x9f0>
 8007ad8:	e4c8      	b.n	800746c <_strtod_l+0x45c>
 8007ada:	bf00      	nop
 8007adc:	f3af 8000 	nop.w
 8007ae0:	00000000 	.word	0x00000000
 8007ae4:	bff00000 	.word	0xbff00000
 8007ae8:	00000000 	.word	0x00000000
 8007aec:	3ff00000 	.word	0x3ff00000
 8007af0:	94a03595 	.word	0x94a03595
 8007af4:	3fdfffff 	.word	0x3fdfffff
 8007af8:	35afe535 	.word	0x35afe535
 8007afc:	3fe00000 	.word	0x3fe00000
 8007b00:	000fffff 	.word	0x000fffff
 8007b04:	7ff00000 	.word	0x7ff00000
 8007b08:	7fefffff 	.word	0x7fefffff
 8007b0c:	3ff00000 	.word	0x3ff00000
 8007b10:	3fe00000 	.word	0x3fe00000
 8007b14:	7fe00000 	.word	0x7fe00000
 8007b18:	7c9fffff 	.word	0x7c9fffff
 8007b1c:	9b08      	ldr	r3, [sp, #32]
 8007b1e:	b323      	cbz	r3, 8007b6a <_strtod_l+0xb5a>
 8007b20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b24:	d821      	bhi.n	8007b6a <_strtod_l+0xb5a>
 8007b26:	a328      	add	r3, pc, #160	@ (adr r3, 8007bc8 <_strtod_l+0xbb8>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f7f8 ffde 	bl	8000af0 <__aeabi_dcmple>
 8007b34:	b1a0      	cbz	r0, 8007b60 <_strtod_l+0xb50>
 8007b36:	4639      	mov	r1, r7
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7f9 f835 	bl	8000ba8 <__aeabi_d2uiz>
 8007b3e:	2801      	cmp	r0, #1
 8007b40:	bf38      	it	cc
 8007b42:	2001      	movcc	r0, #1
 8007b44:	f7f8 fcde 	bl	8000504 <__aeabi_ui2d>
 8007b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	b9fb      	cbnz	r3, 8007b90 <_strtod_l+0xb80>
 8007b50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b54:	9014      	str	r0, [sp, #80]	@ 0x50
 8007b56:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007b5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007b66:	1b5b      	subs	r3, r3, r5
 8007b68:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007b72:	f7ff f8f1 	bl	8006d58 <__ulp>
 8007b76:	4650      	mov	r0, sl
 8007b78:	ec53 2b10 	vmov	r2, r3, d0
 8007b7c:	4659      	mov	r1, fp
 8007b7e:	f7f8 fd3b 	bl	80005f8 <__aeabi_dmul>
 8007b82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b86:	f7f8 fb81 	bl	800028c <__adddf3>
 8007b8a:	4682      	mov	sl, r0
 8007b8c:	468b      	mov	fp, r1
 8007b8e:	e770      	b.n	8007a72 <_strtod_l+0xa62>
 8007b90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007b94:	e7e0      	b.n	8007b58 <_strtod_l+0xb48>
 8007b96:	a30e      	add	r3, pc, #56	@ (adr r3, 8007bd0 <_strtod_l+0xbc0>)
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	f7f8 ff9e 	bl	8000adc <__aeabi_dcmplt>
 8007ba0:	e798      	b.n	8007ad4 <_strtod_l+0xac4>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ba6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ba8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	f7ff ba6d 	b.w	800708a <_strtod_l+0x7a>
 8007bb0:	2a65      	cmp	r2, #101	@ 0x65
 8007bb2:	f43f ab68 	beq.w	8007286 <_strtod_l+0x276>
 8007bb6:	2a45      	cmp	r2, #69	@ 0x45
 8007bb8:	f43f ab65 	beq.w	8007286 <_strtod_l+0x276>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f7ff bba0 	b.w	8007302 <_strtod_l+0x2f2>
 8007bc2:	bf00      	nop
 8007bc4:	f3af 8000 	nop.w
 8007bc8:	ffc00000 	.word	0xffc00000
 8007bcc:	41dfffff 	.word	0x41dfffff
 8007bd0:	94a03595 	.word	0x94a03595
 8007bd4:	3fcfffff 	.word	0x3fcfffff

08007bd8 <_strtod_r>:
 8007bd8:	4b01      	ldr	r3, [pc, #4]	@ (8007be0 <_strtod_r+0x8>)
 8007bda:	f7ff ba19 	b.w	8007010 <_strtod_l>
 8007bde:	bf00      	nop
 8007be0:	20000068 	.word	0x20000068

08007be4 <_strtol_l.isra.0>:
 8007be4:	2b24      	cmp	r3, #36	@ 0x24
 8007be6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bea:	4686      	mov	lr, r0
 8007bec:	4690      	mov	r8, r2
 8007bee:	d801      	bhi.n	8007bf4 <_strtol_l.isra.0+0x10>
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d106      	bne.n	8007c02 <_strtol_l.isra.0+0x1e>
 8007bf4:	f7fd fdb8 	bl	8005768 <__errno>
 8007bf8:	2316      	movs	r3, #22
 8007bfa:	6003      	str	r3, [r0, #0]
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c02:	4834      	ldr	r0, [pc, #208]	@ (8007cd4 <_strtol_l.isra.0+0xf0>)
 8007c04:	460d      	mov	r5, r1
 8007c06:	462a      	mov	r2, r5
 8007c08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c0c:	5d06      	ldrb	r6, [r0, r4]
 8007c0e:	f016 0608 	ands.w	r6, r6, #8
 8007c12:	d1f8      	bne.n	8007c06 <_strtol_l.isra.0+0x22>
 8007c14:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c16:	d110      	bne.n	8007c3a <_strtol_l.isra.0+0x56>
 8007c18:	782c      	ldrb	r4, [r5, #0]
 8007c1a:	2601      	movs	r6, #1
 8007c1c:	1c95      	adds	r5, r2, #2
 8007c1e:	f033 0210 	bics.w	r2, r3, #16
 8007c22:	d115      	bne.n	8007c50 <_strtol_l.isra.0+0x6c>
 8007c24:	2c30      	cmp	r4, #48	@ 0x30
 8007c26:	d10d      	bne.n	8007c44 <_strtol_l.isra.0+0x60>
 8007c28:	782a      	ldrb	r2, [r5, #0]
 8007c2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c2e:	2a58      	cmp	r2, #88	@ 0x58
 8007c30:	d108      	bne.n	8007c44 <_strtol_l.isra.0+0x60>
 8007c32:	786c      	ldrb	r4, [r5, #1]
 8007c34:	3502      	adds	r5, #2
 8007c36:	2310      	movs	r3, #16
 8007c38:	e00a      	b.n	8007c50 <_strtol_l.isra.0+0x6c>
 8007c3a:	2c2b      	cmp	r4, #43	@ 0x2b
 8007c3c:	bf04      	itt	eq
 8007c3e:	782c      	ldrbeq	r4, [r5, #0]
 8007c40:	1c95      	addeq	r5, r2, #2
 8007c42:	e7ec      	b.n	8007c1e <_strtol_l.isra.0+0x3a>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1f6      	bne.n	8007c36 <_strtol_l.isra.0+0x52>
 8007c48:	2c30      	cmp	r4, #48	@ 0x30
 8007c4a:	bf14      	ite	ne
 8007c4c:	230a      	movne	r3, #10
 8007c4e:	2308      	moveq	r3, #8
 8007c50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007c54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007c58:	2200      	movs	r2, #0
 8007c5a:	fbbc f9f3 	udiv	r9, ip, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007c68:	2f09      	cmp	r7, #9
 8007c6a:	d80f      	bhi.n	8007c8c <_strtol_l.isra.0+0xa8>
 8007c6c:	463c      	mov	r4, r7
 8007c6e:	42a3      	cmp	r3, r4
 8007c70:	dd1b      	ble.n	8007caa <_strtol_l.isra.0+0xc6>
 8007c72:	1c57      	adds	r7, r2, #1
 8007c74:	d007      	beq.n	8007c86 <_strtol_l.isra.0+0xa2>
 8007c76:	4581      	cmp	r9, r0
 8007c78:	d314      	bcc.n	8007ca4 <_strtol_l.isra.0+0xc0>
 8007c7a:	d101      	bne.n	8007c80 <_strtol_l.isra.0+0x9c>
 8007c7c:	45a2      	cmp	sl, r4
 8007c7e:	db11      	blt.n	8007ca4 <_strtol_l.isra.0+0xc0>
 8007c80:	fb00 4003 	mla	r0, r0, r3, r4
 8007c84:	2201      	movs	r2, #1
 8007c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c8a:	e7eb      	b.n	8007c64 <_strtol_l.isra.0+0x80>
 8007c8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007c90:	2f19      	cmp	r7, #25
 8007c92:	d801      	bhi.n	8007c98 <_strtol_l.isra.0+0xb4>
 8007c94:	3c37      	subs	r4, #55	@ 0x37
 8007c96:	e7ea      	b.n	8007c6e <_strtol_l.isra.0+0x8a>
 8007c98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007c9c:	2f19      	cmp	r7, #25
 8007c9e:	d804      	bhi.n	8007caa <_strtol_l.isra.0+0xc6>
 8007ca0:	3c57      	subs	r4, #87	@ 0x57
 8007ca2:	e7e4      	b.n	8007c6e <_strtol_l.isra.0+0x8a>
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ca8:	e7ed      	b.n	8007c86 <_strtol_l.isra.0+0xa2>
 8007caa:	1c53      	adds	r3, r2, #1
 8007cac:	d108      	bne.n	8007cc0 <_strtol_l.isra.0+0xdc>
 8007cae:	2322      	movs	r3, #34	@ 0x22
 8007cb0:	f8ce 3000 	str.w	r3, [lr]
 8007cb4:	4660      	mov	r0, ip
 8007cb6:	f1b8 0f00 	cmp.w	r8, #0
 8007cba:	d0a0      	beq.n	8007bfe <_strtol_l.isra.0+0x1a>
 8007cbc:	1e69      	subs	r1, r5, #1
 8007cbe:	e006      	b.n	8007cce <_strtol_l.isra.0+0xea>
 8007cc0:	b106      	cbz	r6, 8007cc4 <_strtol_l.isra.0+0xe0>
 8007cc2:	4240      	negs	r0, r0
 8007cc4:	f1b8 0f00 	cmp.w	r8, #0
 8007cc8:	d099      	beq.n	8007bfe <_strtol_l.isra.0+0x1a>
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	d1f6      	bne.n	8007cbc <_strtol_l.isra.0+0xd8>
 8007cce:	f8c8 1000 	str.w	r1, [r8]
 8007cd2:	e794      	b.n	8007bfe <_strtol_l.isra.0+0x1a>
 8007cd4:	08009c71 	.word	0x08009c71

08007cd8 <_strtol_r>:
 8007cd8:	f7ff bf84 	b.w	8007be4 <_strtol_l.isra.0>

08007cdc <__ssputs_r>:
 8007cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	688e      	ldr	r6, [r1, #8]
 8007ce2:	461f      	mov	r7, r3
 8007ce4:	42be      	cmp	r6, r7
 8007ce6:	680b      	ldr	r3, [r1, #0]
 8007ce8:	4682      	mov	sl, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	4690      	mov	r8, r2
 8007cee:	d82d      	bhi.n	8007d4c <__ssputs_r+0x70>
 8007cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cf8:	d026      	beq.n	8007d48 <__ssputs_r+0x6c>
 8007cfa:	6965      	ldr	r5, [r4, #20]
 8007cfc:	6909      	ldr	r1, [r1, #16]
 8007cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d02:	eba3 0901 	sub.w	r9, r3, r1
 8007d06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d0a:	1c7b      	adds	r3, r7, #1
 8007d0c:	444b      	add	r3, r9
 8007d0e:	106d      	asrs	r5, r5, #1
 8007d10:	429d      	cmp	r5, r3
 8007d12:	bf38      	it	cc
 8007d14:	461d      	movcc	r5, r3
 8007d16:	0553      	lsls	r3, r2, #21
 8007d18:	d527      	bpl.n	8007d6a <__ssputs_r+0x8e>
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	f7fe fc24 	bl	8006568 <_malloc_r>
 8007d20:	4606      	mov	r6, r0
 8007d22:	b360      	cbz	r0, 8007d7e <__ssputs_r+0xa2>
 8007d24:	6921      	ldr	r1, [r4, #16]
 8007d26:	464a      	mov	r2, r9
 8007d28:	f001 f8e6 	bl	8008ef8 <memcpy>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	6126      	str	r6, [r4, #16]
 8007d3a:	6165      	str	r5, [r4, #20]
 8007d3c:	444e      	add	r6, r9
 8007d3e:	eba5 0509 	sub.w	r5, r5, r9
 8007d42:	6026      	str	r6, [r4, #0]
 8007d44:	60a5      	str	r5, [r4, #8]
 8007d46:	463e      	mov	r6, r7
 8007d48:	42be      	cmp	r6, r7
 8007d4a:	d900      	bls.n	8007d4e <__ssputs_r+0x72>
 8007d4c:	463e      	mov	r6, r7
 8007d4e:	6820      	ldr	r0, [r4, #0]
 8007d50:	4632      	mov	r2, r6
 8007d52:	4641      	mov	r1, r8
 8007d54:	f001 f872 	bl	8008e3c <memmove>
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	1b9b      	subs	r3, r3, r6
 8007d5c:	60a3      	str	r3, [r4, #8]
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	4433      	add	r3, r6
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	2000      	movs	r0, #0
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6a:	462a      	mov	r2, r5
 8007d6c:	f001 fc59 	bl	8009622 <_realloc_r>
 8007d70:	4606      	mov	r6, r0
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d1e0      	bne.n	8007d38 <__ssputs_r+0x5c>
 8007d76:	6921      	ldr	r1, [r4, #16]
 8007d78:	4650      	mov	r0, sl
 8007d7a:	f7fe fb81 	bl	8006480 <_free_r>
 8007d7e:	230c      	movs	r3, #12
 8007d80:	f8ca 3000 	str.w	r3, [sl]
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8a:	81a3      	strh	r3, [r4, #12]
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d90:	e7e9      	b.n	8007d66 <__ssputs_r+0x8a>
	...

08007d94 <_svfiprintf_r>:
 8007d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d98:	4698      	mov	r8, r3
 8007d9a:	898b      	ldrh	r3, [r1, #12]
 8007d9c:	061b      	lsls	r3, r3, #24
 8007d9e:	b09d      	sub	sp, #116	@ 0x74
 8007da0:	4607      	mov	r7, r0
 8007da2:	460d      	mov	r5, r1
 8007da4:	4614      	mov	r4, r2
 8007da6:	d510      	bpl.n	8007dca <_svfiprintf_r+0x36>
 8007da8:	690b      	ldr	r3, [r1, #16]
 8007daa:	b973      	cbnz	r3, 8007dca <_svfiprintf_r+0x36>
 8007dac:	2140      	movs	r1, #64	@ 0x40
 8007dae:	f7fe fbdb 	bl	8006568 <_malloc_r>
 8007db2:	6028      	str	r0, [r5, #0]
 8007db4:	6128      	str	r0, [r5, #16]
 8007db6:	b930      	cbnz	r0, 8007dc6 <_svfiprintf_r+0x32>
 8007db8:	230c      	movs	r3, #12
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dc0:	b01d      	add	sp, #116	@ 0x74
 8007dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc6:	2340      	movs	r3, #64	@ 0x40
 8007dc8:	616b      	str	r3, [r5, #20]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dce:	2320      	movs	r3, #32
 8007dd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd8:	2330      	movs	r3, #48	@ 0x30
 8007dda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f78 <_svfiprintf_r+0x1e4>
 8007dde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007de2:	f04f 0901 	mov.w	r9, #1
 8007de6:	4623      	mov	r3, r4
 8007de8:	469a      	mov	sl, r3
 8007dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dee:	b10a      	cbz	r2, 8007df4 <_svfiprintf_r+0x60>
 8007df0:	2a25      	cmp	r2, #37	@ 0x25
 8007df2:	d1f9      	bne.n	8007de8 <_svfiprintf_r+0x54>
 8007df4:	ebba 0b04 	subs.w	fp, sl, r4
 8007df8:	d00b      	beq.n	8007e12 <_svfiprintf_r+0x7e>
 8007dfa:	465b      	mov	r3, fp
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	4638      	mov	r0, r7
 8007e02:	f7ff ff6b 	bl	8007cdc <__ssputs_r>
 8007e06:	3001      	adds	r0, #1
 8007e08:	f000 80a7 	beq.w	8007f5a <_svfiprintf_r+0x1c6>
 8007e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e0e:	445a      	add	r2, fp
 8007e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e12:	f89a 3000 	ldrb.w	r3, [sl]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 809f 	beq.w	8007f5a <_svfiprintf_r+0x1c6>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e26:	f10a 0a01 	add.w	sl, sl, #1
 8007e2a:	9304      	str	r3, [sp, #16]
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e32:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e34:	4654      	mov	r4, sl
 8007e36:	2205      	movs	r2, #5
 8007e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3c:	484e      	ldr	r0, [pc, #312]	@ (8007f78 <_svfiprintf_r+0x1e4>)
 8007e3e:	f7f8 f9c7 	bl	80001d0 <memchr>
 8007e42:	9a04      	ldr	r2, [sp, #16]
 8007e44:	b9d8      	cbnz	r0, 8007e7e <_svfiprintf_r+0xea>
 8007e46:	06d0      	lsls	r0, r2, #27
 8007e48:	bf44      	itt	mi
 8007e4a:	2320      	movmi	r3, #32
 8007e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e50:	0711      	lsls	r1, r2, #28
 8007e52:	bf44      	itt	mi
 8007e54:	232b      	movmi	r3, #43	@ 0x2b
 8007e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e60:	d015      	beq.n	8007e8e <_svfiprintf_r+0xfa>
 8007e62:	9a07      	ldr	r2, [sp, #28]
 8007e64:	4654      	mov	r4, sl
 8007e66:	2000      	movs	r0, #0
 8007e68:	f04f 0c0a 	mov.w	ip, #10
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e72:	3b30      	subs	r3, #48	@ 0x30
 8007e74:	2b09      	cmp	r3, #9
 8007e76:	d94b      	bls.n	8007f10 <_svfiprintf_r+0x17c>
 8007e78:	b1b0      	cbz	r0, 8007ea8 <_svfiprintf_r+0x114>
 8007e7a:	9207      	str	r2, [sp, #28]
 8007e7c:	e014      	b.n	8007ea8 <_svfiprintf_r+0x114>
 8007e7e:	eba0 0308 	sub.w	r3, r0, r8
 8007e82:	fa09 f303 	lsl.w	r3, r9, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	46a2      	mov	sl, r4
 8007e8c:	e7d2      	b.n	8007e34 <_svfiprintf_r+0xa0>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	9103      	str	r1, [sp, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfbb      	ittet	lt
 8007e9a:	425b      	neglt	r3, r3
 8007e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ea0:	9307      	strge	r3, [sp, #28]
 8007ea2:	9307      	strlt	r3, [sp, #28]
 8007ea4:	bfb8      	it	lt
 8007ea6:	9204      	strlt	r2, [sp, #16]
 8007ea8:	7823      	ldrb	r3, [r4, #0]
 8007eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eac:	d10a      	bne.n	8007ec4 <_svfiprintf_r+0x130>
 8007eae:	7863      	ldrb	r3, [r4, #1]
 8007eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eb2:	d132      	bne.n	8007f1a <_svfiprintf_r+0x186>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	1d1a      	adds	r2, r3, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	9203      	str	r2, [sp, #12]
 8007ebc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ec0:	3402      	adds	r4, #2
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f88 <_svfiprintf_r+0x1f4>
 8007ec8:	7821      	ldrb	r1, [r4, #0]
 8007eca:	2203      	movs	r2, #3
 8007ecc:	4650      	mov	r0, sl
 8007ece:	f7f8 f97f 	bl	80001d0 <memchr>
 8007ed2:	b138      	cbz	r0, 8007ee4 <_svfiprintf_r+0x150>
 8007ed4:	9b04      	ldr	r3, [sp, #16]
 8007ed6:	eba0 000a 	sub.w	r0, r0, sl
 8007eda:	2240      	movs	r2, #64	@ 0x40
 8007edc:	4082      	lsls	r2, r0
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	3401      	adds	r4, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee8:	4824      	ldr	r0, [pc, #144]	@ (8007f7c <_svfiprintf_r+0x1e8>)
 8007eea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007eee:	2206      	movs	r2, #6
 8007ef0:	f7f8 f96e 	bl	80001d0 <memchr>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d036      	beq.n	8007f66 <_svfiprintf_r+0x1d2>
 8007ef8:	4b21      	ldr	r3, [pc, #132]	@ (8007f80 <_svfiprintf_r+0x1ec>)
 8007efa:	bb1b      	cbnz	r3, 8007f44 <_svfiprintf_r+0x1b0>
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	3307      	adds	r3, #7
 8007f00:	f023 0307 	bic.w	r3, r3, #7
 8007f04:	3308      	adds	r3, #8
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f0a:	4433      	add	r3, r6
 8007f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f0e:	e76a      	b.n	8007de6 <_svfiprintf_r+0x52>
 8007f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f14:	460c      	mov	r4, r1
 8007f16:	2001      	movs	r0, #1
 8007f18:	e7a8      	b.n	8007e6c <_svfiprintf_r+0xd8>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	3401      	adds	r4, #1
 8007f1e:	9305      	str	r3, [sp, #20]
 8007f20:	4619      	mov	r1, r3
 8007f22:	f04f 0c0a 	mov.w	ip, #10
 8007f26:	4620      	mov	r0, r4
 8007f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f2c:	3a30      	subs	r2, #48	@ 0x30
 8007f2e:	2a09      	cmp	r2, #9
 8007f30:	d903      	bls.n	8007f3a <_svfiprintf_r+0x1a6>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0c6      	beq.n	8007ec4 <_svfiprintf_r+0x130>
 8007f36:	9105      	str	r1, [sp, #20]
 8007f38:	e7c4      	b.n	8007ec4 <_svfiprintf_r+0x130>
 8007f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f3e:	4604      	mov	r4, r0
 8007f40:	2301      	movs	r3, #1
 8007f42:	e7f0      	b.n	8007f26 <_svfiprintf_r+0x192>
 8007f44:	ab03      	add	r3, sp, #12
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	462a      	mov	r2, r5
 8007f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f84 <_svfiprintf_r+0x1f0>)
 8007f4c:	a904      	add	r1, sp, #16
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f7fc fbf4 	bl	800473c <_printf_float>
 8007f54:	1c42      	adds	r2, r0, #1
 8007f56:	4606      	mov	r6, r0
 8007f58:	d1d6      	bne.n	8007f08 <_svfiprintf_r+0x174>
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	065b      	lsls	r3, r3, #25
 8007f5e:	f53f af2d 	bmi.w	8007dbc <_svfiprintf_r+0x28>
 8007f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f64:	e72c      	b.n	8007dc0 <_svfiprintf_r+0x2c>
 8007f66:	ab03      	add	r3, sp, #12
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4b05      	ldr	r3, [pc, #20]	@ (8007f84 <_svfiprintf_r+0x1f0>)
 8007f6e:	a904      	add	r1, sp, #16
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7fc fe7b 	bl	8004c6c <_printf_i>
 8007f76:	e7ed      	b.n	8007f54 <_svfiprintf_r+0x1c0>
 8007f78:	08009a4f 	.word	0x08009a4f
 8007f7c:	08009a59 	.word	0x08009a59
 8007f80:	0800473d 	.word	0x0800473d
 8007f84:	08007cdd 	.word	0x08007cdd
 8007f88:	08009a55 	.word	0x08009a55

08007f8c <__sfputc_r>:
 8007f8c:	6893      	ldr	r3, [r2, #8]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	b410      	push	{r4}
 8007f94:	6093      	str	r3, [r2, #8]
 8007f96:	da08      	bge.n	8007faa <__sfputc_r+0x1e>
 8007f98:	6994      	ldr	r4, [r2, #24]
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	db01      	blt.n	8007fa2 <__sfputc_r+0x16>
 8007f9e:	290a      	cmp	r1, #10
 8007fa0:	d103      	bne.n	8007faa <__sfputc_r+0x1e>
 8007fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa6:	f000 beb5 	b.w	8008d14 <__swbuf_r>
 8007faa:	6813      	ldr	r3, [r2, #0]
 8007fac:	1c58      	adds	r0, r3, #1
 8007fae:	6010      	str	r0, [r2, #0]
 8007fb0:	7019      	strb	r1, [r3, #0]
 8007fb2:	4608      	mov	r0, r1
 8007fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <__sfputs_r>:
 8007fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460f      	mov	r7, r1
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	18d5      	adds	r5, r2, r3
 8007fc4:	42ac      	cmp	r4, r5
 8007fc6:	d101      	bne.n	8007fcc <__sfputs_r+0x12>
 8007fc8:	2000      	movs	r0, #0
 8007fca:	e007      	b.n	8007fdc <__sfputs_r+0x22>
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	463a      	mov	r2, r7
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff ffda 	bl	8007f8c <__sfputc_r>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d1f3      	bne.n	8007fc4 <__sfputs_r+0xa>
 8007fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fe0 <_vfiprintf_r>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	b09d      	sub	sp, #116	@ 0x74
 8007fe8:	4614      	mov	r4, r2
 8007fea:	4698      	mov	r8, r3
 8007fec:	4606      	mov	r6, r0
 8007fee:	b118      	cbz	r0, 8007ff8 <_vfiprintf_r+0x18>
 8007ff0:	6a03      	ldr	r3, [r0, #32]
 8007ff2:	b90b      	cbnz	r3, 8007ff8 <_vfiprintf_r+0x18>
 8007ff4:	f7fd f9f2 	bl	80053dc <__sinit>
 8007ff8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ffa:	07d9      	lsls	r1, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_vfiprintf_r+0x2a>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	059a      	lsls	r2, r3, #22
 8008002:	d402      	bmi.n	800800a <_vfiprintf_r+0x2a>
 8008004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008006:	f7fd fbda 	bl	80057be <__retarget_lock_acquire_recursive>
 800800a:	89ab      	ldrh	r3, [r5, #12]
 800800c:	071b      	lsls	r3, r3, #28
 800800e:	d501      	bpl.n	8008014 <_vfiprintf_r+0x34>
 8008010:	692b      	ldr	r3, [r5, #16]
 8008012:	b99b      	cbnz	r3, 800803c <_vfiprintf_r+0x5c>
 8008014:	4629      	mov	r1, r5
 8008016:	4630      	mov	r0, r6
 8008018:	f000 feba 	bl	8008d90 <__swsetup_r>
 800801c:	b170      	cbz	r0, 800803c <_vfiprintf_r+0x5c>
 800801e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008020:	07dc      	lsls	r4, r3, #31
 8008022:	d504      	bpl.n	800802e <_vfiprintf_r+0x4e>
 8008024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008028:	b01d      	add	sp, #116	@ 0x74
 800802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	0598      	lsls	r0, r3, #22
 8008032:	d4f7      	bmi.n	8008024 <_vfiprintf_r+0x44>
 8008034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008036:	f7fd fbc3 	bl	80057c0 <__retarget_lock_release_recursive>
 800803a:	e7f3      	b.n	8008024 <_vfiprintf_r+0x44>
 800803c:	2300      	movs	r3, #0
 800803e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008040:	2320      	movs	r3, #32
 8008042:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008046:	f8cd 800c 	str.w	r8, [sp, #12]
 800804a:	2330      	movs	r3, #48	@ 0x30
 800804c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081fc <_vfiprintf_r+0x21c>
 8008050:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008054:	f04f 0901 	mov.w	r9, #1
 8008058:	4623      	mov	r3, r4
 800805a:	469a      	mov	sl, r3
 800805c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008060:	b10a      	cbz	r2, 8008066 <_vfiprintf_r+0x86>
 8008062:	2a25      	cmp	r2, #37	@ 0x25
 8008064:	d1f9      	bne.n	800805a <_vfiprintf_r+0x7a>
 8008066:	ebba 0b04 	subs.w	fp, sl, r4
 800806a:	d00b      	beq.n	8008084 <_vfiprintf_r+0xa4>
 800806c:	465b      	mov	r3, fp
 800806e:	4622      	mov	r2, r4
 8008070:	4629      	mov	r1, r5
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff ffa1 	bl	8007fba <__sfputs_r>
 8008078:	3001      	adds	r0, #1
 800807a:	f000 80a7 	beq.w	80081cc <_vfiprintf_r+0x1ec>
 800807e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008080:	445a      	add	r2, fp
 8008082:	9209      	str	r2, [sp, #36]	@ 0x24
 8008084:	f89a 3000 	ldrb.w	r3, [sl]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 809f 	beq.w	80081cc <_vfiprintf_r+0x1ec>
 800808e:	2300      	movs	r3, #0
 8008090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008098:	f10a 0a01 	add.w	sl, sl, #1
 800809c:	9304      	str	r3, [sp, #16]
 800809e:	9307      	str	r3, [sp, #28]
 80080a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80080a6:	4654      	mov	r4, sl
 80080a8:	2205      	movs	r2, #5
 80080aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ae:	4853      	ldr	r0, [pc, #332]	@ (80081fc <_vfiprintf_r+0x21c>)
 80080b0:	f7f8 f88e 	bl	80001d0 <memchr>
 80080b4:	9a04      	ldr	r2, [sp, #16]
 80080b6:	b9d8      	cbnz	r0, 80080f0 <_vfiprintf_r+0x110>
 80080b8:	06d1      	lsls	r1, r2, #27
 80080ba:	bf44      	itt	mi
 80080bc:	2320      	movmi	r3, #32
 80080be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080c2:	0713      	lsls	r3, r2, #28
 80080c4:	bf44      	itt	mi
 80080c6:	232b      	movmi	r3, #43	@ 0x2b
 80080c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080cc:	f89a 3000 	ldrb.w	r3, [sl]
 80080d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080d2:	d015      	beq.n	8008100 <_vfiprintf_r+0x120>
 80080d4:	9a07      	ldr	r2, [sp, #28]
 80080d6:	4654      	mov	r4, sl
 80080d8:	2000      	movs	r0, #0
 80080da:	f04f 0c0a 	mov.w	ip, #10
 80080de:	4621      	mov	r1, r4
 80080e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e4:	3b30      	subs	r3, #48	@ 0x30
 80080e6:	2b09      	cmp	r3, #9
 80080e8:	d94b      	bls.n	8008182 <_vfiprintf_r+0x1a2>
 80080ea:	b1b0      	cbz	r0, 800811a <_vfiprintf_r+0x13a>
 80080ec:	9207      	str	r2, [sp, #28]
 80080ee:	e014      	b.n	800811a <_vfiprintf_r+0x13a>
 80080f0:	eba0 0308 	sub.w	r3, r0, r8
 80080f4:	fa09 f303 	lsl.w	r3, r9, r3
 80080f8:	4313      	orrs	r3, r2
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	46a2      	mov	sl, r4
 80080fe:	e7d2      	b.n	80080a6 <_vfiprintf_r+0xc6>
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	1d19      	adds	r1, r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	9103      	str	r1, [sp, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	bfbb      	ittet	lt
 800810c:	425b      	neglt	r3, r3
 800810e:	f042 0202 	orrlt.w	r2, r2, #2
 8008112:	9307      	strge	r3, [sp, #28]
 8008114:	9307      	strlt	r3, [sp, #28]
 8008116:	bfb8      	it	lt
 8008118:	9204      	strlt	r2, [sp, #16]
 800811a:	7823      	ldrb	r3, [r4, #0]
 800811c:	2b2e      	cmp	r3, #46	@ 0x2e
 800811e:	d10a      	bne.n	8008136 <_vfiprintf_r+0x156>
 8008120:	7863      	ldrb	r3, [r4, #1]
 8008122:	2b2a      	cmp	r3, #42	@ 0x2a
 8008124:	d132      	bne.n	800818c <_vfiprintf_r+0x1ac>
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	1d1a      	adds	r2, r3, #4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	9203      	str	r2, [sp, #12]
 800812e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008132:	3402      	adds	r4, #2
 8008134:	9305      	str	r3, [sp, #20]
 8008136:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800820c <_vfiprintf_r+0x22c>
 800813a:	7821      	ldrb	r1, [r4, #0]
 800813c:	2203      	movs	r2, #3
 800813e:	4650      	mov	r0, sl
 8008140:	f7f8 f846 	bl	80001d0 <memchr>
 8008144:	b138      	cbz	r0, 8008156 <_vfiprintf_r+0x176>
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	eba0 000a 	sub.w	r0, r0, sl
 800814c:	2240      	movs	r2, #64	@ 0x40
 800814e:	4082      	lsls	r2, r0
 8008150:	4313      	orrs	r3, r2
 8008152:	3401      	adds	r4, #1
 8008154:	9304      	str	r3, [sp, #16]
 8008156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815a:	4829      	ldr	r0, [pc, #164]	@ (8008200 <_vfiprintf_r+0x220>)
 800815c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008160:	2206      	movs	r2, #6
 8008162:	f7f8 f835 	bl	80001d0 <memchr>
 8008166:	2800      	cmp	r0, #0
 8008168:	d03f      	beq.n	80081ea <_vfiprintf_r+0x20a>
 800816a:	4b26      	ldr	r3, [pc, #152]	@ (8008204 <_vfiprintf_r+0x224>)
 800816c:	bb1b      	cbnz	r3, 80081b6 <_vfiprintf_r+0x1d6>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	3307      	adds	r3, #7
 8008172:	f023 0307 	bic.w	r3, r3, #7
 8008176:	3308      	adds	r3, #8
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817c:	443b      	add	r3, r7
 800817e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008180:	e76a      	b.n	8008058 <_vfiprintf_r+0x78>
 8008182:	fb0c 3202 	mla	r2, ip, r2, r3
 8008186:	460c      	mov	r4, r1
 8008188:	2001      	movs	r0, #1
 800818a:	e7a8      	b.n	80080de <_vfiprintf_r+0xfe>
 800818c:	2300      	movs	r3, #0
 800818e:	3401      	adds	r4, #1
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	4619      	mov	r1, r3
 8008194:	f04f 0c0a 	mov.w	ip, #10
 8008198:	4620      	mov	r0, r4
 800819a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800819e:	3a30      	subs	r2, #48	@ 0x30
 80081a0:	2a09      	cmp	r2, #9
 80081a2:	d903      	bls.n	80081ac <_vfiprintf_r+0x1cc>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0c6      	beq.n	8008136 <_vfiprintf_r+0x156>
 80081a8:	9105      	str	r1, [sp, #20]
 80081aa:	e7c4      	b.n	8008136 <_vfiprintf_r+0x156>
 80081ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b0:	4604      	mov	r4, r0
 80081b2:	2301      	movs	r3, #1
 80081b4:	e7f0      	b.n	8008198 <_vfiprintf_r+0x1b8>
 80081b6:	ab03      	add	r3, sp, #12
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	462a      	mov	r2, r5
 80081bc:	4b12      	ldr	r3, [pc, #72]	@ (8008208 <_vfiprintf_r+0x228>)
 80081be:	a904      	add	r1, sp, #16
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7fc fabb 	bl	800473c <_printf_float>
 80081c6:	4607      	mov	r7, r0
 80081c8:	1c78      	adds	r0, r7, #1
 80081ca:	d1d6      	bne.n	800817a <_vfiprintf_r+0x19a>
 80081cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ce:	07d9      	lsls	r1, r3, #31
 80081d0:	d405      	bmi.n	80081de <_vfiprintf_r+0x1fe>
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	059a      	lsls	r2, r3, #22
 80081d6:	d402      	bmi.n	80081de <_vfiprintf_r+0x1fe>
 80081d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081da:	f7fd faf1 	bl	80057c0 <__retarget_lock_release_recursive>
 80081de:	89ab      	ldrh	r3, [r5, #12]
 80081e0:	065b      	lsls	r3, r3, #25
 80081e2:	f53f af1f 	bmi.w	8008024 <_vfiprintf_r+0x44>
 80081e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081e8:	e71e      	b.n	8008028 <_vfiprintf_r+0x48>
 80081ea:	ab03      	add	r3, sp, #12
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	462a      	mov	r2, r5
 80081f0:	4b05      	ldr	r3, [pc, #20]	@ (8008208 <_vfiprintf_r+0x228>)
 80081f2:	a904      	add	r1, sp, #16
 80081f4:	4630      	mov	r0, r6
 80081f6:	f7fc fd39 	bl	8004c6c <_printf_i>
 80081fa:	e7e4      	b.n	80081c6 <_vfiprintf_r+0x1e6>
 80081fc:	08009a4f 	.word	0x08009a4f
 8008200:	08009a59 	.word	0x08009a59
 8008204:	0800473d 	.word	0x0800473d
 8008208:	08007fbb 	.word	0x08007fbb
 800820c:	08009a55 	.word	0x08009a55

08008210 <__svfiscanf_r>:
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	461d      	mov	r5, r3
 8008216:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8008218:	07df      	lsls	r7, r3, #31
 800821a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800821e:	4606      	mov	r6, r0
 8008220:	460c      	mov	r4, r1
 8008222:	4692      	mov	sl, r2
 8008224:	d405      	bmi.n	8008232 <__svfiscanf_r+0x22>
 8008226:	898b      	ldrh	r3, [r1, #12]
 8008228:	0598      	lsls	r0, r3, #22
 800822a:	d402      	bmi.n	8008232 <__svfiscanf_r+0x22>
 800822c:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800822e:	f7fd fac6 	bl	80057be <__retarget_lock_acquire_recursive>
 8008232:	2300      	movs	r3, #0
 8008234:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8008238:	4ba8      	ldr	r3, [pc, #672]	@ (80084dc <__svfiscanf_r+0x2cc>)
 800823a:	93a0      	str	r3, [sp, #640]	@ 0x280
 800823c:	f10d 0804 	add.w	r8, sp, #4
 8008240:	4ba7      	ldr	r3, [pc, #668]	@ (80084e0 <__svfiscanf_r+0x2d0>)
 8008242:	4fa8      	ldr	r7, [pc, #672]	@ (80084e4 <__svfiscanf_r+0x2d4>)
 8008244:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008248:	93a1      	str	r3, [sp, #644]	@ 0x284
 800824a:	9500      	str	r5, [sp, #0]
 800824c:	f89a 9000 	ldrb.w	r9, [sl]
 8008250:	f1b9 0f00 	cmp.w	r9, #0
 8008254:	f000 816d 	beq.w	8008532 <__svfiscanf_r+0x322>
 8008258:	f817 3009 	ldrb.w	r3, [r7, r9]
 800825c:	f013 0308 	ands.w	r3, r3, #8
 8008260:	f10a 0501 	add.w	r5, sl, #1
 8008264:	d019      	beq.n	800829a <__svfiscanf_r+0x8a>
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	dd0f      	ble.n	800828c <__svfiscanf_r+0x7c>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	781a      	ldrb	r2, [r3, #0]
 8008270:	5cba      	ldrb	r2, [r7, r2]
 8008272:	0711      	lsls	r1, r2, #28
 8008274:	d401      	bmi.n	800827a <__svfiscanf_r+0x6a>
 8008276:	46aa      	mov	sl, r5
 8008278:	e7e8      	b.n	800824c <__svfiscanf_r+0x3c>
 800827a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800827c:	3201      	adds	r2, #1
 800827e:	9245      	str	r2, [sp, #276]	@ 0x114
 8008280:	6862      	ldr	r2, [r4, #4]
 8008282:	3301      	adds	r3, #1
 8008284:	3a01      	subs	r2, #1
 8008286:	6062      	str	r2, [r4, #4]
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	e7ec      	b.n	8008266 <__svfiscanf_r+0x56>
 800828c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800828e:	4621      	mov	r1, r4
 8008290:	4630      	mov	r0, r6
 8008292:	4798      	blx	r3
 8008294:	2800      	cmp	r0, #0
 8008296:	d0e9      	beq.n	800826c <__svfiscanf_r+0x5c>
 8008298:	e7ed      	b.n	8008276 <__svfiscanf_r+0x66>
 800829a:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800829e:	f040 8088 	bne.w	80083b2 <__svfiscanf_r+0x1a2>
 80082a2:	9341      	str	r3, [sp, #260]	@ 0x104
 80082a4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80082a6:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80082aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ac:	bf02      	ittt	eq
 80082ae:	2310      	moveq	r3, #16
 80082b0:	9341      	streq	r3, [sp, #260]	@ 0x104
 80082b2:	f10a 0502 	addeq.w	r5, sl, #2
 80082b6:	220a      	movs	r2, #10
 80082b8:	46aa      	mov	sl, r5
 80082ba:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80082be:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80082c2:	2b09      	cmp	r3, #9
 80082c4:	d91f      	bls.n	8008306 <__svfiscanf_r+0xf6>
 80082c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80084e8 <__svfiscanf_r+0x2d8>
 80082ca:	2203      	movs	r2, #3
 80082cc:	4658      	mov	r0, fp
 80082ce:	f7f7 ff7f 	bl	80001d0 <memchr>
 80082d2:	b138      	cbz	r0, 80082e4 <__svfiscanf_r+0xd4>
 80082d4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80082d6:	eba0 000b 	sub.w	r0, r0, fp
 80082da:	2301      	movs	r3, #1
 80082dc:	4083      	lsls	r3, r0
 80082de:	4313      	orrs	r3, r2
 80082e0:	9341      	str	r3, [sp, #260]	@ 0x104
 80082e2:	4655      	mov	r5, sl
 80082e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082e8:	2b78      	cmp	r3, #120	@ 0x78
 80082ea:	d807      	bhi.n	80082fc <__svfiscanf_r+0xec>
 80082ec:	2b57      	cmp	r3, #87	@ 0x57
 80082ee:	d811      	bhi.n	8008314 <__svfiscanf_r+0x104>
 80082f0:	2b25      	cmp	r3, #37	@ 0x25
 80082f2:	d05e      	beq.n	80083b2 <__svfiscanf_r+0x1a2>
 80082f4:	d858      	bhi.n	80083a8 <__svfiscanf_r+0x198>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 80d2 	beq.w	80084a0 <__svfiscanf_r+0x290>
 80082fc:	2303      	movs	r3, #3
 80082fe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008300:	230a      	movs	r3, #10
 8008302:	9342      	str	r3, [sp, #264]	@ 0x108
 8008304:	e08f      	b.n	8008426 <__svfiscanf_r+0x216>
 8008306:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008308:	fb02 1103 	mla	r1, r2, r3, r1
 800830c:	3930      	subs	r1, #48	@ 0x30
 800830e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008310:	4655      	mov	r5, sl
 8008312:	e7d1      	b.n	80082b8 <__svfiscanf_r+0xa8>
 8008314:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008318:	2a20      	cmp	r2, #32
 800831a:	d8ef      	bhi.n	80082fc <__svfiscanf_r+0xec>
 800831c:	a101      	add	r1, pc, #4	@ (adr r1, 8008324 <__svfiscanf_r+0x114>)
 800831e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008405 	.word	0x08008405
 8008328:	080082fd 	.word	0x080082fd
 800832c:	080082fd 	.word	0x080082fd
 8008330:	0800845f 	.word	0x0800845f
 8008334:	080082fd 	.word	0x080082fd
 8008338:	080082fd 	.word	0x080082fd
 800833c:	080082fd 	.word	0x080082fd
 8008340:	080082fd 	.word	0x080082fd
 8008344:	080082fd 	.word	0x080082fd
 8008348:	080082fd 	.word	0x080082fd
 800834c:	080082fd 	.word	0x080082fd
 8008350:	08008475 	.word	0x08008475
 8008354:	0800845b 	.word	0x0800845b
 8008358:	080083af 	.word	0x080083af
 800835c:	080083af 	.word	0x080083af
 8008360:	080083af 	.word	0x080083af
 8008364:	080082fd 	.word	0x080082fd
 8008368:	08008417 	.word	0x08008417
 800836c:	080082fd 	.word	0x080082fd
 8008370:	080082fd 	.word	0x080082fd
 8008374:	080082fd 	.word	0x080082fd
 8008378:	080082fd 	.word	0x080082fd
 800837c:	08008485 	.word	0x08008485
 8008380:	0800841f 	.word	0x0800841f
 8008384:	080083fd 	.word	0x080083fd
 8008388:	080082fd 	.word	0x080082fd
 800838c:	080082fd 	.word	0x080082fd
 8008390:	08008481 	.word	0x08008481
 8008394:	080082fd 	.word	0x080082fd
 8008398:	0800845b 	.word	0x0800845b
 800839c:	080082fd 	.word	0x080082fd
 80083a0:	080082fd 	.word	0x080082fd
 80083a4:	08008405 	.word	0x08008405
 80083a8:	3b45      	subs	r3, #69	@ 0x45
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d8a6      	bhi.n	80082fc <__svfiscanf_r+0xec>
 80083ae:	2305      	movs	r3, #5
 80083b0:	e038      	b.n	8008424 <__svfiscanf_r+0x214>
 80083b2:	6863      	ldr	r3, [r4, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd0d      	ble.n	80083d4 <__svfiscanf_r+0x1c4>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	454a      	cmp	r2, r9
 80083be:	f040 80b8 	bne.w	8008532 <__svfiscanf_r+0x322>
 80083c2:	3301      	adds	r3, #1
 80083c4:	6862      	ldr	r2, [r4, #4]
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80083ca:	3a01      	subs	r2, #1
 80083cc:	3301      	adds	r3, #1
 80083ce:	6062      	str	r2, [r4, #4]
 80083d0:	9345      	str	r3, [sp, #276]	@ 0x114
 80083d2:	e750      	b.n	8008276 <__svfiscanf_r+0x66>
 80083d4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80083d6:	4621      	mov	r1, r4
 80083d8:	4630      	mov	r0, r6
 80083da:	4798      	blx	r3
 80083dc:	2800      	cmp	r0, #0
 80083de:	d0eb      	beq.n	80083b8 <__svfiscanf_r+0x1a8>
 80083e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083e2:	07da      	lsls	r2, r3, #31
 80083e4:	f140 809d 	bpl.w	8008522 <__svfiscanf_r+0x312>
 80083e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d061      	beq.n	80084b2 <__svfiscanf_r+0x2a2>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	0659      	lsls	r1, r3, #25
 80083f2:	d45e      	bmi.n	80084b2 <__svfiscanf_r+0x2a2>
 80083f4:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80083fe:	f042 0220 	orr.w	r2, r2, #32
 8008402:	9241      	str	r2, [sp, #260]	@ 0x104
 8008404:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800840a:	9241      	str	r2, [sp, #260]	@ 0x104
 800840c:	2210      	movs	r2, #16
 800840e:	2b6e      	cmp	r3, #110	@ 0x6e
 8008410:	9242      	str	r2, [sp, #264]	@ 0x108
 8008412:	d902      	bls.n	800841a <__svfiscanf_r+0x20a>
 8008414:	e005      	b.n	8008422 <__svfiscanf_r+0x212>
 8008416:	2300      	movs	r3, #0
 8008418:	9342      	str	r3, [sp, #264]	@ 0x108
 800841a:	2303      	movs	r3, #3
 800841c:	e002      	b.n	8008424 <__svfiscanf_r+0x214>
 800841e:	2308      	movs	r3, #8
 8008420:	9342      	str	r3, [sp, #264]	@ 0x108
 8008422:	2304      	movs	r3, #4
 8008424:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008426:	6863      	ldr	r3, [r4, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	dd45      	ble.n	80084b8 <__svfiscanf_r+0x2a8>
 800842c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800842e:	0659      	lsls	r1, r3, #25
 8008430:	d404      	bmi.n	800843c <__svfiscanf_r+0x22c>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	5cba      	ldrb	r2, [r7, r2]
 8008438:	0712      	lsls	r2, r2, #28
 800843a:	d444      	bmi.n	80084c6 <__svfiscanf_r+0x2b6>
 800843c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800843e:	2b02      	cmp	r3, #2
 8008440:	dc5b      	bgt.n	80084fa <__svfiscanf_r+0x2ea>
 8008442:	466b      	mov	r3, sp
 8008444:	4622      	mov	r2, r4
 8008446:	a941      	add	r1, sp, #260	@ 0x104
 8008448:	4630      	mov	r0, r6
 800844a:	f000 f893 	bl	8008574 <_scanf_chars>
 800844e:	2801      	cmp	r0, #1
 8008450:	d06f      	beq.n	8008532 <__svfiscanf_r+0x322>
 8008452:	2802      	cmp	r0, #2
 8008454:	f47f af0f 	bne.w	8008276 <__svfiscanf_r+0x66>
 8008458:	e7c2      	b.n	80083e0 <__svfiscanf_r+0x1d0>
 800845a:	220a      	movs	r2, #10
 800845c:	e7d7      	b.n	800840e <__svfiscanf_r+0x1fe>
 800845e:	4629      	mov	r1, r5
 8008460:	4640      	mov	r0, r8
 8008462:	f000 fb65 	bl	8008b30 <__sccl>
 8008466:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800846c:	9341      	str	r3, [sp, #260]	@ 0x104
 800846e:	4605      	mov	r5, r0
 8008470:	2301      	movs	r3, #1
 8008472:	e7d7      	b.n	8008424 <__svfiscanf_r+0x214>
 8008474:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800847a:	9341      	str	r3, [sp, #260]	@ 0x104
 800847c:	2300      	movs	r3, #0
 800847e:	e7d1      	b.n	8008424 <__svfiscanf_r+0x214>
 8008480:	2302      	movs	r3, #2
 8008482:	e7cf      	b.n	8008424 <__svfiscanf_r+0x214>
 8008484:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008486:	06c3      	lsls	r3, r0, #27
 8008488:	f53f aef5 	bmi.w	8008276 <__svfiscanf_r+0x66>
 800848c:	9b00      	ldr	r3, [sp, #0]
 800848e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008490:	1d19      	adds	r1, r3, #4
 8008492:	9100      	str	r1, [sp, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	07c0      	lsls	r0, r0, #31
 8008498:	bf4c      	ite	mi
 800849a:	801a      	strhmi	r2, [r3, #0]
 800849c:	601a      	strpl	r2, [r3, #0]
 800849e:	e6ea      	b.n	8008276 <__svfiscanf_r+0x66>
 80084a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084a2:	07de      	lsls	r6, r3, #31
 80084a4:	d405      	bmi.n	80084b2 <__svfiscanf_r+0x2a2>
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	059d      	lsls	r5, r3, #22
 80084aa:	d402      	bmi.n	80084b2 <__svfiscanf_r+0x2a2>
 80084ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ae:	f7fd f987 	bl	80057c0 <__retarget_lock_release_recursive>
 80084b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084b6:	e79d      	b.n	80083f4 <__svfiscanf_r+0x1e4>
 80084b8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80084ba:	4621      	mov	r1, r4
 80084bc:	4630      	mov	r0, r6
 80084be:	4798      	blx	r3
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d0b3      	beq.n	800842c <__svfiscanf_r+0x21c>
 80084c4:	e78c      	b.n	80083e0 <__svfiscanf_r+0x1d0>
 80084c6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80084c8:	3201      	adds	r2, #1
 80084ca:	9245      	str	r2, [sp, #276]	@ 0x114
 80084cc:	6862      	ldr	r2, [r4, #4]
 80084ce:	3a01      	subs	r2, #1
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	6062      	str	r2, [r4, #4]
 80084d4:	dd0a      	ble.n	80084ec <__svfiscanf_r+0x2dc>
 80084d6:	3301      	adds	r3, #1
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	e7aa      	b.n	8008432 <__svfiscanf_r+0x222>
 80084dc:	08008c17 	.word	0x08008c17
 80084e0:	08008a49 	.word	0x08008a49
 80084e4:	08009c71 	.word	0x08009c71
 80084e8:	08009a55 	.word	0x08009a55
 80084ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80084ee:	4621      	mov	r1, r4
 80084f0:	4630      	mov	r0, r6
 80084f2:	4798      	blx	r3
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d09c      	beq.n	8008432 <__svfiscanf_r+0x222>
 80084f8:	e772      	b.n	80083e0 <__svfiscanf_r+0x1d0>
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	dc06      	bgt.n	800850c <__svfiscanf_r+0x2fc>
 80084fe:	466b      	mov	r3, sp
 8008500:	4622      	mov	r2, r4
 8008502:	a941      	add	r1, sp, #260	@ 0x104
 8008504:	4630      	mov	r0, r6
 8008506:	f000 f88f 	bl	8008628 <_scanf_i>
 800850a:	e7a0      	b.n	800844e <__svfiscanf_r+0x23e>
 800850c:	4b0e      	ldr	r3, [pc, #56]	@ (8008548 <__svfiscanf_r+0x338>)
 800850e:	2b00      	cmp	r3, #0
 8008510:	f43f aeb1 	beq.w	8008276 <__svfiscanf_r+0x66>
 8008514:	466b      	mov	r3, sp
 8008516:	4622      	mov	r2, r4
 8008518:	a941      	add	r1, sp, #260	@ 0x104
 800851a:	4630      	mov	r0, r6
 800851c:	f7fc fcc4 	bl	8004ea8 <_scanf_float>
 8008520:	e795      	b.n	800844e <__svfiscanf_r+0x23e>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	0598      	lsls	r0, r3, #22
 8008526:	f53f af5f 	bmi.w	80083e8 <__svfiscanf_r+0x1d8>
 800852a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800852c:	f7fd f948 	bl	80057c0 <__retarget_lock_release_recursive>
 8008530:	e75a      	b.n	80083e8 <__svfiscanf_r+0x1d8>
 8008532:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008534:	07da      	lsls	r2, r3, #31
 8008536:	d405      	bmi.n	8008544 <__svfiscanf_r+0x334>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	059b      	lsls	r3, r3, #22
 800853c:	d402      	bmi.n	8008544 <__svfiscanf_r+0x334>
 800853e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008540:	f7fd f93e 	bl	80057c0 <__retarget_lock_release_recursive>
 8008544:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008546:	e755      	b.n	80083f4 <__svfiscanf_r+0x1e4>
 8008548:	08004ea9 	.word	0x08004ea9

0800854c <_vfiscanf_r>:
 800854c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008550:	460d      	mov	r5, r1
 8008552:	4616      	mov	r6, r2
 8008554:	461f      	mov	r7, r3
 8008556:	4604      	mov	r4, r0
 8008558:	b118      	cbz	r0, 8008562 <_vfiscanf_r+0x16>
 800855a:	6a03      	ldr	r3, [r0, #32]
 800855c:	b90b      	cbnz	r3, 8008562 <_vfiscanf_r+0x16>
 800855e:	f7fc ff3d 	bl	80053dc <__sinit>
 8008562:	463b      	mov	r3, r7
 8008564:	4632      	mov	r2, r6
 8008566:	4629      	mov	r1, r5
 8008568:	4620      	mov	r0, r4
 800856a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800856e:	f7ff be4f 	b.w	8008210 <__svfiscanf_r>
	...

08008574 <_scanf_chars>:
 8008574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008578:	4615      	mov	r5, r2
 800857a:	688a      	ldr	r2, [r1, #8]
 800857c:	4680      	mov	r8, r0
 800857e:	460c      	mov	r4, r1
 8008580:	b932      	cbnz	r2, 8008590 <_scanf_chars+0x1c>
 8008582:	698a      	ldr	r2, [r1, #24]
 8008584:	2a00      	cmp	r2, #0
 8008586:	bf14      	ite	ne
 8008588:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800858c:	2201      	moveq	r2, #1
 800858e:	608a      	str	r2, [r1, #8]
 8008590:	6822      	ldr	r2, [r4, #0]
 8008592:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008624 <_scanf_chars+0xb0>
 8008596:	06d1      	lsls	r1, r2, #27
 8008598:	bf5f      	itttt	pl
 800859a:	681a      	ldrpl	r2, [r3, #0]
 800859c:	1d11      	addpl	r1, r2, #4
 800859e:	6019      	strpl	r1, [r3, #0]
 80085a0:	6816      	ldrpl	r6, [r2, #0]
 80085a2:	2700      	movs	r7, #0
 80085a4:	69a0      	ldr	r0, [r4, #24]
 80085a6:	b188      	cbz	r0, 80085cc <_scanf_chars+0x58>
 80085a8:	2801      	cmp	r0, #1
 80085aa:	d107      	bne.n	80085bc <_scanf_chars+0x48>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	6963      	ldr	r3, [r4, #20]
 80085b2:	5c9b      	ldrb	r3, [r3, r2]
 80085b4:	b953      	cbnz	r3, 80085cc <_scanf_chars+0x58>
 80085b6:	2f00      	cmp	r7, #0
 80085b8:	d031      	beq.n	800861e <_scanf_chars+0xaa>
 80085ba:	e022      	b.n	8008602 <_scanf_chars+0x8e>
 80085bc:	2802      	cmp	r0, #2
 80085be:	d120      	bne.n	8008602 <_scanf_chars+0x8e>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80085c8:	071b      	lsls	r3, r3, #28
 80085ca:	d41a      	bmi.n	8008602 <_scanf_chars+0x8e>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	06da      	lsls	r2, r3, #27
 80085d0:	bf5e      	ittt	pl
 80085d2:	682b      	ldrpl	r3, [r5, #0]
 80085d4:	781b      	ldrbpl	r3, [r3, #0]
 80085d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80085da:	682a      	ldr	r2, [r5, #0]
 80085dc:	686b      	ldr	r3, [r5, #4]
 80085de:	3201      	adds	r2, #1
 80085e0:	602a      	str	r2, [r5, #0]
 80085e2:	68a2      	ldr	r2, [r4, #8]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	3a01      	subs	r2, #1
 80085e8:	606b      	str	r3, [r5, #4]
 80085ea:	3701      	adds	r7, #1
 80085ec:	60a2      	str	r2, [r4, #8]
 80085ee:	b142      	cbz	r2, 8008602 <_scanf_chars+0x8e>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dcd7      	bgt.n	80085a4 <_scanf_chars+0x30>
 80085f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80085f8:	4629      	mov	r1, r5
 80085fa:	4640      	mov	r0, r8
 80085fc:	4798      	blx	r3
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0d0      	beq.n	80085a4 <_scanf_chars+0x30>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	f013 0310 	ands.w	r3, r3, #16
 8008608:	d105      	bne.n	8008616 <_scanf_chars+0xa2>
 800860a:	68e2      	ldr	r2, [r4, #12]
 800860c:	3201      	adds	r2, #1
 800860e:	60e2      	str	r2, [r4, #12]
 8008610:	69a2      	ldr	r2, [r4, #24]
 8008612:	b102      	cbz	r2, 8008616 <_scanf_chars+0xa2>
 8008614:	7033      	strb	r3, [r6, #0]
 8008616:	6923      	ldr	r3, [r4, #16]
 8008618:	443b      	add	r3, r7
 800861a:	6123      	str	r3, [r4, #16]
 800861c:	2000      	movs	r0, #0
 800861e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008622:	bf00      	nop
 8008624:	08009c71 	.word	0x08009c71

08008628 <_scanf_i>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	4698      	mov	r8, r3
 800862e:	4b74      	ldr	r3, [pc, #464]	@ (8008800 <_scanf_i+0x1d8>)
 8008630:	460c      	mov	r4, r1
 8008632:	4682      	mov	sl, r0
 8008634:	4616      	mov	r6, r2
 8008636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800863a:	b087      	sub	sp, #28
 800863c:	ab03      	add	r3, sp, #12
 800863e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008642:	4b70      	ldr	r3, [pc, #448]	@ (8008804 <_scanf_i+0x1dc>)
 8008644:	69a1      	ldr	r1, [r4, #24]
 8008646:	4a70      	ldr	r2, [pc, #448]	@ (8008808 <_scanf_i+0x1e0>)
 8008648:	2903      	cmp	r1, #3
 800864a:	bf08      	it	eq
 800864c:	461a      	moveq	r2, r3
 800864e:	68a3      	ldr	r3, [r4, #8]
 8008650:	9201      	str	r2, [sp, #4]
 8008652:	1e5a      	subs	r2, r3, #1
 8008654:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008658:	bf88      	it	hi
 800865a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800865e:	4627      	mov	r7, r4
 8008660:	bf82      	ittt	hi
 8008662:	eb03 0905 	addhi.w	r9, r3, r5
 8008666:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800866a:	60a3      	strhi	r3, [r4, #8]
 800866c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008670:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008674:	bf98      	it	ls
 8008676:	f04f 0900 	movls.w	r9, #0
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	463d      	mov	r5, r7
 800867e:	f04f 0b00 	mov.w	fp, #0
 8008682:	6831      	ldr	r1, [r6, #0]
 8008684:	ab03      	add	r3, sp, #12
 8008686:	7809      	ldrb	r1, [r1, #0]
 8008688:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800868c:	2202      	movs	r2, #2
 800868e:	f7f7 fd9f 	bl	80001d0 <memchr>
 8008692:	b328      	cbz	r0, 80086e0 <_scanf_i+0xb8>
 8008694:	f1bb 0f01 	cmp.w	fp, #1
 8008698:	d159      	bne.n	800874e <_scanf_i+0x126>
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	b92a      	cbnz	r2, 80086aa <_scanf_i+0x82>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	2108      	movs	r1, #8
 80086a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086a6:	6061      	str	r1, [r4, #4]
 80086a8:	6022      	str	r2, [r4, #0]
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	68a2      	ldr	r2, [r4, #8]
 80086b4:	1e51      	subs	r1, r2, #1
 80086b6:	60a1      	str	r1, [r4, #8]
 80086b8:	b192      	cbz	r2, 80086e0 <_scanf_i+0xb8>
 80086ba:	6832      	ldr	r2, [r6, #0]
 80086bc:	1c51      	adds	r1, r2, #1
 80086be:	6031      	str	r1, [r6, #0]
 80086c0:	7812      	ldrb	r2, [r2, #0]
 80086c2:	f805 2b01 	strb.w	r2, [r5], #1
 80086c6:	6872      	ldr	r2, [r6, #4]
 80086c8:	3a01      	subs	r2, #1
 80086ca:	2a00      	cmp	r2, #0
 80086cc:	6072      	str	r2, [r6, #4]
 80086ce:	dc07      	bgt.n	80086e0 <_scanf_i+0xb8>
 80086d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80086d4:	4631      	mov	r1, r6
 80086d6:	4650      	mov	r0, sl
 80086d8:	4790      	blx	r2
 80086da:	2800      	cmp	r0, #0
 80086dc:	f040 8085 	bne.w	80087ea <_scanf_i+0x1c2>
 80086e0:	f10b 0b01 	add.w	fp, fp, #1
 80086e4:	f1bb 0f03 	cmp.w	fp, #3
 80086e8:	d1cb      	bne.n	8008682 <_scanf_i+0x5a>
 80086ea:	6863      	ldr	r3, [r4, #4]
 80086ec:	b90b      	cbnz	r3, 80086f2 <_scanf_i+0xca>
 80086ee:	230a      	movs	r3, #10
 80086f0:	6063      	str	r3, [r4, #4]
 80086f2:	6863      	ldr	r3, [r4, #4]
 80086f4:	4945      	ldr	r1, [pc, #276]	@ (800880c <_scanf_i+0x1e4>)
 80086f6:	6960      	ldr	r0, [r4, #20]
 80086f8:	1ac9      	subs	r1, r1, r3
 80086fa:	f000 fa19 	bl	8008b30 <__sccl>
 80086fe:	f04f 0b00 	mov.w	fp, #0
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	6822      	ldr	r2, [r4, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d03d      	beq.n	8008786 <_scanf_i+0x15e>
 800870a:	6831      	ldr	r1, [r6, #0]
 800870c:	6960      	ldr	r0, [r4, #20]
 800870e:	f891 c000 	ldrb.w	ip, [r1]
 8008712:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008716:	2800      	cmp	r0, #0
 8008718:	d035      	beq.n	8008786 <_scanf_i+0x15e>
 800871a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800871e:	d124      	bne.n	800876a <_scanf_i+0x142>
 8008720:	0510      	lsls	r0, r2, #20
 8008722:	d522      	bpl.n	800876a <_scanf_i+0x142>
 8008724:	f10b 0b01 	add.w	fp, fp, #1
 8008728:	f1b9 0f00 	cmp.w	r9, #0
 800872c:	d003      	beq.n	8008736 <_scanf_i+0x10e>
 800872e:	3301      	adds	r3, #1
 8008730:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008734:	60a3      	str	r3, [r4, #8]
 8008736:	6873      	ldr	r3, [r6, #4]
 8008738:	3b01      	subs	r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	6073      	str	r3, [r6, #4]
 800873e:	dd1b      	ble.n	8008778 <_scanf_i+0x150>
 8008740:	6833      	ldr	r3, [r6, #0]
 8008742:	3301      	adds	r3, #1
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	3b01      	subs	r3, #1
 800874a:	60a3      	str	r3, [r4, #8]
 800874c:	e7d9      	b.n	8008702 <_scanf_i+0xda>
 800874e:	f1bb 0f02 	cmp.w	fp, #2
 8008752:	d1ae      	bne.n	80086b2 <_scanf_i+0x8a>
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800875a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800875e:	d1c4      	bne.n	80086ea <_scanf_i+0xc2>
 8008760:	2110      	movs	r1, #16
 8008762:	6061      	str	r1, [r4, #4]
 8008764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008768:	e7a2      	b.n	80086b0 <_scanf_i+0x88>
 800876a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	780b      	ldrb	r3, [r1, #0]
 8008772:	f805 3b01 	strb.w	r3, [r5], #1
 8008776:	e7de      	b.n	8008736 <_scanf_i+0x10e>
 8008778:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800877c:	4631      	mov	r1, r6
 800877e:	4650      	mov	r0, sl
 8008780:	4798      	blx	r3
 8008782:	2800      	cmp	r0, #0
 8008784:	d0df      	beq.n	8008746 <_scanf_i+0x11e>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	05d9      	lsls	r1, r3, #23
 800878a:	d50d      	bpl.n	80087a8 <_scanf_i+0x180>
 800878c:	42bd      	cmp	r5, r7
 800878e:	d909      	bls.n	80087a4 <_scanf_i+0x17c>
 8008790:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008794:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008798:	4632      	mov	r2, r6
 800879a:	4650      	mov	r0, sl
 800879c:	4798      	blx	r3
 800879e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80087a2:	464d      	mov	r5, r9
 80087a4:	42bd      	cmp	r5, r7
 80087a6:	d028      	beq.n	80087fa <_scanf_i+0x1d2>
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	f012 0210 	ands.w	r2, r2, #16
 80087ae:	d113      	bne.n	80087d8 <_scanf_i+0x1b0>
 80087b0:	702a      	strb	r2, [r5, #0]
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	9e01      	ldr	r6, [sp, #4]
 80087b6:	4639      	mov	r1, r7
 80087b8:	4650      	mov	r0, sl
 80087ba:	47b0      	blx	r6
 80087bc:	f8d8 3000 	ldr.w	r3, [r8]
 80087c0:	6821      	ldr	r1, [r4, #0]
 80087c2:	1d1a      	adds	r2, r3, #4
 80087c4:	f8c8 2000 	str.w	r2, [r8]
 80087c8:	f011 0f20 	tst.w	r1, #32
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	d00f      	beq.n	80087f0 <_scanf_i+0x1c8>
 80087d0:	6018      	str	r0, [r3, #0]
 80087d2:	68e3      	ldr	r3, [r4, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	60e3      	str	r3, [r4, #12]
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	1bed      	subs	r5, r5, r7
 80087dc:	445d      	add	r5, fp
 80087de:	442b      	add	r3, r5
 80087e0:	6123      	str	r3, [r4, #16]
 80087e2:	2000      	movs	r0, #0
 80087e4:	b007      	add	sp, #28
 80087e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ea:	f04f 0b00 	mov.w	fp, #0
 80087ee:	e7ca      	b.n	8008786 <_scanf_i+0x15e>
 80087f0:	07ca      	lsls	r2, r1, #31
 80087f2:	bf4c      	ite	mi
 80087f4:	8018      	strhmi	r0, [r3, #0]
 80087f6:	6018      	strpl	r0, [r3, #0]
 80087f8:	e7eb      	b.n	80087d2 <_scanf_i+0x1aa>
 80087fa:	2001      	movs	r0, #1
 80087fc:	e7f2      	b.n	80087e4 <_scanf_i+0x1bc>
 80087fe:	bf00      	nop
 8008800:	080098ec 	.word	0x080098ec
 8008804:	08007cd9 	.word	0x08007cd9
 8008808:	0800975d 	.word	0x0800975d
 800880c:	08009a70 	.word	0x08009a70

08008810 <__sflush_r>:
 8008810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008818:	0716      	lsls	r6, r2, #28
 800881a:	4605      	mov	r5, r0
 800881c:	460c      	mov	r4, r1
 800881e:	d454      	bmi.n	80088ca <__sflush_r+0xba>
 8008820:	684b      	ldr	r3, [r1, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	dc02      	bgt.n	800882c <__sflush_r+0x1c>
 8008826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	dd48      	ble.n	80088be <__sflush_r+0xae>
 800882c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800882e:	2e00      	cmp	r6, #0
 8008830:	d045      	beq.n	80088be <__sflush_r+0xae>
 8008832:	2300      	movs	r3, #0
 8008834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008838:	682f      	ldr	r7, [r5, #0]
 800883a:	6a21      	ldr	r1, [r4, #32]
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	d030      	beq.n	80088a2 <__sflush_r+0x92>
 8008840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	0759      	lsls	r1, r3, #29
 8008846:	d505      	bpl.n	8008854 <__sflush_r+0x44>
 8008848:	6863      	ldr	r3, [r4, #4]
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800884e:	b10b      	cbz	r3, 8008854 <__sflush_r+0x44>
 8008850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008852:	1ad2      	subs	r2, r2, r3
 8008854:	2300      	movs	r3, #0
 8008856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008858:	6a21      	ldr	r1, [r4, #32]
 800885a:	4628      	mov	r0, r5
 800885c:	47b0      	blx	r6
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	d106      	bne.n	8008872 <__sflush_r+0x62>
 8008864:	6829      	ldr	r1, [r5, #0]
 8008866:	291d      	cmp	r1, #29
 8008868:	d82b      	bhi.n	80088c2 <__sflush_r+0xb2>
 800886a:	4a2a      	ldr	r2, [pc, #168]	@ (8008914 <__sflush_r+0x104>)
 800886c:	40ca      	lsrs	r2, r1
 800886e:	07d6      	lsls	r6, r2, #31
 8008870:	d527      	bpl.n	80088c2 <__sflush_r+0xb2>
 8008872:	2200      	movs	r2, #0
 8008874:	6062      	str	r2, [r4, #4]
 8008876:	04d9      	lsls	r1, r3, #19
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	6022      	str	r2, [r4, #0]
 800887c:	d504      	bpl.n	8008888 <__sflush_r+0x78>
 800887e:	1c42      	adds	r2, r0, #1
 8008880:	d101      	bne.n	8008886 <__sflush_r+0x76>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	b903      	cbnz	r3, 8008888 <__sflush_r+0x78>
 8008886:	6560      	str	r0, [r4, #84]	@ 0x54
 8008888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800888a:	602f      	str	r7, [r5, #0]
 800888c:	b1b9      	cbz	r1, 80088be <__sflush_r+0xae>
 800888e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008892:	4299      	cmp	r1, r3
 8008894:	d002      	beq.n	800889c <__sflush_r+0x8c>
 8008896:	4628      	mov	r0, r5
 8008898:	f7fd fdf2 	bl	8006480 <_free_r>
 800889c:	2300      	movs	r3, #0
 800889e:	6363      	str	r3, [r4, #52]	@ 0x34
 80088a0:	e00d      	b.n	80088be <__sflush_r+0xae>
 80088a2:	2301      	movs	r3, #1
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b0      	blx	r6
 80088a8:	4602      	mov	r2, r0
 80088aa:	1c50      	adds	r0, r2, #1
 80088ac:	d1c9      	bne.n	8008842 <__sflush_r+0x32>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0c6      	beq.n	8008842 <__sflush_r+0x32>
 80088b4:	2b1d      	cmp	r3, #29
 80088b6:	d001      	beq.n	80088bc <__sflush_r+0xac>
 80088b8:	2b16      	cmp	r3, #22
 80088ba:	d11e      	bne.n	80088fa <__sflush_r+0xea>
 80088bc:	602f      	str	r7, [r5, #0]
 80088be:	2000      	movs	r0, #0
 80088c0:	e022      	b.n	8008908 <__sflush_r+0xf8>
 80088c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088c6:	b21b      	sxth	r3, r3
 80088c8:	e01b      	b.n	8008902 <__sflush_r+0xf2>
 80088ca:	690f      	ldr	r7, [r1, #16]
 80088cc:	2f00      	cmp	r7, #0
 80088ce:	d0f6      	beq.n	80088be <__sflush_r+0xae>
 80088d0:	0793      	lsls	r3, r2, #30
 80088d2:	680e      	ldr	r6, [r1, #0]
 80088d4:	bf08      	it	eq
 80088d6:	694b      	ldreq	r3, [r1, #20]
 80088d8:	600f      	str	r7, [r1, #0]
 80088da:	bf18      	it	ne
 80088dc:	2300      	movne	r3, #0
 80088de:	eba6 0807 	sub.w	r8, r6, r7
 80088e2:	608b      	str	r3, [r1, #8]
 80088e4:	f1b8 0f00 	cmp.w	r8, #0
 80088e8:	dde9      	ble.n	80088be <__sflush_r+0xae>
 80088ea:	6a21      	ldr	r1, [r4, #32]
 80088ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088ee:	4643      	mov	r3, r8
 80088f0:	463a      	mov	r2, r7
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b0      	blx	r6
 80088f6:	2800      	cmp	r0, #0
 80088f8:	dc08      	bgt.n	800890c <__sflush_r+0xfc>
 80088fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890c:	4407      	add	r7, r0
 800890e:	eba8 0800 	sub.w	r8, r8, r0
 8008912:	e7e7      	b.n	80088e4 <__sflush_r+0xd4>
 8008914:	20400001 	.word	0x20400001

08008918 <_fflush_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	690b      	ldr	r3, [r1, #16]
 800891c:	4605      	mov	r5, r0
 800891e:	460c      	mov	r4, r1
 8008920:	b913      	cbnz	r3, 8008928 <_fflush_r+0x10>
 8008922:	2500      	movs	r5, #0
 8008924:	4628      	mov	r0, r5
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	b118      	cbz	r0, 8008932 <_fflush_r+0x1a>
 800892a:	6a03      	ldr	r3, [r0, #32]
 800892c:	b90b      	cbnz	r3, 8008932 <_fflush_r+0x1a>
 800892e:	f7fc fd55 	bl	80053dc <__sinit>
 8008932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f3      	beq.n	8008922 <_fflush_r+0xa>
 800893a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800893c:	07d0      	lsls	r0, r2, #31
 800893e:	d404      	bmi.n	800894a <_fflush_r+0x32>
 8008940:	0599      	lsls	r1, r3, #22
 8008942:	d402      	bmi.n	800894a <_fflush_r+0x32>
 8008944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008946:	f7fc ff3a 	bl	80057be <__retarget_lock_acquire_recursive>
 800894a:	4628      	mov	r0, r5
 800894c:	4621      	mov	r1, r4
 800894e:	f7ff ff5f 	bl	8008810 <__sflush_r>
 8008952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008954:	07da      	lsls	r2, r3, #31
 8008956:	4605      	mov	r5, r0
 8008958:	d4e4      	bmi.n	8008924 <_fflush_r+0xc>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	059b      	lsls	r3, r3, #22
 800895e:	d4e1      	bmi.n	8008924 <_fflush_r+0xc>
 8008960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008962:	f7fc ff2d 	bl	80057c0 <__retarget_lock_release_recursive>
 8008966:	e7dd      	b.n	8008924 <_fflush_r+0xc>

08008968 <__swhatbuf_r>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	2900      	cmp	r1, #0
 8008972:	b096      	sub	sp, #88	@ 0x58
 8008974:	4615      	mov	r5, r2
 8008976:	461e      	mov	r6, r3
 8008978:	da0d      	bge.n	8008996 <__swhatbuf_r+0x2e>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008980:	f04f 0100 	mov.w	r1, #0
 8008984:	bf14      	ite	ne
 8008986:	2340      	movne	r3, #64	@ 0x40
 8008988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800898c:	2000      	movs	r0, #0
 800898e:	6031      	str	r1, [r6, #0]
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	b016      	add	sp, #88	@ 0x58
 8008994:	bd70      	pop	{r4, r5, r6, pc}
 8008996:	466a      	mov	r2, sp
 8008998:	f000 fa7c 	bl	8008e94 <_fstat_r>
 800899c:	2800      	cmp	r0, #0
 800899e:	dbec      	blt.n	800897a <__swhatbuf_r+0x12>
 80089a0:	9901      	ldr	r1, [sp, #4]
 80089a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089aa:	4259      	negs	r1, r3
 80089ac:	4159      	adcs	r1, r3
 80089ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089b2:	e7eb      	b.n	800898c <__swhatbuf_r+0x24>

080089b4 <__smakebuf_r>:
 80089b4:	898b      	ldrh	r3, [r1, #12]
 80089b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089b8:	079d      	lsls	r5, r3, #30
 80089ba:	4606      	mov	r6, r0
 80089bc:	460c      	mov	r4, r1
 80089be:	d507      	bpl.n	80089d0 <__smakebuf_r+0x1c>
 80089c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	6123      	str	r3, [r4, #16]
 80089c8:	2301      	movs	r3, #1
 80089ca:	6163      	str	r3, [r4, #20]
 80089cc:	b003      	add	sp, #12
 80089ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d0:	ab01      	add	r3, sp, #4
 80089d2:	466a      	mov	r2, sp
 80089d4:	f7ff ffc8 	bl	8008968 <__swhatbuf_r>
 80089d8:	9f00      	ldr	r7, [sp, #0]
 80089da:	4605      	mov	r5, r0
 80089dc:	4639      	mov	r1, r7
 80089de:	4630      	mov	r0, r6
 80089e0:	f7fd fdc2 	bl	8006568 <_malloc_r>
 80089e4:	b948      	cbnz	r0, 80089fa <__smakebuf_r+0x46>
 80089e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ea:	059a      	lsls	r2, r3, #22
 80089ec:	d4ee      	bmi.n	80089cc <__smakebuf_r+0x18>
 80089ee:	f023 0303 	bic.w	r3, r3, #3
 80089f2:	f043 0302 	orr.w	r3, r3, #2
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	e7e2      	b.n	80089c0 <__smakebuf_r+0xc>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	6020      	str	r0, [r4, #0]
 80089fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	9b01      	ldr	r3, [sp, #4]
 8008a06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a0a:	b15b      	cbz	r3, 8008a24 <__smakebuf_r+0x70>
 8008a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a10:	4630      	mov	r0, r6
 8008a12:	f000 fa51 	bl	8008eb8 <_isatty_r>
 8008a16:	b128      	cbz	r0, 8008a24 <__smakebuf_r+0x70>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f023 0303 	bic.w	r3, r3, #3
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	431d      	orrs	r5, r3
 8008a28:	81a5      	strh	r5, [r4, #12]
 8008a2a:	e7cf      	b.n	80089cc <__smakebuf_r+0x18>

08008a2c <lflush>:
 8008a2c:	898b      	ldrh	r3, [r1, #12]
 8008a2e:	f003 0309 	and.w	r3, r3, #9
 8008a32:	2b09      	cmp	r3, #9
 8008a34:	d103      	bne.n	8008a3e <lflush+0x12>
 8008a36:	4b03      	ldr	r3, [pc, #12]	@ (8008a44 <lflush+0x18>)
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	f7ff bf6d 	b.w	8008918 <_fflush_r>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20000018 	.word	0x20000018

08008a48 <__srefill_r>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	b118      	cbz	r0, 8008a58 <__srefill_r+0x10>
 8008a50:	6a03      	ldr	r3, [r0, #32]
 8008a52:	b90b      	cbnz	r3, 8008a58 <__srefill_r+0x10>
 8008a54:	f7fc fcc2 	bl	80053dc <__sinit>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	6063      	str	r3, [r4, #4]
 8008a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a60:	069e      	lsls	r6, r3, #26
 8008a62:	d408      	bmi.n	8008a76 <__srefill_r+0x2e>
 8008a64:	0758      	lsls	r0, r3, #29
 8008a66:	d445      	bmi.n	8008af4 <__srefill_r+0xac>
 8008a68:	06d9      	lsls	r1, r3, #27
 8008a6a:	d407      	bmi.n	8008a7c <__srefill_r+0x34>
 8008a6c:	2209      	movs	r2, #9
 8008a6e:	602a      	str	r2, [r5, #0]
 8008a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a7a:	bd70      	pop	{r4, r5, r6, pc}
 8008a7c:	071a      	lsls	r2, r3, #28
 8008a7e:	d50b      	bpl.n	8008a98 <__srefill_r+0x50>
 8008a80:	4621      	mov	r1, r4
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7ff ff48 	bl	8008918 <_fflush_r>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d1f4      	bne.n	8008a76 <__srefill_r+0x2e>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	60a0      	str	r0, [r4, #8]
 8008a90:	f023 0308 	bic.w	r3, r3, #8
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	61a0      	str	r0, [r4, #24]
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	f043 0304 	orr.w	r3, r3, #4
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	b91b      	cbnz	r3, 8008aac <__srefill_r+0x64>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f7ff ff84 	bl	80089b4 <__smakebuf_r>
 8008aac:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8008ab0:	07b3      	lsls	r3, r6, #30
 8008ab2:	d00f      	beq.n	8008ad4 <__srefill_r+0x8c>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8008b24 <__srefill_r+0xdc>)
 8008ab8:	491b      	ldr	r1, [pc, #108]	@ (8008b28 <__srefill_r+0xe0>)
 8008aba:	481c      	ldr	r0, [pc, #112]	@ (8008b2c <__srefill_r+0xe4>)
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	f7fc fca5 	bl	800540c <_fwalk_sglue>
 8008ac2:	81a6      	strh	r6, [r4, #12]
 8008ac4:	f006 0609 	and.w	r6, r6, #9
 8008ac8:	2e09      	cmp	r6, #9
 8008aca:	d103      	bne.n	8008ad4 <__srefill_r+0x8c>
 8008acc:	4621      	mov	r1, r4
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f7ff fe9e 	bl	8008810 <__sflush_r>
 8008ad4:	6922      	ldr	r2, [r4, #16]
 8008ad6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8008ad8:	6963      	ldr	r3, [r4, #20]
 8008ada:	6a21      	ldr	r1, [r4, #32]
 8008adc:	6022      	str	r2, [r4, #0]
 8008ade:	4628      	mov	r0, r5
 8008ae0:	47b0      	blx	r6
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	6060      	str	r0, [r4, #4]
 8008ae6:	dc17      	bgt.n	8008b18 <__srefill_r+0xd0>
 8008ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aec:	d116      	bne.n	8008b1c <__srefill_r+0xd4>
 8008aee:	f043 0320 	orr.w	r3, r3, #32
 8008af2:	e7bf      	b.n	8008a74 <__srefill_r+0x2c>
 8008af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008af6:	2900      	cmp	r1, #0
 8008af8:	d0d2      	beq.n	8008aa0 <__srefill_r+0x58>
 8008afa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008afe:	4299      	cmp	r1, r3
 8008b00:	d002      	beq.n	8008b08 <__srefill_r+0xc0>
 8008b02:	4628      	mov	r0, r5
 8008b04:	f7fd fcbc 	bl	8006480 <_free_r>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b0e:	6063      	str	r3, [r4, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0c5      	beq.n	8008aa0 <__srefill_r+0x58>
 8008b14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e7ae      	b.n	8008a7a <__srefill_r+0x32>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	6062      	str	r2, [r4, #4]
 8008b20:	e7a6      	b.n	8008a70 <__srefill_r+0x28>
 8008b22:	bf00      	nop
 8008b24:	2000000c 	.word	0x2000000c
 8008b28:	08008a2d 	.word	0x08008a2d
 8008b2c:	2000001c 	.word	0x2000001c

08008b30 <__sccl>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	780b      	ldrb	r3, [r1, #0]
 8008b34:	4604      	mov	r4, r0
 8008b36:	2b5e      	cmp	r3, #94	@ 0x5e
 8008b38:	bf0b      	itete	eq
 8008b3a:	784b      	ldrbeq	r3, [r1, #1]
 8008b3c:	1c4a      	addne	r2, r1, #1
 8008b3e:	1c8a      	addeq	r2, r1, #2
 8008b40:	2100      	movne	r1, #0
 8008b42:	bf08      	it	eq
 8008b44:	2101      	moveq	r1, #1
 8008b46:	3801      	subs	r0, #1
 8008b48:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008b4c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008b50:	42a8      	cmp	r0, r5
 8008b52:	d1fb      	bne.n	8008b4c <__sccl+0x1c>
 8008b54:	b90b      	cbnz	r3, 8008b5a <__sccl+0x2a>
 8008b56:	1e50      	subs	r0, r2, #1
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
 8008b5a:	f081 0101 	eor.w	r1, r1, #1
 8008b5e:	54e1      	strb	r1, [r4, r3]
 8008b60:	4610      	mov	r0, r2
 8008b62:	4602      	mov	r2, r0
 8008b64:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b68:	2d2d      	cmp	r5, #45	@ 0x2d
 8008b6a:	d005      	beq.n	8008b78 <__sccl+0x48>
 8008b6c:	2d5d      	cmp	r5, #93	@ 0x5d
 8008b6e:	d016      	beq.n	8008b9e <__sccl+0x6e>
 8008b70:	2d00      	cmp	r5, #0
 8008b72:	d0f1      	beq.n	8008b58 <__sccl+0x28>
 8008b74:	462b      	mov	r3, r5
 8008b76:	e7f2      	b.n	8008b5e <__sccl+0x2e>
 8008b78:	7846      	ldrb	r6, [r0, #1]
 8008b7a:	2e5d      	cmp	r6, #93	@ 0x5d
 8008b7c:	d0fa      	beq.n	8008b74 <__sccl+0x44>
 8008b7e:	42b3      	cmp	r3, r6
 8008b80:	dcf8      	bgt.n	8008b74 <__sccl+0x44>
 8008b82:	3002      	adds	r0, #2
 8008b84:	461a      	mov	r2, r3
 8008b86:	3201      	adds	r2, #1
 8008b88:	4296      	cmp	r6, r2
 8008b8a:	54a1      	strb	r1, [r4, r2]
 8008b8c:	dcfb      	bgt.n	8008b86 <__sccl+0x56>
 8008b8e:	1af2      	subs	r2, r6, r3
 8008b90:	3a01      	subs	r2, #1
 8008b92:	1c5d      	adds	r5, r3, #1
 8008b94:	42b3      	cmp	r3, r6
 8008b96:	bfa8      	it	ge
 8008b98:	2200      	movge	r2, #0
 8008b9a:	18ab      	adds	r3, r5, r2
 8008b9c:	e7e1      	b.n	8008b62 <__sccl+0x32>
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	e7da      	b.n	8008b58 <__sccl+0x28>

08008ba2 <__submore>:
 8008ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008baa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bae:	4299      	cmp	r1, r3
 8008bb0:	d11d      	bne.n	8008bee <__submore+0x4c>
 8008bb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008bb6:	f7fd fcd7 	bl	8006568 <_malloc_r>
 8008bba:	b918      	cbnz	r0, 8008bc4 <__submore+0x22>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bc8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008bca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008bce:	6360      	str	r0, [r4, #52]	@ 0x34
 8008bd0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008bd4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008bd8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008bdc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008be0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008be4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008be8:	6020      	str	r0, [r4, #0]
 8008bea:	2000      	movs	r0, #0
 8008bec:	e7e8      	b.n	8008bc0 <__submore+0x1e>
 8008bee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008bf0:	0077      	lsls	r7, r6, #1
 8008bf2:	463a      	mov	r2, r7
 8008bf4:	f000 fd15 	bl	8009622 <_realloc_r>
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d0de      	beq.n	8008bbc <__submore+0x1a>
 8008bfe:	eb00 0806 	add.w	r8, r0, r6
 8008c02:	4601      	mov	r1, r0
 8008c04:	4632      	mov	r2, r6
 8008c06:	4640      	mov	r0, r8
 8008c08:	f000 f976 	bl	8008ef8 <memcpy>
 8008c0c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008c10:	f8c4 8000 	str.w	r8, [r4]
 8008c14:	e7e9      	b.n	8008bea <__submore+0x48>

08008c16 <_ungetc_r>:
 8008c16:	b570      	push	{r4, r5, r6, lr}
 8008c18:	460d      	mov	r5, r1
 8008c1a:	1c69      	adds	r1, r5, #1
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	4614      	mov	r4, r2
 8008c20:	d01e      	beq.n	8008c60 <_ungetc_r+0x4a>
 8008c22:	b118      	cbz	r0, 8008c2c <_ungetc_r+0x16>
 8008c24:	6a03      	ldr	r3, [r0, #32]
 8008c26:	b90b      	cbnz	r3, 8008c2c <_ungetc_r+0x16>
 8008c28:	f7fc fbd8 	bl	80053dc <__sinit>
 8008c2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c2e:	07da      	lsls	r2, r3, #31
 8008c30:	d405      	bmi.n	8008c3e <_ungetc_r+0x28>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	059b      	lsls	r3, r3, #22
 8008c36:	d402      	bmi.n	8008c3e <_ungetc_r+0x28>
 8008c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c3a:	f7fc fdc0 	bl	80057be <__retarget_lock_acquire_recursive>
 8008c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c42:	f023 0220 	bic.w	r2, r3, #32
 8008c46:	0758      	lsls	r0, r3, #29
 8008c48:	81a2      	strh	r2, [r4, #12]
 8008c4a:	d422      	bmi.n	8008c92 <_ungetc_r+0x7c>
 8008c4c:	06d9      	lsls	r1, r3, #27
 8008c4e:	d40a      	bmi.n	8008c66 <_ungetc_r+0x50>
 8008c50:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c52:	07d2      	lsls	r2, r2, #31
 8008c54:	d404      	bmi.n	8008c60 <_ungetc_r+0x4a>
 8008c56:	0599      	lsls	r1, r3, #22
 8008c58:	d402      	bmi.n	8008c60 <_ungetc_r+0x4a>
 8008c5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c5c:	f7fc fdb0 	bl	80057c0 <__retarget_lock_release_recursive>
 8008c60:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008c64:	e046      	b.n	8008cf4 <_ungetc_r+0xde>
 8008c66:	071b      	lsls	r3, r3, #28
 8008c68:	d50f      	bpl.n	8008c8a <_ungetc_r+0x74>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff fe53 	bl	8008918 <_fflush_r>
 8008c72:	b120      	cbz	r0, 8008c7e <_ungetc_r+0x68>
 8008c74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c76:	07d8      	lsls	r0, r3, #31
 8008c78:	d4f2      	bmi.n	8008c60 <_ungetc_r+0x4a>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	e7eb      	b.n	8008c56 <_ungetc_r+0x40>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	60a0      	str	r0, [r4, #8]
 8008c82:	f023 0308 	bic.w	r3, r3, #8
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	61a0      	str	r0, [r4, #24]
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f043 0304 	orr.w	r3, r3, #4
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c94:	6862      	ldr	r2, [r4, #4]
 8008c96:	b2ed      	uxtb	r5, r5
 8008c98:	b1d3      	cbz	r3, 8008cd0 <_ungetc_r+0xba>
 8008c9a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	dc05      	bgt.n	8008cac <_ungetc_r+0x96>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7ff ff7d 	bl	8008ba2 <__submore>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d1e3      	bne.n	8008c74 <_ungetc_r+0x5e>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	1e5a      	subs	r2, r3, #1
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008cb6:	6863      	ldr	r3, [r4, #4]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	6063      	str	r3, [r4, #4]
 8008cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cbe:	07da      	lsls	r2, r3, #31
 8008cc0:	d418      	bmi.n	8008cf4 <_ungetc_r+0xde>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	059b      	lsls	r3, r3, #22
 8008cc6:	d415      	bmi.n	8008cf4 <_ungetc_r+0xde>
 8008cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cca:	f7fc fd79 	bl	80057c0 <__retarget_lock_release_recursive>
 8008cce:	e011      	b.n	8008cf4 <_ungetc_r+0xde>
 8008cd0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8008cd2:	6920      	ldr	r0, [r4, #16]
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	f001 0101 	and.w	r1, r1, #1
 8008cda:	b168      	cbz	r0, 8008cf8 <_ungetc_r+0xe2>
 8008cdc:	4298      	cmp	r0, r3
 8008cde:	d20b      	bcs.n	8008cf8 <_ungetc_r+0xe2>
 8008ce0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8008ce4:	42a8      	cmp	r0, r5
 8008ce6:	d107      	bne.n	8008cf8 <_ungetc_r+0xe2>
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	3201      	adds	r2, #1
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	6062      	str	r2, [r4, #4]
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	d0e6      	beq.n	8008cc2 <_ungetc_r+0xac>
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d00:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d02:	2303      	movs	r3, #3
 8008d04:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008d06:	4623      	mov	r3, r4
 8008d08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	2301      	movs	r3, #1
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	e7ed      	b.n	8008cf0 <_ungetc_r+0xda>

08008d14 <__swbuf_r>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	460e      	mov	r6, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	b118      	cbz	r0, 8008d26 <__swbuf_r+0x12>
 8008d1e:	6a03      	ldr	r3, [r0, #32]
 8008d20:	b90b      	cbnz	r3, 8008d26 <__swbuf_r+0x12>
 8008d22:	f7fc fb5b 	bl	80053dc <__sinit>
 8008d26:	69a3      	ldr	r3, [r4, #24]
 8008d28:	60a3      	str	r3, [r4, #8]
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	071a      	lsls	r2, r3, #28
 8008d2e:	d501      	bpl.n	8008d34 <__swbuf_r+0x20>
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	b943      	cbnz	r3, 8008d46 <__swbuf_r+0x32>
 8008d34:	4621      	mov	r1, r4
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 f82a 	bl	8008d90 <__swsetup_r>
 8008d3c:	b118      	cbz	r0, 8008d46 <__swbuf_r+0x32>
 8008d3e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008d42:	4638      	mov	r0, r7
 8008d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	6922      	ldr	r2, [r4, #16]
 8008d4a:	1a98      	subs	r0, r3, r2
 8008d4c:	6963      	ldr	r3, [r4, #20]
 8008d4e:	b2f6      	uxtb	r6, r6
 8008d50:	4283      	cmp	r3, r0
 8008d52:	4637      	mov	r7, r6
 8008d54:	dc05      	bgt.n	8008d62 <__swbuf_r+0x4e>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f7ff fddd 	bl	8008918 <_fflush_r>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d1ed      	bne.n	8008d3e <__swbuf_r+0x2a>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	60a3      	str	r3, [r4, #8]
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	6022      	str	r2, [r4, #0]
 8008d6e:	701e      	strb	r6, [r3, #0]
 8008d70:	6962      	ldr	r2, [r4, #20]
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d004      	beq.n	8008d82 <__swbuf_r+0x6e>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	07db      	lsls	r3, r3, #31
 8008d7c:	d5e1      	bpl.n	8008d42 <__swbuf_r+0x2e>
 8008d7e:	2e0a      	cmp	r6, #10
 8008d80:	d1df      	bne.n	8008d42 <__swbuf_r+0x2e>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f7ff fdc7 	bl	8008918 <_fflush_r>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0d9      	beq.n	8008d42 <__swbuf_r+0x2e>
 8008d8e:	e7d6      	b.n	8008d3e <__swbuf_r+0x2a>

08008d90 <__swsetup_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4b29      	ldr	r3, [pc, #164]	@ (8008e38 <__swsetup_r+0xa8>)
 8008d94:	4605      	mov	r5, r0
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	460c      	mov	r4, r1
 8008d9a:	b118      	cbz	r0, 8008da4 <__swsetup_r+0x14>
 8008d9c:	6a03      	ldr	r3, [r0, #32]
 8008d9e:	b90b      	cbnz	r3, 8008da4 <__swsetup_r+0x14>
 8008da0:	f7fc fb1c 	bl	80053dc <__sinit>
 8008da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da8:	0719      	lsls	r1, r3, #28
 8008daa:	d422      	bmi.n	8008df2 <__swsetup_r+0x62>
 8008dac:	06da      	lsls	r2, r3, #27
 8008dae:	d407      	bmi.n	8008dc0 <__swsetup_r+0x30>
 8008db0:	2209      	movs	r2, #9
 8008db2:	602a      	str	r2, [r5, #0]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dbe:	e033      	b.n	8008e28 <__swsetup_r+0x98>
 8008dc0:	0758      	lsls	r0, r3, #29
 8008dc2:	d512      	bpl.n	8008dea <__swsetup_r+0x5a>
 8008dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dc6:	b141      	cbz	r1, 8008dda <__swsetup_r+0x4a>
 8008dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d002      	beq.n	8008dd6 <__swsetup_r+0x46>
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f7fd fb55 	bl	8006480 <_free_r>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	2300      	movs	r3, #0
 8008de4:	6063      	str	r3, [r4, #4]
 8008de6:	6923      	ldr	r3, [r4, #16]
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	f043 0308 	orr.w	r3, r3, #8
 8008df0:	81a3      	strh	r3, [r4, #12]
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	b94b      	cbnz	r3, 8008e0a <__swsetup_r+0x7a>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e00:	d003      	beq.n	8008e0a <__swsetup_r+0x7a>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4628      	mov	r0, r5
 8008e06:	f7ff fdd5 	bl	80089b4 <__smakebuf_r>
 8008e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0e:	f013 0201 	ands.w	r2, r3, #1
 8008e12:	d00a      	beq.n	8008e2a <__swsetup_r+0x9a>
 8008e14:	2200      	movs	r2, #0
 8008e16:	60a2      	str	r2, [r4, #8]
 8008e18:	6962      	ldr	r2, [r4, #20]
 8008e1a:	4252      	negs	r2, r2
 8008e1c:	61a2      	str	r2, [r4, #24]
 8008e1e:	6922      	ldr	r2, [r4, #16]
 8008e20:	b942      	cbnz	r2, 8008e34 <__swsetup_r+0xa4>
 8008e22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e26:	d1c5      	bne.n	8008db4 <__swsetup_r+0x24>
 8008e28:	bd38      	pop	{r3, r4, r5, pc}
 8008e2a:	0799      	lsls	r1, r3, #30
 8008e2c:	bf58      	it	pl
 8008e2e:	6962      	ldrpl	r2, [r4, #20]
 8008e30:	60a2      	str	r2, [r4, #8]
 8008e32:	e7f4      	b.n	8008e1e <__swsetup_r+0x8e>
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7f7      	b.n	8008e28 <__swsetup_r+0x98>
 8008e38:	20000018 	.word	0x20000018

08008e3c <memmove>:
 8008e3c:	4288      	cmp	r0, r1
 8008e3e:	b510      	push	{r4, lr}
 8008e40:	eb01 0402 	add.w	r4, r1, r2
 8008e44:	d902      	bls.n	8008e4c <memmove+0x10>
 8008e46:	4284      	cmp	r4, r0
 8008e48:	4623      	mov	r3, r4
 8008e4a:	d807      	bhi.n	8008e5c <memmove+0x20>
 8008e4c:	1e43      	subs	r3, r0, #1
 8008e4e:	42a1      	cmp	r1, r4
 8008e50:	d008      	beq.n	8008e64 <memmove+0x28>
 8008e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e5a:	e7f8      	b.n	8008e4e <memmove+0x12>
 8008e5c:	4402      	add	r2, r0
 8008e5e:	4601      	mov	r1, r0
 8008e60:	428a      	cmp	r2, r1
 8008e62:	d100      	bne.n	8008e66 <memmove+0x2a>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e6e:	e7f7      	b.n	8008e60 <memmove+0x24>

08008e70 <strncmp>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	b16a      	cbz	r2, 8008e90 <strncmp+0x20>
 8008e74:	3901      	subs	r1, #1
 8008e76:	1884      	adds	r4, r0, r2
 8008e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d103      	bne.n	8008e8c <strncmp+0x1c>
 8008e84:	42a0      	cmp	r0, r4
 8008e86:	d001      	beq.n	8008e8c <strncmp+0x1c>
 8008e88:	2a00      	cmp	r2, #0
 8008e8a:	d1f5      	bne.n	8008e78 <strncmp+0x8>
 8008e8c:	1ad0      	subs	r0, r2, r3
 8008e8e:	bd10      	pop	{r4, pc}
 8008e90:	4610      	mov	r0, r2
 8008e92:	e7fc      	b.n	8008e8e <strncmp+0x1e>

08008e94 <_fstat_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d07      	ldr	r5, [pc, #28]	@ (8008eb4 <_fstat_r+0x20>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f7f8 faa3 	bl	80013ec <_fstat>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d102      	bne.n	8008eb0 <_fstat_r+0x1c>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b103      	cbz	r3, 8008eb0 <_fstat_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd38      	pop	{r3, r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000430 	.word	0x20000430

08008eb8 <_isatty_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d06      	ldr	r5, [pc, #24]	@ (8008ed4 <_isatty_r+0x1c>)
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	f7f8 faa2 	bl	800140c <_isatty>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_isatty_r+0x1a>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_isatty_r+0x1a>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	20000430 	.word	0x20000430

08008ed8 <_sbrk_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	@ (8008ef4 <_sbrk_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f8 faaa 	bl	800143c <_sbrk>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_sbrk_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_sbrk_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	20000430 	.word	0x20000430

08008ef8 <memcpy>:
 8008ef8:	440a      	add	r2, r1
 8008efa:	4291      	cmp	r1, r2
 8008efc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008f00:	d100      	bne.n	8008f04 <memcpy+0xc>
 8008f02:	4770      	bx	lr
 8008f04:	b510      	push	{r4, lr}
 8008f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f0e:	4291      	cmp	r1, r2
 8008f10:	d1f9      	bne.n	8008f06 <memcpy+0xe>
 8008f12:	bd10      	pop	{r4, pc}
 8008f14:	0000      	movs	r0, r0
	...

08008f18 <nan>:
 8008f18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f20 <nan+0x8>
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	00000000 	.word	0x00000000
 8008f24:	7ff80000 	.word	0x7ff80000

08008f28 <__assert_func>:
 8008f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f2a:	4614      	mov	r4, r2
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4b09      	ldr	r3, [pc, #36]	@ (8008f54 <__assert_func+0x2c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4605      	mov	r5, r0
 8008f34:	68d8      	ldr	r0, [r3, #12]
 8008f36:	b14c      	cbz	r4, 8008f4c <__assert_func+0x24>
 8008f38:	4b07      	ldr	r3, [pc, #28]	@ (8008f58 <__assert_func+0x30>)
 8008f3a:	9100      	str	r1, [sp, #0]
 8008f3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f40:	4906      	ldr	r1, [pc, #24]	@ (8008f5c <__assert_func+0x34>)
 8008f42:	462b      	mov	r3, r5
 8008f44:	f000 fc1a 	bl	800977c <fiprintf>
 8008f48:	f000 fc2a 	bl	80097a0 <abort>
 8008f4c:	4b04      	ldr	r3, [pc, #16]	@ (8008f60 <__assert_func+0x38>)
 8008f4e:	461c      	mov	r4, r3
 8008f50:	e7f3      	b.n	8008f3a <__assert_func+0x12>
 8008f52:	bf00      	nop
 8008f54:	20000018 	.word	0x20000018
 8008f58:	08009a83 	.word	0x08009a83
 8008f5c:	08009a90 	.word	0x08009a90
 8008f60:	08009abe 	.word	0x08009abe

08008f64 <_calloc_r>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	fba1 5402 	umull	r5, r4, r1, r2
 8008f6a:	b934      	cbnz	r4, 8008f7a <_calloc_r+0x16>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7fd fafb 	bl	8006568 <_malloc_r>
 8008f72:	4606      	mov	r6, r0
 8008f74:	b928      	cbnz	r0, 8008f82 <_calloc_r+0x1e>
 8008f76:	4630      	mov	r0, r6
 8008f78:	bd70      	pop	{r4, r5, r6, pc}
 8008f7a:	220c      	movs	r2, #12
 8008f7c:	6002      	str	r2, [r0, #0]
 8008f7e:	2600      	movs	r6, #0
 8008f80:	e7f9      	b.n	8008f76 <_calloc_r+0x12>
 8008f82:	462a      	mov	r2, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	f7fc fb9c 	bl	80056c2 <memset>
 8008f8a:	e7f4      	b.n	8008f76 <_calloc_r+0x12>

08008f8c <rshift>:
 8008f8c:	6903      	ldr	r3, [r0, #16]
 8008f8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f9a:	f100 0414 	add.w	r4, r0, #20
 8008f9e:	dd45      	ble.n	800902c <rshift+0xa0>
 8008fa0:	f011 011f 	ands.w	r1, r1, #31
 8008fa4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008fa8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008fac:	d10c      	bne.n	8008fc8 <rshift+0x3c>
 8008fae:	f100 0710 	add.w	r7, r0, #16
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	42b1      	cmp	r1, r6
 8008fb6:	d334      	bcc.n	8009022 <rshift+0x96>
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	1eea      	subs	r2, r5, #3
 8008fbe:	4296      	cmp	r6, r2
 8008fc0:	bf38      	it	cc
 8008fc2:	2300      	movcc	r3, #0
 8008fc4:	4423      	add	r3, r4
 8008fc6:	e015      	b.n	8008ff4 <rshift+0x68>
 8008fc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008fcc:	f1c1 0820 	rsb	r8, r1, #32
 8008fd0:	40cf      	lsrs	r7, r1
 8008fd2:	f105 0e04 	add.w	lr, r5, #4
 8008fd6:	46a1      	mov	r9, r4
 8008fd8:	4576      	cmp	r6, lr
 8008fda:	46f4      	mov	ip, lr
 8008fdc:	d815      	bhi.n	800900a <rshift+0x7e>
 8008fde:	1a9a      	subs	r2, r3, r2
 8008fe0:	0092      	lsls	r2, r2, #2
 8008fe2:	3a04      	subs	r2, #4
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	42ae      	cmp	r6, r5
 8008fe8:	bf38      	it	cc
 8008fea:	2200      	movcc	r2, #0
 8008fec:	18a3      	adds	r3, r4, r2
 8008fee:	50a7      	str	r7, [r4, r2]
 8008ff0:	b107      	cbz	r7, 8008ff4 <rshift+0x68>
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	1b1a      	subs	r2, r3, r4
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ffc:	bf08      	it	eq
 8008ffe:	2300      	moveq	r3, #0
 8009000:	6102      	str	r2, [r0, #16]
 8009002:	bf08      	it	eq
 8009004:	6143      	streq	r3, [r0, #20]
 8009006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800900a:	f8dc c000 	ldr.w	ip, [ip]
 800900e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009012:	ea4c 0707 	orr.w	r7, ip, r7
 8009016:	f849 7b04 	str.w	r7, [r9], #4
 800901a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800901e:	40cf      	lsrs	r7, r1
 8009020:	e7da      	b.n	8008fd8 <rshift+0x4c>
 8009022:	f851 cb04 	ldr.w	ip, [r1], #4
 8009026:	f847 cf04 	str.w	ip, [r7, #4]!
 800902a:	e7c3      	b.n	8008fb4 <rshift+0x28>
 800902c:	4623      	mov	r3, r4
 800902e:	e7e1      	b.n	8008ff4 <rshift+0x68>

08009030 <__hexdig_fun>:
 8009030:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009034:	2b09      	cmp	r3, #9
 8009036:	d802      	bhi.n	800903e <__hexdig_fun+0xe>
 8009038:	3820      	subs	r0, #32
 800903a:	b2c0      	uxtb	r0, r0
 800903c:	4770      	bx	lr
 800903e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009042:	2b05      	cmp	r3, #5
 8009044:	d801      	bhi.n	800904a <__hexdig_fun+0x1a>
 8009046:	3847      	subs	r0, #71	@ 0x47
 8009048:	e7f7      	b.n	800903a <__hexdig_fun+0xa>
 800904a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800904e:	2b05      	cmp	r3, #5
 8009050:	d801      	bhi.n	8009056 <__hexdig_fun+0x26>
 8009052:	3827      	subs	r0, #39	@ 0x27
 8009054:	e7f1      	b.n	800903a <__hexdig_fun+0xa>
 8009056:	2000      	movs	r0, #0
 8009058:	4770      	bx	lr
	...

0800905c <__gethex>:
 800905c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009060:	b085      	sub	sp, #20
 8009062:	468a      	mov	sl, r1
 8009064:	9302      	str	r3, [sp, #8]
 8009066:	680b      	ldr	r3, [r1, #0]
 8009068:	9001      	str	r0, [sp, #4]
 800906a:	4690      	mov	r8, r2
 800906c:	1c9c      	adds	r4, r3, #2
 800906e:	46a1      	mov	r9, r4
 8009070:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009074:	2830      	cmp	r0, #48	@ 0x30
 8009076:	d0fa      	beq.n	800906e <__gethex+0x12>
 8009078:	eba9 0303 	sub.w	r3, r9, r3
 800907c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009080:	f7ff ffd6 	bl	8009030 <__hexdig_fun>
 8009084:	4605      	mov	r5, r0
 8009086:	2800      	cmp	r0, #0
 8009088:	d168      	bne.n	800915c <__gethex+0x100>
 800908a:	49a0      	ldr	r1, [pc, #640]	@ (800930c <__gethex+0x2b0>)
 800908c:	2201      	movs	r2, #1
 800908e:	4648      	mov	r0, r9
 8009090:	f7ff feee 	bl	8008e70 <strncmp>
 8009094:	4607      	mov	r7, r0
 8009096:	2800      	cmp	r0, #0
 8009098:	d167      	bne.n	800916a <__gethex+0x10e>
 800909a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800909e:	4626      	mov	r6, r4
 80090a0:	f7ff ffc6 	bl	8009030 <__hexdig_fun>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d062      	beq.n	800916e <__gethex+0x112>
 80090a8:	4623      	mov	r3, r4
 80090aa:	7818      	ldrb	r0, [r3, #0]
 80090ac:	2830      	cmp	r0, #48	@ 0x30
 80090ae:	4699      	mov	r9, r3
 80090b0:	f103 0301 	add.w	r3, r3, #1
 80090b4:	d0f9      	beq.n	80090aa <__gethex+0x4e>
 80090b6:	f7ff ffbb 	bl	8009030 <__hexdig_fun>
 80090ba:	fab0 f580 	clz	r5, r0
 80090be:	096d      	lsrs	r5, r5, #5
 80090c0:	f04f 0b01 	mov.w	fp, #1
 80090c4:	464a      	mov	r2, r9
 80090c6:	4616      	mov	r6, r2
 80090c8:	3201      	adds	r2, #1
 80090ca:	7830      	ldrb	r0, [r6, #0]
 80090cc:	f7ff ffb0 	bl	8009030 <__hexdig_fun>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1f8      	bne.n	80090c6 <__gethex+0x6a>
 80090d4:	498d      	ldr	r1, [pc, #564]	@ (800930c <__gethex+0x2b0>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff fec9 	bl	8008e70 <strncmp>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d13f      	bne.n	8009162 <__gethex+0x106>
 80090e2:	b944      	cbnz	r4, 80090f6 <__gethex+0x9a>
 80090e4:	1c74      	adds	r4, r6, #1
 80090e6:	4622      	mov	r2, r4
 80090e8:	4616      	mov	r6, r2
 80090ea:	3201      	adds	r2, #1
 80090ec:	7830      	ldrb	r0, [r6, #0]
 80090ee:	f7ff ff9f 	bl	8009030 <__hexdig_fun>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d1f8      	bne.n	80090e8 <__gethex+0x8c>
 80090f6:	1ba4      	subs	r4, r4, r6
 80090f8:	00a7      	lsls	r7, r4, #2
 80090fa:	7833      	ldrb	r3, [r6, #0]
 80090fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009100:	2b50      	cmp	r3, #80	@ 0x50
 8009102:	d13e      	bne.n	8009182 <__gethex+0x126>
 8009104:	7873      	ldrb	r3, [r6, #1]
 8009106:	2b2b      	cmp	r3, #43	@ 0x2b
 8009108:	d033      	beq.n	8009172 <__gethex+0x116>
 800910a:	2b2d      	cmp	r3, #45	@ 0x2d
 800910c:	d034      	beq.n	8009178 <__gethex+0x11c>
 800910e:	1c71      	adds	r1, r6, #1
 8009110:	2400      	movs	r4, #0
 8009112:	7808      	ldrb	r0, [r1, #0]
 8009114:	f7ff ff8c 	bl	8009030 <__hexdig_fun>
 8009118:	1e43      	subs	r3, r0, #1
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b18      	cmp	r3, #24
 800911e:	d830      	bhi.n	8009182 <__gethex+0x126>
 8009120:	f1a0 0210 	sub.w	r2, r0, #16
 8009124:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009128:	f7ff ff82 	bl	8009030 <__hexdig_fun>
 800912c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009130:	fa5f fc8c 	uxtb.w	ip, ip
 8009134:	f1bc 0f18 	cmp.w	ip, #24
 8009138:	f04f 030a 	mov.w	r3, #10
 800913c:	d91e      	bls.n	800917c <__gethex+0x120>
 800913e:	b104      	cbz	r4, 8009142 <__gethex+0xe6>
 8009140:	4252      	negs	r2, r2
 8009142:	4417      	add	r7, r2
 8009144:	f8ca 1000 	str.w	r1, [sl]
 8009148:	b1ed      	cbz	r5, 8009186 <__gethex+0x12a>
 800914a:	f1bb 0f00 	cmp.w	fp, #0
 800914e:	bf0c      	ite	eq
 8009150:	2506      	moveq	r5, #6
 8009152:	2500      	movne	r5, #0
 8009154:	4628      	mov	r0, r5
 8009156:	b005      	add	sp, #20
 8009158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915c:	2500      	movs	r5, #0
 800915e:	462c      	mov	r4, r5
 8009160:	e7b0      	b.n	80090c4 <__gethex+0x68>
 8009162:	2c00      	cmp	r4, #0
 8009164:	d1c7      	bne.n	80090f6 <__gethex+0x9a>
 8009166:	4627      	mov	r7, r4
 8009168:	e7c7      	b.n	80090fa <__gethex+0x9e>
 800916a:	464e      	mov	r6, r9
 800916c:	462f      	mov	r7, r5
 800916e:	2501      	movs	r5, #1
 8009170:	e7c3      	b.n	80090fa <__gethex+0x9e>
 8009172:	2400      	movs	r4, #0
 8009174:	1cb1      	adds	r1, r6, #2
 8009176:	e7cc      	b.n	8009112 <__gethex+0xb6>
 8009178:	2401      	movs	r4, #1
 800917a:	e7fb      	b.n	8009174 <__gethex+0x118>
 800917c:	fb03 0002 	mla	r0, r3, r2, r0
 8009180:	e7ce      	b.n	8009120 <__gethex+0xc4>
 8009182:	4631      	mov	r1, r6
 8009184:	e7de      	b.n	8009144 <__gethex+0xe8>
 8009186:	eba6 0309 	sub.w	r3, r6, r9
 800918a:	3b01      	subs	r3, #1
 800918c:	4629      	mov	r1, r5
 800918e:	2b07      	cmp	r3, #7
 8009190:	dc0a      	bgt.n	80091a8 <__gethex+0x14c>
 8009192:	9801      	ldr	r0, [sp, #4]
 8009194:	f7fd fa74 	bl	8006680 <_Balloc>
 8009198:	4604      	mov	r4, r0
 800919a:	b940      	cbnz	r0, 80091ae <__gethex+0x152>
 800919c:	4b5c      	ldr	r3, [pc, #368]	@ (8009310 <__gethex+0x2b4>)
 800919e:	4602      	mov	r2, r0
 80091a0:	21e4      	movs	r1, #228	@ 0xe4
 80091a2:	485c      	ldr	r0, [pc, #368]	@ (8009314 <__gethex+0x2b8>)
 80091a4:	f7ff fec0 	bl	8008f28 <__assert_func>
 80091a8:	3101      	adds	r1, #1
 80091aa:	105b      	asrs	r3, r3, #1
 80091ac:	e7ef      	b.n	800918e <__gethex+0x132>
 80091ae:	f100 0a14 	add.w	sl, r0, #20
 80091b2:	2300      	movs	r3, #0
 80091b4:	4655      	mov	r5, sl
 80091b6:	469b      	mov	fp, r3
 80091b8:	45b1      	cmp	r9, r6
 80091ba:	d337      	bcc.n	800922c <__gethex+0x1d0>
 80091bc:	f845 bb04 	str.w	fp, [r5], #4
 80091c0:	eba5 050a 	sub.w	r5, r5, sl
 80091c4:	10ad      	asrs	r5, r5, #2
 80091c6:	6125      	str	r5, [r4, #16]
 80091c8:	4658      	mov	r0, fp
 80091ca:	f7fd fb4b 	bl	8006864 <__hi0bits>
 80091ce:	016d      	lsls	r5, r5, #5
 80091d0:	f8d8 6000 	ldr.w	r6, [r8]
 80091d4:	1a2d      	subs	r5, r5, r0
 80091d6:	42b5      	cmp	r5, r6
 80091d8:	dd54      	ble.n	8009284 <__gethex+0x228>
 80091da:	1bad      	subs	r5, r5, r6
 80091dc:	4629      	mov	r1, r5
 80091de:	4620      	mov	r0, r4
 80091e0:	f7fd fed7 	bl	8006f92 <__any_on>
 80091e4:	4681      	mov	r9, r0
 80091e6:	b178      	cbz	r0, 8009208 <__gethex+0x1ac>
 80091e8:	1e6b      	subs	r3, r5, #1
 80091ea:	1159      	asrs	r1, r3, #5
 80091ec:	f003 021f 	and.w	r2, r3, #31
 80091f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80091f4:	f04f 0901 	mov.w	r9, #1
 80091f8:	fa09 f202 	lsl.w	r2, r9, r2
 80091fc:	420a      	tst	r2, r1
 80091fe:	d003      	beq.n	8009208 <__gethex+0x1ac>
 8009200:	454b      	cmp	r3, r9
 8009202:	dc36      	bgt.n	8009272 <__gethex+0x216>
 8009204:	f04f 0902 	mov.w	r9, #2
 8009208:	4629      	mov	r1, r5
 800920a:	4620      	mov	r0, r4
 800920c:	f7ff febe 	bl	8008f8c <rshift>
 8009210:	442f      	add	r7, r5
 8009212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009216:	42bb      	cmp	r3, r7
 8009218:	da42      	bge.n	80092a0 <__gethex+0x244>
 800921a:	9801      	ldr	r0, [sp, #4]
 800921c:	4621      	mov	r1, r4
 800921e:	f7fd fa6f 	bl	8006700 <_Bfree>
 8009222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009224:	2300      	movs	r3, #0
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	25a3      	movs	r5, #163	@ 0xa3
 800922a:	e793      	b.n	8009154 <__gethex+0xf8>
 800922c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009230:	2a2e      	cmp	r2, #46	@ 0x2e
 8009232:	d012      	beq.n	800925a <__gethex+0x1fe>
 8009234:	2b20      	cmp	r3, #32
 8009236:	d104      	bne.n	8009242 <__gethex+0x1e6>
 8009238:	f845 bb04 	str.w	fp, [r5], #4
 800923c:	f04f 0b00 	mov.w	fp, #0
 8009240:	465b      	mov	r3, fp
 8009242:	7830      	ldrb	r0, [r6, #0]
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	f7ff fef3 	bl	8009030 <__hexdig_fun>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	f000 000f 	and.w	r0, r0, #15
 8009250:	4098      	lsls	r0, r3
 8009252:	ea4b 0b00 	orr.w	fp, fp, r0
 8009256:	3304      	adds	r3, #4
 8009258:	e7ae      	b.n	80091b8 <__gethex+0x15c>
 800925a:	45b1      	cmp	r9, r6
 800925c:	d8ea      	bhi.n	8009234 <__gethex+0x1d8>
 800925e:	492b      	ldr	r1, [pc, #172]	@ (800930c <__gethex+0x2b0>)
 8009260:	9303      	str	r3, [sp, #12]
 8009262:	2201      	movs	r2, #1
 8009264:	4630      	mov	r0, r6
 8009266:	f7ff fe03 	bl	8008e70 <strncmp>
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	2800      	cmp	r0, #0
 800926e:	d1e1      	bne.n	8009234 <__gethex+0x1d8>
 8009270:	e7a2      	b.n	80091b8 <__gethex+0x15c>
 8009272:	1ea9      	subs	r1, r5, #2
 8009274:	4620      	mov	r0, r4
 8009276:	f7fd fe8c 	bl	8006f92 <__any_on>
 800927a:	2800      	cmp	r0, #0
 800927c:	d0c2      	beq.n	8009204 <__gethex+0x1a8>
 800927e:	f04f 0903 	mov.w	r9, #3
 8009282:	e7c1      	b.n	8009208 <__gethex+0x1ac>
 8009284:	da09      	bge.n	800929a <__gethex+0x23e>
 8009286:	1b75      	subs	r5, r6, r5
 8009288:	4621      	mov	r1, r4
 800928a:	9801      	ldr	r0, [sp, #4]
 800928c:	462a      	mov	r2, r5
 800928e:	f7fd fc47 	bl	8006b20 <__lshift>
 8009292:	1b7f      	subs	r7, r7, r5
 8009294:	4604      	mov	r4, r0
 8009296:	f100 0a14 	add.w	sl, r0, #20
 800929a:	f04f 0900 	mov.w	r9, #0
 800929e:	e7b8      	b.n	8009212 <__gethex+0x1b6>
 80092a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80092a4:	42bd      	cmp	r5, r7
 80092a6:	dd6f      	ble.n	8009388 <__gethex+0x32c>
 80092a8:	1bed      	subs	r5, r5, r7
 80092aa:	42ae      	cmp	r6, r5
 80092ac:	dc34      	bgt.n	8009318 <__gethex+0x2bc>
 80092ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d022      	beq.n	80092fc <__gethex+0x2a0>
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d024      	beq.n	8009304 <__gethex+0x2a8>
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d115      	bne.n	80092ea <__gethex+0x28e>
 80092be:	42ae      	cmp	r6, r5
 80092c0:	d113      	bne.n	80092ea <__gethex+0x28e>
 80092c2:	2e01      	cmp	r6, #1
 80092c4:	d10b      	bne.n	80092de <__gethex+0x282>
 80092c6:	9a02      	ldr	r2, [sp, #8]
 80092c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	2301      	movs	r3, #1
 80092d0:	6123      	str	r3, [r4, #16]
 80092d2:	f8ca 3000 	str.w	r3, [sl]
 80092d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092d8:	2562      	movs	r5, #98	@ 0x62
 80092da:	601c      	str	r4, [r3, #0]
 80092dc:	e73a      	b.n	8009154 <__gethex+0xf8>
 80092de:	1e71      	subs	r1, r6, #1
 80092e0:	4620      	mov	r0, r4
 80092e2:	f7fd fe56 	bl	8006f92 <__any_on>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d1ed      	bne.n	80092c6 <__gethex+0x26a>
 80092ea:	9801      	ldr	r0, [sp, #4]
 80092ec:	4621      	mov	r1, r4
 80092ee:	f7fd fa07 	bl	8006700 <_Bfree>
 80092f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092f4:	2300      	movs	r3, #0
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	2550      	movs	r5, #80	@ 0x50
 80092fa:	e72b      	b.n	8009154 <__gethex+0xf8>
 80092fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1f3      	bne.n	80092ea <__gethex+0x28e>
 8009302:	e7e0      	b.n	80092c6 <__gethex+0x26a>
 8009304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1dd      	bne.n	80092c6 <__gethex+0x26a>
 800930a:	e7ee      	b.n	80092ea <__gethex+0x28e>
 800930c:	08009a4d 	.word	0x08009a4d
 8009310:	080099e3 	.word	0x080099e3
 8009314:	08009abf 	.word	0x08009abf
 8009318:	1e6f      	subs	r7, r5, #1
 800931a:	f1b9 0f00 	cmp.w	r9, #0
 800931e:	d130      	bne.n	8009382 <__gethex+0x326>
 8009320:	b127      	cbz	r7, 800932c <__gethex+0x2d0>
 8009322:	4639      	mov	r1, r7
 8009324:	4620      	mov	r0, r4
 8009326:	f7fd fe34 	bl	8006f92 <__any_on>
 800932a:	4681      	mov	r9, r0
 800932c:	117a      	asrs	r2, r7, #5
 800932e:	2301      	movs	r3, #1
 8009330:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009334:	f007 071f 	and.w	r7, r7, #31
 8009338:	40bb      	lsls	r3, r7
 800933a:	4213      	tst	r3, r2
 800933c:	4629      	mov	r1, r5
 800933e:	4620      	mov	r0, r4
 8009340:	bf18      	it	ne
 8009342:	f049 0902 	orrne.w	r9, r9, #2
 8009346:	f7ff fe21 	bl	8008f8c <rshift>
 800934a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800934e:	1b76      	subs	r6, r6, r5
 8009350:	2502      	movs	r5, #2
 8009352:	f1b9 0f00 	cmp.w	r9, #0
 8009356:	d047      	beq.n	80093e8 <__gethex+0x38c>
 8009358:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d015      	beq.n	800938c <__gethex+0x330>
 8009360:	2b03      	cmp	r3, #3
 8009362:	d017      	beq.n	8009394 <__gethex+0x338>
 8009364:	2b01      	cmp	r3, #1
 8009366:	d109      	bne.n	800937c <__gethex+0x320>
 8009368:	f019 0f02 	tst.w	r9, #2
 800936c:	d006      	beq.n	800937c <__gethex+0x320>
 800936e:	f8da 3000 	ldr.w	r3, [sl]
 8009372:	ea49 0903 	orr.w	r9, r9, r3
 8009376:	f019 0f01 	tst.w	r9, #1
 800937a:	d10e      	bne.n	800939a <__gethex+0x33e>
 800937c:	f045 0510 	orr.w	r5, r5, #16
 8009380:	e032      	b.n	80093e8 <__gethex+0x38c>
 8009382:	f04f 0901 	mov.w	r9, #1
 8009386:	e7d1      	b.n	800932c <__gethex+0x2d0>
 8009388:	2501      	movs	r5, #1
 800938a:	e7e2      	b.n	8009352 <__gethex+0x2f6>
 800938c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800938e:	f1c3 0301 	rsb	r3, r3, #1
 8009392:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <__gethex+0x320>
 800939a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800939e:	f104 0314 	add.w	r3, r4, #20
 80093a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80093a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80093aa:	f04f 0c00 	mov.w	ip, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80093b8:	d01b      	beq.n	80093f2 <__gethex+0x396>
 80093ba:	3201      	adds	r2, #1
 80093bc:	6002      	str	r2, [r0, #0]
 80093be:	2d02      	cmp	r5, #2
 80093c0:	f104 0314 	add.w	r3, r4, #20
 80093c4:	d13c      	bne.n	8009440 <__gethex+0x3e4>
 80093c6:	f8d8 2000 	ldr.w	r2, [r8]
 80093ca:	3a01      	subs	r2, #1
 80093cc:	42b2      	cmp	r2, r6
 80093ce:	d109      	bne.n	80093e4 <__gethex+0x388>
 80093d0:	1171      	asrs	r1, r6, #5
 80093d2:	2201      	movs	r2, #1
 80093d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093d8:	f006 061f 	and.w	r6, r6, #31
 80093dc:	fa02 f606 	lsl.w	r6, r2, r6
 80093e0:	421e      	tst	r6, r3
 80093e2:	d13a      	bne.n	800945a <__gethex+0x3fe>
 80093e4:	f045 0520 	orr.w	r5, r5, #32
 80093e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093ea:	601c      	str	r4, [r3, #0]
 80093ec:	9b02      	ldr	r3, [sp, #8]
 80093ee:	601f      	str	r7, [r3, #0]
 80093f0:	e6b0      	b.n	8009154 <__gethex+0xf8>
 80093f2:	4299      	cmp	r1, r3
 80093f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80093f8:	d8d9      	bhi.n	80093ae <__gethex+0x352>
 80093fa:	68a3      	ldr	r3, [r4, #8]
 80093fc:	459b      	cmp	fp, r3
 80093fe:	db17      	blt.n	8009430 <__gethex+0x3d4>
 8009400:	6861      	ldr	r1, [r4, #4]
 8009402:	9801      	ldr	r0, [sp, #4]
 8009404:	3101      	adds	r1, #1
 8009406:	f7fd f93b 	bl	8006680 <_Balloc>
 800940a:	4681      	mov	r9, r0
 800940c:	b918      	cbnz	r0, 8009416 <__gethex+0x3ba>
 800940e:	4b1a      	ldr	r3, [pc, #104]	@ (8009478 <__gethex+0x41c>)
 8009410:	4602      	mov	r2, r0
 8009412:	2184      	movs	r1, #132	@ 0x84
 8009414:	e6c5      	b.n	80091a2 <__gethex+0x146>
 8009416:	6922      	ldr	r2, [r4, #16]
 8009418:	3202      	adds	r2, #2
 800941a:	f104 010c 	add.w	r1, r4, #12
 800941e:	0092      	lsls	r2, r2, #2
 8009420:	300c      	adds	r0, #12
 8009422:	f7ff fd69 	bl	8008ef8 <memcpy>
 8009426:	4621      	mov	r1, r4
 8009428:	9801      	ldr	r0, [sp, #4]
 800942a:	f7fd f969 	bl	8006700 <_Bfree>
 800942e:	464c      	mov	r4, r9
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009438:	6122      	str	r2, [r4, #16]
 800943a:	2201      	movs	r2, #1
 800943c:	615a      	str	r2, [r3, #20]
 800943e:	e7be      	b.n	80093be <__gethex+0x362>
 8009440:	6922      	ldr	r2, [r4, #16]
 8009442:	455a      	cmp	r2, fp
 8009444:	dd0b      	ble.n	800945e <__gethex+0x402>
 8009446:	2101      	movs	r1, #1
 8009448:	4620      	mov	r0, r4
 800944a:	f7ff fd9f 	bl	8008f8c <rshift>
 800944e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009452:	3701      	adds	r7, #1
 8009454:	42bb      	cmp	r3, r7
 8009456:	f6ff aee0 	blt.w	800921a <__gethex+0x1be>
 800945a:	2501      	movs	r5, #1
 800945c:	e7c2      	b.n	80093e4 <__gethex+0x388>
 800945e:	f016 061f 	ands.w	r6, r6, #31
 8009462:	d0fa      	beq.n	800945a <__gethex+0x3fe>
 8009464:	4453      	add	r3, sl
 8009466:	f1c6 0620 	rsb	r6, r6, #32
 800946a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800946e:	f7fd f9f9 	bl	8006864 <__hi0bits>
 8009472:	42b0      	cmp	r0, r6
 8009474:	dbe7      	blt.n	8009446 <__gethex+0x3ea>
 8009476:	e7f0      	b.n	800945a <__gethex+0x3fe>
 8009478:	080099e3 	.word	0x080099e3

0800947c <L_shift>:
 800947c:	f1c2 0208 	rsb	r2, r2, #8
 8009480:	0092      	lsls	r2, r2, #2
 8009482:	b570      	push	{r4, r5, r6, lr}
 8009484:	f1c2 0620 	rsb	r6, r2, #32
 8009488:	6843      	ldr	r3, [r0, #4]
 800948a:	6804      	ldr	r4, [r0, #0]
 800948c:	fa03 f506 	lsl.w	r5, r3, r6
 8009490:	432c      	orrs	r4, r5
 8009492:	40d3      	lsrs	r3, r2
 8009494:	6004      	str	r4, [r0, #0]
 8009496:	f840 3f04 	str.w	r3, [r0, #4]!
 800949a:	4288      	cmp	r0, r1
 800949c:	d3f4      	bcc.n	8009488 <L_shift+0xc>
 800949e:	bd70      	pop	{r4, r5, r6, pc}

080094a0 <__match>:
 80094a0:	b530      	push	{r4, r5, lr}
 80094a2:	6803      	ldr	r3, [r0, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094aa:	b914      	cbnz	r4, 80094b2 <__match+0x12>
 80094ac:	6003      	str	r3, [r0, #0]
 80094ae:	2001      	movs	r0, #1
 80094b0:	bd30      	pop	{r4, r5, pc}
 80094b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80094ba:	2d19      	cmp	r5, #25
 80094bc:	bf98      	it	ls
 80094be:	3220      	addls	r2, #32
 80094c0:	42a2      	cmp	r2, r4
 80094c2:	d0f0      	beq.n	80094a6 <__match+0x6>
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7f3      	b.n	80094b0 <__match+0x10>

080094c8 <__hexnan>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	680b      	ldr	r3, [r1, #0]
 80094ce:	6801      	ldr	r1, [r0, #0]
 80094d0:	115e      	asrs	r6, r3, #5
 80094d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094d6:	f013 031f 	ands.w	r3, r3, #31
 80094da:	b087      	sub	sp, #28
 80094dc:	bf18      	it	ne
 80094de:	3604      	addne	r6, #4
 80094e0:	2500      	movs	r5, #0
 80094e2:	1f37      	subs	r7, r6, #4
 80094e4:	4682      	mov	sl, r0
 80094e6:	4690      	mov	r8, r2
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80094ee:	46b9      	mov	r9, r7
 80094f0:	463c      	mov	r4, r7
 80094f2:	9502      	str	r5, [sp, #8]
 80094f4:	46ab      	mov	fp, r5
 80094f6:	784a      	ldrb	r2, [r1, #1]
 80094f8:	1c4b      	adds	r3, r1, #1
 80094fa:	9303      	str	r3, [sp, #12]
 80094fc:	b342      	cbz	r2, 8009550 <__hexnan+0x88>
 80094fe:	4610      	mov	r0, r2
 8009500:	9105      	str	r1, [sp, #20]
 8009502:	9204      	str	r2, [sp, #16]
 8009504:	f7ff fd94 	bl	8009030 <__hexdig_fun>
 8009508:	2800      	cmp	r0, #0
 800950a:	d151      	bne.n	80095b0 <__hexnan+0xe8>
 800950c:	9a04      	ldr	r2, [sp, #16]
 800950e:	9905      	ldr	r1, [sp, #20]
 8009510:	2a20      	cmp	r2, #32
 8009512:	d818      	bhi.n	8009546 <__hexnan+0x7e>
 8009514:	9b02      	ldr	r3, [sp, #8]
 8009516:	459b      	cmp	fp, r3
 8009518:	dd13      	ble.n	8009542 <__hexnan+0x7a>
 800951a:	454c      	cmp	r4, r9
 800951c:	d206      	bcs.n	800952c <__hexnan+0x64>
 800951e:	2d07      	cmp	r5, #7
 8009520:	dc04      	bgt.n	800952c <__hexnan+0x64>
 8009522:	462a      	mov	r2, r5
 8009524:	4649      	mov	r1, r9
 8009526:	4620      	mov	r0, r4
 8009528:	f7ff ffa8 	bl	800947c <L_shift>
 800952c:	4544      	cmp	r4, r8
 800952e:	d952      	bls.n	80095d6 <__hexnan+0x10e>
 8009530:	2300      	movs	r3, #0
 8009532:	f1a4 0904 	sub.w	r9, r4, #4
 8009536:	f844 3c04 	str.w	r3, [r4, #-4]
 800953a:	f8cd b008 	str.w	fp, [sp, #8]
 800953e:	464c      	mov	r4, r9
 8009540:	461d      	mov	r5, r3
 8009542:	9903      	ldr	r1, [sp, #12]
 8009544:	e7d7      	b.n	80094f6 <__hexnan+0x2e>
 8009546:	2a29      	cmp	r2, #41	@ 0x29
 8009548:	d157      	bne.n	80095fa <__hexnan+0x132>
 800954a:	3102      	adds	r1, #2
 800954c:	f8ca 1000 	str.w	r1, [sl]
 8009550:	f1bb 0f00 	cmp.w	fp, #0
 8009554:	d051      	beq.n	80095fa <__hexnan+0x132>
 8009556:	454c      	cmp	r4, r9
 8009558:	d206      	bcs.n	8009568 <__hexnan+0xa0>
 800955a:	2d07      	cmp	r5, #7
 800955c:	dc04      	bgt.n	8009568 <__hexnan+0xa0>
 800955e:	462a      	mov	r2, r5
 8009560:	4649      	mov	r1, r9
 8009562:	4620      	mov	r0, r4
 8009564:	f7ff ff8a 	bl	800947c <L_shift>
 8009568:	4544      	cmp	r4, r8
 800956a:	d936      	bls.n	80095da <__hexnan+0x112>
 800956c:	f1a8 0204 	sub.w	r2, r8, #4
 8009570:	4623      	mov	r3, r4
 8009572:	f853 1b04 	ldr.w	r1, [r3], #4
 8009576:	f842 1f04 	str.w	r1, [r2, #4]!
 800957a:	429f      	cmp	r7, r3
 800957c:	d2f9      	bcs.n	8009572 <__hexnan+0xaa>
 800957e:	1b3b      	subs	r3, r7, r4
 8009580:	f023 0303 	bic.w	r3, r3, #3
 8009584:	3304      	adds	r3, #4
 8009586:	3401      	adds	r4, #1
 8009588:	3e03      	subs	r6, #3
 800958a:	42b4      	cmp	r4, r6
 800958c:	bf88      	it	hi
 800958e:	2304      	movhi	r3, #4
 8009590:	4443      	add	r3, r8
 8009592:	2200      	movs	r2, #0
 8009594:	f843 2b04 	str.w	r2, [r3], #4
 8009598:	429f      	cmp	r7, r3
 800959a:	d2fb      	bcs.n	8009594 <__hexnan+0xcc>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	b91b      	cbnz	r3, 80095a8 <__hexnan+0xe0>
 80095a0:	4547      	cmp	r7, r8
 80095a2:	d128      	bne.n	80095f6 <__hexnan+0x12e>
 80095a4:	2301      	movs	r3, #1
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	2005      	movs	r0, #5
 80095aa:	b007      	add	sp, #28
 80095ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	3501      	adds	r5, #1
 80095b2:	2d08      	cmp	r5, #8
 80095b4:	f10b 0b01 	add.w	fp, fp, #1
 80095b8:	dd06      	ble.n	80095c8 <__hexnan+0x100>
 80095ba:	4544      	cmp	r4, r8
 80095bc:	d9c1      	bls.n	8009542 <__hexnan+0x7a>
 80095be:	2300      	movs	r3, #0
 80095c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80095c4:	2501      	movs	r5, #1
 80095c6:	3c04      	subs	r4, #4
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	f000 000f 	and.w	r0, r0, #15
 80095ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80095d2:	6020      	str	r0, [r4, #0]
 80095d4:	e7b5      	b.n	8009542 <__hexnan+0x7a>
 80095d6:	2508      	movs	r5, #8
 80095d8:	e7b3      	b.n	8009542 <__hexnan+0x7a>
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0dd      	beq.n	800959c <__hexnan+0xd4>
 80095e0:	f1c3 0320 	rsb	r3, r3, #32
 80095e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095e8:	40da      	lsrs	r2, r3
 80095ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80095ee:	4013      	ands	r3, r2
 80095f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80095f4:	e7d2      	b.n	800959c <__hexnan+0xd4>
 80095f6:	3f04      	subs	r7, #4
 80095f8:	e7d0      	b.n	800959c <__hexnan+0xd4>
 80095fa:	2004      	movs	r0, #4
 80095fc:	e7d5      	b.n	80095aa <__hexnan+0xe2>

080095fe <__ascii_mbtowc>:
 80095fe:	b082      	sub	sp, #8
 8009600:	b901      	cbnz	r1, 8009604 <__ascii_mbtowc+0x6>
 8009602:	a901      	add	r1, sp, #4
 8009604:	b142      	cbz	r2, 8009618 <__ascii_mbtowc+0x1a>
 8009606:	b14b      	cbz	r3, 800961c <__ascii_mbtowc+0x1e>
 8009608:	7813      	ldrb	r3, [r2, #0]
 800960a:	600b      	str	r3, [r1, #0]
 800960c:	7812      	ldrb	r2, [r2, #0]
 800960e:	1e10      	subs	r0, r2, #0
 8009610:	bf18      	it	ne
 8009612:	2001      	movne	r0, #1
 8009614:	b002      	add	sp, #8
 8009616:	4770      	bx	lr
 8009618:	4610      	mov	r0, r2
 800961a:	e7fb      	b.n	8009614 <__ascii_mbtowc+0x16>
 800961c:	f06f 0001 	mvn.w	r0, #1
 8009620:	e7f8      	b.n	8009614 <__ascii_mbtowc+0x16>

08009622 <_realloc_r>:
 8009622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009626:	4607      	mov	r7, r0
 8009628:	4614      	mov	r4, r2
 800962a:	460d      	mov	r5, r1
 800962c:	b921      	cbnz	r1, 8009638 <_realloc_r+0x16>
 800962e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009632:	4611      	mov	r1, r2
 8009634:	f7fc bf98 	b.w	8006568 <_malloc_r>
 8009638:	b92a      	cbnz	r2, 8009646 <_realloc_r+0x24>
 800963a:	f7fc ff21 	bl	8006480 <_free_r>
 800963e:	4625      	mov	r5, r4
 8009640:	4628      	mov	r0, r5
 8009642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009646:	f000 f8b2 	bl	80097ae <_malloc_usable_size_r>
 800964a:	4284      	cmp	r4, r0
 800964c:	4606      	mov	r6, r0
 800964e:	d802      	bhi.n	8009656 <_realloc_r+0x34>
 8009650:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009654:	d8f4      	bhi.n	8009640 <_realloc_r+0x1e>
 8009656:	4621      	mov	r1, r4
 8009658:	4638      	mov	r0, r7
 800965a:	f7fc ff85 	bl	8006568 <_malloc_r>
 800965e:	4680      	mov	r8, r0
 8009660:	b908      	cbnz	r0, 8009666 <_realloc_r+0x44>
 8009662:	4645      	mov	r5, r8
 8009664:	e7ec      	b.n	8009640 <_realloc_r+0x1e>
 8009666:	42b4      	cmp	r4, r6
 8009668:	4622      	mov	r2, r4
 800966a:	4629      	mov	r1, r5
 800966c:	bf28      	it	cs
 800966e:	4632      	movcs	r2, r6
 8009670:	f7ff fc42 	bl	8008ef8 <memcpy>
 8009674:	4629      	mov	r1, r5
 8009676:	4638      	mov	r0, r7
 8009678:	f7fc ff02 	bl	8006480 <_free_r>
 800967c:	e7f1      	b.n	8009662 <_realloc_r+0x40>
	...

08009680 <_strtoul_l.isra.0>:
 8009680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009684:	4e34      	ldr	r6, [pc, #208]	@ (8009758 <_strtoul_l.isra.0+0xd8>)
 8009686:	4686      	mov	lr, r0
 8009688:	460d      	mov	r5, r1
 800968a:	4628      	mov	r0, r5
 800968c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009690:	5d37      	ldrb	r7, [r6, r4]
 8009692:	f017 0708 	ands.w	r7, r7, #8
 8009696:	d1f8      	bne.n	800968a <_strtoul_l.isra.0+0xa>
 8009698:	2c2d      	cmp	r4, #45	@ 0x2d
 800969a:	d110      	bne.n	80096be <_strtoul_l.isra.0+0x3e>
 800969c:	782c      	ldrb	r4, [r5, #0]
 800969e:	2701      	movs	r7, #1
 80096a0:	1c85      	adds	r5, r0, #2
 80096a2:	f033 0010 	bics.w	r0, r3, #16
 80096a6:	d115      	bne.n	80096d4 <_strtoul_l.isra.0+0x54>
 80096a8:	2c30      	cmp	r4, #48	@ 0x30
 80096aa:	d10d      	bne.n	80096c8 <_strtoul_l.isra.0+0x48>
 80096ac:	7828      	ldrb	r0, [r5, #0]
 80096ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80096b2:	2858      	cmp	r0, #88	@ 0x58
 80096b4:	d108      	bne.n	80096c8 <_strtoul_l.isra.0+0x48>
 80096b6:	786c      	ldrb	r4, [r5, #1]
 80096b8:	3502      	adds	r5, #2
 80096ba:	2310      	movs	r3, #16
 80096bc:	e00a      	b.n	80096d4 <_strtoul_l.isra.0+0x54>
 80096be:	2c2b      	cmp	r4, #43	@ 0x2b
 80096c0:	bf04      	itt	eq
 80096c2:	782c      	ldrbeq	r4, [r5, #0]
 80096c4:	1c85      	addeq	r5, r0, #2
 80096c6:	e7ec      	b.n	80096a2 <_strtoul_l.isra.0+0x22>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1f6      	bne.n	80096ba <_strtoul_l.isra.0+0x3a>
 80096cc:	2c30      	cmp	r4, #48	@ 0x30
 80096ce:	bf14      	ite	ne
 80096d0:	230a      	movne	r3, #10
 80096d2:	2308      	moveq	r3, #8
 80096d4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80096d8:	2600      	movs	r6, #0
 80096da:	fbb8 f8f3 	udiv	r8, r8, r3
 80096de:	fb03 f908 	mul.w	r9, r3, r8
 80096e2:	ea6f 0909 	mvn.w	r9, r9
 80096e6:	4630      	mov	r0, r6
 80096e8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80096ec:	f1bc 0f09 	cmp.w	ip, #9
 80096f0:	d810      	bhi.n	8009714 <_strtoul_l.isra.0+0x94>
 80096f2:	4664      	mov	r4, ip
 80096f4:	42a3      	cmp	r3, r4
 80096f6:	dd1e      	ble.n	8009736 <_strtoul_l.isra.0+0xb6>
 80096f8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80096fc:	d007      	beq.n	800970e <_strtoul_l.isra.0+0x8e>
 80096fe:	4580      	cmp	r8, r0
 8009700:	d316      	bcc.n	8009730 <_strtoul_l.isra.0+0xb0>
 8009702:	d101      	bne.n	8009708 <_strtoul_l.isra.0+0x88>
 8009704:	45a1      	cmp	r9, r4
 8009706:	db13      	blt.n	8009730 <_strtoul_l.isra.0+0xb0>
 8009708:	fb00 4003 	mla	r0, r0, r3, r4
 800970c:	2601      	movs	r6, #1
 800970e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009712:	e7e9      	b.n	80096e8 <_strtoul_l.isra.0+0x68>
 8009714:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009718:	f1bc 0f19 	cmp.w	ip, #25
 800971c:	d801      	bhi.n	8009722 <_strtoul_l.isra.0+0xa2>
 800971e:	3c37      	subs	r4, #55	@ 0x37
 8009720:	e7e8      	b.n	80096f4 <_strtoul_l.isra.0+0x74>
 8009722:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009726:	f1bc 0f19 	cmp.w	ip, #25
 800972a:	d804      	bhi.n	8009736 <_strtoul_l.isra.0+0xb6>
 800972c:	3c57      	subs	r4, #87	@ 0x57
 800972e:	e7e1      	b.n	80096f4 <_strtoul_l.isra.0+0x74>
 8009730:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009734:	e7eb      	b.n	800970e <_strtoul_l.isra.0+0x8e>
 8009736:	1c73      	adds	r3, r6, #1
 8009738:	d106      	bne.n	8009748 <_strtoul_l.isra.0+0xc8>
 800973a:	2322      	movs	r3, #34	@ 0x22
 800973c:	f8ce 3000 	str.w	r3, [lr]
 8009740:	4630      	mov	r0, r6
 8009742:	b932      	cbnz	r2, 8009752 <_strtoul_l.isra.0+0xd2>
 8009744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009748:	b107      	cbz	r7, 800974c <_strtoul_l.isra.0+0xcc>
 800974a:	4240      	negs	r0, r0
 800974c:	2a00      	cmp	r2, #0
 800974e:	d0f9      	beq.n	8009744 <_strtoul_l.isra.0+0xc4>
 8009750:	b106      	cbz	r6, 8009754 <_strtoul_l.isra.0+0xd4>
 8009752:	1e69      	subs	r1, r5, #1
 8009754:	6011      	str	r1, [r2, #0]
 8009756:	e7f5      	b.n	8009744 <_strtoul_l.isra.0+0xc4>
 8009758:	08009c71 	.word	0x08009c71

0800975c <_strtoul_r>:
 800975c:	f7ff bf90 	b.w	8009680 <_strtoul_l.isra.0>

08009760 <__ascii_wctomb>:
 8009760:	4603      	mov	r3, r0
 8009762:	4608      	mov	r0, r1
 8009764:	b141      	cbz	r1, 8009778 <__ascii_wctomb+0x18>
 8009766:	2aff      	cmp	r2, #255	@ 0xff
 8009768:	d904      	bls.n	8009774 <__ascii_wctomb+0x14>
 800976a:	228a      	movs	r2, #138	@ 0x8a
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009772:	4770      	bx	lr
 8009774:	700a      	strb	r2, [r1, #0]
 8009776:	2001      	movs	r0, #1
 8009778:	4770      	bx	lr
	...

0800977c <fiprintf>:
 800977c:	b40e      	push	{r1, r2, r3}
 800977e:	b503      	push	{r0, r1, lr}
 8009780:	4601      	mov	r1, r0
 8009782:	ab03      	add	r3, sp, #12
 8009784:	4805      	ldr	r0, [pc, #20]	@ (800979c <fiprintf+0x20>)
 8009786:	f853 2b04 	ldr.w	r2, [r3], #4
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	9301      	str	r3, [sp, #4]
 800978e:	f7fe fc27 	bl	8007fe0 <_vfiprintf_r>
 8009792:	b002      	add	sp, #8
 8009794:	f85d eb04 	ldr.w	lr, [sp], #4
 8009798:	b003      	add	sp, #12
 800979a:	4770      	bx	lr
 800979c:	20000018 	.word	0x20000018

080097a0 <abort>:
 80097a0:	b508      	push	{r3, lr}
 80097a2:	2006      	movs	r0, #6
 80097a4:	f000 f834 	bl	8009810 <raise>
 80097a8:	2001      	movs	r0, #1
 80097aa:	f7f7 fdcf 	bl	800134c <_exit>

080097ae <_malloc_usable_size_r>:
 80097ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b2:	1f18      	subs	r0, r3, #4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	bfbc      	itt	lt
 80097b8:	580b      	ldrlt	r3, [r1, r0]
 80097ba:	18c0      	addlt	r0, r0, r3
 80097bc:	4770      	bx	lr

080097be <_raise_r>:
 80097be:	291f      	cmp	r1, #31
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4605      	mov	r5, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	d904      	bls.n	80097d2 <_raise_r+0x14>
 80097c8:	2316      	movs	r3, #22
 80097ca:	6003      	str	r3, [r0, #0]
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097d0:	bd38      	pop	{r3, r4, r5, pc}
 80097d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097d4:	b112      	cbz	r2, 80097dc <_raise_r+0x1e>
 80097d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097da:	b94b      	cbnz	r3, 80097f0 <_raise_r+0x32>
 80097dc:	4628      	mov	r0, r5
 80097de:	f000 f831 	bl	8009844 <_getpid_r>
 80097e2:	4622      	mov	r2, r4
 80097e4:	4601      	mov	r1, r0
 80097e6:	4628      	mov	r0, r5
 80097e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ec:	f000 b818 	b.w	8009820 <_kill_r>
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d00a      	beq.n	800980a <_raise_r+0x4c>
 80097f4:	1c59      	adds	r1, r3, #1
 80097f6:	d103      	bne.n	8009800 <_raise_r+0x42>
 80097f8:	2316      	movs	r3, #22
 80097fa:	6003      	str	r3, [r0, #0]
 80097fc:	2001      	movs	r0, #1
 80097fe:	e7e7      	b.n	80097d0 <_raise_r+0x12>
 8009800:	2100      	movs	r1, #0
 8009802:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009806:	4620      	mov	r0, r4
 8009808:	4798      	blx	r3
 800980a:	2000      	movs	r0, #0
 800980c:	e7e0      	b.n	80097d0 <_raise_r+0x12>
	...

08009810 <raise>:
 8009810:	4b02      	ldr	r3, [pc, #8]	@ (800981c <raise+0xc>)
 8009812:	4601      	mov	r1, r0
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	f7ff bfd2 	b.w	80097be <_raise_r>
 800981a:	bf00      	nop
 800981c:	20000018 	.word	0x20000018

08009820 <_kill_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d07      	ldr	r5, [pc, #28]	@ (8009840 <_kill_r+0x20>)
 8009824:	2300      	movs	r3, #0
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	4611      	mov	r1, r2
 800982c:	602b      	str	r3, [r5, #0]
 800982e:	f7f7 fd7d 	bl	800132c <_kill>
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	d102      	bne.n	800983c <_kill_r+0x1c>
 8009836:	682b      	ldr	r3, [r5, #0]
 8009838:	b103      	cbz	r3, 800983c <_kill_r+0x1c>
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	bd38      	pop	{r3, r4, r5, pc}
 800983e:	bf00      	nop
 8009840:	20000430 	.word	0x20000430

08009844 <_getpid_r>:
 8009844:	f7f7 bd6a 	b.w	800131c <_getpid>

08009848 <_init>:
 8009848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984a:	bf00      	nop
 800984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984e:	bc08      	pop	{r3}
 8009850:	469e      	mov	lr, r3
 8009852:	4770      	bx	lr

08009854 <_fini>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	bf00      	nop
 8009858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985a:	bc08      	pop	{r3}
 800985c:	469e      	mov	lr, r3
 800985e:	4770      	bx	lr
